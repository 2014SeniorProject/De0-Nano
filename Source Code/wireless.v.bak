module wireless(
	 input 						clk, // The master clock for this module    
    output 	reg 				transmit, // Signal to transmit
    output 	reg 	[7:0] 	tx_byte, // Byte to transmit
    input 						received, // Indicated that a byte has been received.
    input 	wire 	[7:0] 	rx_byte, // Byte received
    input 						is_receiving, // Low when receive line is idle.
    input 						is_transmitting, // Low when transmit line is idle.
    input 						recv_error, // Indicates error in receiving packet.
	 input 			[7:0]		heartRate,
	 input			[9:0]		resolvedAngle,
	 input			[7:0]		speed,
	 input 	wire 	[1:0] 	key
);

reg 	[7:0] 	fakeAccelX;
reg 	[7:0]		fakeAccelY;
reg	[1:0]		KEY;
reg				firstPass = 0;
reg 	[7:0]		byteIn;
reg 	[7:0]		byteOut;



 /*
	 AccelSettingtReadback  keycheck (
    .probe (resolvedAngle),
    .source ()
    );
	
	 AccelSettingtReadback  rxcheck (
    .probe (rx_byte),
    .source ()
    );
	 	 AccelSettingtReadback  txcheck (
    .probe (tx_byte),
    .source ()
    );
*/	 
always@(posedge clk) KEY[0]=!key[0];
/*
always@(posedge received)
	begin
		byteIn = rx_byte;

	end
	
	*/
	
always@(posedge clk)
	begin	
		if(received)		
			begin
				//firstPass=0;				
				byteIn = rx_byte;	
		
		
				case(rx_byte)
					
						8'd1:
							begin
								tx_byte = heartRate;
								
							end
						8'd2:
							begin
								tx_byte = 8'd0;
								tx_byte[1:0] = resolvedAngle[9:8];
							end
						8'd3:
							begin
								tx_byte = resolvedAngle[7:0];
							end
						8'd4:
							begin
								tx_byte = speed;
							end
						default:
							tx_byte = 0;
							
				endcase				
				//if (firstPass == 0)
								begin
									transmit = 1;
									//firstPass = 1;
								end							
											
		
		   end else transmit = 0;

	end
	
endmodule








CPU.elf:     file format elf32-littlenios2
CPU.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000117a4 memsz 0x00011afc flags rwx
    LOAD off    0x00013000 vaddr 0x02001000 paddr 0x02001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  02001000  02001000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f59c  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000047c  0100f754  0100f754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf4  0100fbd0  0100fbd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000358  010117c4  010117c4  000127c4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000fb0  00000000  00000000  00013028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002ce67  00000000  00000000  00013fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b24e  00000000  00000000  00040e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c981  00000000  00000000  0004c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002058  00000000  00000000  00058a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003999  00000000  00000000  0005aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000125a9  00000000  00000000  0005e401  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000709ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000709f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00074dcc  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00074dcf  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00074ddb  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00074ddc  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00074ddd  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00074de6  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00074def  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000003  00000000  00000000  00074df8  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001e  00000000  00000000  00074dfb  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0004a6fe  00000000  00000000  00074e19  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02001000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100f754 l    d  .rodata	00000000 .rodata
0100fbd0 l    d  .rwdata	00000000 .rwdata
010117c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU_bsp//obj/HAL/src/crt0.o
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
01000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01001214 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0100fbd0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0100279c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01002c34 l     F .text	00000034 __sprint_r
0100f9ce l     O .rodata	00000010 blanks.3515
0100f9de l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
01004d4c l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010067bc l     F .text	00000008 __fp_lock
010067c4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0100fa10 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100fb58 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
01009da4 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100b120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100b23c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100b268 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100b368 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0100b45c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0100b638 l     F .text	00000050 alt_get_errno
0100b688 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0100b8d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010117ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100bb74 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100bcb4 l     F .text	00000038 alt_dev_reg
0101058c l     O .rwdata	000000c8 epcs_flash_controller_0
01010654 l     O .rwdata	00001060 jtag_uart
010116b4 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0100bda8 l     F .text	00000038 alt_flash_device_register
0100be34 l     F .text	0000028c alt_epcs_flash_query
0100c0c0 l     F .text	000000e8 alt_epcs_flash_memcmp
0100c494 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100c95c l     F .text	00000204 altera_avalon_jtag_uart_irq
0100cb60 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100d19c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0100d6c0 l     F .text	00000098 altera_avalon_uart_irq
0100d758 l     F .text	000000d8 altera_avalon_uart_rxirq
0100d830 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0100d9c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0100dc14 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0100de68 l     F .text	00000038 epcs_test_wip
0100dea0 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100e6c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100ee64 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
010026e8 g     F .text	0000001c putchar
01008978 g     F .text	00000074 _mprec_log10
01000440 g     F .text	00000090 printPacket
0100c408 g     F .text	0000008c alt_epcs_flash_get_info
01008a68 g     F .text	00000084 __any_on
01007590 g     F .text	00000064 _isatty_r
0100fa40 g     O .rodata	00000028 __mprec_tinytens
0100b580 g     F .text	00000078 alt_main
0100b0dc g     F .text	00000044 __ashldi3
01002704 g     F .text	00000084 _puts_r
0101188c g     O .bss	00000100 alt_irq
010076d0 g     F .text	0000006c _lseek_r
01006aa8 g     F .text	00000098 __sflags
0100a644 g     F .text	0000005c __eqdf2
010009dc g     F .text	0000004c printHeader
01011b1c g       *ABS*	00000000 __alt_heap_start
010026a4 g     F .text	0000003c printf
01002b44 g     F .text	0000005c __sseek
01006860 g     F .text	0000010c __sinit
01009408 g     F .text	0000013c __swbuf_r
010075f4 g     F .text	0000009c _setlocale_r
010067d8 g     F .text	00000078 __sfmoreglue
0100b618 g     F .text	00000020 __malloc_unlock
01011804 g     O .bss	00000004 altera_avalon_timer_ts_freq
01007834 g     F .text	0000018c memmove
01006850 g     F .text	00000010 _cleanup
01007a9c g     F .text	000000a8 _Balloc
0100a6fc g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0100ded8 g     F .text	000000f8 epcs_sector_erase
02001000 g     F .entry	00000000 __reset
01001950 g     F .text	00000068 _fstat_r
010117d8 g     O .bss	00000004 errno
010029f0 g     F .text	00000014 __srget
010117f8 g     O .bss	00000004 alt_argv
01019778 g       *ABS*	00000000 _gp
0100bb44 g     F .text	00000030 usleep
0101040c g     O .rwdata	00000180 alt_fd_list
01001aa8 g     F .text	00000070 _getc_r
01001b18 g     F .text	00000088 getc
010026e0 g     F .text	00000008 _putchar_r
0100e114 g     F .text	00000068 epcs_write_status_register
0100e86c g     F .text	00000090 alt_find_dev
010024cc g     F .text	00000140 memcpy
010067cc g     F .text	0000000c _cleanup_r
0100a820 g     F .text	000000d4 __floatsidf
010117d4 g     O .bss	00000004 ANTUART
0100ef44 g     F .text	00000078 alt_io_redirect
0100a7c4 g     F .text	0000005c __ltdf2
0100f754 g       *ABS*	00000000 __DTOR_END__
01002788 g     F .text	00000014 puts
0100c59c g     F .text	00000104 alt_epcs_flash_write_block
010088d4 g     F .text	000000a4 __ratio
0100cd60 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002678 g     F .text	0000002c _printf_r
01001334 g     F .text	00000008 __udivsi3
0100b3b8 g     F .text	000000a4 isatty
0100fa90 g     O .rodata	000000c8 __mprec_tens
01007690 g     F .text	0000000c __locale_charset
010117e4 g     O .bss	00000004 __malloc_top_pad
01011790 g     O .rwdata	00000004 __mb_cur_max
0100769c g     F .text	0000000c _localeconv_r
01007ecc g     F .text	0000003c __i2b
01006f4c g     F .text	000004e4 __sfvwrite_r
01002a04 g     F .text	00000064 _sbrk_r
01008c98 g     F .text	0000006c _read_r
010103d8 g     O .rwdata	0000000c __lc_ctype
010117a4 g     O .rwdata	00000004 alt_max_fd
0100aec4 g     F .text	00000104 __unpack_d
0100962c g     F .text	0000013c _fclose_r
0100678c g     F .text	00000030 fflush
010117e0 g     O .bss	00000004 __malloc_max_sbrked_mem
0100a0f8 g     F .text	00000054 __adddf3
0100c528 g     F .text	00000074 alt_epcs_flash_erase_block
01008648 g     F .text	00000148 __b2d
0100977c g     F .text	00000628 __umoddi3
0100b4ac g     F .text	000000d4 lseek
01011780 g     O .rwdata	00000004 _global_impure_ptr
0100e3d8 g     F .text	00000058 epcs_exit_4_bytes_mode
01008d04 g     F .text	000005fc _realloc_r
01011b1c g       *ABS*	00000000 __bss_end
0100ed74 g     F .text	000000f0 alt_iic_isr_register
0100f054 g     F .text	00000104 alt_tick
01000bc4 g     F .text	00000650 __udivdi3
0100fa68 g     O .rodata	00000028 __mprec_bigtens
01007cb0 g     F .text	00000104 __s2b
0100a9c8 g     F .text	0000011c __floatunsidf
010083e8 g     F .text	00000058 __mcmp
0100d618 g     F .text	000000a8 altera_avalon_uart_init
01006a78 g     F .text	00000018 __fp_lock_all
0100ed28 g     F .text	0000004c alt_ic_irq_enabled
0100efbc g     F .text	00000098 alt_alarm_stop
01011808 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
010103e4 g     O .rwdata	00000028 alt_dev_null
01007db4 g     F .text	00000068 __hi0bits
0100a8f4 g     F .text	000000d4 __fixdfsi
0101179c g     O .rwdata	00000008 alt_dev_list
0100bbc4 g     F .text	000000f0 write
01008aec g     F .text	000000bc _putc_r
01011778 g     O .rwdata	00000008 antNetKey
0100d4e0 g     F .text	00000028 alt_timestamp_freq
0100b2b8 g     F .text	000000b0 fstat
0100b098 g     F .text	00000044 __lshrdi3
01000000 g       *ABS*	00000000 __alt_mem_SDRAM
01008160 g     F .text	0000012c __pow5mult
010117f0 g     O .bss	00000004 __nlocale_changed
0100133c g     F .text	00000008 __umodsi3
0100e298 g     F .text	00000068 epcs_read_electronic_signature
01011b1c g       *ABS*	00000000 end
0100dc64 g     F .text	000001a8 altera_avalon_uart_write
0100192c g     F .text	00000024 fseek
0100c89c g     F .text	000000c0 altera_avalon_jtag_uart_init
0100f754 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0100d210 g     F .text	00000088 alt_avalon_timer_sc_init
0100d568 g     F .text	00000060 altera_avalon_uart_write_fd
0100abf4 g     F .text	000000ac __clzsi2
0100d5c8 g     F .text	00000050 altera_avalon_uart_close_fd
0100cf78 g     F .text	00000224 altera_avalon_jtag_uart_write
0101183c g     O .bss	00000050 rxBuf
01006a68 g     F .text	00000004 __sfp_lock_acquire
0100773c g     F .text	000000f8 memchr
01002c68 g     F .text	00001e7c ___vfprintf_internal_r
010117c4 g     O .bss	00000004 rxBufCnt
01006c7c g     F .text	000002d0 _free_r
0100f578 g     F .text	000001a0 __call_exitprocs
010029a4 g     F .text	0000004c __srget_r
010001f0 g     F .text	00000038 errorHandler
010117ec g     O .bss	00000004 __mlocale_changed
01011788 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	00000038 _start
0101180c g     O .bss	00000004 _alt_tick_rate
0100828c g     F .text	0000015c __lshift
0100f178 g     F .text	00000208 alt_avalon_spi_command
01011810 g     O .bss	00000004 _alt_nticks
0100b920 g     F .text	000000f4 read
0100bd20 g     F .text	00000088 alt_sys_init
0100260c g     F .text	0000006c _open_r
0100f448 g     F .text	00000130 __register_exitproc
01007f08 g     F .text	00000258 __multiply
0100cc04 g     F .text	00000068 altera_avalon_jtag_uart_close
01001344 g     F .text	00000028 __mulsi3
01011814 g     O .bss	00000028 __malloc_current_mallinfo
01008790 g     F .text	00000144 __d2b
0100de0c g     F .text	0000005c epcs_read_status_register
0100c738 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0100eac8 g     F .text	000000d4 alt_get_fd
0100e570 g     F .text	00000154 alt_busy_sleep
0100afc8 g     F .text	000000d0 __fpcmp_parts_d
01004ce8 g     F .text	00000064 _close_r
0100e300 g     F .text	00000080 epcs_read_device_id
0100f3cc g     F .text	0000007c memcmp
0100c7f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01011b1c g       *ABS*	00000000 __alt_stack_base
0100c848 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
010019b8 g     F .text	000000b0 _fwrite_r
01004b74 g     F .text	00000174 __swsetup_r
0100a490 g     F .text	000001b4 __divdf3
0100696c g     F .text	000000fc __sfp
010089ec g     F .text	0000007c __copybits
0100ffd0 g     O .rwdata	00000408 __malloc_av_
01006a74 g     F .text	00000004 __sinit_lock_release
0100a1ac g     F .text	000002e4 __muldf3
01002a68 g     F .text	00000054 __sread
010117d0 g     O .bss	00000004 packetCount
0100e8fc g     F .text	00000114 alt_find_file
0100e714 g     F .text	000000a0 alt_dev_llist_insert
0100b5f8 g     F .text	00000020 __malloc_lock
0100ba94 g     F .text	000000b0 sbrk
010065a4 g     F .text	000001e8 _fflush_r
01009560 g     F .text	000000cc _calloc_r
010117b0 g     O .rwdata	00000008 alt_flash_dev_list
01000338 g     F .text	00000108 sendPacket
0100149c g     F .text	0000001c fopen
010117c4 g       *ABS*	00000000 __bss_start
010079c0 g     F .text	000000dc memset
01000b88 g     F .text	0000003c main
010117fc g     O .bss	00000004 alt_envp
010117dc g     O .bss	00000004 __malloc_max_total_mem
0100c798 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01009544 g     F .text	0000001c __swbuf
01002ba0 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01009768 g     F .text	00000014 fclose
0100d298 g     F .text	000000a8 alt_timestamp_start
0101198c g     O .bss	00000190 _atexit0
01004f88 g     F .text	0000161c _dtoa_r
01001d48 g     F .text	00000784 _malloc_r
010117a8 g     O .rwdata	00000004 alt_errno
01000a28 g     F .text	00000160 readANT
01007430 g     F .text	000000a8 _fwalk
010117cc g     O .bss	00000004 TicksPerSecond
01008ba8 g     F .text	000000f0 putc
01001288 g     F .text	00000050 __divsi3
0100fb64 g     O .rodata	00000014 __thenan_df
01006b40 g     F .text	0000013c _malloc_trim_r
0100f754 g       *ABS*	00000000 __CTOR_END__
0100c1a8 g     F .text	00000260 alt_epcs_flash_write
01009364 g     F .text	000000a4 strcmp
0100f754 g       *ABS*	00000000 __DTOR_LIST__
01000744 g     F .text	0000004c delay
0100a6a0 g     F .text	0000005c __nedf2
0100bcec g     F .text	00000034 alt_irq_init
0100ba14 g     F .text	00000080 alt_release_fd
0100f884 g     O .rodata	00000100 __clz_tab
010117e8 g     O .bss	00000004 _PathLocale
0100f380 g     F .text	00000014 atexit
01004b08 g     F .text	0000006c _write_r
010076a8 g     F .text	0000001c setlocale
01011784 g     O .rwdata	00000004 _impure_ptr
010117f4 g     O .bss	00000004 alt_argc
01011800 g     O .bss	00000004 altera_avalon_timer_ts_base
0100e810 g     F .text	0000005c _do_dtors
010014b8 g     F .text	00000474 _fseek_r
010027b8 g     F .text	000001ec __srefill_r
01000020 g       .exceptions	00000000 alt_irq_entry
010117c8 g     O .bss	00000001 oldHeartRate
010085e8 g     F .text	00000060 __ulp
01009300 g     F .text	00000038 __isinfd
01006a90 g     F .text	00000018 __fp_unlock_all
01000790 g     F .text	0000024c setup
01011794 g     O .rwdata	00000008 alt_fs_list
010006e4 g     F .text	00000060 checkReturn
010076c4 g     F .text	0000000c localeconv
0100d340 g     F .text	000001a0 alt_timestamp
0100dfd0 g     F .text	000000f4 epcs_read_buffer
0100bde0 g     F .text	00000054 alt_epcs_flash_init
0100eb9c g     F .text	00000050 alt_ic_isr_register
01001a68 g     F .text	00000040 fwrite
010117c4 g       *ABS*	00000000 _edata
0100d508 g     F .text	00000060 altera_avalon_uart_read_fd
01011b1c g       *ABS*	00000000 _end
0100ea10 g     F .text	00000068 alt_flash_open_dev
0100cc6c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010002a8 g     F .text	00000090 writeByte
0100ec88 g     F .text	000000a0 alt_ic_irq_disable
0100e380 g     F .text	00000058 epcs_enter_4_bytes_mode
01002abc g     F .text	00000088 __swrite
0101178c g     O .rwdata	00000004 __malloc_trim_threshold
0100f158 g     F .text	00000020 altera_nios2_qsys_irq_init
0100f394 g     F .text	00000038 exit
010074d8 g     F .text	000000b8 _fwalk_reent
01008440 g     F .text	000001a8 __mdiff
0100ea78 g     F .text	00000050 alt_flash_close_dev
010012d8 g     F .text	0000005c __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01006a6c g     F .text	00000004 __sfp_lock_release
0100d96c g     F .text	00000054 altera_avalon_uart_close
0100136c g     F .text	00000130 _fopen_r
0100f718 g     F .text	0000003c _exit
01009338 g     F .text	0000002c __isnand
0100e430 g     F .text	00000140 alt_alarm_start
0100aae4 g     F .text	00000110 __muldi3
01001ba0 g     F .text	000001a8 __smakebuf_r
01002ba8 g     F .text	0000008c strlen
0100e0c4 g     F .text	00000050 epcs_write_enable
0100b778 g     F .text	00000158 open
0100a760 g     F .text	00000064 __gedf2
010117b8 g     O .rwdata	00000004 alt_priority_mask
0100ebec g     F .text	0000009c alt_ic_irq_enable
01004ae4 g     F .text	00000024 __vfprintf_internal
0100da10 g     F .text	00000204 altera_avalon_uart_read
0100a14c g     F .text	00000060 __subdf3
0100c6a0 g     F .text	00000098 alt_epcs_flash_read
01007e1c g     F .text	000000b0 __lo0bits
010004d0 g     F .text	00000214 readPacket
010117bc g     O .rwdata	00000008 alt_alarm_list
0100e7b4 g     F .text	0000005c _do_ctors
01000228 g     F .text	00000080 millis
0100b170 g     F .text	000000cc close
0100aca0 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
01006a70 g     F .text	00000004 __sinit_lock_acquire
0100e17c g     F .text	0000011c epcs_write_buffer
01007b6c g     F .text	00000144 __multadd
01007b44 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)

01000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0fffb17 	ldw	r3,-20(fp)
 1000120:	e0bffc17 	ldw	r2,-16(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	10001726 	beq	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	00c04074 	movhi	r3,257
 1000130:	18c62304 	addi	r3,r3,6284
 1000134:	e0bffd17 	ldw	r2,-12(fp)
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	1885883a 	add	r2,r3,r2
 1000140:	10c00017 	ldw	r3,0(r2)
 1000144:	01004074 	movhi	r4,257
 1000148:	21062304 	addi	r4,r4,6284
 100014c:	e0bffd17 	ldw	r2,-12(fp)
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	2085883a 	add	r2,r4,r2
 1000158:	10800104 	addi	r2,r2,4
 100015c:	10800017 	ldw	r2,0(r2)
 1000160:	1009883a 	mov	r4,r2
 1000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100016c:	0005313a 	rdctl	r2,ipending
 1000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 100017c:	e0bffb17 	ldw	r2,-20(fp)
 1000180:	103fe31e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffc17 	ldw	r2,-16(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fde06 	br	100011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b8:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 10001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 10001c0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c4:	d6a5de14 	ori	gp,gp,38776
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001cc:	1085f114 	ori	r2,r2,6084

    movhi r3, %hi(__bss_end)
 10001d0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d4:	18c6c714 	ori	r3,r3,6940

    beq r2, r3, 1f
 10001d8:	10c00326 	beq	r2,r3,10001e8 <_start+0x30>

0:
    stw zero, (r2)
 10001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e4:	10fffd36 	bltu	r2,r3,10001dc <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100b5800 	call	100b580 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <errorHandler>:
  errPacketSizeExceeded,
  errChecksumError,
  errMissingSync
};

void errorHandler(int errIn) {
 10001f0:	defffd04 	addi	sp,sp,-12
 10001f4:	dfc00215 	stw	ra,8(sp)
 10001f8:	df000115 	stw	fp,4(sp)
 10001fc:	df000104 	addi	fp,sp,4
 1000200:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
  printf("Error: %i \n", errIn);
 1000204:	01004074 	movhi	r4,257
 1000208:	213dd504 	addi	r4,r4,-2220
 100020c:	e17fff17 	ldw	r5,-4(fp)
 1000210:	10026a40 	call	10026a4 <printf>
#endif
  //while (true) {};
}
 1000214:	e037883a 	mov	sp,fp
 1000218:	dfc00117 	ldw	ra,4(sp)
 100021c:	df000017 	ldw	fp,0(sp)
 1000220:	dec00204 	addi	sp,sp,8
 1000224:	f800283a 	ret

01000228 <millis>:

alt_u32 millis(){
 1000228:	defffc04 	addi	sp,sp,-16
 100022c:	dfc00315 	stw	ra,12(sp)
 1000230:	df000215 	stw	fp,8(sp)
 1000234:	dc400115 	stw	r17,4(sp)
 1000238:	dc000015 	stw	r16,0(sp)
 100023c:	d839883a 	mov	fp,sp
#ifdef DEBUG
  //printf("Current System Time: %i \n", alt_timestamp());
#endif

  return (alt_timestamp()/TicksPerSecond)*1000;
 1000240:	100d3400 	call	100d340 <alt_timestamp>
 1000244:	100b883a 	mov	r5,r2
 1000248:	180d883a 	mov	r6,r3
 100024c:	d0a01517 	ldw	r2,-32684(gp)
 1000250:	1021883a 	mov	r16,r2
 1000254:	1005d7fa 	srai	r2,r2,31
 1000258:	1023883a 	mov	r17,r2
 100025c:	2809883a 	mov	r4,r5
 1000260:	300b883a 	mov	r5,r6
 1000264:	800d883a 	mov	r6,r16
 1000268:	880f883a 	mov	r7,r17
 100026c:	1000bc40 	call	1000bc4 <__udivdi3>
 1000270:	1009883a 	mov	r4,r2
 1000274:	180b883a 	mov	r5,r3
 1000278:	2005883a 	mov	r2,r4
 100027c:	2807883a 	mov	r3,r5
 1000280:	1009883a 	mov	r4,r2
 1000284:	0140fa04 	movi	r5,1000
 1000288:	10013440 	call	1001344 <__mulsi3>
}
 100028c:	e037883a 	mov	sp,fp
 1000290:	dfc00317 	ldw	ra,12(sp)
 1000294:	df000217 	ldw	fp,8(sp)
 1000298:	dc400117 	ldw	r17,4(sp)
 100029c:	dc000017 	ldw	r16,0(sp)
 10002a0:	dec00404 	addi	sp,sp,16
 10002a4:	f800283a 	ret

010002a8 <writeByte>:

unsigned char writeByte(unsigned char out, unsigned char chksum) {
 10002a8:	defffc04 	addi	sp,sp,-16
 10002ac:	dfc00315 	stw	ra,12(sp)
 10002b0:	df000215 	stw	fp,8(sp)
 10002b4:	df000204 	addi	fp,sp,8
 10002b8:	2007883a 	mov	r3,r4
 10002bc:	2805883a 	mov	r2,r5
 10002c0:	e0fffe05 	stb	r3,-8(fp)
 10002c4:	e0bfff05 	stb	r2,-4(fp)
#ifdef DEBUG
  printf("%02X ", out);
 10002c8:	e0bffe03 	ldbu	r2,-8(fp)
 10002cc:	10803fcc 	andi	r2,r2,255
 10002d0:	01004074 	movhi	r4,257
 10002d4:	213dd804 	addi	r4,r4,-2208
 10002d8:	100b883a 	mov	r5,r2
 10002dc:	10026a40 	call	10026a4 <printf>
#endif
    if(ANTUART){
 10002e0:	d0a01717 	ldw	r2,-32676(gp)
 10002e4:	10000726 	beq	r2,zero,1000304 <writeByte+0x5c>
        fwrite (&out, 1, 1, ANTUART);
 10002e8:	d0a01717 	ldw	r2,-32676(gp)
 10002ec:	e13ffe04 	addi	r4,fp,-8
 10002f0:	01400044 	movi	r5,1
 10002f4:	01800044 	movi	r6,1
 10002f8:	100f883a 	mov	r7,r2
 10002fc:	1001a680 	call	1001a68 <fwrite>
 1000300:	00000306 	br	1000310 <writeByte+0x68>
    }
    else{
        printf("FAILURE: cannot write to ANTUART \n");
 1000304:	01004074 	movhi	r4,257
 1000308:	213dda04 	addi	r4,r4,-2200
 100030c:	10027880 	call	1002788 <puts>
    }

    chksum ^= out;
 1000310:	e0bffe03 	ldbu	r2,-8(fp)
 1000314:	e0ffff03 	ldbu	r3,-4(fp)
 1000318:	1884f03a 	xor	r2,r3,r2
 100031c:	e0bfff05 	stb	r2,-4(fp)
    return chksum;
 1000320:	e0bfff03 	ldbu	r2,-4(fp)
}
 1000324:	e037883a 	mov	sp,fp
 1000328:	dfc00117 	ldw	ra,4(sp)
 100032c:	df000017 	ldw	fp,0(sp)
 1000330:	dec00204 	addi	sp,sp,8
 1000334:	f800283a 	ret

01000338 <sendPacket>:

void sendPacket(unsigned msgId, unsigned char argCnt, ...) {
 1000338:	defff604 	addi	sp,sp,-40
 100033c:	dfc00715 	stw	ra,28(sp)
 1000340:	df000615 	stw	fp,24(sp)
 1000344:	df000604 	addi	fp,sp,24
 1000348:	e13ffe15 	stw	r4,-8(fp)
 100034c:	e1800215 	stw	r6,8(fp)
 1000350:	e1c00315 	stw	r7,12(fp)
 1000354:	2805883a 	mov	r2,r5
 1000358:	e0bfff05 	stb	r2,-4(fp)
  va_list arg;
  va_start (arg, argCnt);
 100035c:	e0800204 	addi	r2,fp,8
 1000360:	e0bffd15 	stw	r2,-12(fp)
  unsigned char byteOut;
  unsigned char chksum = 0;
 1000364:	e03ffa05 	stb	zero,-24(fp)
  int cnt = 0;
 1000368:	e03ffb15 	stw	zero,-20(fp)

#ifdef DEBUG
  printf("TX: ");
 100036c:	01004074 	movhi	r4,257
 1000370:	213de304 	addi	r4,r4,-2164
 1000374:	10026a40 	call	10026a4 <printf>
#endif

  chksum = writeByte(MESG_TX_SYNC, chksum); // send sync
 1000378:	e0bffa03 	ldbu	r2,-24(fp)
 100037c:	01002904 	movi	r4,164
 1000380:	100b883a 	mov	r5,r2
 1000384:	10002a80 	call	10002a8 <writeByte>
 1000388:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(argCnt, chksum);       // send length
 100038c:	e0ffff03 	ldbu	r3,-4(fp)
 1000390:	e0bffa03 	ldbu	r2,-24(fp)
 1000394:	1809883a 	mov	r4,r3
 1000398:	100b883a 	mov	r5,r2
 100039c:	10002a80 	call	10002a8 <writeByte>
 10003a0:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(msgId, chksum);        // send message id
 10003a4:	e0bffe17 	ldw	r2,-8(fp)
 10003a8:	10c03fcc 	andi	r3,r2,255
 10003ac:	e0bffa03 	ldbu	r2,-24(fp)
 10003b0:	1809883a 	mov	r4,r3
 10003b4:	100b883a 	mov	r5,r2
 10003b8:	10002a80 	call	10002a8 <writeByte>
 10003bc:	e0bffa05 	stb	r2,-24(fp)

  // send data
  for (cnt=1; cnt <= argCnt; cnt++) {
 10003c0:	00800044 	movi	r2,1
 10003c4:	e0bffb15 	stw	r2,-20(fp)
 10003c8:	00000e06 	br	1000404 <sendPacket+0xcc>
    byteOut = va_arg(arg, unsigned int);
 10003cc:	e0bffd17 	ldw	r2,-12(fp)
 10003d0:	10c00104 	addi	r3,r2,4
 10003d4:	e0fffd15 	stw	r3,-12(fp)
 10003d8:	10800017 	ldw	r2,0(r2)
 10003dc:	e0bffc05 	stb	r2,-16(fp)
    chksum = writeByte(byteOut, chksum);
 10003e0:	e0fffc03 	ldbu	r3,-16(fp)
 10003e4:	e0bffa03 	ldbu	r2,-24(fp)
 10003e8:	1809883a 	mov	r4,r3
 10003ec:	100b883a 	mov	r5,r2
 10003f0:	10002a80 	call	10002a8 <writeByte>
 10003f4:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(MESG_TX_SYNC, chksum); // send sync
  chksum = writeByte(argCnt, chksum);       // send length
  chksum = writeByte(msgId, chksum);        // send message id

  // send data
  for (cnt=1; cnt <= argCnt; cnt++) {
 10003f8:	e0bffb17 	ldw	r2,-20(fp)
 10003fc:	10800044 	addi	r2,r2,1
 1000400:	e0bffb15 	stw	r2,-20(fp)
 1000404:	e0ffff03 	ldbu	r3,-4(fp)
 1000408:	e0bffb17 	ldw	r2,-20(fp)
 100040c:	18bfef0e 	bge	r3,r2,10003cc <sendPacket+0x94>
    byteOut = va_arg(arg, unsigned int);
    chksum = writeByte(byteOut, chksum);
  }
  va_end(arg);

  writeByte(chksum,chksum);                 // send checksum
 1000410:	e0fffa03 	ldbu	r3,-24(fp)
 1000414:	e0bffa03 	ldbu	r2,-24(fp)
 1000418:	1809883a 	mov	r4,r3
 100041c:	100b883a 	mov	r5,r2
 1000420:	10002a80 	call	10002a8 <writeByte>
  #ifdef DEBUG
      printf("\n");
 1000424:	01000284 	movi	r4,10
 1000428:	10026e80 	call	10026e8 <putchar>
  #endif
}
 100042c:	e037883a 	mov	sp,fp
 1000430:	dfc00117 	ldw	ra,4(sp)
 1000434:	df000017 	ldw	fp,0(sp)
 1000438:	dec00404 	addi	sp,sp,16
 100043c:	f800283a 	ret

01000440 <printPacket>:

void printPacket(unsigned char * packet) {
 1000440:	defffc04 	addi	sp,sp,-16
 1000444:	dfc00315 	stw	ra,12(sp)
 1000448:	df000215 	stw	fp,8(sp)
 100044c:	df000204 	addi	fp,sp,8
 1000450:	e13fff15 	stw	r4,-4(fp)
  int cnt = 0;
 1000454:	e03ffe15 	stw	zero,-8(fp)
#ifdef DEBUG
  while (cnt < packet[1]+4) {
 1000458:	00000e06 	br	1000494 <printPacket+0x54>
    printf("%02X", packet[cnt++]);
 100045c:	e0bffe17 	ldw	r2,-8(fp)
 1000460:	e0ffff17 	ldw	r3,-4(fp)
 1000464:	1885883a 	add	r2,r3,r2
 1000468:	10800003 	ldbu	r2,0(r2)
 100046c:	10803fcc 	andi	r2,r2,255
 1000470:	e0fffe17 	ldw	r3,-8(fp)
 1000474:	18c00044 	addi	r3,r3,1
 1000478:	e0fffe15 	stw	r3,-8(fp)
 100047c:	01004074 	movhi	r4,257
 1000480:	213de504 	addi	r4,r4,-2156
 1000484:	100b883a 	mov	r5,r2
 1000488:	10026a40 	call	10026a4 <printf>
    printf(" ");
 100048c:	01000804 	movi	r4,32
 1000490:	10026e80 	call	10026e8 <putchar>
}

void printPacket(unsigned char * packet) {
  int cnt = 0;
#ifdef DEBUG
  while (cnt < packet[1]+4) {
 1000494:	e0bfff17 	ldw	r2,-4(fp)
 1000498:	10800044 	addi	r2,r2,1
 100049c:	10800003 	ldbu	r2,0(r2)
 10004a0:	10803fcc 	andi	r2,r2,255
 10004a4:	10800104 	addi	r2,r2,4
 10004a8:	e0fffe17 	ldw	r3,-8(fp)
 10004ac:	18bfeb16 	blt	r3,r2,100045c <printPacket+0x1c>
    printf("%02X", packet[cnt++]);
    printf(" ");
  }
  printf("\n\n");
 10004b0:	01004074 	movhi	r4,257
 10004b4:	213de704 	addi	r4,r4,-2148
 10004b8:	10027880 	call	1002788 <puts>
#endif
}
 10004bc:	e037883a 	mov	sp,fp
 10004c0:	dfc00117 	ldw	ra,4(sp)
 10004c4:	df000017 	ldw	fp,0(sp)
 10004c8:	dec00204 	addi	sp,sp,8
 10004cc:	f800283a 	ret

010004d0 <readPacket>:

int readPacket(unsigned char *packet, int packetSize, int readTimeout) {
 10004d0:	defff704 	addi	sp,sp,-36
 10004d4:	dfc00815 	stw	ra,32(sp)
 10004d8:	df000715 	stw	fp,28(sp)
 10004dc:	dc000615 	stw	r16,24(sp)
 10004e0:	df000604 	addi	fp,sp,24
 10004e4:	e13ffd15 	stw	r4,-12(fp)
 10004e8:	e17ffe15 	stw	r5,-8(fp)
 10004ec:	e1bfff15 	stw	r6,-4(fp)
  unsigned char byteIn;
  unsigned char chksum = 0;
 10004f0:	e03ffa05 	stb	zero,-24(fp)

  long timeoutExit = millis() + readTimeout;
 10004f4:	10002280 	call	1000228 <millis>
 10004f8:	e0ffff17 	ldw	r3,-4(fp)
 10004fc:	10c5883a 	add	r2,r2,r3
 1000500:	e0bffb15 	stw	r2,-20(fp)
  while (timeoutExit > millis()) {
 1000504:	00006d06 	br	10006bc <readPacket+0x1ec>
    byteIn = getc(ANTUART);
 1000508:	d0a01717 	ldw	r2,-32676(gp)
 100050c:	1009883a 	mov	r4,r2
 1000510:	1001b180 	call	1001b18 <getc>
 1000514:	e0bffc05 	stb	r2,-16(fp)
    if (byteIn != EOF) {
      timeoutExit = millis() + readTimeout;
 1000518:	10002280 	call	1000228 <millis>
 100051c:	e0ffff17 	ldw	r3,-4(fp)
 1000520:	10c5883a 	add	r2,r2,r3
 1000524:	e0bffb15 	stw	r2,-20(fp)
      if ((byteIn == MESG_TX_SYNC) && (rxBufCnt == 0)) {
 1000528:	e0bffc03 	ldbu	r2,-16(fp)
 100052c:	10802918 	cmpnei	r2,r2,164
 1000530:	10000d1e 	bne	r2,zero,1000568 <readPacket+0x98>
 1000534:	d0a01317 	ldw	r2,-32692(gp)
 1000538:	10000b1e 	bne	r2,zero,1000568 <readPacket+0x98>
        rxBuf[rxBufCnt++] = byteIn;
 100053c:	d0a01317 	ldw	r2,-32692(gp)
 1000540:	00c04074 	movhi	r3,257
 1000544:	18c60f04 	addi	r3,r3,6204
 1000548:	1887883a 	add	r3,r3,r2
 100054c:	e13ffc03 	ldbu	r4,-16(fp)
 1000550:	19000005 	stb	r4,0(r3)
 1000554:	10800044 	addi	r2,r2,1
 1000558:	d0a01315 	stw	r2,-32692(gp)
        chksum = byteIn;
 100055c:	e0bffc03 	ldbu	r2,-16(fp)
 1000560:	e0bffa05 	stb	r2,-24(fp)
 1000564:	00005506 	br	10006bc <readPacket+0x1ec>
      } else if ((rxBufCnt == 0) && (byteIn != MESG_TX_SYNC)) {
 1000568:	d0a01317 	ldw	r2,-32692(gp)
 100056c:	1000071e 	bne	r2,zero,100058c <readPacket+0xbc>
 1000570:	e0bffc03 	ldbu	r2,-16(fp)
 1000574:	10802920 	cmpeqi	r2,r2,164
 1000578:	1000041e 	bne	r2,zero,100058c <readPacket+0xbc>
        errorHandler(errMissingSync);
 100057c:	010000c4 	movi	r4,3
 1000580:	10001f00 	call	10001f0 <errorHandler>
        return -1;
 1000584:	00bfffc4 	movi	r2,-1
 1000588:	00005006 	br	10006cc <readPacket+0x1fc>
      } else if (rxBufCnt == 1) {
 100058c:	d0a01317 	ldw	r2,-32692(gp)
 1000590:	10800058 	cmpnei	r2,r2,1
 1000594:	10000d1e 	bne	r2,zero,10005cc <readPacket+0xfc>
        rxBuf[rxBufCnt++] = byteIn;       // second byte will be size
 1000598:	d0a01317 	ldw	r2,-32692(gp)
 100059c:	00c04074 	movhi	r3,257
 10005a0:	18c60f04 	addi	r3,r3,6204
 10005a4:	1887883a 	add	r3,r3,r2
 10005a8:	e13ffc03 	ldbu	r4,-16(fp)
 10005ac:	19000005 	stb	r4,0(r3)
 10005b0:	10800044 	addi	r2,r2,1
 10005b4:	d0a01315 	stw	r2,-32692(gp)
        chksum ^= byteIn;
 10005b8:	e0fffa03 	ldbu	r3,-24(fp)
 10005bc:	e0bffc03 	ldbu	r2,-16(fp)
 10005c0:	1884f03a 	xor	r2,r3,r2
 10005c4:	e0bffa05 	stb	r2,-24(fp)
 10005c8:	00003c06 	br	10006bc <readPacket+0x1ec>
      } else if (rxBufCnt < rxBuf[1]+3) { // read rest of data taking into account sync, size, and checksum that are each 1 byte
 10005cc:	00804074 	movhi	r2,257
 10005d0:	10860f04 	addi	r2,r2,6204
 10005d4:	10800043 	ldbu	r2,1(r2)
 10005d8:	10803fcc 	andi	r2,r2,255
 10005dc:	108000c4 	addi	r2,r2,3
 10005e0:	d0e01317 	ldw	r3,-32692(gp)
 10005e4:	18800d0e 	bge	r3,r2,100061c <readPacket+0x14c>
        rxBuf[rxBufCnt++] = byteIn;
 10005e8:	d0a01317 	ldw	r2,-32692(gp)
 10005ec:	00c04074 	movhi	r3,257
 10005f0:	18c60f04 	addi	r3,r3,6204
 10005f4:	1887883a 	add	r3,r3,r2
 10005f8:	e13ffc03 	ldbu	r4,-16(fp)
 10005fc:	19000005 	stb	r4,0(r3)
 1000600:	10800044 	addi	r2,r2,1
 1000604:	d0a01315 	stw	r2,-32692(gp)
        chksum ^= byteIn;
 1000608:	e0fffa03 	ldbu	r3,-24(fp)
 100060c:	e0bffc03 	ldbu	r2,-16(fp)
 1000610:	1884f03a 	xor	r2,r3,r2
 1000614:	e0bffa05 	stb	r2,-24(fp)
 1000618:	00002806 	br	10006bc <readPacket+0x1ec>
      } else {
        rxBuf[rxBufCnt++] = byteIn;
 100061c:	d0a01317 	ldw	r2,-32692(gp)
 1000620:	00c04074 	movhi	r3,257
 1000624:	18c60f04 	addi	r3,r3,6204
 1000628:	1887883a 	add	r3,r3,r2
 100062c:	e13ffc03 	ldbu	r4,-16(fp)
 1000630:	19000005 	stb	r4,0(r3)
 1000634:	10800044 	addi	r2,r2,1
 1000638:	d0a01315 	stw	r2,-32692(gp)
        if (rxBufCnt > packetSize) {
 100063c:	d0a01317 	ldw	r2,-32692(gp)
 1000640:	e0fffe17 	ldw	r3,-8(fp)
 1000644:	1880040e 	bge	r3,r2,1000658 <readPacket+0x188>
          errorHandler(errPacketSizeExceeded);
 1000648:	01000044 	movi	r4,1
 100064c:	10001f00 	call	10001f0 <errorHandler>
          return -1;
 1000650:	00bfffc4 	movi	r2,-1
 1000654:	00001d06 	br	10006cc <readPacket+0x1fc>
        } else {
          memcpy(packet, &rxBuf, rxBufCnt); // should be a complete packet. copy data to packet variable, check checksum and return
 1000658:	d0a01317 	ldw	r2,-32692(gp)
 100065c:	e13ffd17 	ldw	r4,-12(fp)
 1000660:	01404074 	movhi	r5,257
 1000664:	29460f04 	addi	r5,r5,6204
 1000668:	100d883a 	mov	r6,r2
 100066c:	10024cc0 	call	10024cc <memcpy>
          packetCount++;
 1000670:	d0a01617 	ldw	r2,-32680(gp)
 1000674:	10800044 	addi	r2,r2,1
 1000678:	d0a01615 	stw	r2,-32680(gp)
          if (chksum != packet[rxBufCnt-1]) {
 100067c:	d0a01317 	ldw	r2,-32692(gp)
 1000680:	10bfffc4 	addi	r2,r2,-1
 1000684:	e0fffd17 	ldw	r3,-12(fp)
 1000688:	1885883a 	add	r2,r3,r2
 100068c:	10800003 	ldbu	r2,0(r2)
 1000690:	10c03fcc 	andi	r3,r2,255
 1000694:	e0bffa03 	ldbu	r2,-24(fp)
 1000698:	18800526 	beq	r3,r2,10006b0 <readPacket+0x1e0>
            errorHandler(errChecksumError);
 100069c:	01000084 	movi	r4,2
 10006a0:	10001f00 	call	10001f0 <errorHandler>
            rxBufCnt = 0;
 10006a4:	d0201315 	stw	zero,-32692(gp)
            return -1;
 10006a8:	00bfffc4 	movi	r2,-1
 10006ac:	00000706 	br	10006cc <readPacket+0x1fc>
          } else {
            rxBufCnt = 0;
 10006b0:	d0201315 	stw	zero,-32692(gp)
            return 1;
 10006b4:	00800044 	movi	r2,1
 10006b8:	00000406 	br	10006cc <readPacket+0x1fc>
int readPacket(unsigned char *packet, int packetSize, int readTimeout) {
  unsigned char byteIn;
  unsigned char chksum = 0;

  long timeoutExit = millis() + readTimeout;
  while (timeoutExit > millis()) {
 10006bc:	e43ffb17 	ldw	r16,-20(fp)
 10006c0:	10002280 	call	1000228 <millis>
 10006c4:	143f9036 	bltu	r2,r16,1000508 <readPacket+0x38>
          }
        }
      }
    }
  }
  return 0;
 10006c8:	0005883a 	mov	r2,zero
}
 10006cc:	e037883a 	mov	sp,fp
 10006d0:	dfc00217 	ldw	ra,8(sp)
 10006d4:	df000117 	ldw	fp,4(sp)
 10006d8:	dc000017 	ldw	r16,0(sp)
 10006dc:	dec00304 	addi	sp,sp,12
 10006e0:	f800283a 	ret

010006e4 <checkReturn>:

int checkReturn() {
 10006e4:	deffe904 	addi	sp,sp,-92
 10006e8:	dfc01615 	stw	ra,88(sp)
 10006ec:	df001515 	stw	fp,84(sp)
 10006f0:	df001504 	addi	fp,sp,84
  unsigned char packet[MAXPACKETLEN];
  int packetsRead;

  packetsRead = readPacket(packet, MAXPACKETLEN, PACKETREADTIMEOUT);
 10006f4:	e0bfec04 	addi	r2,fp,-80
 10006f8:	1009883a 	mov	r4,r2
 10006fc:	01401404 	movi	r5,80
 1000700:	01801904 	movi	r6,100
 1000704:	10004d00 	call	10004d0 <readPacket>
 1000708:	e0bfeb15 	stw	r2,-84(fp)
  // Data <sync> <len> <msg id> <channel> <msg id being responded to> <msg code> <chksum>
  // <sync> always 0xa4
  // <msg id> always 0x40 denoting a channel response / event
  // <msg code? success is 0.  See page 84 of ANT MPaU for other codes

  if (packetsRead > 0) {
 100070c:	e0bfeb17 	ldw	r2,-84(fp)
 1000710:	0080060e 	bge	zero,r2,100072c <checkReturn+0x48>
#ifdef DEBUG
    printf("RX: ");
 1000714:	01004074 	movhi	r4,257
 1000718:	213de804 	addi	r4,r4,-2144
 100071c:	10026a40 	call	10026a4 <printf>
    printPacket(packet);
 1000720:	e0bfec04 	addi	r2,fp,-80
 1000724:	1009883a 	mov	r4,r2
 1000728:	10004400 	call	1000440 <printPacket>
#endif
  }

  return packetsRead;
 100072c:	e0bfeb17 	ldw	r2,-84(fp)
}
 1000730:	e037883a 	mov	sp,fp
 1000734:	dfc00117 	ldw	ra,4(sp)
 1000738:	df000017 	ldw	fp,0(sp)
 100073c:	dec00204 	addi	sp,sp,8
 1000740:	f800283a 	ret

01000744 <delay>:

void delay(int delayTime){
 1000744:	defffd04 	addi	sp,sp,-12
 1000748:	dfc00215 	stw	ra,8(sp)
 100074c:	df000115 	stw	fp,4(sp)
 1000750:	df000104 	addi	fp,sp,4
 1000754:	e13fff15 	stw	r4,-4(fp)
    if(usleep(delayTime*1000) != 0){
 1000758:	e13fff17 	ldw	r4,-4(fp)
 100075c:	0140fa04 	movi	r5,1000
 1000760:	10013440 	call	1001344 <__mulsi3>
 1000764:	1009883a 	mov	r4,r2
 1000768:	100bb440 	call	100bb44 <usleep>
 100076c:	10000326 	beq	r2,zero,100077c <delay+0x38>
      printf("Delay failure");
 1000770:	01004074 	movhi	r4,257
 1000774:	213dea04 	addi	r4,r4,-2136
 1000778:	10026a40 	call	10026a4 <printf>
    }
}
 100077c:	e037883a 	mov	sp,fp
 1000780:	dfc00117 	ldw	ra,4(sp)
 1000784:	df000017 	ldw	fp,0(sp)
 1000788:	dec00204 	addi	sp,sp,8
 100078c:	f800283a 	ret

01000790 <setup>:

void setup() {
 1000790:	defff704 	addi	sp,sp,-36
 1000794:	dfc00815 	stw	ra,32(sp)
 1000798:	df000715 	stw	fp,28(sp)
 100079c:	df000704 	addi	fp,sp,28
#ifdef DEBUG
  printf("Config Starting \n");
 10007a0:	01004074 	movhi	r4,257
 10007a4:	213dee04 	addi	r4,r4,-2120
 10007a8:	10027880 	call	1002788 <puts>
#endif

  ANTUART = fopen("/dev/uart_0", "r+");
 10007ac:	01004074 	movhi	r4,257
 10007b0:	213df304 	addi	r4,r4,-2100
 10007b4:	01404074 	movhi	r5,257
 10007b8:	297df604 	addi	r5,r5,-2088
 10007bc:	100149c0 	call	100149c <fopen>
 10007c0:	d0a01715 	stw	r2,-32676(gp)
  //ANTUART = open("/dev/uart_0" ,O_NONBLOCK | O_RDWR);
  if(ANTUART){;}else{
 10007c4:	d0a01717 	ldw	r2,-32676(gp)
 10007c8:	1000031e 	bne	r2,zero,10007d8 <setup+0x48>
#ifdef DEBUG
    printf("Cannot open ANTUART");
 10007cc:	01004074 	movhi	r4,257
 10007d0:	213df704 	addi	r4,r4,-2084
 10007d4:	10026a40 	call	10026a4 <printf>
//  if(alt_timestamp_start() <= 0){
//    printf("Timestamp init no working \n");
//  }

#ifdef DEBUG
  printf("Ticks Per Second: %i \n", alt_timestamp_freq());
 10007d8:	100d4e00 	call	100d4e0 <alt_timestamp_freq>
 10007dc:	01004074 	movhi	r4,257
 10007e0:	213dfc04 	addi	r4,r4,-2064
 10007e4:	100b883a 	mov	r5,r2
 10007e8:	10026a40 	call	10026a4 <printf>
#endif

  //alt_avalon_timer_sc_init (0x04011040, 2, 2, 1);

  // Reset
  sendPacket(MESG_SYSTEM_RESET_ID, 1, 0);
 10007ec:	01001284 	movi	r4,74
 10007f0:	01400044 	movi	r5,1
 10007f4:	000d883a 	mov	r6,zero
 10007f8:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 10007fc:	10006e40 	call	10006e4 <checkReturn>
 1000800:	1000021e 	bne	r2,zero,100080c <setup+0x7c>
 1000804:	0009883a 	mov	r4,zero
 1000808:	10001f00 	call	10001f0 <errorHandler>
  delay(1000);
 100080c:	0100fa04 	movi	r4,1000
 1000810:	10007440 	call	1000744 <delay>

  // Assign Channel
  //   Channel: 0
  //   Channel Type: for Receive Channel
  //   Network Number: 0 for Public Network
  sendPacket(MESG_ASSIGN_CHANNEL_ID, 3, ANT_CHAN, 0, ANT_NET);
 1000814:	d8000015 	stw	zero,0(sp)
 1000818:	01001084 	movi	r4,66
 100081c:	014000c4 	movi	r5,3
 1000820:	000d883a 	mov	r6,zero
 1000824:	000f883a 	mov	r7,zero
 1000828:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 100082c:	10006e40 	call	10006e4 <checkReturn>
 1000830:	1000021e 	bne	r2,zero,100083c <setup+0xac>
 1000834:	0009883a 	mov	r4,zero
 1000838:	10001f00 	call	10001f0 <errorHandler>
  //   Channel Number: 0
  //   Device Number LSB: 0 for a slave to match any device
  //   Device Number MSB: 0 for a slave to match any device
  //   Device Type: bit 7 0 for pairing request bit 6..0 for device type
  //   Transmission Type: 0 to match any transmission type
  sendPacket(MESG_CHANNEL_ID_ID, 5, ANT_CHAN, 0, 0, ANT_DEVICETYPE, 0);
 100083c:	d8000015 	stw	zero,0(sp)
 1000840:	00801e04 	movi	r2,120
 1000844:	d8800115 	stw	r2,4(sp)
 1000848:	d8000215 	stw	zero,8(sp)
 100084c:	01001444 	movi	r4,81
 1000850:	01400144 	movi	r5,5
 1000854:	000d883a 	mov	r6,zero
 1000858:	000f883a 	mov	r7,zero
 100085c:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 1000860:	10006e40 	call	10006e4 <checkReturn>
 1000864:	1000021e 	bne	r2,zero,1000870 <setup+0xe0>
 1000868:	0009883a 	mov	r4,zero
 100086c:	10001f00 	call	10001f0 <errorHandler>

  // Set Network Key
  //   Network Number
  //   Key
  sendPacket(MESG_NETWORK_KEY_ID, 9, ANT_NET, antNetKey[0], antNetKey[1], antNetKey[2], antNetKey[3], antNetKey[4], antNetKey[5], antNetKey[6], antNetKey[7]);
 1000870:	d0a00003 	ldbu	r2,-32768(gp)
 1000874:	10803fcc 	andi	r2,r2,255
 1000878:	00c04074 	movhi	r3,257
 100087c:	18c5de44 	addi	r3,r3,6009
 1000880:	18c00003 	ldbu	r3,0(r3)
 1000884:	1a403fcc 	andi	r9,r3,255
 1000888:	00c04074 	movhi	r3,257
 100088c:	18c5de84 	addi	r3,r3,6010
 1000890:	18c00003 	ldbu	r3,0(r3)
 1000894:	1a003fcc 	andi	r8,r3,255
 1000898:	00c04074 	movhi	r3,257
 100089c:	18c5dec4 	addi	r3,r3,6011
 10008a0:	18c00003 	ldbu	r3,0(r3)
 10008a4:	19c03fcc 	andi	r7,r3,255
 10008a8:	00c04074 	movhi	r3,257
 10008ac:	18c5df04 	addi	r3,r3,6012
 10008b0:	18c00003 	ldbu	r3,0(r3)
 10008b4:	19803fcc 	andi	r6,r3,255
 10008b8:	00c04074 	movhi	r3,257
 10008bc:	18c5df44 	addi	r3,r3,6013
 10008c0:	18c00003 	ldbu	r3,0(r3)
 10008c4:	19403fcc 	andi	r5,r3,255
 10008c8:	00c04074 	movhi	r3,257
 10008cc:	18c5df84 	addi	r3,r3,6014
 10008d0:	18c00003 	ldbu	r3,0(r3)
 10008d4:	19003fcc 	andi	r4,r3,255
 10008d8:	00c04074 	movhi	r3,257
 10008dc:	18c5dfc4 	addi	r3,r3,6015
 10008e0:	18c00003 	ldbu	r3,0(r3)
 10008e4:	18c03fcc 	andi	r3,r3,255
 10008e8:	da400015 	stw	r9,0(sp)
 10008ec:	da000115 	stw	r8,4(sp)
 10008f0:	d9c00215 	stw	r7,8(sp)
 10008f4:	d9800315 	stw	r6,12(sp)
 10008f8:	d9400415 	stw	r5,16(sp)
 10008fc:	d9000515 	stw	r4,20(sp)
 1000900:	d8c00615 	stw	r3,24(sp)
 1000904:	01001184 	movi	r4,70
 1000908:	01400244 	movi	r5,9
 100090c:	000d883a 	mov	r6,zero
 1000910:	100f883a 	mov	r7,r2
 1000914:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 1000918:	10006e40 	call	10006e4 <checkReturn>
 100091c:	1000021e 	bne	r2,zero,1000928 <setup+0x198>
 1000920:	0009883a 	mov	r4,zero
 1000924:	10001f00 	call	10001f0 <errorHandler>

  // Set Channel Search Timeout
  //   Channel
  //   Timeout: time for timeout in 2.5 sec increments
  sendPacket(MESG_CHANNEL_SEARCH_TIMEOUT_ID, 2, ANT_CHAN, ANT_TIMEOUT);
 1000928:	01001104 	movi	r4,68
 100092c:	01400084 	movi	r5,2
 1000930:	000d883a 	mov	r6,zero
 1000934:	01c00304 	movi	r7,12
 1000938:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 100093c:	10006e40 	call	10006e4 <checkReturn>
 1000940:	1000021e 	bne	r2,zero,100094c <setup+0x1bc>
 1000944:	0009883a 	mov	r4,zero
 1000948:	10001f00 	call	10001f0 <errorHandler>

  //ANT_send(1+2, MESG_CHANNEL_RADIO_FREQ_ID, CHAN0, FREQ);
  // Set Channel RF Frequency
  //   Channel
  //   Frequency = 2400 MHz + (FREQ * 1 MHz) (See page 59 of ANT MPaU) 0x39 = 2457 MHz
  sendPacket(MESG_CHANNEL_RADIO_FREQ_ID, 2, ANT_CHAN, ANT_FREQ);
 100094c:	01001144 	movi	r4,69
 1000950:	01400084 	movi	r5,2
 1000954:	000d883a 	mov	r6,zero
 1000958:	01c00e44 	movi	r7,57
 100095c:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 1000960:	10006e40 	call	10006e4 <checkReturn>
 1000964:	1000021e 	bne	r2,zero,1000970 <setup+0x1e0>
 1000968:	0009883a 	mov	r4,zero
 100096c:	10001f00 	call	10001f0 <errorHandler>

  // Set Channel Period
  sendPacket(MESG_CHANNEL_MESG_PERIOD_ID, 3, ANT_CHAN, (ANT_PERIOD & 0x00FF), ((ANT_PERIOD & 0xFF00) >> 8));
 1000970:	008007c4 	movi	r2,31
 1000974:	d8800015 	stw	r2,0(sp)
 1000978:	010010c4 	movi	r4,67
 100097c:	014000c4 	movi	r5,3
 1000980:	000d883a 	mov	r6,zero
 1000984:	01c02184 	movi	r7,134
 1000988:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 100098c:	10006e40 	call	10006e4 <checkReturn>
 1000990:	1000021e 	bne	r2,zero,100099c <setup+0x20c>
 1000994:	0009883a 	mov	r4,zero
 1000998:	10001f00 	call	10001f0 <errorHandler>

  //Open Channel
  sendPacket(MESG_OPEN_CHANNEL_ID, 1, ANT_CHAN);
 100099c:	010012c4 	movi	r4,75
 10009a0:	01400044 	movi	r5,1
 10009a4:	000d883a 	mov	r6,zero
 10009a8:	10003380 	call	1000338 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 10009ac:	10006e40 	call	10006e4 <checkReturn>
 10009b0:	1000021e 	bne	r2,zero,10009bc <setup+0x22c>
 10009b4:	0009883a 	mov	r4,zero
 10009b8:	10001f00 	call	10001f0 <errorHandler>

#ifdef DEBUG
  printf("Config Done");
 10009bc:	01004074 	movhi	r4,257
 10009c0:	213e0204 	addi	r4,r4,-2040
 10009c4:	10026a40 	call	10026a4 <printf>
#endif
}
 10009c8:	e037883a 	mov	sp,fp
 10009cc:	dfc00117 	ldw	ra,4(sp)
 10009d0:	df000017 	ldw	fp,0(sp)
 10009d4:	dec00204 	addi	sp,sp,8
 10009d8:	f800283a 	ret

010009dc <printHeader>:

void printHeader(const char * title) {
 10009dc:	defffd04 	addi	sp,sp,-12
 10009e0:	dfc00215 	stw	ra,8(sp)
 10009e4:	df000115 	stw	fp,4(sp)
 10009e8:	df000104 	addi	fp,sp,4
 10009ec:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
    printf("%i %i - %s",millis(), packetCount, title);
 10009f0:	10002280 	call	1000228 <millis>
 10009f4:	1007883a 	mov	r3,r2
 10009f8:	d0a01617 	ldw	r2,-32680(gp)
 10009fc:	01004074 	movhi	r4,257
 1000a00:	213e0504 	addi	r4,r4,-2028
 1000a04:	180b883a 	mov	r5,r3
 1000a08:	100d883a 	mov	r6,r2
 1000a0c:	e1ffff17 	ldw	r7,-4(fp)
 1000a10:	10026a40 	call	10026a4 <printf>
#endif
}
 1000a14:	e037883a 	mov	sp,fp
 1000a18:	dfc00117 	ldw	ra,4(sp)
 1000a1c:	df000017 	ldw	fp,0(sp)
 1000a20:	dec00204 	addi	sp,sp,8
 1000a24:	f800283a 	ret

01000a28 <readANT>:

void readANT(){
 1000a28:	deffe704 	addi	sp,sp,-100
 1000a2c:	dfc01815 	stw	ra,96(sp)
 1000a30:	df001715 	stw	fp,92(sp)
 1000a34:	df001704 	addi	fp,sp,92
      unsigned char packet[MAXPACKETLEN];
      int packetsRead;
      unsigned char msgId, msgSize;
      unsigned char *msgData;

      packetsRead = readPacket(packet, MAXPACKETLEN, PACKETREADTIMEOUT);
 1000a38:	e0bfec04 	addi	r2,fp,-80
 1000a3c:	1009883a 	mov	r4,r2
 1000a40:	01401404 	movi	r5,80
 1000a44:	01801904 	movi	r6,100
 1000a48:	10004d00 	call	10004d0 <readPacket>
 1000a4c:	e0bfe915 	stw	r2,-92(fp)
      if (packetsRead > 0) {
 1000a50:	e0bfe917 	ldw	r2,-92(fp)
 1000a54:	0080470e 	bge	zero,r2,1000b74 <readANT+0x14c>
        msgId = packet[2];
 1000a58:	e0bfec83 	ldbu	r2,-78(fp)
 1000a5c:	e0bfea05 	stb	r2,-88(fp)
        msgSize = packet[1];
 1000a60:	e0bfec43 	ldbu	r2,-79(fp)
 1000a64:	e0bfea45 	stb	r2,-87(fp)
        msgData = &packet[3];
 1000a68:	e0bfec04 	addi	r2,fp,-80
 1000a6c:	108000c4 	addi	r2,r2,3
 1000a70:	e0bfeb15 	stw	r2,-84(fp)

        switch (msgId) {
 1000a74:	e0bfea03 	ldbu	r2,-88(fp)
 1000a78:	10c013a0 	cmpeqi	r3,r2,78
 1000a7c:	1800121e 	bne	r3,zero,1000ac8 <readANT+0xa0>
 1000a80:	10c01520 	cmpeqi	r3,r2,84
 1000a84:	1800091e 	bne	r3,zero,1000aac <readANT+0x84>
 1000a88:	10801020 	cmpeqi	r2,r2,64
 1000a8c:	10003026 	beq	r2,zero,1000b50 <readANT+0x128>
          case MESG_RESPONSE_EVENT_ID:
            printHeader("MESG_RESPONSE_EVENT_ID: ");
 1000a90:	01004074 	movhi	r4,257
 1000a94:	213e0804 	addi	r4,r4,-2016
 1000a98:	10009dc0 	call	10009dc <printHeader>
            printPacket(packet);
 1000a9c:	e0bfec04 	addi	r2,fp,-80
 1000aa0:	1009883a 	mov	r4,r2
 1000aa4:	10004400 	call	1000440 <printPacket>
            break;
 1000aa8:	00003206 	br	1000b74 <readANT+0x14c>

          case MESG_CAPABILITIES_ID:
            printHeader("MESG_CAPABILITIES_ID: ");
 1000aac:	01004074 	movhi	r4,257
 1000ab0:	213e0f04 	addi	r4,r4,-1988
 1000ab4:	10009dc0 	call	10009dc <printHeader>
            printPacket(packet);
 1000ab8:	e0bfec04 	addi	r2,fp,-80
 1000abc:	1009883a 	mov	r4,r2
 1000ac0:	10004400 	call	1000440 <printPacket>
            break;
 1000ac4:	00002b06 	br	1000b74 <readANT+0x14c>

          case MESG_BROADCAST_DATA_ID:
            if (oldHeartRate != msgData[msgSize-1]) {
 1000ac8:	e0bfea43 	ldbu	r2,-87(fp)
 1000acc:	10bfffc4 	addi	r2,r2,-1
 1000ad0:	e0ffeb17 	ldw	r3,-84(fp)
 1000ad4:	1885883a 	add	r2,r3,r2
 1000ad8:	10c00003 	ldbu	r3,0(r2)
 1000adc:	d0a01403 	ldbu	r2,-32688(gp)
 1000ae0:	18c03fcc 	andi	r3,r3,255
 1000ae4:	10803fcc 	andi	r2,r2,255
 1000ae8:	18802126 	beq	r3,r2,1000b70 <readANT+0x148>
              oldHeartRate = msgData[msgSize-1];
 1000aec:	e0bfea43 	ldbu	r2,-87(fp)
 1000af0:	10bfffc4 	addi	r2,r2,-1
 1000af4:	e0ffeb17 	ldw	r3,-84(fp)
 1000af8:	1885883a 	add	r2,r3,r2
 1000afc:	10800003 	ldbu	r2,0(r2)
 1000b00:	d0a01405 	stb	r2,-32688(gp)
#ifdef DEBUG
              printHeader("New Heart Rate: ");
 1000b04:	01004074 	movhi	r4,257
 1000b08:	213e1504 	addi	r4,r4,-1964
 1000b0c:	10009dc0 	call	10009dc <printHeader>
              printf("%i \n", oldHeartRate);
 1000b10:	d0a01403 	ldbu	r2,-32688(gp)
 1000b14:	10803fcc 	andi	r2,r2,255
 1000b18:	01004074 	movhi	r4,257
 1000b1c:	213e1a04 	addi	r4,r4,-1944
 1000b20:	100b883a 	mov	r5,r2
 1000b24:	10026a40 	call	10026a4 <printf>
#endif
              IOWR(HEARTRATEOUT_BASE, 0, oldHeartRate); //write to parallel out
 1000b28:	d0a01403 	ldbu	r2,-32688(gp)
 1000b2c:	10c03fcc 	andi	r3,r2,255
 1000b30:	00808034 	movhi	r2,512
 1000b34:	10884404 	addi	r2,r2,8464
 1000b38:	10c00035 	stwio	r3,0(r2)
              IOWR(WDT_BASE, 2, 0xFF); //reset watchdog timer
 1000b3c:	00c03fc4 	movi	r3,255
 1000b40:	00808034 	movhi	r2,512
 1000b44:	10883204 	addi	r2,r2,8392
 1000b48:	10c00035 	stwio	r3,0(r2)
            }
            break;
 1000b4c:	00000806 	br	1000b70 <readANT+0x148>

          default:
            printHeader("MESG_ID_UKNOWN: ");
 1000b50:	01004074 	movhi	r4,257
 1000b54:	213e1c04 	addi	r4,r4,-1936
 1000b58:	10009dc0 	call	10009dc <printHeader>
            printPacket(packet);
 1000b5c:	e0bfec04 	addi	r2,fp,-80
 1000b60:	1009883a 	mov	r4,r2
 1000b64:	10004400 	call	1000440 <printPacket>
            break;
 1000b68:	0001883a 	nop
 1000b6c:	00000106 	br	1000b74 <readANT+0x14c>
              printf("%i \n", oldHeartRate);
#endif
              IOWR(HEARTRATEOUT_BASE, 0, oldHeartRate); //write to parallel out
              IOWR(WDT_BASE, 2, 0xFF); //reset watchdog timer
            }
            break;
 1000b70:	0001883a 	nop
            printHeader("MESG_ID_UKNOWN: ");
            printPacket(packet);
            break;
        }
      }
}
 1000b74:	e037883a 	mov	sp,fp
 1000b78:	dfc00117 	ldw	ra,4(sp)
 1000b7c:	df000017 	ldw	fp,0(sp)
 1000b80:	dec00204 	addi	sp,sp,8
 1000b84:	f800283a 	ret

01000b88 <main>:

int main() {
 1000b88:	defffe04 	addi	sp,sp,-8
 1000b8c:	dfc00115 	stw	ra,4(sp)
 1000b90:	df000015 	stw	fp,0(sp)
 1000b94:	d839883a 	mov	fp,sp
	IOWR(WDT_BASE, 1, 0x4);
 1000b98:	00c00104 	movi	r3,4
 1000b9c:	00808034 	movhi	r2,512
 1000ba0:	10883104 	addi	r2,r2,8388
 1000ba4:	10c00035 	stwio	r3,0(r2)
	IOWR(WDT_BASE, 2, 0xFF);
 1000ba8:	00c03fc4 	movi	r3,255
 1000bac:	00808034 	movhi	r2,512
 1000bb0:	10883204 	addi	r2,r2,8392
 1000bb4:	10c00035 	stwio	r3,0(r2)
    setup();
 1000bb8:	10007900 	call	1000790 <setup>

    while(1){
        readANT();
 1000bbc:	1000a280 	call	1000a28 <readANT>
    }
 1000bc0:	003ffe06 	br	1000bbc <main+0x34>

01000bc4 <__udivdi3>:
 1000bc4:	defff504 	addi	sp,sp,-44
 1000bc8:	dd000515 	stw	r20,20(sp)
 1000bcc:	dcc00415 	stw	r19,16(sp)
 1000bd0:	dc800315 	stw	r18,12(sp)
 1000bd4:	dc400215 	stw	r17,8(sp)
 1000bd8:	dc000115 	stw	r16,4(sp)
 1000bdc:	dfc00a15 	stw	ra,40(sp)
 1000be0:	df000915 	stw	fp,36(sp)
 1000be4:	ddc00815 	stw	r23,32(sp)
 1000be8:	dd800715 	stw	r22,28(sp)
 1000bec:	dd400615 	stw	r21,24(sp)
 1000bf0:	2025883a 	mov	r18,r4
 1000bf4:	2823883a 	mov	r17,r5
 1000bf8:	3021883a 	mov	r16,r6
 1000bfc:	2027883a 	mov	r19,r4
 1000c00:	2829883a 	mov	r20,r5
 1000c04:	3800451e 	bne	r7,zero,1000d1c <__udivdi3+0x158>
 1000c08:	2980652e 	bgeu	r5,r6,1000da0 <__udivdi3+0x1dc>
 1000c0c:	00bfffd4 	movui	r2,65535
 1000c10:	1180b436 	bltu	r2,r6,1000ee4 <__udivdi3+0x320>
 1000c14:	00803fc4 	movi	r2,255
 1000c18:	11816636 	bltu	r2,r6,10011b4 <__udivdi3+0x5f0>
 1000c1c:	0005883a 	mov	r2,zero
 1000c20:	0007883a 	mov	r3,zero
 1000c24:	3084d83a 	srl	r2,r6,r2
 1000c28:	01004074 	movhi	r4,257
 1000c2c:	213e2104 	addi	r4,r4,-1916
 1000c30:	2085883a 	add	r2,r4,r2
 1000c34:	10800003 	ldbu	r2,0(r2)
 1000c38:	10c7883a 	add	r3,r2,r3
 1000c3c:	00800804 	movi	r2,32
 1000c40:	10c5c83a 	sub	r2,r2,r3
 1000c44:	10000526 	beq	r2,zero,1000c5c <__udivdi3+0x98>
 1000c48:	88a2983a 	sll	r17,r17,r2
 1000c4c:	90c6d83a 	srl	r3,r18,r3
 1000c50:	30a0983a 	sll	r16,r6,r2
 1000c54:	90a6983a 	sll	r19,r18,r2
 1000c58:	88e8b03a 	or	r20,r17,r3
 1000c5c:	8022d43a 	srli	r17,r16,16
 1000c60:	a009883a 	mov	r4,r20
 1000c64:	857fffcc 	andi	r21,r16,65535
 1000c68:	880b883a 	mov	r5,r17
 1000c6c:	100133c0 	call	100133c <__umodsi3>
 1000c70:	a009883a 	mov	r4,r20
 1000c74:	880b883a 	mov	r5,r17
 1000c78:	102d883a 	mov	r22,r2
 1000c7c:	10013340 	call	1001334 <__udivsi3>
 1000c80:	1009883a 	mov	r4,r2
 1000c84:	a80b883a 	mov	r5,r21
 1000c88:	1025883a 	mov	r18,r2
 1000c8c:	10013440 	call	1001344 <__mulsi3>
 1000c90:	1009883a 	mov	r4,r2
 1000c94:	b006943a 	slli	r3,r22,16
 1000c98:	9804d43a 	srli	r2,r19,16
 1000c9c:	1886b03a 	or	r3,r3,r2
 1000ca0:	1900052e 	bgeu	r3,r4,1000cb8 <__udivdi3+0xf4>
 1000ca4:	1c07883a 	add	r3,r3,r16
 1000ca8:	90bfffc4 	addi	r2,r18,-1
 1000cac:	1c000136 	bltu	r3,r16,1000cb4 <__udivdi3+0xf0>
 1000cb0:	19015536 	bltu	r3,r4,1001208 <__udivdi3+0x644>
 1000cb4:	1025883a 	mov	r18,r2
 1000cb8:	1929c83a 	sub	r20,r3,r4
 1000cbc:	880b883a 	mov	r5,r17
 1000cc0:	a009883a 	mov	r4,r20
 1000cc4:	100133c0 	call	100133c <__umodsi3>
 1000cc8:	102d883a 	mov	r22,r2
 1000ccc:	880b883a 	mov	r5,r17
 1000cd0:	a009883a 	mov	r4,r20
 1000cd4:	b02c943a 	slli	r22,r22,16
 1000cd8:	10013340 	call	1001334 <__udivsi3>
 1000cdc:	1009883a 	mov	r4,r2
 1000ce0:	a80b883a 	mov	r5,r21
 1000ce4:	9cffffcc 	andi	r19,r19,65535
 1000ce8:	1023883a 	mov	r17,r2
 1000cec:	b4e6b03a 	or	r19,r22,r19
 1000cf0:	10013440 	call	1001344 <__mulsi3>
 1000cf4:	9880052e 	bgeu	r19,r2,1000d0c <__udivdi3+0x148>
 1000cf8:	9c27883a 	add	r19,r19,r16
 1000cfc:	88ffffc4 	addi	r3,r17,-1
 1000d00:	9c011436 	bltu	r19,r16,1001154 <__udivdi3+0x590>
 1000d04:	9881132e 	bgeu	r19,r2,1001154 <__udivdi3+0x590>
 1000d08:	8c7fff84 	addi	r17,r17,-2
 1000d0c:	9004943a 	slli	r2,r18,16
 1000d10:	0007883a 	mov	r3,zero
 1000d14:	8884b03a 	or	r2,r17,r2
 1000d18:	00001506 	br	1000d70 <__udivdi3+0x1ac>
 1000d1c:	29c06a36 	bltu	r5,r7,1000ec8 <__udivdi3+0x304>
 1000d20:	00bfffd4 	movui	r2,65535
 1000d24:	11c06a2e 	bgeu	r2,r7,1000ed0 <__udivdi3+0x30c>
 1000d28:	00804034 	movhi	r2,256
 1000d2c:	10bfffc4 	addi	r2,r2,-1
 1000d30:	11c11436 	bltu	r2,r7,1001184 <__udivdi3+0x5c0>
 1000d34:	00c00404 	movi	r3,16
 1000d38:	180b883a 	mov	r5,r3
 1000d3c:	38c6d83a 	srl	r3,r7,r3
 1000d40:	01004074 	movhi	r4,257
 1000d44:	213e2104 	addi	r4,r4,-1916
 1000d48:	04000804 	movi	r16,32
 1000d4c:	20c7883a 	add	r3,r4,r3
 1000d50:	18800003 	ldbu	r2,0(r3)
 1000d54:	1145883a 	add	r2,r2,r5
 1000d58:	80a1c83a 	sub	r16,r16,r2
 1000d5c:	80006e1e 	bne	r16,zero,1000f18 <__udivdi3+0x354>
 1000d60:	0007883a 	mov	r3,zero
 1000d64:	3c406a36 	bltu	r7,r17,1000f10 <__udivdi3+0x34c>
 1000d68:	9180692e 	bgeu	r18,r6,1000f10 <__udivdi3+0x34c>
 1000d6c:	0005883a 	mov	r2,zero
 1000d70:	dfc00a17 	ldw	ra,40(sp)
 1000d74:	df000917 	ldw	fp,36(sp)
 1000d78:	ddc00817 	ldw	r23,32(sp)
 1000d7c:	dd800717 	ldw	r22,28(sp)
 1000d80:	dd400617 	ldw	r21,24(sp)
 1000d84:	dd000517 	ldw	r20,20(sp)
 1000d88:	dcc00417 	ldw	r19,16(sp)
 1000d8c:	dc800317 	ldw	r18,12(sp)
 1000d90:	dc400217 	ldw	r17,8(sp)
 1000d94:	dc000117 	ldw	r16,4(sp)
 1000d98:	dec00b04 	addi	sp,sp,44
 1000d9c:	f800283a 	ret
 1000da0:	3000041e 	bne	r6,zero,1000db4 <__udivdi3+0x1f0>
 1000da4:	01000044 	movi	r4,1
 1000da8:	000b883a 	mov	r5,zero
 1000dac:	10013340 	call	1001334 <__udivsi3>
 1000db0:	1021883a 	mov	r16,r2
 1000db4:	00bfffd4 	movui	r2,65535
 1000db8:	1400502e 	bgeu	r2,r16,1000efc <__udivdi3+0x338>
 1000dbc:	00804034 	movhi	r2,256
 1000dc0:	10bfffc4 	addi	r2,r2,-1
 1000dc4:	1400f536 	bltu	r2,r16,100119c <__udivdi3+0x5d8>
 1000dc8:	00800404 	movi	r2,16
 1000dcc:	1007883a 	mov	r3,r2
 1000dd0:	8084d83a 	srl	r2,r16,r2
 1000dd4:	01004074 	movhi	r4,257
 1000dd8:	213e2104 	addi	r4,r4,-1916
 1000ddc:	2085883a 	add	r2,r4,r2
 1000de0:	10800003 	ldbu	r2,0(r2)
 1000de4:	10c7883a 	add	r3,r2,r3
 1000de8:	00800804 	movi	r2,32
 1000dec:	10c5c83a 	sub	r2,r2,r3
 1000df0:	1000a01e 	bne	r2,zero,1001074 <__udivdi3+0x4b0>
 1000df4:	8028d43a 	srli	r20,r16,16
 1000df8:	8c23c83a 	sub	r17,r17,r16
 1000dfc:	857fffcc 	andi	r21,r16,65535
 1000e00:	00c00044 	movi	r3,1
 1000e04:	8809883a 	mov	r4,r17
 1000e08:	a00b883a 	mov	r5,r20
 1000e0c:	d8c00015 	stw	r3,0(sp)
 1000e10:	100133c0 	call	100133c <__umodsi3>
 1000e14:	8809883a 	mov	r4,r17
 1000e18:	a00b883a 	mov	r5,r20
 1000e1c:	102d883a 	mov	r22,r2
 1000e20:	10013340 	call	1001334 <__udivsi3>
 1000e24:	1009883a 	mov	r4,r2
 1000e28:	a80b883a 	mov	r5,r21
 1000e2c:	1025883a 	mov	r18,r2
 1000e30:	10013440 	call	1001344 <__mulsi3>
 1000e34:	1009883a 	mov	r4,r2
 1000e38:	b00c943a 	slli	r6,r22,16
 1000e3c:	9804d43a 	srli	r2,r19,16
 1000e40:	d8c00017 	ldw	r3,0(sp)
 1000e44:	308cb03a 	or	r6,r6,r2
 1000e48:	3100052e 	bgeu	r6,r4,1000e60 <__udivdi3+0x29c>
 1000e4c:	340d883a 	add	r6,r6,r16
 1000e50:	90bfffc4 	addi	r2,r18,-1
 1000e54:	34000136 	bltu	r6,r16,1000e5c <__udivdi3+0x298>
 1000e58:	3100e836 	bltu	r6,r4,10011fc <__udivdi3+0x638>
 1000e5c:	1025883a 	mov	r18,r2
 1000e60:	3123c83a 	sub	r17,r6,r4
 1000e64:	8809883a 	mov	r4,r17
 1000e68:	a00b883a 	mov	r5,r20
 1000e6c:	d8c00015 	stw	r3,0(sp)
 1000e70:	100133c0 	call	100133c <__umodsi3>
 1000e74:	102d883a 	mov	r22,r2
 1000e78:	8809883a 	mov	r4,r17
 1000e7c:	a00b883a 	mov	r5,r20
 1000e80:	b02c943a 	slli	r22,r22,16
 1000e84:	10013340 	call	1001334 <__udivsi3>
 1000e88:	1009883a 	mov	r4,r2
 1000e8c:	a80b883a 	mov	r5,r21
 1000e90:	9cffffcc 	andi	r19,r19,65535
 1000e94:	1023883a 	mov	r17,r2
 1000e98:	b4e6b03a 	or	r19,r22,r19
 1000e9c:	10013440 	call	1001344 <__mulsi3>
 1000ea0:	d8c00017 	ldw	r3,0(sp)
 1000ea4:	9880052e 	bgeu	r19,r2,1000ebc <__udivdi3+0x2f8>
 1000ea8:	9c27883a 	add	r19,r19,r16
 1000eac:	893fffc4 	addi	r4,r17,-1
 1000eb0:	9c00aa36 	bltu	r19,r16,100115c <__udivdi3+0x598>
 1000eb4:	9880a92e 	bgeu	r19,r2,100115c <__udivdi3+0x598>
 1000eb8:	8c7fff84 	addi	r17,r17,-2
 1000ebc:	9004943a 	slli	r2,r18,16
 1000ec0:	8884b03a 	or	r2,r17,r2
 1000ec4:	003faa06 	br	1000d70 <__udivdi3+0x1ac>
 1000ec8:	0007883a 	mov	r3,zero
 1000ecc:	003fa706 	br	1000d6c <__udivdi3+0x1a8>
 1000ed0:	00803fc4 	movi	r2,255
 1000ed4:	11c0ae36 	bltu	r2,r7,1001190 <__udivdi3+0x5cc>
 1000ed8:	0007883a 	mov	r3,zero
 1000edc:	000b883a 	mov	r5,zero
 1000ee0:	003f9606 	br	1000d3c <__udivdi3+0x178>
 1000ee4:	00804034 	movhi	r2,256
 1000ee8:	10bfffc4 	addi	r2,r2,-1
 1000eec:	1180ae36 	bltu	r2,r6,10011a8 <__udivdi3+0x5e4>
 1000ef0:	00800404 	movi	r2,16
 1000ef4:	1007883a 	mov	r3,r2
 1000ef8:	003f4a06 	br	1000c24 <__udivdi3+0x60>
 1000efc:	00803fc4 	movi	r2,255
 1000f00:	1400af36 	bltu	r2,r16,10011c0 <__udivdi3+0x5fc>
 1000f04:	0005883a 	mov	r2,zero
 1000f08:	0007883a 	mov	r3,zero
 1000f0c:	003fb006 	br	1000dd0 <__udivdi3+0x20c>
 1000f10:	00800044 	movi	r2,1
 1000f14:	003f9606 	br	1000d70 <__udivdi3+0x1ac>
 1000f18:	3c0e983a 	sll	r7,r7,r16
 1000f1c:	3086d83a 	srl	r3,r6,r2
 1000f20:	88aed83a 	srl	r23,r17,r2
 1000f24:	9084d83a 	srl	r2,r18,r2
 1000f28:	38e6b03a 	or	r19,r7,r3
 1000f2c:	9828d43a 	srli	r20,r19,16
 1000f30:	8c22983a 	sll	r17,r17,r16
 1000f34:	b809883a 	mov	r4,r23
 1000f38:	a00b883a 	mov	r5,r20
 1000f3c:	342a983a 	sll	r21,r6,r16
 1000f40:	88a2b03a 	or	r17,r17,r2
 1000f44:	100133c0 	call	100133c <__umodsi3>
 1000f48:	b809883a 	mov	r4,r23
 1000f4c:	a00b883a 	mov	r5,r20
 1000f50:	1039883a 	mov	fp,r2
 1000f54:	9dbfffcc 	andi	r22,r19,65535
 1000f58:	10013340 	call	1001334 <__udivsi3>
 1000f5c:	1009883a 	mov	r4,r2
 1000f60:	b00b883a 	mov	r5,r22
 1000f64:	102f883a 	mov	r23,r2
 1000f68:	10013440 	call	1001344 <__mulsi3>
 1000f6c:	1009883a 	mov	r4,r2
 1000f70:	e00e943a 	slli	r7,fp,16
 1000f74:	8804d43a 	srli	r2,r17,16
 1000f78:	388eb03a 	or	r7,r7,r2
 1000f7c:	3900042e 	bgeu	r7,r4,1000f90 <__udivdi3+0x3cc>
 1000f80:	3ccf883a 	add	r7,r7,r19
 1000f84:	b8bfffc4 	addi	r2,r23,-1
 1000f88:	3cc0942e 	bgeu	r7,r19,10011dc <__udivdi3+0x618>
 1000f8c:	102f883a 	mov	r23,r2
 1000f90:	3939c83a 	sub	fp,r7,r4
 1000f94:	a00b883a 	mov	r5,r20
 1000f98:	e009883a 	mov	r4,fp
 1000f9c:	100133c0 	call	100133c <__umodsi3>
 1000fa0:	a00b883a 	mov	r5,r20
 1000fa4:	e009883a 	mov	r4,fp
 1000fa8:	d8800015 	stw	r2,0(sp)
 1000fac:	10013340 	call	1001334 <__udivsi3>
 1000fb0:	1009883a 	mov	r4,r2
 1000fb4:	b00b883a 	mov	r5,r22
 1000fb8:	1029883a 	mov	r20,r2
 1000fbc:	10013440 	call	1001344 <__mulsi3>
 1000fc0:	d8c00017 	ldw	r3,0(sp)
 1000fc4:	8c7fffcc 	andi	r17,r17,65535
 1000fc8:	1806943a 	slli	r3,r3,16
 1000fcc:	1c46b03a 	or	r3,r3,r17
 1000fd0:	1880042e 	bgeu	r3,r2,1000fe4 <__udivdi3+0x420>
 1000fd4:	1cc7883a 	add	r3,r3,r19
 1000fd8:	a13fffc4 	addi	r4,r20,-1
 1000fdc:	1cc07b2e 	bgeu	r3,r19,10011cc <__udivdi3+0x608>
 1000fe0:	2029883a 	mov	r20,r4
 1000fe4:	b82e943a 	slli	r23,r23,16
 1000fe8:	a822d43a 	srli	r17,r21,16
 1000fec:	ad7fffcc 	andi	r21,r21,65535
 1000ff0:	a5e8b03a 	or	r20,r20,r23
 1000ff4:	a5bfffcc 	andi	r22,r20,65535
 1000ff8:	b009883a 	mov	r4,r22
 1000ffc:	a80b883a 	mov	r5,r21
 1001000:	18afc83a 	sub	r23,r3,r2
 1001004:	a026d43a 	srli	r19,r20,16
 1001008:	10013440 	call	1001344 <__mulsi3>
 100100c:	b009883a 	mov	r4,r22
 1001010:	880b883a 	mov	r5,r17
 1001014:	1039883a 	mov	fp,r2
 1001018:	10013440 	call	1001344 <__mulsi3>
 100101c:	a80b883a 	mov	r5,r21
 1001020:	9809883a 	mov	r4,r19
 1001024:	102d883a 	mov	r22,r2
 1001028:	10013440 	call	1001344 <__mulsi3>
 100102c:	9809883a 	mov	r4,r19
 1001030:	880b883a 	mov	r5,r17
 1001034:	102b883a 	mov	r21,r2
 1001038:	10013440 	call	1001344 <__mulsi3>
 100103c:	100b883a 	mov	r5,r2
 1001040:	e004d43a 	srli	r2,fp,16
 1001044:	ad89883a 	add	r4,r21,r22
 1001048:	2089883a 	add	r4,r4,r2
 100104c:	2540022e 	bgeu	r4,r21,1001058 <__udivdi3+0x494>
 1001050:	00800074 	movhi	r2,1
 1001054:	288b883a 	add	r5,r5,r2
 1001058:	2004d43a 	srli	r2,r4,16
 100105c:	288b883a 	add	r5,r5,r2
 1001060:	b9404536 	bltu	r23,r5,1001178 <__udivdi3+0x5b4>
 1001064:	b9403f26 	beq	r23,r5,1001164 <__udivdi3+0x5a0>
 1001068:	a005883a 	mov	r2,r20
 100106c:	0007883a 	mov	r3,zero
 1001070:	003f3f06 	br	1000d70 <__udivdi3+0x1ac>
 1001074:	80a0983a 	sll	r16,r16,r2
 1001078:	88eed83a 	srl	r23,r17,r3
 100107c:	90c6d83a 	srl	r3,r18,r3
 1001080:	8028d43a 	srli	r20,r16,16
 1001084:	88a2983a 	sll	r17,r17,r2
 1001088:	b809883a 	mov	r4,r23
 100108c:	a00b883a 	mov	r5,r20
 1001090:	88ecb03a 	or	r22,r17,r3
 1001094:	90a6983a 	sll	r19,r18,r2
 1001098:	100133c0 	call	100133c <__umodsi3>
 100109c:	b809883a 	mov	r4,r23
 10010a0:	a00b883a 	mov	r5,r20
 10010a4:	1023883a 	mov	r17,r2
 10010a8:	857fffcc 	andi	r21,r16,65535
 10010ac:	10013340 	call	1001334 <__udivsi3>
 10010b0:	1009883a 	mov	r4,r2
 10010b4:	a80b883a 	mov	r5,r21
 10010b8:	102f883a 	mov	r23,r2
 10010bc:	10013440 	call	1001344 <__mulsi3>
 10010c0:	1009883a 	mov	r4,r2
 10010c4:	880a943a 	slli	r5,r17,16
 10010c8:	b004d43a 	srli	r2,r22,16
 10010cc:	288ab03a 	or	r5,r5,r2
 10010d0:	2900062e 	bgeu	r5,r4,10010ec <__udivdi3+0x528>
 10010d4:	2c0b883a 	add	r5,r5,r16
 10010d8:	b8bfffc4 	addi	r2,r23,-1
 10010dc:	2c004536 	bltu	r5,r16,10011f4 <__udivdi3+0x630>
 10010e0:	2900442e 	bgeu	r5,r4,10011f4 <__udivdi3+0x630>
 10010e4:	bdffff84 	addi	r23,r23,-2
 10010e8:	2c0b883a 	add	r5,r5,r16
 10010ec:	2925c83a 	sub	r18,r5,r4
 10010f0:	9009883a 	mov	r4,r18
 10010f4:	a00b883a 	mov	r5,r20
 10010f8:	100133c0 	call	100133c <__umodsi3>
 10010fc:	1023883a 	mov	r17,r2
 1001100:	9009883a 	mov	r4,r18
 1001104:	a00b883a 	mov	r5,r20
 1001108:	8822943a 	slli	r17,r17,16
 100110c:	10013340 	call	1001334 <__udivsi3>
 1001110:	1009883a 	mov	r4,r2
 1001114:	a80b883a 	mov	r5,r21
 1001118:	b5bfffcc 	andi	r22,r22,65535
 100111c:	1025883a 	mov	r18,r2
 1001120:	8da2b03a 	or	r17,r17,r22
 1001124:	10013440 	call	1001344 <__mulsi3>
 1001128:	8880062e 	bgeu	r17,r2,1001144 <__udivdi3+0x580>
 100112c:	8c23883a 	add	r17,r17,r16
 1001130:	90ffffc4 	addi	r3,r18,-1
 1001134:	8c002d36 	bltu	r17,r16,10011ec <__udivdi3+0x628>
 1001138:	88802c2e 	bgeu	r17,r2,10011ec <__udivdi3+0x628>
 100113c:	94bfff84 	addi	r18,r18,-2
 1001140:	8c23883a 	add	r17,r17,r16
 1001144:	b806943a 	slli	r3,r23,16
 1001148:	88a3c83a 	sub	r17,r17,r2
 100114c:	90c6b03a 	or	r3,r18,r3
 1001150:	003f2c06 	br	1000e04 <__udivdi3+0x240>
 1001154:	1823883a 	mov	r17,r3
 1001158:	003eec06 	br	1000d0c <__udivdi3+0x148>
 100115c:	2023883a 	mov	r17,r4
 1001160:	003f5606 	br	1000ebc <__udivdi3+0x2f8>
 1001164:	2008943a 	slli	r4,r4,16
 1001168:	9420983a 	sll	r16,r18,r16
 100116c:	e73fffcc 	andi	fp,fp,65535
 1001170:	2709883a 	add	r4,r4,fp
 1001174:	813fbc2e 	bgeu	r16,r4,1001068 <__udivdi3+0x4a4>
 1001178:	a0bfffc4 	addi	r2,r20,-1
 100117c:	0007883a 	mov	r3,zero
 1001180:	003efb06 	br	1000d70 <__udivdi3+0x1ac>
 1001184:	00c00604 	movi	r3,24
 1001188:	180b883a 	mov	r5,r3
 100118c:	003eeb06 	br	1000d3c <__udivdi3+0x178>
 1001190:	00c00204 	movi	r3,8
 1001194:	180b883a 	mov	r5,r3
 1001198:	003ee806 	br	1000d3c <__udivdi3+0x178>
 100119c:	00800604 	movi	r2,24
 10011a0:	1007883a 	mov	r3,r2
 10011a4:	003f0a06 	br	1000dd0 <__udivdi3+0x20c>
 10011a8:	00800604 	movi	r2,24
 10011ac:	1007883a 	mov	r3,r2
 10011b0:	003e9c06 	br	1000c24 <__udivdi3+0x60>
 10011b4:	00800204 	movi	r2,8
 10011b8:	1007883a 	mov	r3,r2
 10011bc:	003e9906 	br	1000c24 <__udivdi3+0x60>
 10011c0:	00800204 	movi	r2,8
 10011c4:	1007883a 	mov	r3,r2
 10011c8:	003f0106 	br	1000dd0 <__udivdi3+0x20c>
 10011cc:	18bf842e 	bgeu	r3,r2,1000fe0 <__udivdi3+0x41c>
 10011d0:	a53fff84 	addi	r20,r20,-2
 10011d4:	1cc7883a 	add	r3,r3,r19
 10011d8:	003f8206 	br	1000fe4 <__udivdi3+0x420>
 10011dc:	393f6b2e 	bgeu	r7,r4,1000f8c <__udivdi3+0x3c8>
 10011e0:	bdffff84 	addi	r23,r23,-2
 10011e4:	3ccf883a 	add	r7,r7,r19
 10011e8:	003f6906 	br	1000f90 <__udivdi3+0x3cc>
 10011ec:	1825883a 	mov	r18,r3
 10011f0:	003fd406 	br	1001144 <__udivdi3+0x580>
 10011f4:	102f883a 	mov	r23,r2
 10011f8:	003fbc06 	br	10010ec <__udivdi3+0x528>
 10011fc:	94bfff84 	addi	r18,r18,-2
 1001200:	340d883a 	add	r6,r6,r16
 1001204:	003f1606 	br	1000e60 <__udivdi3+0x29c>
 1001208:	94bfff84 	addi	r18,r18,-2
 100120c:	1c07883a 	add	r3,r3,r16
 1001210:	003ea906 	br	1000cb8 <__udivdi3+0xf4>

01001214 <udivmodsi4>:
 1001214:	2005883a 	mov	r2,r4
 1001218:	2900182e 	bgeu	r5,r4,100127c <udivmodsi4+0x68>
 100121c:	28001716 	blt	r5,zero,100127c <udivmodsi4+0x68>
 1001220:	01000804 	movi	r4,32
 1001224:	00c00044 	movi	r3,1
 1001228:	00000206 	br	1001234 <udivmodsi4+0x20>
 100122c:	20001126 	beq	r4,zero,1001274 <udivmodsi4+0x60>
 1001230:	28000516 	blt	r5,zero,1001248 <udivmodsi4+0x34>
 1001234:	294b883a 	add	r5,r5,r5
 1001238:	213fffc4 	addi	r4,r4,-1
 100123c:	18c7883a 	add	r3,r3,r3
 1001240:	28bffa36 	bltu	r5,r2,100122c <udivmodsi4+0x18>
 1001244:	18000b26 	beq	r3,zero,1001274 <udivmodsi4+0x60>
 1001248:	0009883a 	mov	r4,zero
 100124c:	11400236 	bltu	r2,r5,1001258 <udivmodsi4+0x44>
 1001250:	1145c83a 	sub	r2,r2,r5
 1001254:	20c8b03a 	or	r4,r4,r3
 1001258:	1806d07a 	srli	r3,r3,1
 100125c:	280ad07a 	srli	r5,r5,1
 1001260:	183ffa1e 	bne	r3,zero,100124c <udivmodsi4+0x38>
 1001264:	3000021e 	bne	r6,zero,1001270 <udivmodsi4+0x5c>
 1001268:	2005883a 	mov	r2,r4
 100126c:	f800283a 	ret
 1001270:	f800283a 	ret
 1001274:	0009883a 	mov	r4,zero
 1001278:	003ffa06 	br	1001264 <udivmodsi4+0x50>
 100127c:	00c00044 	movi	r3,1
 1001280:	0009883a 	mov	r4,zero
 1001284:	003ff106 	br	100124c <udivmodsi4+0x38>

01001288 <__divsi3>:
 1001288:	defffe04 	addi	sp,sp,-8
 100128c:	dfc00115 	stw	ra,4(sp)
 1001290:	dc000015 	stw	r16,0(sp)
 1001294:	20000a16 	blt	r4,zero,10012c0 <__divsi3+0x38>
 1001298:	0021883a 	mov	r16,zero
 100129c:	28000b16 	blt	r5,zero,10012cc <__divsi3+0x44>
 10012a0:	000d883a 	mov	r6,zero
 10012a4:	10012140 	call	1001214 <udivmodsi4>
 10012a8:	80000126 	beq	r16,zero,10012b0 <__divsi3+0x28>
 10012ac:	0085c83a 	sub	r2,zero,r2
 10012b0:	dfc00117 	ldw	ra,4(sp)
 10012b4:	dc000017 	ldw	r16,0(sp)
 10012b8:	dec00204 	addi	sp,sp,8
 10012bc:	f800283a 	ret
 10012c0:	0109c83a 	sub	r4,zero,r4
 10012c4:	04000044 	movi	r16,1
 10012c8:	283ff50e 	bge	r5,zero,10012a0 <__divsi3+0x18>
 10012cc:	014bc83a 	sub	r5,zero,r5
 10012d0:	8400005c 	xori	r16,r16,1
 10012d4:	003ff206 	br	10012a0 <__divsi3+0x18>

010012d8 <__modsi3>:
 10012d8:	deffff04 	addi	sp,sp,-4
 10012dc:	dfc00015 	stw	ra,0(sp)
 10012e0:	20000516 	blt	r4,zero,10012f8 <__modsi3+0x20>
 10012e4:	28000c16 	blt	r5,zero,1001318 <__modsi3+0x40>
 10012e8:	01800044 	movi	r6,1
 10012ec:	dfc00017 	ldw	ra,0(sp)
 10012f0:	dec00104 	addi	sp,sp,4
 10012f4:	10012141 	jmpi	1001214 <udivmodsi4>
 10012f8:	0109c83a 	sub	r4,zero,r4
 10012fc:	28000b16 	blt	r5,zero,100132c <__modsi3+0x54>
 1001300:	01800044 	movi	r6,1
 1001304:	10012140 	call	1001214 <udivmodsi4>
 1001308:	0085c83a 	sub	r2,zero,r2
 100130c:	dfc00017 	ldw	ra,0(sp)
 1001310:	dec00104 	addi	sp,sp,4
 1001314:	f800283a 	ret
 1001318:	014bc83a 	sub	r5,zero,r5
 100131c:	01800044 	movi	r6,1
 1001320:	dfc00017 	ldw	ra,0(sp)
 1001324:	dec00104 	addi	sp,sp,4
 1001328:	10012141 	jmpi	1001214 <udivmodsi4>
 100132c:	014bc83a 	sub	r5,zero,r5
 1001330:	003ff306 	br	1001300 <__modsi3+0x28>

01001334 <__udivsi3>:
 1001334:	000d883a 	mov	r6,zero
 1001338:	10012141 	jmpi	1001214 <udivmodsi4>

0100133c <__umodsi3>:
 100133c:	01800044 	movi	r6,1
 1001340:	10012141 	jmpi	1001214 <udivmodsi4>

01001344 <__mulsi3>:
 1001344:	0005883a 	mov	r2,zero
 1001348:	20000726 	beq	r4,zero,1001368 <__mulsi3+0x24>
 100134c:	20c0004c 	andi	r3,r4,1
 1001350:	2008d07a 	srli	r4,r4,1
 1001354:	18000126 	beq	r3,zero,100135c <__mulsi3+0x18>
 1001358:	1145883a 	add	r2,r2,r5
 100135c:	294b883a 	add	r5,r5,r5
 1001360:	203ffa1e 	bne	r4,zero,100134c <__mulsi3+0x8>
 1001364:	f800283a 	ret
 1001368:	f800283a 	ret

0100136c <_fopen_r>:
 100136c:	defffa04 	addi	sp,sp,-24
 1001370:	dcc00415 	stw	r19,16(sp)
 1001374:	2827883a 	mov	r19,r5
 1001378:	300b883a 	mov	r5,r6
 100137c:	d80d883a 	mov	r6,sp
 1001380:	dc800315 	stw	r18,12(sp)
 1001384:	dc400215 	stw	r17,8(sp)
 1001388:	dfc00515 	stw	ra,20(sp)
 100138c:	dc000115 	stw	r16,4(sp)
 1001390:	2025883a 	mov	r18,r4
 1001394:	1006aa80 	call	1006aa8 <__sflags>
 1001398:	1023883a 	mov	r17,r2
 100139c:	10002926 	beq	r2,zero,1001444 <_fopen_r+0xd8>
 10013a0:	9009883a 	mov	r4,r18
 10013a4:	100696c0 	call	100696c <__sfp>
 10013a8:	1021883a 	mov	r16,r2
 10013ac:	10002526 	beq	r2,zero,1001444 <_fopen_r+0xd8>
 10013b0:	d9800017 	ldw	r6,0(sp)
 10013b4:	9009883a 	mov	r4,r18
 10013b8:	980b883a 	mov	r5,r19
 10013bc:	01c06d84 	movi	r7,438
 10013c0:	100260c0 	call	100260c <_open_r>
 10013c4:	10001c16 	blt	r2,zero,1001438 <_fopen_r+0xcc>
 10013c8:	8080038d 	sth	r2,14(r16)
 10013cc:	00804034 	movhi	r2,256
 10013d0:	108a9a04 	addi	r2,r2,10856
 10013d4:	80800815 	stw	r2,32(r16)
 10013d8:	00804034 	movhi	r2,256
 10013dc:	108aaf04 	addi	r2,r2,10940
 10013e0:	80800915 	stw	r2,36(r16)
 10013e4:	00804034 	movhi	r2,256
 10013e8:	108ad104 	addi	r2,r2,11076
 10013ec:	88c0400c 	andi	r3,r17,256
 10013f0:	80800a15 	stw	r2,40(r16)
 10013f4:	00804034 	movhi	r2,256
 10013f8:	108ae804 	addi	r2,r2,11168
 10013fc:	80800b15 	stw	r2,44(r16)
 1001400:	18bfffcc 	andi	r2,r3,65535
 1001404:	10a0001c 	xori	r2,r2,32768
 1001408:	8440030d 	sth	r17,12(r16)
 100140c:	84000715 	stw	r16,28(r16)
 1001410:	10a00004 	addi	r2,r2,-32768
 1001414:	1000141e 	bne	r2,zero,1001468 <_fopen_r+0xfc>
 1001418:	8005883a 	mov	r2,r16
 100141c:	dfc00517 	ldw	ra,20(sp)
 1001420:	dcc00417 	ldw	r19,16(sp)
 1001424:	dc800317 	ldw	r18,12(sp)
 1001428:	dc400217 	ldw	r17,8(sp)
 100142c:	dc000117 	ldw	r16,4(sp)
 1001430:	dec00604 	addi	sp,sp,24
 1001434:	f800283a 	ret
 1001438:	1006a680 	call	1006a68 <__sfp_lock_acquire>
 100143c:	8000030d 	sth	zero,12(r16)
 1001440:	1006a6c0 	call	1006a6c <__sfp_lock_release>
 1001444:	0021883a 	mov	r16,zero
 1001448:	8005883a 	mov	r2,r16
 100144c:	dfc00517 	ldw	ra,20(sp)
 1001450:	dcc00417 	ldw	r19,16(sp)
 1001454:	dc800317 	ldw	r18,12(sp)
 1001458:	dc400217 	ldw	r17,8(sp)
 100145c:	dc000117 	ldw	r16,4(sp)
 1001460:	dec00604 	addi	sp,sp,24
 1001464:	f800283a 	ret
 1001468:	9009883a 	mov	r4,r18
 100146c:	800b883a 	mov	r5,r16
 1001470:	000d883a 	mov	r6,zero
 1001474:	01c00084 	movi	r7,2
 1001478:	10014b80 	call	10014b8 <_fseek_r>
 100147c:	8005883a 	mov	r2,r16
 1001480:	dfc00517 	ldw	ra,20(sp)
 1001484:	dcc00417 	ldw	r19,16(sp)
 1001488:	dc800317 	ldw	r18,12(sp)
 100148c:	dc400217 	ldw	r17,8(sp)
 1001490:	dc000117 	ldw	r16,4(sp)
 1001494:	dec00604 	addi	sp,sp,24
 1001498:	f800283a 	ret

0100149c <fopen>:
 100149c:	00c04074 	movhi	r3,257
 10014a0:	18c5e104 	addi	r3,r3,6020
 10014a4:	2005883a 	mov	r2,r4
 10014a8:	19000017 	ldw	r4,0(r3)
 10014ac:	280d883a 	mov	r6,r5
 10014b0:	100b883a 	mov	r5,r2
 10014b4:	100136c1 	jmpi	100136c <_fopen_r>

010014b8 <_fseek_r>:
 10014b8:	deffe804 	addi	sp,sp,-96
 10014bc:	dd001315 	stw	r20,76(sp)
 10014c0:	dc801115 	stw	r18,68(sp)
 10014c4:	dc401015 	stw	r17,64(sp)
 10014c8:	dc000f15 	stw	r16,60(sp)
 10014cc:	dfc01715 	stw	ra,92(sp)
 10014d0:	ddc01615 	stw	r23,88(sp)
 10014d4:	dd801515 	stw	r22,84(sp)
 10014d8:	dd401415 	stw	r21,80(sp)
 10014dc:	dcc01215 	stw	r19,72(sp)
 10014e0:	2023883a 	mov	r17,r4
 10014e4:	2821883a 	mov	r16,r5
 10014e8:	3029883a 	mov	r20,r6
 10014ec:	3825883a 	mov	r18,r7
 10014f0:	20000226 	beq	r4,zero,10014fc <_fseek_r+0x44>
 10014f4:	20800e17 	ldw	r2,56(r4)
 10014f8:	10006226 	beq	r2,zero,1001684 <_fseek_r+0x1cc>
 10014fc:	80c0030b 	ldhu	r3,12(r16)
 1001500:	00804204 	movi	r2,264
 1001504:	18c0420c 	andi	r3,r3,264
 1001508:	18806326 	beq	r3,r2,1001698 <_fseek_r+0x1e0>
 100150c:	84c00a17 	ldw	r19,40(r16)
 1001510:	98010226 	beq	r19,zero,100191c <_fseek_r+0x464>
 1001514:	00800044 	movi	r2,1
 1001518:	90803d26 	beq	r18,r2,1001610 <_fseek_r+0x158>
 100151c:	00800084 	movi	r2,2
 1001520:	90800126 	beq	r18,r2,1001528 <_fseek_r+0x70>
 1001524:	90002c1e 	bne	r18,zero,10015d8 <_fseek_r+0x120>
 1001528:	80800417 	ldw	r2,16(r16)
 100152c:	002d883a 	mov	r22,zero
 1001530:	002b883a 	mov	r21,zero
 1001534:	1000e526 	beq	r2,zero,10018cc <_fseek_r+0x414>
 1001538:	80c0030b 	ldhu	r3,12(r16)
 100153c:	1882068c 	andi	r2,r3,2074
 1001540:	1809883a 	mov	r4,r3
 1001544:	10000a1e 	bne	r2,zero,1001570 <_fseek_r+0xb8>
 1001548:	1881000c 	andi	r2,r3,1024
 100154c:	10bfffcc 	andi	r2,r2,65535
 1001550:	10a0001c 	xori	r2,r2,32768
 1001554:	10a00004 	addi	r2,r2,-32768
 1001558:	1000631e 	bne	r2,zero,10016e8 <_fseek_r+0x230>
 100155c:	00804034 	movhi	r2,256
 1001560:	108ad104 	addi	r2,r2,11076
 1001564:	98805026 	beq	r19,r2,10016a8 <_fseek_r+0x1f0>
 1001568:	18c20014 	ori	r3,r3,2048
 100156c:	80c0030d 	sth	r3,12(r16)
 1001570:	8809883a 	mov	r4,r17
 1001574:	800b883a 	mov	r5,r16
 1001578:	10065a40 	call	10065a4 <_fflush_r>
 100157c:	1000181e 	bne	r2,zero,10015e0 <_fseek_r+0x128>
 1001580:	81400717 	ldw	r5,28(r16)
 1001584:	8809883a 	mov	r4,r17
 1001588:	a00d883a 	mov	r6,r20
 100158c:	900f883a 	mov	r7,r18
 1001590:	983ee83a 	callr	r19
 1001594:	00ffffc4 	movi	r3,-1
 1001598:	10c01126 	beq	r2,r3,10015e0 <_fseek_r+0x128>
 100159c:	81400c17 	ldw	r5,48(r16)
 10015a0:	28000526 	beq	r5,zero,10015b8 <_fseek_r+0x100>
 10015a4:	80801004 	addi	r2,r16,64
 10015a8:	28800226 	beq	r5,r2,10015b4 <_fseek_r+0xfc>
 10015ac:	8809883a 	mov	r4,r17
 10015b0:	1006c7c0 	call	1006c7c <_free_r>
 10015b4:	80000c15 	stw	zero,48(r16)
 10015b8:	8080030b 	ldhu	r2,12(r16)
 10015bc:	80c00417 	ldw	r3,16(r16)
 10015c0:	80000115 	stw	zero,4(r16)
 10015c4:	10bdf7cc 	andi	r2,r2,63455
 10015c8:	8080030d 	sth	r2,12(r16)
 10015cc:	80c00015 	stw	r3,0(r16)
 10015d0:	0005883a 	mov	r2,zero
 10015d4:	00000306 	br	10015e4 <_fseek_r+0x12c>
 10015d8:	00800584 	movi	r2,22
 10015dc:	88800015 	stw	r2,0(r17)
 10015e0:	00bfffc4 	movi	r2,-1
 10015e4:	dfc01717 	ldw	ra,92(sp)
 10015e8:	ddc01617 	ldw	r23,88(sp)
 10015ec:	dd801517 	ldw	r22,84(sp)
 10015f0:	dd401417 	ldw	r21,80(sp)
 10015f4:	dd001317 	ldw	r20,76(sp)
 10015f8:	dcc01217 	ldw	r19,72(sp)
 10015fc:	dc801117 	ldw	r18,68(sp)
 1001600:	dc401017 	ldw	r17,64(sp)
 1001604:	dc000f17 	ldw	r16,60(sp)
 1001608:	dec01804 	addi	sp,sp,96
 100160c:	f800283a 	ret
 1001610:	8809883a 	mov	r4,r17
 1001614:	800b883a 	mov	r5,r16
 1001618:	10065a40 	call	10065a4 <_fflush_r>
 100161c:	8080030b 	ldhu	r2,12(r16)
 1001620:	10c4000c 	andi	r3,r2,4096
 1001624:	18ffffcc 	andi	r3,r3,65535
 1001628:	18e0001c 	xori	r3,r3,32768
 100162c:	18e00004 	addi	r3,r3,-32768
 1001630:	18007d26 	beq	r3,zero,1001828 <_fseek_r+0x370>
 1001634:	85401417 	ldw	r21,80(r16)
 1001638:	10c0010c 	andi	r3,r2,4
 100163c:	18ffffcc 	andi	r3,r3,65535
 1001640:	18e0001c 	xori	r3,r3,32768
 1001644:	18e00004 	addi	r3,r3,-32768
 1001648:	18005f1e 	bne	r3,zero,10017c8 <_fseek_r+0x310>
 100164c:	1080020c 	andi	r2,r2,8
 1001650:	10bfffcc 	andi	r2,r2,65535
 1001654:	10a0001c 	xori	r2,r2,32768
 1001658:	10a00004 	addi	r2,r2,-32768
 100165c:	10007026 	beq	r2,zero,1001820 <_fseek_r+0x368>
 1001660:	80c00017 	ldw	r3,0(r16)
 1001664:	80800417 	ldw	r2,16(r16)
 1001668:	18000226 	beq	r3,zero,1001674 <_fseek_r+0x1bc>
 100166c:	1887c83a 	sub	r3,r3,r2
 1001670:	a8eb883a 	add	r21,r21,r3
 1001674:	a569883a 	add	r20,r20,r21
 1001678:	05800044 	movi	r22,1
 100167c:	0025883a 	mov	r18,zero
 1001680:	003fac06 	br	1001534 <_fseek_r+0x7c>
 1001684:	10068600 	call	1006860 <__sinit>
 1001688:	80c0030b 	ldhu	r3,12(r16)
 100168c:	00804204 	movi	r2,264
 1001690:	18c0420c 	andi	r3,r3,264
 1001694:	18bf9d1e 	bne	r3,r2,100150c <_fseek_r+0x54>
 1001698:	8809883a 	mov	r4,r17
 100169c:	800b883a 	mov	r5,r16
 10016a0:	10065a40 	call	10065a4 <_fflush_r>
 10016a4:	003f9906 	br	100150c <_fseek_r+0x54>
 10016a8:	8140038f 	ldh	r5,14(r16)
 10016ac:	283fae16 	blt	r5,zero,1001568 <_fseek_r+0xb0>
 10016b0:	8809883a 	mov	r4,r17
 10016b4:	d80d883a 	mov	r6,sp
 10016b8:	10019500 	call	1001950 <_fstat_r>
 10016bc:	1000741e 	bne	r2,zero,1001890 <_fseek_r+0x3d8>
 10016c0:	d8c00117 	ldw	r3,4(sp)
 10016c4:	00a00014 	movui	r2,32768
 10016c8:	18fc000c 	andi	r3,r3,61440
 10016cc:	1880701e 	bne	r3,r2,1001890 <_fseek_r+0x3d8>
 10016d0:	8100030b 	ldhu	r4,12(r16)
 10016d4:	00810004 	movi	r2,1024
 10016d8:	80801315 	stw	r2,76(r16)
 10016dc:	2084b03a 	or	r2,r4,r2
 10016e0:	1009883a 	mov	r4,r2
 10016e4:	8080030d 	sth	r2,12(r16)
 10016e8:	90003f1e 	bne	r18,zero,10017e8 <_fseek_r+0x330>
 10016ec:	a02f883a 	mov	r23,r20
 10016f0:	b000461e 	bne	r22,zero,100180c <_fseek_r+0x354>
 10016f4:	2084000c 	andi	r2,r4,4096
 10016f8:	10bfffcc 	andi	r2,r2,65535
 10016fc:	10a0001c 	xori	r2,r2,32768
 1001700:	10a00004 	addi	r2,r2,-32768
 1001704:	10007526 	beq	r2,zero,10018dc <_fseek_r+0x424>
 1001708:	80801417 	ldw	r2,80(r16)
 100170c:	80c00117 	ldw	r3,4(r16)
 1001710:	81400c17 	ldw	r5,48(r16)
 1001714:	10ebc83a 	sub	r21,r2,r3
 1001718:	28007926 	beq	r5,zero,1001900 <_fseek_r+0x448>
 100171c:	81c00f17 	ldw	r7,60(r16)
 1001720:	a9ebc83a 	sub	r21,r21,r7
 1001724:	80800e17 	ldw	r2,56(r16)
 1001728:	81800417 	ldw	r6,16(r16)
 100172c:	a8eb883a 	add	r21,r21,r3
 1001730:	1185c83a 	sub	r2,r2,r6
 1001734:	a8abc83a 	sub	r21,r21,r2
 1001738:	3885883a 	add	r2,r7,r2
 100173c:	2208000c 	andi	r8,r4,8192
 1001740:	423fffcc 	andi	r8,r8,65535
 1001744:	4220001c 	xori	r8,r8,32768
 1001748:	42200004 	addi	r8,r8,-32768
 100174c:	4000031e 	bne	r8,zero,100175c <_fseek_r+0x2a4>
 1001750:	bd400216 	blt	r23,r21,100175c <_fseek_r+0x2a4>
 1001754:	a887883a 	add	r3,r21,r2
 1001758:	b8c03d36 	bltu	r23,r3,1001850 <_fseek_r+0x398>
 100175c:	85401317 	ldw	r21,76(r16)
 1001760:	81400717 	ldw	r5,28(r16)
 1001764:	8809883a 	mov	r4,r17
 1001768:	056bc83a 	sub	r21,zero,r21
 100176c:	bd6a703a 	and	r21,r23,r21
 1001770:	a80d883a 	mov	r6,r21
 1001774:	000f883a 	mov	r7,zero
 1001778:	983ee83a 	callr	r19
 100177c:	00ffffc4 	movi	r3,-1
 1001780:	10ff7b26 	beq	r2,r3,1001570 <_fseek_r+0xb8>
 1001784:	80800417 	ldw	r2,16(r16)
 1001788:	81400c17 	ldw	r5,48(r16)
 100178c:	80000115 	stw	zero,4(r16)
 1001790:	80800015 	stw	r2,0(r16)
 1001794:	28000526 	beq	r5,zero,10017ac <_fseek_r+0x2f4>
 1001798:	80801004 	addi	r2,r16,64
 100179c:	28800226 	beq	r5,r2,10017a8 <_fseek_r+0x2f0>
 10017a0:	8809883a 	mov	r4,r17
 10017a4:	1006c7c0 	call	1006c7c <_free_r>
 10017a8:	80000c15 	stw	zero,48(r16)
 10017ac:	8080030b 	ldhu	r2,12(r16)
 10017b0:	bd6fc83a 	sub	r23,r23,r21
 10017b4:	10bff7cc 	andi	r2,r2,65503
 10017b8:	8080030d 	sth	r2,12(r16)
 10017bc:	b800361e 	bne	r23,zero,1001898 <_fseek_r+0x3e0>
 10017c0:	0005883a 	mov	r2,zero
 10017c4:	003f8706 	br	10015e4 <_fseek_r+0x12c>
 10017c8:	80c00117 	ldw	r3,4(r16)
 10017cc:	80800c17 	ldw	r2,48(r16)
 10017d0:	a8ebc83a 	sub	r21,r21,r3
 10017d4:	10001226 	beq	r2,zero,1001820 <_fseek_r+0x368>
 10017d8:	80c00f17 	ldw	r3,60(r16)
 10017dc:	80800417 	ldw	r2,16(r16)
 10017e0:	a8ebc83a 	sub	r21,r21,r3
 10017e4:	003fa306 	br	1001674 <_fseek_r+0x1bc>
 10017e8:	8140038f 	ldh	r5,14(r16)
 10017ec:	8809883a 	mov	r4,r17
 10017f0:	d80d883a 	mov	r6,sp
 10017f4:	10019500 	call	1001950 <_fstat_r>
 10017f8:	103f5d1e 	bne	r2,zero,1001570 <_fseek_r+0xb8>
 10017fc:	ddc00417 	ldw	r23,16(sp)
 1001800:	8100030b 	ldhu	r4,12(r16)
 1001804:	a5ef883a 	add	r23,r20,r23
 1001808:	b03fba26 	beq	r22,zero,10016f4 <_fseek_r+0x23c>
 100180c:	81400c17 	ldw	r5,48(r16)
 1001810:	80c00117 	ldw	r3,4(r16)
 1001814:	28003a26 	beq	r5,zero,1001900 <_fseek_r+0x448>
 1001818:	81c00f17 	ldw	r7,60(r16)
 100181c:	003fc106 	br	1001724 <_fseek_r+0x26c>
 1001820:	80800417 	ldw	r2,16(r16)
 1001824:	003f9306 	br	1001674 <_fseek_r+0x1bc>
 1001828:	81400717 	ldw	r5,28(r16)
 100182c:	8809883a 	mov	r4,r17
 1001830:	000d883a 	mov	r6,zero
 1001834:	900f883a 	mov	r7,r18
 1001838:	983ee83a 	callr	r19
 100183c:	102b883a 	mov	r21,r2
 1001840:	00bfffc4 	movi	r2,-1
 1001844:	a8bf6626 	beq	r21,r2,10015e0 <_fseek_r+0x128>
 1001848:	8080030b 	ldhu	r2,12(r16)
 100184c:	003f7a06 	br	1001638 <_fseek_r+0x180>
 1001850:	bd6bc83a 	sub	r21,r23,r21
 1001854:	354d883a 	add	r6,r6,r21
 1001858:	1545c83a 	sub	r2,r2,r21
 100185c:	81800015 	stw	r6,0(r16)
 1001860:	80800115 	stw	r2,4(r16)
 1001864:	28000626 	beq	r5,zero,1001880 <_fseek_r+0x3c8>
 1001868:	80801004 	addi	r2,r16,64
 100186c:	28800326 	beq	r5,r2,100187c <_fseek_r+0x3c4>
 1001870:	8809883a 	mov	r4,r17
 1001874:	1006c7c0 	call	1006c7c <_free_r>
 1001878:	8100030b 	ldhu	r4,12(r16)
 100187c:	80000c15 	stw	zero,48(r16)
 1001880:	213ff7cc 	andi	r4,r4,65503
 1001884:	8100030d 	sth	r4,12(r16)
 1001888:	0005883a 	mov	r2,zero
 100188c:	003f5506 	br	10015e4 <_fseek_r+0x12c>
 1001890:	80c0030b 	ldhu	r3,12(r16)
 1001894:	003f3406 	br	1001568 <_fseek_r+0xb0>
 1001898:	8809883a 	mov	r4,r17
 100189c:	800b883a 	mov	r5,r16
 10018a0:	10027b80 	call	10027b8 <__srefill_r>
 10018a4:	103f321e 	bne	r2,zero,1001570 <_fseek_r+0xb8>
 10018a8:	80800117 	ldw	r2,4(r16)
 10018ac:	15ff3036 	bltu	r2,r23,1001570 <_fseek_r+0xb8>
 10018b0:	80c00017 	ldw	r3,0(r16)
 10018b4:	15c5c83a 	sub	r2,r2,r23
 10018b8:	80800115 	stw	r2,4(r16)
 10018bc:	1def883a 	add	r23,r3,r23
 10018c0:	85c00015 	stw	r23,0(r16)
 10018c4:	0005883a 	mov	r2,zero
 10018c8:	003f4606 	br	10015e4 <_fseek_r+0x12c>
 10018cc:	8809883a 	mov	r4,r17
 10018d0:	800b883a 	mov	r5,r16
 10018d4:	1001ba00 	call	1001ba0 <__smakebuf_r>
 10018d8:	003f1706 	br	1001538 <_fseek_r+0x80>
 10018dc:	81400717 	ldw	r5,28(r16)
 10018e0:	8809883a 	mov	r4,r17
 10018e4:	000d883a 	mov	r6,zero
 10018e8:	01c00044 	movi	r7,1
 10018ec:	983ee83a 	callr	r19
 10018f0:	00ffffc4 	movi	r3,-1
 10018f4:	10ff1e26 	beq	r2,r3,1001570 <_fseek_r+0xb8>
 10018f8:	8100030b 	ldhu	r4,12(r16)
 10018fc:	003f8306 	br	100170c <_fseek_r+0x254>
 1001900:	80800017 	ldw	r2,0(r16)
 1001904:	81800417 	ldw	r6,16(r16)
 1001908:	000b883a 	mov	r5,zero
 100190c:	1185c83a 	sub	r2,r2,r6
 1001910:	a8abc83a 	sub	r21,r21,r2
 1001914:	1885883a 	add	r2,r3,r2
 1001918:	003f8806 	br	100173c <_fseek_r+0x284>
 100191c:	00800744 	movi	r2,29
 1001920:	88800015 	stw	r2,0(r17)
 1001924:	00bfffc4 	movi	r2,-1
 1001928:	003f2e06 	br	10015e4 <_fseek_r+0x12c>

0100192c <fseek>:
 100192c:	00804074 	movhi	r2,257
 1001930:	1085e104 	addi	r2,r2,6020
 1001934:	2007883a 	mov	r3,r4
 1001938:	11000017 	ldw	r4,0(r2)
 100193c:	2805883a 	mov	r2,r5
 1001940:	300f883a 	mov	r7,r6
 1001944:	180b883a 	mov	r5,r3
 1001948:	100d883a 	mov	r6,r2
 100194c:	10014b81 	jmpi	10014b8 <_fseek_r>

01001950 <_fstat_r>:
 1001950:	defffd04 	addi	sp,sp,-12
 1001954:	dc400115 	stw	r17,4(sp)
 1001958:	dc000015 	stw	r16,0(sp)
 100195c:	2023883a 	mov	r17,r4
 1001960:	04004074 	movhi	r16,257
 1001964:	8405f604 	addi	r16,r16,6104
 1001968:	2809883a 	mov	r4,r5
 100196c:	300b883a 	mov	r5,r6
 1001970:	dfc00215 	stw	ra,8(sp)
 1001974:	80000015 	stw	zero,0(r16)
 1001978:	100b2b80 	call	100b2b8 <fstat>
 100197c:	00ffffc4 	movi	r3,-1
 1001980:	10c00526 	beq	r2,r3,1001998 <_fstat_r+0x48>
 1001984:	dfc00217 	ldw	ra,8(sp)
 1001988:	dc400117 	ldw	r17,4(sp)
 100198c:	dc000017 	ldw	r16,0(sp)
 1001990:	dec00304 	addi	sp,sp,12
 1001994:	f800283a 	ret
 1001998:	80c00017 	ldw	r3,0(r16)
 100199c:	183ff926 	beq	r3,zero,1001984 <_fstat_r+0x34>
 10019a0:	88c00015 	stw	r3,0(r17)
 10019a4:	dfc00217 	ldw	ra,8(sp)
 10019a8:	dc400117 	ldw	r17,4(sp)
 10019ac:	dc000017 	ldw	r16,0(sp)
 10019b0:	dec00304 	addi	sp,sp,12
 10019b4:	f800283a 	ret

010019b8 <_fwrite_r>:
 10019b8:	defff604 	addi	sp,sp,-40
 10019bc:	dc000515 	stw	r16,20(sp)
 10019c0:	d9400315 	stw	r5,12(sp)
 10019c4:	2021883a 	mov	r16,r4
 10019c8:	300b883a 	mov	r5,r6
 10019cc:	3809883a 	mov	r4,r7
 10019d0:	dcc00815 	stw	r19,32(sp)
 10019d4:	dc800715 	stw	r18,28(sp)
 10019d8:	dc400615 	stw	r17,24(sp)
 10019dc:	dfc00915 	stw	ra,36(sp)
 10019e0:	3027883a 	mov	r19,r6
 10019e4:	3823883a 	mov	r17,r7
 10019e8:	10013440 	call	1001344 <__mulsi3>
 10019ec:	1025883a 	mov	r18,r2
 10019f0:	d8800415 	stw	r2,16(sp)
 10019f4:	d8800215 	stw	r2,8(sp)
 10019f8:	d8800304 	addi	r2,sp,12
 10019fc:	d8800015 	stw	r2,0(sp)
 1001a00:	00800044 	movi	r2,1
 1001a04:	d8800115 	stw	r2,4(sp)
 1001a08:	80000226 	beq	r16,zero,1001a14 <_fwrite_r+0x5c>
 1001a0c:	80800e17 	ldw	r2,56(r16)
 1001a10:	10001226 	beq	r2,zero,1001a5c <_fwrite_r+0xa4>
 1001a14:	d9400a17 	ldw	r5,40(sp)
 1001a18:	8009883a 	mov	r4,r16
 1001a1c:	d80d883a 	mov	r6,sp
 1001a20:	1006f4c0 	call	1006f4c <__sfvwrite_r>
 1001a24:	10000526 	beq	r2,zero,1001a3c <_fwrite_r+0x84>
 1001a28:	d9000217 	ldw	r4,8(sp)
 1001a2c:	980b883a 	mov	r5,r19
 1001a30:	9109c83a 	sub	r4,r18,r4
 1001a34:	10013340 	call	1001334 <__udivsi3>
 1001a38:	1023883a 	mov	r17,r2
 1001a3c:	8805883a 	mov	r2,r17
 1001a40:	dfc00917 	ldw	ra,36(sp)
 1001a44:	dcc00817 	ldw	r19,32(sp)
 1001a48:	dc800717 	ldw	r18,28(sp)
 1001a4c:	dc400617 	ldw	r17,24(sp)
 1001a50:	dc000517 	ldw	r16,20(sp)
 1001a54:	dec00a04 	addi	sp,sp,40
 1001a58:	f800283a 	ret
 1001a5c:	8009883a 	mov	r4,r16
 1001a60:	10068600 	call	1006860 <__sinit>
 1001a64:	003feb06 	br	1001a14 <_fwrite_r+0x5c>

01001a68 <fwrite>:
 1001a68:	00804074 	movhi	r2,257
 1001a6c:	1085e104 	addi	r2,r2,6020
 1001a70:	2011883a 	mov	r8,r4
 1001a74:	11000017 	ldw	r4,0(r2)
 1001a78:	defffe04 	addi	sp,sp,-8
 1001a7c:	2807883a 	mov	r3,r5
 1001a80:	3005883a 	mov	r2,r6
 1001a84:	d9c00015 	stw	r7,0(sp)
 1001a88:	400b883a 	mov	r5,r8
 1001a8c:	180d883a 	mov	r6,r3
 1001a90:	100f883a 	mov	r7,r2
 1001a94:	dfc00115 	stw	ra,4(sp)
 1001a98:	10019b80 	call	10019b8 <_fwrite_r>
 1001a9c:	dfc00117 	ldw	ra,4(sp)
 1001aa0:	dec00204 	addi	sp,sp,8
 1001aa4:	f800283a 	ret

01001aa8 <_getc_r>:
 1001aa8:	defffd04 	addi	sp,sp,-12
 1001aac:	dc000115 	stw	r16,4(sp)
 1001ab0:	dfc00215 	stw	ra,8(sp)
 1001ab4:	2021883a 	mov	r16,r4
 1001ab8:	20000226 	beq	r4,zero,1001ac4 <_getc_r+0x1c>
 1001abc:	20800e17 	ldw	r2,56(r4)
 1001ac0:	10000c26 	beq	r2,zero,1001af4 <_getc_r+0x4c>
 1001ac4:	28800117 	ldw	r2,4(r5)
 1001ac8:	10bfffc4 	addi	r2,r2,-1
 1001acc:	28800115 	stw	r2,4(r5)
 1001ad0:	10000c16 	blt	r2,zero,1001b04 <_getc_r+0x5c>
 1001ad4:	28c00017 	ldw	r3,0(r5)
 1001ad8:	18800003 	ldbu	r2,0(r3)
 1001adc:	18c00044 	addi	r3,r3,1
 1001ae0:	28c00015 	stw	r3,0(r5)
 1001ae4:	dfc00217 	ldw	ra,8(sp)
 1001ae8:	dc000117 	ldw	r16,4(sp)
 1001aec:	dec00304 	addi	sp,sp,12
 1001af0:	f800283a 	ret
 1001af4:	d9400015 	stw	r5,0(sp)
 1001af8:	10068600 	call	1006860 <__sinit>
 1001afc:	d9400017 	ldw	r5,0(sp)
 1001b00:	003ff006 	br	1001ac4 <_getc_r+0x1c>
 1001b04:	8009883a 	mov	r4,r16
 1001b08:	dfc00217 	ldw	ra,8(sp)
 1001b0c:	dc000117 	ldw	r16,4(sp)
 1001b10:	dec00304 	addi	sp,sp,12
 1001b14:	10029a41 	jmpi	10029a4 <__srget_r>

01001b18 <getc>:
 1001b18:	defffd04 	addi	sp,sp,-12
 1001b1c:	dc400115 	stw	r17,4(sp)
 1001b20:	04404074 	movhi	r17,257
 1001b24:	8c45e104 	addi	r17,r17,6020
 1001b28:	88800017 	ldw	r2,0(r17)
 1001b2c:	dc000015 	stw	r16,0(sp)
 1001b30:	dfc00215 	stw	ra,8(sp)
 1001b34:	2021883a 	mov	r16,r4
 1001b38:	10000226 	beq	r2,zero,1001b44 <getc+0x2c>
 1001b3c:	10c00e17 	ldw	r3,56(r2)
 1001b40:	18000d26 	beq	r3,zero,1001b78 <getc+0x60>
 1001b44:	80800117 	ldw	r2,4(r16)
 1001b48:	10bfffc4 	addi	r2,r2,-1
 1001b4c:	80800115 	stw	r2,4(r16)
 1001b50:	10000c16 	blt	r2,zero,1001b84 <getc+0x6c>
 1001b54:	80c00017 	ldw	r3,0(r16)
 1001b58:	18800003 	ldbu	r2,0(r3)
 1001b5c:	18c00044 	addi	r3,r3,1
 1001b60:	80c00015 	stw	r3,0(r16)
 1001b64:	dfc00217 	ldw	ra,8(sp)
 1001b68:	dc400117 	ldw	r17,4(sp)
 1001b6c:	dc000017 	ldw	r16,0(sp)
 1001b70:	dec00304 	addi	sp,sp,12
 1001b74:	f800283a 	ret
 1001b78:	1009883a 	mov	r4,r2
 1001b7c:	10068600 	call	1006860 <__sinit>
 1001b80:	003ff006 	br	1001b44 <getc+0x2c>
 1001b84:	89000017 	ldw	r4,0(r17)
 1001b88:	800b883a 	mov	r5,r16
 1001b8c:	dfc00217 	ldw	ra,8(sp)
 1001b90:	dc400117 	ldw	r17,4(sp)
 1001b94:	dc000017 	ldw	r16,0(sp)
 1001b98:	dec00304 	addi	sp,sp,12
 1001b9c:	10029a41 	jmpi	10029a4 <__srget_r>

01001ba0 <__smakebuf_r>:
 1001ba0:	2880030b 	ldhu	r2,12(r5)
 1001ba4:	deffed04 	addi	sp,sp,-76
 1001ba8:	dc401015 	stw	r17,64(sp)
 1001bac:	10c0008c 	andi	r3,r2,2
 1001bb0:	18ffffcc 	andi	r3,r3,65535
 1001bb4:	18e0001c 	xori	r3,r3,32768
 1001bb8:	dc000f15 	stw	r16,60(sp)
 1001bbc:	dfc01215 	stw	ra,72(sp)
 1001bc0:	dc801115 	stw	r18,68(sp)
 1001bc4:	18e00004 	addi	r3,r3,-32768
 1001bc8:	2821883a 	mov	r16,r5
 1001bcc:	2023883a 	mov	r17,r4
 1001bd0:	1800381e 	bne	r3,zero,1001cb4 <__smakebuf_r+0x114>
 1001bd4:	2940038f 	ldh	r5,14(r5)
 1001bd8:	28002d16 	blt	r5,zero,1001c90 <__smakebuf_r+0xf0>
 1001bdc:	d80d883a 	mov	r6,sp
 1001be0:	10019500 	call	1001950 <_fstat_r>
 1001be4:	10002916 	blt	r2,zero,1001c8c <__smakebuf_r+0xec>
 1001be8:	d8800117 	ldw	r2,4(sp)
 1001bec:	00e00014 	movui	r3,32768
 1001bf0:	10bc000c 	andi	r2,r2,61440
 1001bf4:	10c03c26 	beq	r2,r3,1001ce8 <__smakebuf_r+0x148>
 1001bf8:	80c0030b 	ldhu	r3,12(r16)
 1001bfc:	18c20014 	ori	r3,r3,2048
 1001c00:	80c0030d 	sth	r3,12(r16)
 1001c04:	00c80004 	movi	r3,8192
 1001c08:	10c00c1e 	bne	r2,r3,1001c3c <__smakebuf_r+0x9c>
 1001c0c:	8140038f 	ldh	r5,14(r16)
 1001c10:	8809883a 	mov	r4,r17
 1001c14:	10075900 	call	1007590 <_isatty_r>
 1001c18:	10000826 	beq	r2,zero,1001c3c <__smakebuf_r+0x9c>
 1001c1c:	80c0030b 	ldhu	r3,12(r16)
 1001c20:	808010c4 	addi	r2,r16,67
 1001c24:	80800015 	stw	r2,0(r16)
 1001c28:	18c00054 	ori	r3,r3,1
 1001c2c:	80800415 	stw	r2,16(r16)
 1001c30:	00800044 	movi	r2,1
 1001c34:	80c0030d 	sth	r3,12(r16)
 1001c38:	80800515 	stw	r2,20(r16)
 1001c3c:	04810004 	movi	r18,1024
 1001c40:	8809883a 	mov	r4,r17
 1001c44:	900b883a 	mov	r5,r18
 1001c48:	1001d480 	call	1001d48 <_malloc_r>
 1001c4c:	10003026 	beq	r2,zero,1001d10 <__smakebuf_r+0x170>
 1001c50:	80c0030b 	ldhu	r3,12(r16)
 1001c54:	01004034 	movhi	r4,256
 1001c58:	2119f304 	addi	r4,r4,26572
 1001c5c:	89000f15 	stw	r4,60(r17)
 1001c60:	18c02014 	ori	r3,r3,128
 1001c64:	80c0030d 	sth	r3,12(r16)
 1001c68:	80800015 	stw	r2,0(r16)
 1001c6c:	80800415 	stw	r2,16(r16)
 1001c70:	84800515 	stw	r18,20(r16)
 1001c74:	dfc01217 	ldw	ra,72(sp)
 1001c78:	dc801117 	ldw	r18,68(sp)
 1001c7c:	dc401017 	ldw	r17,64(sp)
 1001c80:	dc000f17 	ldw	r16,60(sp)
 1001c84:	dec01304 	addi	sp,sp,76
 1001c88:	f800283a 	ret
 1001c8c:	8080030b 	ldhu	r2,12(r16)
 1001c90:	10c0200c 	andi	r3,r2,128
 1001c94:	18ffffcc 	andi	r3,r3,65535
 1001c98:	18e0001c 	xori	r3,r3,32768
 1001c9c:	18e00004 	addi	r3,r3,-32768
 1001ca0:	18000f1e 	bne	r3,zero,1001ce0 <__smakebuf_r+0x140>
 1001ca4:	04810004 	movi	r18,1024
 1001ca8:	10820014 	ori	r2,r2,2048
 1001cac:	8080030d 	sth	r2,12(r16)
 1001cb0:	003fe306 	br	1001c40 <__smakebuf_r+0xa0>
 1001cb4:	288010c4 	addi	r2,r5,67
 1001cb8:	28800015 	stw	r2,0(r5)
 1001cbc:	28800415 	stw	r2,16(r5)
 1001cc0:	00800044 	movi	r2,1
 1001cc4:	28800515 	stw	r2,20(r5)
 1001cc8:	dfc01217 	ldw	ra,72(sp)
 1001ccc:	dc801117 	ldw	r18,68(sp)
 1001cd0:	dc401017 	ldw	r17,64(sp)
 1001cd4:	dc000f17 	ldw	r16,60(sp)
 1001cd8:	dec01304 	addi	sp,sp,76
 1001cdc:	f800283a 	ret
 1001ce0:	04801004 	movi	r18,64
 1001ce4:	003ff006 	br	1001ca8 <__smakebuf_r+0x108>
 1001ce8:	81000a17 	ldw	r4,40(r16)
 1001cec:	00c04034 	movhi	r3,256
 1001cf0:	18cad104 	addi	r3,r3,11076
 1001cf4:	20ffc01e 	bne	r4,r3,1001bf8 <__smakebuf_r+0x58>
 1001cf8:	8080030b 	ldhu	r2,12(r16)
 1001cfc:	00c10004 	movi	r3,1024
 1001d00:	80c01315 	stw	r3,76(r16)
 1001d04:	10c4b03a 	or	r2,r2,r3
 1001d08:	8080030d 	sth	r2,12(r16)
 1001d0c:	003fcb06 	br	1001c3c <__smakebuf_r+0x9c>
 1001d10:	8080030b 	ldhu	r2,12(r16)
 1001d14:	10c0800c 	andi	r3,r2,512
 1001d18:	18ffffcc 	andi	r3,r3,65535
 1001d1c:	18e0001c 	xori	r3,r3,32768
 1001d20:	18e00004 	addi	r3,r3,-32768
 1001d24:	183fd31e 	bne	r3,zero,1001c74 <__smakebuf_r+0xd4>
 1001d28:	10800094 	ori	r2,r2,2
 1001d2c:	80c010c4 	addi	r3,r16,67
 1001d30:	8080030d 	sth	r2,12(r16)
 1001d34:	00800044 	movi	r2,1
 1001d38:	80c00015 	stw	r3,0(r16)
 1001d3c:	80c00415 	stw	r3,16(r16)
 1001d40:	80800515 	stw	r2,20(r16)
 1001d44:	003fcb06 	br	1001c74 <__smakebuf_r+0xd4>

01001d48 <_malloc_r>:
 1001d48:	defff604 	addi	sp,sp,-40
 1001d4c:	dc800215 	stw	r18,8(sp)
 1001d50:	dfc00915 	stw	ra,36(sp)
 1001d54:	df000815 	stw	fp,32(sp)
 1001d58:	ddc00715 	stw	r23,28(sp)
 1001d5c:	dd800615 	stw	r22,24(sp)
 1001d60:	dd400515 	stw	r21,20(sp)
 1001d64:	dd000415 	stw	r20,16(sp)
 1001d68:	dcc00315 	stw	r19,12(sp)
 1001d6c:	dc400115 	stw	r17,4(sp)
 1001d70:	dc000015 	stw	r16,0(sp)
 1001d74:	288002c4 	addi	r2,r5,11
 1001d78:	00c00584 	movi	r3,22
 1001d7c:	2025883a 	mov	r18,r4
 1001d80:	18802b2e 	bgeu	r3,r2,1001e30 <_malloc_r+0xe8>
 1001d84:	047ffe04 	movi	r17,-8
 1001d88:	1462703a 	and	r17,r2,r17
 1001d8c:	88002a16 	blt	r17,zero,1001e38 <_malloc_r+0xf0>
 1001d90:	89402936 	bltu	r17,r5,1001e38 <_malloc_r+0xf0>
 1001d94:	9009883a 	mov	r4,r18
 1001d98:	100b5f80 	call	100b5f8 <__malloc_lock>
 1001d9c:	00807dc4 	movi	r2,503
 1001da0:	14402936 	bltu	r2,r17,1001e48 <_malloc_r+0x100>
 1001da4:	8808d0fa 	srli	r4,r17,3
 1001da8:	04c04074 	movhi	r19,257
 1001dac:	9cfff404 	addi	r19,r19,-48
 1001db0:	2105883a 	add	r2,r4,r4
 1001db4:	1085883a 	add	r2,r2,r2
 1001db8:	1085883a 	add	r2,r2,r2
 1001dbc:	9885883a 	add	r2,r19,r2
 1001dc0:	14000317 	ldw	r16,12(r2)
 1001dc4:	80815526 	beq	r16,r2,100231c <_malloc_r+0x5d4>
 1001dc8:	81000117 	ldw	r4,4(r16)
 1001dcc:	00bfff04 	movi	r2,-4
 1001dd0:	80c00317 	ldw	r3,12(r16)
 1001dd4:	2084703a 	and	r2,r4,r2
 1001dd8:	8085883a 	add	r2,r16,r2
 1001ddc:	11800117 	ldw	r6,4(r2)
 1001de0:	81400217 	ldw	r5,8(r16)
 1001de4:	9009883a 	mov	r4,r18
 1001de8:	31800054 	ori	r6,r6,1
 1001dec:	11800115 	stw	r6,4(r2)
 1001df0:	28c00315 	stw	r3,12(r5)
 1001df4:	19400215 	stw	r5,8(r3)
 1001df8:	100b6180 	call	100b618 <__malloc_unlock>
 1001dfc:	80800204 	addi	r2,r16,8
 1001e00:	dfc00917 	ldw	ra,36(sp)
 1001e04:	df000817 	ldw	fp,32(sp)
 1001e08:	ddc00717 	ldw	r23,28(sp)
 1001e0c:	dd800617 	ldw	r22,24(sp)
 1001e10:	dd400517 	ldw	r21,20(sp)
 1001e14:	dd000417 	ldw	r20,16(sp)
 1001e18:	dcc00317 	ldw	r19,12(sp)
 1001e1c:	dc800217 	ldw	r18,8(sp)
 1001e20:	dc400117 	ldw	r17,4(sp)
 1001e24:	dc000017 	ldw	r16,0(sp)
 1001e28:	dec00a04 	addi	sp,sp,40
 1001e2c:	f800283a 	ret
 1001e30:	04400404 	movi	r17,16
 1001e34:	897fd72e 	bgeu	r17,r5,1001d94 <_malloc_r+0x4c>
 1001e38:	00800304 	movi	r2,12
 1001e3c:	90800015 	stw	r2,0(r18)
 1001e40:	0005883a 	mov	r2,zero
 1001e44:	003fee06 	br	1001e00 <_malloc_r+0xb8>
 1001e48:	8808d27a 	srli	r4,r17,9
 1001e4c:	20007126 	beq	r4,zero,1002014 <_malloc_r+0x2cc>
 1001e50:	00800104 	movi	r2,4
 1001e54:	1100eb36 	bltu	r2,r4,1002204 <_malloc_r+0x4bc>
 1001e58:	8808d1ba 	srli	r4,r17,6
 1001e5c:	21000e04 	addi	r4,r4,56
 1001e60:	210b883a 	add	r5,r4,r4
 1001e64:	294b883a 	add	r5,r5,r5
 1001e68:	294b883a 	add	r5,r5,r5
 1001e6c:	04c04074 	movhi	r19,257
 1001e70:	9cfff404 	addi	r19,r19,-48
 1001e74:	994b883a 	add	r5,r19,r5
 1001e78:	2c000317 	ldw	r16,12(r5)
 1001e7c:	2c000e26 	beq	r5,r16,1001eb8 <_malloc_r+0x170>
 1001e80:	80c00117 	ldw	r3,4(r16)
 1001e84:	01ffff04 	movi	r7,-4
 1001e88:	018003c4 	movi	r6,15
 1001e8c:	19c6703a 	and	r3,r3,r7
 1001e90:	1c45c83a 	sub	r2,r3,r17
 1001e94:	30800716 	blt	r6,r2,1001eb4 <_malloc_r+0x16c>
 1001e98:	1000610e 	bge	r2,zero,1002020 <_malloc_r+0x2d8>
 1001e9c:	84000317 	ldw	r16,12(r16)
 1001ea0:	2c000526 	beq	r5,r16,1001eb8 <_malloc_r+0x170>
 1001ea4:	80c00117 	ldw	r3,4(r16)
 1001ea8:	19c6703a 	and	r3,r3,r7
 1001eac:	1c45c83a 	sub	r2,r3,r17
 1001eb0:	30bff90e 	bge	r6,r2,1001e98 <_malloc_r+0x150>
 1001eb4:	213fffc4 	addi	r4,r4,-1
 1001eb8:	21000044 	addi	r4,r4,1
 1001ebc:	9c000417 	ldw	r16,16(r19)
 1001ec0:	00c04074 	movhi	r3,257
 1001ec4:	18fff404 	addi	r3,r3,-48
 1001ec8:	1a400204 	addi	r9,r3,8
 1001ecc:	8240ff26 	beq	r16,r9,10022cc <_malloc_r+0x584>
 1001ed0:	81400117 	ldw	r5,4(r16)
 1001ed4:	00bfff04 	movi	r2,-4
 1001ed8:	018003c4 	movi	r6,15
 1001edc:	2884703a 	and	r2,r5,r2
 1001ee0:	144bc83a 	sub	r5,r2,r17
 1001ee4:	3140ea16 	blt	r6,r5,1002290 <_malloc_r+0x548>
 1001ee8:	1a400515 	stw	r9,20(r3)
 1001eec:	1a400415 	stw	r9,16(r3)
 1001ef0:	2800570e 	bge	r5,zero,1002050 <_malloc_r+0x308>
 1001ef4:	01407fc4 	movi	r5,511
 1001ef8:	2880ca36 	bltu	r5,r2,1002224 <_malloc_r+0x4dc>
 1001efc:	1004d0fa 	srli	r2,r2,3
 1001f00:	02000044 	movi	r8,1
 1001f04:	19c00117 	ldw	r7,4(r3)
 1001f08:	108b883a 	add	r5,r2,r2
 1001f0c:	294b883a 	add	r5,r5,r5
 1001f10:	1005d0ba 	srai	r2,r2,2
 1001f14:	294b883a 	add	r5,r5,r5
 1001f18:	28cb883a 	add	r5,r5,r3
 1001f1c:	29800217 	ldw	r6,8(r5)
 1001f20:	4084983a 	sll	r2,r8,r2
 1001f24:	81400315 	stw	r5,12(r16)
 1001f28:	81800215 	stw	r6,8(r16)
 1001f2c:	11c4b03a 	or	r2,r2,r7
 1001f30:	18800115 	stw	r2,4(r3)
 1001f34:	2c000215 	stw	r16,8(r5)
 1001f38:	34000315 	stw	r16,12(r6)
 1001f3c:	200bd0ba 	srai	r5,r4,2
 1001f40:	00c00044 	movi	r3,1
 1001f44:	194a983a 	sll	r5,r3,r5
 1001f48:	11404936 	bltu	r2,r5,1002070 <_malloc_r+0x328>
 1001f4c:	1146703a 	and	r3,r2,r5
 1001f50:	18000a1e 	bne	r3,zero,1001f7c <_malloc_r+0x234>
 1001f54:	00ffff04 	movi	r3,-4
 1001f58:	294b883a 	add	r5,r5,r5
 1001f5c:	20c8703a 	and	r4,r4,r3
 1001f60:	1146703a 	and	r3,r2,r5
 1001f64:	21000104 	addi	r4,r4,4
 1001f68:	1800041e 	bne	r3,zero,1001f7c <_malloc_r+0x234>
 1001f6c:	294b883a 	add	r5,r5,r5
 1001f70:	1146703a 	and	r3,r2,r5
 1001f74:	21000104 	addi	r4,r4,4
 1001f78:	183ffc26 	beq	r3,zero,1001f6c <_malloc_r+0x224>
 1001f7c:	023fff04 	movi	r8,-4
 1001f80:	01c003c4 	movi	r7,15
 1001f84:	2105883a 	add	r2,r4,r4
 1001f88:	1085883a 	add	r2,r2,r2
 1001f8c:	1085883a 	add	r2,r2,r2
 1001f90:	9899883a 	add	r12,r19,r2
 1001f94:	62800304 	addi	r10,r12,12
 1001f98:	2017883a 	mov	r11,r4
 1001f9c:	54000017 	ldw	r16,0(r10)
 1001fa0:	51bffd04 	addi	r6,r10,-12
 1001fa4:	8180041e 	bne	r16,r6,1001fb8 <_malloc_r+0x270>
 1001fa8:	0000ca06 	br	10022d4 <_malloc_r+0x58c>
 1001fac:	10001c0e 	bge	r2,zero,1002020 <_malloc_r+0x2d8>
 1001fb0:	84000317 	ldw	r16,12(r16)
 1001fb4:	8180c726 	beq	r16,r6,10022d4 <_malloc_r+0x58c>
 1001fb8:	80c00117 	ldw	r3,4(r16)
 1001fbc:	1a06703a 	and	r3,r3,r8
 1001fc0:	1c45c83a 	sub	r2,r3,r17
 1001fc4:	38bff90e 	bge	r7,r2,1001fac <_malloc_r+0x264>
 1001fc8:	81000317 	ldw	r4,12(r16)
 1001fcc:	81400217 	ldw	r5,8(r16)
 1001fd0:	8447883a 	add	r3,r16,r17
 1001fd4:	8c400054 	ori	r17,r17,1
 1001fd8:	29000315 	stw	r4,12(r5)
 1001fdc:	21400215 	stw	r5,8(r4)
 1001fe0:	84400115 	stw	r17,4(r16)
 1001fe4:	1889883a 	add	r4,r3,r2
 1001fe8:	11400054 	ori	r5,r2,1
 1001fec:	98c00515 	stw	r3,20(r19)
 1001ff0:	98c00415 	stw	r3,16(r19)
 1001ff4:	20800015 	stw	r2,0(r4)
 1001ff8:	1a400315 	stw	r9,12(r3)
 1001ffc:	1a400215 	stw	r9,8(r3)
 1002000:	19400115 	stw	r5,4(r3)
 1002004:	9009883a 	mov	r4,r18
 1002008:	100b6180 	call	100b618 <__malloc_unlock>
 100200c:	80800204 	addi	r2,r16,8
 1002010:	003f7b06 	br	1001e00 <_malloc_r+0xb8>
 1002014:	8808d0fa 	srli	r4,r17,3
 1002018:	210b883a 	add	r5,r4,r4
 100201c:	003f9106 	br	1001e64 <_malloc_r+0x11c>
 1002020:	80c7883a 	add	r3,r16,r3
 1002024:	19400117 	ldw	r5,4(r3)
 1002028:	80800317 	ldw	r2,12(r16)
 100202c:	81000217 	ldw	r4,8(r16)
 1002030:	29400054 	ori	r5,r5,1
 1002034:	19400115 	stw	r5,4(r3)
 1002038:	20800315 	stw	r2,12(r4)
 100203c:	11000215 	stw	r4,8(r2)
 1002040:	9009883a 	mov	r4,r18
 1002044:	100b6180 	call	100b618 <__malloc_unlock>
 1002048:	80800204 	addi	r2,r16,8
 100204c:	003f6c06 	br	1001e00 <_malloc_r+0xb8>
 1002050:	8085883a 	add	r2,r16,r2
 1002054:	10c00117 	ldw	r3,4(r2)
 1002058:	9009883a 	mov	r4,r18
 100205c:	18c00054 	ori	r3,r3,1
 1002060:	10c00115 	stw	r3,4(r2)
 1002064:	100b6180 	call	100b618 <__malloc_unlock>
 1002068:	80800204 	addi	r2,r16,8
 100206c:	003f6406 	br	1001e00 <_malloc_r+0xb8>
 1002070:	9c000217 	ldw	r16,8(r19)
 1002074:	00bfff04 	movi	r2,-4
 1002078:	85400117 	ldw	r21,4(r16)
 100207c:	a8aa703a 	and	r21,r21,r2
 1002080:	ac400336 	bltu	r21,r17,1002090 <_malloc_r+0x348>
 1002084:	ac45c83a 	sub	r2,r21,r17
 1002088:	00c003c4 	movi	r3,15
 100208c:	18805316 	blt	r3,r2,10021dc <_malloc_r+0x494>
 1002090:	d5e01b17 	ldw	r23,-32660(gp)
 1002094:	d0e00417 	ldw	r3,-32752(gp)
 1002098:	00bfffc4 	movi	r2,-1
 100209c:	8579883a 	add	fp,r16,r21
 10020a0:	8def883a 	add	r23,r17,r23
 10020a4:	1880d226 	beq	r3,r2,10023f0 <_malloc_r+0x6a8>
 10020a8:	bdc403c4 	addi	r23,r23,4111
 10020ac:	00bc0004 	movi	r2,-4096
 10020b0:	b8ae703a 	and	r23,r23,r2
 10020b4:	9009883a 	mov	r4,r18
 10020b8:	b80b883a 	mov	r5,r23
 10020bc:	1002a040 	call	1002a04 <_sbrk_r>
 10020c0:	1029883a 	mov	r20,r2
 10020c4:	00bfffc4 	movi	r2,-1
 10020c8:	a080d126 	beq	r20,r2,1002410 <_malloc_r+0x6c8>
 10020cc:	a7009f36 	bltu	r20,fp,100234c <_malloc_r+0x604>
 10020d0:	05804074 	movhi	r22,257
 10020d4:	b5860504 	addi	r22,r22,6164
 10020d8:	b0800017 	ldw	r2,0(r22)
 10020dc:	b885883a 	add	r2,r23,r2
 10020e0:	b0800015 	stw	r2,0(r22)
 10020e4:	e500cf26 	beq	fp,r20,1002424 <_malloc_r+0x6dc>
 10020e8:	d1200417 	ldw	r4,-32752(gp)
 10020ec:	00ffffc4 	movi	r3,-1
 10020f0:	20c0e026 	beq	r4,r3,1002474 <_malloc_r+0x72c>
 10020f4:	a739c83a 	sub	fp,r20,fp
 10020f8:	1705883a 	add	r2,r2,fp
 10020fc:	b0800015 	stw	r2,0(r22)
 1002100:	a08001cc 	andi	r2,r20,7
 1002104:	1000a526 	beq	r2,zero,100239c <_malloc_r+0x654>
 1002108:	a0a9c83a 	sub	r20,r20,r2
 100210c:	00c40204 	movi	r3,4104
 1002110:	a5000204 	addi	r20,r20,8
 1002114:	1885c83a 	sub	r2,r3,r2
 1002118:	a5c7883a 	add	r3,r20,r23
 100211c:	18c3ffcc 	andi	r3,r3,4095
 1002120:	10efc83a 	sub	r23,r2,r3
 1002124:	9009883a 	mov	r4,r18
 1002128:	b80b883a 	mov	r5,r23
 100212c:	1002a040 	call	1002a04 <_sbrk_r>
 1002130:	00ffffc4 	movi	r3,-1
 1002134:	10c0cc26 	beq	r2,r3,1002468 <_malloc_r+0x720>
 1002138:	1505c83a 	sub	r2,r2,r20
 100213c:	b887883a 	add	r3,r23,r2
 1002140:	18c00054 	ori	r3,r3,1
 1002144:	b0800017 	ldw	r2,0(r22)
 1002148:	9d000215 	stw	r20,8(r19)
 100214c:	a0c00115 	stw	r3,4(r20)
 1002150:	b885883a 	add	r2,r23,r2
 1002154:	b0800015 	stw	r2,0(r22)
 1002158:	84c00e26 	beq	r16,r19,1002194 <_malloc_r+0x44c>
 100215c:	00c003c4 	movi	r3,15
 1002160:	1d40902e 	bgeu	r3,r21,10023a4 <_malloc_r+0x65c>
 1002164:	ad7ffd04 	addi	r21,r21,-12
 1002168:	013ffe04 	movi	r4,-8
 100216c:	a908703a 	and	r4,r21,r4
 1002170:	810b883a 	add	r5,r16,r4
 1002174:	01800144 	movi	r6,5
 1002178:	29800115 	stw	r6,4(r5)
 100217c:	29800215 	stw	r6,8(r5)
 1002180:	81400117 	ldw	r5,4(r16)
 1002184:	2940004c 	andi	r5,r5,1
 1002188:	214ab03a 	or	r5,r4,r5
 100218c:	81400115 	stw	r5,4(r16)
 1002190:	1900ae36 	bltu	r3,r4,100244c <_malloc_r+0x704>
 1002194:	d0e01a17 	ldw	r3,-32664(gp)
 1002198:	1880012e 	bgeu	r3,r2,10021a0 <_malloc_r+0x458>
 100219c:	d0a01a15 	stw	r2,-32664(gp)
 10021a0:	d0e01917 	ldw	r3,-32668(gp)
 10021a4:	9c000217 	ldw	r16,8(r19)
 10021a8:	1880012e 	bgeu	r3,r2,10021b0 <_malloc_r+0x468>
 10021ac:	d0a01915 	stw	r2,-32668(gp)
 10021b0:	80c00117 	ldw	r3,4(r16)
 10021b4:	00bfff04 	movi	r2,-4
 10021b8:	1886703a 	and	r3,r3,r2
 10021bc:	1c45c83a 	sub	r2,r3,r17
 10021c0:	1c400236 	bltu	r3,r17,10021cc <_malloc_r+0x484>
 10021c4:	00c003c4 	movi	r3,15
 10021c8:	18800416 	blt	r3,r2,10021dc <_malloc_r+0x494>
 10021cc:	9009883a 	mov	r4,r18
 10021d0:	100b6180 	call	100b618 <__malloc_unlock>
 10021d4:	0005883a 	mov	r2,zero
 10021d8:	003f0906 	br	1001e00 <_malloc_r+0xb8>
 10021dc:	88c00054 	ori	r3,r17,1
 10021e0:	10800054 	ori	r2,r2,1
 10021e4:	80c00115 	stw	r3,4(r16)
 10021e8:	8463883a 	add	r17,r16,r17
 10021ec:	88800115 	stw	r2,4(r17)
 10021f0:	9009883a 	mov	r4,r18
 10021f4:	9c400215 	stw	r17,8(r19)
 10021f8:	100b6180 	call	100b618 <__malloc_unlock>
 10021fc:	80800204 	addi	r2,r16,8
 1002200:	003eff06 	br	1001e00 <_malloc_r+0xb8>
 1002204:	00800504 	movi	r2,20
 1002208:	1100492e 	bgeu	r2,r4,1002330 <_malloc_r+0x5e8>
 100220c:	00801504 	movi	r2,84
 1002210:	11005c36 	bltu	r2,r4,1002384 <_malloc_r+0x63c>
 1002214:	8808d33a 	srli	r4,r17,12
 1002218:	21001b84 	addi	r4,r4,110
 100221c:	210b883a 	add	r5,r4,r4
 1002220:	003f1006 	br	1001e64 <_malloc_r+0x11c>
 1002224:	1006d27a 	srli	r3,r2,9
 1002228:	01400104 	movi	r5,4
 100222c:	28c0432e 	bgeu	r5,r3,100233c <_malloc_r+0x5f4>
 1002230:	01400504 	movi	r5,20
 1002234:	28c07036 	bltu	r5,r3,10023f8 <_malloc_r+0x6b0>
 1002238:	194016c4 	addi	r5,r3,91
 100223c:	294d883a 	add	r6,r5,r5
 1002240:	318d883a 	add	r6,r6,r6
 1002244:	318d883a 	add	r6,r6,r6
 1002248:	998d883a 	add	r6,r19,r6
 100224c:	30c00217 	ldw	r3,8(r6)
 1002250:	01c04074 	movhi	r7,257
 1002254:	39fff404 	addi	r7,r7,-48
 1002258:	19805726 	beq	r3,r6,10023b8 <_malloc_r+0x670>
 100225c:	01ffff04 	movi	r7,-4
 1002260:	19400117 	ldw	r5,4(r3)
 1002264:	29ca703a 	and	r5,r5,r7
 1002268:	1140022e 	bgeu	r2,r5,1002274 <_malloc_r+0x52c>
 100226c:	18c00217 	ldw	r3,8(r3)
 1002270:	30fffb1e 	bne	r6,r3,1002260 <_malloc_r+0x518>
 1002274:	19400317 	ldw	r5,12(r3)
 1002278:	98800117 	ldw	r2,4(r19)
 100227c:	81400315 	stw	r5,12(r16)
 1002280:	80c00215 	stw	r3,8(r16)
 1002284:	2c000215 	stw	r16,8(r5)
 1002288:	1c000315 	stw	r16,12(r3)
 100228c:	003f2b06 	br	1001f3c <_malloc_r+0x1f4>
 1002290:	8445883a 	add	r2,r16,r17
 1002294:	8c400054 	ori	r17,r17,1
 1002298:	18800515 	stw	r2,20(r3)
 100229c:	18800415 	stw	r2,16(r3)
 10022a0:	29000054 	ori	r4,r5,1
 10022a4:	1147883a 	add	r3,r2,r5
 10022a8:	84400115 	stw	r17,4(r16)
 10022ac:	11000115 	stw	r4,4(r2)
 10022b0:	12400315 	stw	r9,12(r2)
 10022b4:	12400215 	stw	r9,8(r2)
 10022b8:	19400015 	stw	r5,0(r3)
 10022bc:	9009883a 	mov	r4,r18
 10022c0:	100b6180 	call	100b618 <__malloc_unlock>
 10022c4:	80800204 	addi	r2,r16,8
 10022c8:	003ecd06 	br	1001e00 <_malloc_r+0xb8>
 10022cc:	18800117 	ldw	r2,4(r3)
 10022d0:	003f1a06 	br	1001f3c <_malloc_r+0x1f4>
 10022d4:	5ac00044 	addi	r11,r11,1
 10022d8:	588000cc 	andi	r2,r11,3
 10022dc:	52800204 	addi	r10,r10,8
 10022e0:	103f2e1e 	bne	r2,zero,1001f9c <_malloc_r+0x254>
 10022e4:	20c000cc 	andi	r3,r4,3
 10022e8:	60bffe04 	addi	r2,r12,-8
 10022ec:	18006f26 	beq	r3,zero,10024ac <_malloc_r+0x764>
 10022f0:	63000017 	ldw	r12,0(r12)
 10022f4:	213fffc4 	addi	r4,r4,-1
 10022f8:	60bffa26 	beq	r12,r2,10022e4 <_malloc_r+0x59c>
 10022fc:	98800117 	ldw	r2,4(r19)
 1002300:	294b883a 	add	r5,r5,r5
 1002304:	117f5a36 	bltu	r2,r5,1002070 <_malloc_r+0x328>
 1002308:	283f5926 	beq	r5,zero,1002070 <_malloc_r+0x328>
 100230c:	1146703a 	and	r3,r2,r5
 1002310:	18001626 	beq	r3,zero,100236c <_malloc_r+0x624>
 1002314:	5809883a 	mov	r4,r11
 1002318:	003f1a06 	br	1001f84 <_malloc_r+0x23c>
 100231c:	80800204 	addi	r2,r16,8
 1002320:	84000517 	ldw	r16,20(r16)
 1002324:	143ea81e 	bne	r2,r16,1001dc8 <_malloc_r+0x80>
 1002328:	21000084 	addi	r4,r4,2
 100232c:	003ee306 	br	1001ebc <_malloc_r+0x174>
 1002330:	210016c4 	addi	r4,r4,91
 1002334:	210b883a 	add	r5,r4,r4
 1002338:	003eca06 	br	1001e64 <_malloc_r+0x11c>
 100233c:	100ad1ba 	srli	r5,r2,6
 1002340:	29400e04 	addi	r5,r5,56
 1002344:	294d883a 	add	r6,r5,r5
 1002348:	003fbd06 	br	1002240 <_malloc_r+0x4f8>
 100234c:	84ff6026 	beq	r16,r19,10020d0 <_malloc_r+0x388>
 1002350:	00804074 	movhi	r2,257
 1002354:	10bff404 	addi	r2,r2,-48
 1002358:	14000217 	ldw	r16,8(r2)
 100235c:	00bfff04 	movi	r2,-4
 1002360:	80c00117 	ldw	r3,4(r16)
 1002364:	1886703a 	and	r3,r3,r2
 1002368:	003f9406 	br	10021bc <_malloc_r+0x474>
 100236c:	294b883a 	add	r5,r5,r5
 1002370:	1146703a 	and	r3,r2,r5
 1002374:	5ac00104 	addi	r11,r11,4
 1002378:	183ffc26 	beq	r3,zero,100236c <_malloc_r+0x624>
 100237c:	5809883a 	mov	r4,r11
 1002380:	003f0006 	br	1001f84 <_malloc_r+0x23c>
 1002384:	00805504 	movi	r2,340
 1002388:	11001336 	bltu	r2,r4,10023d8 <_malloc_r+0x690>
 100238c:	8808d3fa 	srli	r4,r17,15
 1002390:	21001dc4 	addi	r4,r4,119
 1002394:	210b883a 	add	r5,r4,r4
 1002398:	003eb206 	br	1001e64 <_malloc_r+0x11c>
 100239c:	00840004 	movi	r2,4096
 10023a0:	003f5d06 	br	1002118 <_malloc_r+0x3d0>
 10023a4:	00800044 	movi	r2,1
 10023a8:	a0800115 	stw	r2,4(r20)
 10023ac:	a021883a 	mov	r16,r20
 10023b0:	0007883a 	mov	r3,zero
 10023b4:	003f8106 	br	10021bc <_malloc_r+0x474>
 10023b8:	280bd0ba 	srai	r5,r5,2
 10023bc:	01800044 	movi	r6,1
 10023c0:	38800117 	ldw	r2,4(r7)
 10023c4:	314c983a 	sll	r6,r6,r5
 10023c8:	180b883a 	mov	r5,r3
 10023cc:	3084b03a 	or	r2,r6,r2
 10023d0:	38800115 	stw	r2,4(r7)
 10023d4:	003fa906 	br	100227c <_malloc_r+0x534>
 10023d8:	00815504 	movi	r2,1364
 10023dc:	11001836 	bltu	r2,r4,1002440 <_malloc_r+0x6f8>
 10023e0:	8808d4ba 	srli	r4,r17,18
 10023e4:	21001f04 	addi	r4,r4,124
 10023e8:	210b883a 	add	r5,r4,r4
 10023ec:	003e9d06 	br	1001e64 <_malloc_r+0x11c>
 10023f0:	bdc00404 	addi	r23,r23,16
 10023f4:	003f2f06 	br	10020b4 <_malloc_r+0x36c>
 10023f8:	01401504 	movi	r5,84
 10023fc:	28c01f36 	bltu	r5,r3,100247c <_malloc_r+0x734>
 1002400:	100ad33a 	srli	r5,r2,12
 1002404:	29401b84 	addi	r5,r5,110
 1002408:	294d883a 	add	r6,r5,r5
 100240c:	003f8c06 	br	1002240 <_malloc_r+0x4f8>
 1002410:	9c000217 	ldw	r16,8(r19)
 1002414:	00bfff04 	movi	r2,-4
 1002418:	80c00117 	ldw	r3,4(r16)
 100241c:	1886703a 	and	r3,r3,r2
 1002420:	003f6606 	br	10021bc <_malloc_r+0x474>
 1002424:	e0c3ffcc 	andi	r3,fp,4095
 1002428:	183f2f1e 	bne	r3,zero,10020e8 <_malloc_r+0x3a0>
 100242c:	98c00217 	ldw	r3,8(r19)
 1002430:	bd49883a 	add	r4,r23,r21
 1002434:	21000054 	ori	r4,r4,1
 1002438:	19000115 	stw	r4,4(r3)
 100243c:	003f5506 	br	1002194 <_malloc_r+0x44c>
 1002440:	01403f04 	movi	r5,252
 1002444:	01001f84 	movi	r4,126
 1002448:	003e8606 	br	1001e64 <_malloc_r+0x11c>
 100244c:	9009883a 	mov	r4,r18
 1002450:	81400204 	addi	r5,r16,8
 1002454:	1006c7c0 	call	1006c7c <_free_r>
 1002458:	00804074 	movhi	r2,257
 100245c:	10860504 	addi	r2,r2,6164
 1002460:	10800017 	ldw	r2,0(r2)
 1002464:	003f4b06 	br	1002194 <_malloc_r+0x44c>
 1002468:	00c00044 	movi	r3,1
 100246c:	002f883a 	mov	r23,zero
 1002470:	003f3406 	br	1002144 <_malloc_r+0x3fc>
 1002474:	d5200415 	stw	r20,-32752(gp)
 1002478:	003f2106 	br	1002100 <_malloc_r+0x3b8>
 100247c:	01405504 	movi	r5,340
 1002480:	28c00436 	bltu	r5,r3,1002494 <_malloc_r+0x74c>
 1002484:	100ad3fa 	srli	r5,r2,15
 1002488:	29401dc4 	addi	r5,r5,119
 100248c:	294d883a 	add	r6,r5,r5
 1002490:	003f6b06 	br	1002240 <_malloc_r+0x4f8>
 1002494:	01415504 	movi	r5,1364
 1002498:	28c00936 	bltu	r5,r3,10024c0 <_malloc_r+0x778>
 100249c:	100ad4ba 	srli	r5,r2,18
 10024a0:	29401f04 	addi	r5,r5,124
 10024a4:	294d883a 	add	r6,r5,r5
 10024a8:	003f6506 	br	1002240 <_malloc_r+0x4f8>
 10024ac:	98800117 	ldw	r2,4(r19)
 10024b0:	0146303a 	nor	r3,zero,r5
 10024b4:	1884703a 	and	r2,r3,r2
 10024b8:	98800115 	stw	r2,4(r19)
 10024bc:	003f9006 	br	1002300 <_malloc_r+0x5b8>
 10024c0:	01803f04 	movi	r6,252
 10024c4:	01401f84 	movi	r5,126
 10024c8:	003f5d06 	br	1002240 <_malloc_r+0x4f8>

010024cc <memcpy>:
 10024cc:	defffb04 	addi	sp,sp,-20
 10024d0:	dc000015 	stw	r16,0(sp)
 10024d4:	dfc00415 	stw	ra,16(sp)
 10024d8:	dcc00315 	stw	r19,12(sp)
 10024dc:	dc800215 	stw	r18,8(sp)
 10024e0:	dc400115 	stw	r17,4(sp)
 10024e4:	00c003c4 	movi	r3,15
 10024e8:	2021883a 	mov	r16,r4
 10024ec:	3005883a 	mov	r2,r6
 10024f0:	1980032e 	bgeu	r3,r6,1002500 <memcpy+0x34>
 10024f4:	2906b03a 	or	r3,r5,r4
 10024f8:	18c000cc 	andi	r3,r3,3
 10024fc:	18001026 	beq	r3,zero,1002540 <memcpy+0x74>
 1002500:	8007883a 	mov	r3,r16
 1002504:	288f883a 	add	r7,r5,r2
 1002508:	10000526 	beq	r2,zero,1002520 <memcpy+0x54>
 100250c:	29800003 	ldbu	r6,0(r5)
 1002510:	18c00044 	addi	r3,r3,1
 1002514:	29400044 	addi	r5,r5,1
 1002518:	19bfffc5 	stb	r6,-1(r3)
 100251c:	29fffb1e 	bne	r5,r7,100250c <memcpy+0x40>
 1002520:	8005883a 	mov	r2,r16
 1002524:	dfc00417 	ldw	ra,16(sp)
 1002528:	dcc00317 	ldw	r19,12(sp)
 100252c:	dc800217 	ldw	r18,8(sp)
 1002530:	dc400117 	ldw	r17,4(sp)
 1002534:	dc000017 	ldw	r16,0(sp)
 1002538:	dec00504 	addi	sp,sp,20
 100253c:	f800283a 	ret
 1002540:	32bffc04 	addi	r10,r6,-16
 1002544:	5014d13a 	srli	r10,r10,4
 1002548:	20800404 	addi	r2,r4,16
 100254c:	2007883a 	mov	r3,r4
 1002550:	5008913a 	slli	r4,r10,4
 1002554:	280f883a 	mov	r7,r5
 1002558:	1105883a 	add	r2,r2,r4
 100255c:	3a000017 	ldw	r8,0(r7)
 1002560:	18c00404 	addi	r3,r3,16
 1002564:	39c00404 	addi	r7,r7,16
 1002568:	1a3ffc15 	stw	r8,-16(r3)
 100256c:	3a3ffd17 	ldw	r8,-12(r7)
 1002570:	1a3ffd15 	stw	r8,-12(r3)
 1002574:	3a3ffe17 	ldw	r8,-8(r7)
 1002578:	1a3ffe15 	stw	r8,-8(r3)
 100257c:	3a3fff17 	ldw	r8,-4(r7)
 1002580:	1a3fff15 	stw	r8,-4(r3)
 1002584:	18bff51e 	bne	r3,r2,100255c <memcpy+0x90>
 1002588:	52800044 	addi	r10,r10,1
 100258c:	5014913a 	slli	r10,r10,4
 1002590:	308003cc 	andi	r2,r6,15
 1002594:	010000c4 	movi	r4,3
 1002598:	8287883a 	add	r3,r16,r10
 100259c:	2a95883a 	add	r10,r5,r10
 10025a0:	2080182e 	bgeu	r4,r2,1002604 <memcpy+0x138>
 10025a4:	147fff04 	addi	r17,r2,-4
 10025a8:	8808d0ba 	srli	r4,r17,2
 10025ac:	1a400104 	addi	r9,r3,4
 10025b0:	180d883a 	mov	r6,r3
 10025b4:	2105883a 	add	r2,r4,r4
 10025b8:	1085883a 	add	r2,r2,r2
 10025bc:	4893883a 	add	r9,r9,r2
 10025c0:	500f883a 	mov	r7,r10
 10025c4:	3a000017 	ldw	r8,0(r7)
 10025c8:	31800104 	addi	r6,r6,4
 10025cc:	39c00104 	addi	r7,r7,4
 10025d0:	323fff15 	stw	r8,-4(r6)
 10025d4:	327ffb1e 	bne	r6,r9,10025c4 <memcpy+0xf8>
 10025d8:	20800044 	addi	r2,r4,1
 10025dc:	1085883a 	add	r2,r2,r2
 10025e0:	1085883a 	add	r2,r2,r2
 10025e4:	017fff04 	movi	r5,-4
 10025e8:	18a5883a 	add	r18,r3,r2
 10025ec:	50a7883a 	add	r19,r10,r2
 10025f0:	10013440 	call	1001344 <__mulsi3>
 10025f4:	1445883a 	add	r2,r2,r17
 10025f8:	980b883a 	mov	r5,r19
 10025fc:	9007883a 	mov	r3,r18
 1002600:	003fc006 	br	1002504 <memcpy+0x38>
 1002604:	500b883a 	mov	r5,r10
 1002608:	003fbe06 	br	1002504 <memcpy+0x38>

0100260c <_open_r>:
 100260c:	defffd04 	addi	sp,sp,-12
 1002610:	dc400115 	stw	r17,4(sp)
 1002614:	dc000015 	stw	r16,0(sp)
 1002618:	2023883a 	mov	r17,r4
 100261c:	04004074 	movhi	r16,257
 1002620:	8405f604 	addi	r16,r16,6104
 1002624:	2809883a 	mov	r4,r5
 1002628:	300b883a 	mov	r5,r6
 100262c:	380d883a 	mov	r6,r7
 1002630:	dfc00215 	stw	ra,8(sp)
 1002634:	80000015 	stw	zero,0(r16)
 1002638:	100b7780 	call	100b778 <open>
 100263c:	00ffffc4 	movi	r3,-1
 1002640:	10c00526 	beq	r2,r3,1002658 <_open_r+0x4c>
 1002644:	dfc00217 	ldw	ra,8(sp)
 1002648:	dc400117 	ldw	r17,4(sp)
 100264c:	dc000017 	ldw	r16,0(sp)
 1002650:	dec00304 	addi	sp,sp,12
 1002654:	f800283a 	ret
 1002658:	80c00017 	ldw	r3,0(r16)
 100265c:	183ff926 	beq	r3,zero,1002644 <_open_r+0x38>
 1002660:	88c00015 	stw	r3,0(r17)
 1002664:	dfc00217 	ldw	ra,8(sp)
 1002668:	dc400117 	ldw	r17,4(sp)
 100266c:	dc000017 	ldw	r16,0(sp)
 1002670:	dec00304 	addi	sp,sp,12
 1002674:	f800283a 	ret

01002678 <_printf_r>:
 1002678:	defffd04 	addi	sp,sp,-12
 100267c:	dfc00015 	stw	ra,0(sp)
 1002680:	d9800115 	stw	r6,4(sp)
 1002684:	d9c00215 	stw	r7,8(sp)
 1002688:	280d883a 	mov	r6,r5
 100268c:	21400217 	ldw	r5,8(r4)
 1002690:	d9c00104 	addi	r7,sp,4
 1002694:	1002c680 	call	1002c68 <___vfprintf_internal_r>
 1002698:	dfc00017 	ldw	ra,0(sp)
 100269c:	dec00304 	addi	sp,sp,12
 10026a0:	f800283a 	ret

010026a4 <printf>:
 10026a4:	defffc04 	addi	sp,sp,-16
 10026a8:	dfc00015 	stw	ra,0(sp)
 10026ac:	d9400115 	stw	r5,4(sp)
 10026b0:	d9800215 	stw	r6,8(sp)
 10026b4:	d9c00315 	stw	r7,12(sp)
 10026b8:	00804074 	movhi	r2,257
 10026bc:	1085e104 	addi	r2,r2,6020
 10026c0:	10800017 	ldw	r2,0(r2)
 10026c4:	200b883a 	mov	r5,r4
 10026c8:	d9800104 	addi	r6,sp,4
 10026cc:	11000217 	ldw	r4,8(r2)
 10026d0:	1004ae40 	call	1004ae4 <__vfprintf_internal>
 10026d4:	dfc00017 	ldw	ra,0(sp)
 10026d8:	dec00404 	addi	sp,sp,16
 10026dc:	f800283a 	ret

010026e0 <_putchar_r>:
 10026e0:	21800217 	ldw	r6,8(r4)
 10026e4:	1008aec1 	jmpi	1008aec <_putc_r>

010026e8 <putchar>:
 10026e8:	00804074 	movhi	r2,257
 10026ec:	1085e104 	addi	r2,r2,6020
 10026f0:	10800017 	ldw	r2,0(r2)
 10026f4:	200b883a 	mov	r5,r4
 10026f8:	11800217 	ldw	r6,8(r2)
 10026fc:	1009883a 	mov	r4,r2
 1002700:	1008aec1 	jmpi	1008aec <_putc_r>

01002704 <_puts_r>:
 1002704:	defff604 	addi	sp,sp,-40
 1002708:	dc400815 	stw	r17,32(sp)
 100270c:	2023883a 	mov	r17,r4
 1002710:	2809883a 	mov	r4,r5
 1002714:	dc000715 	stw	r16,28(sp)
 1002718:	dfc00915 	stw	ra,36(sp)
 100271c:	2821883a 	mov	r16,r5
 1002720:	1002ba80 	call	1002ba8 <strlen>
 1002724:	10c00044 	addi	r3,r2,1
 1002728:	d8800115 	stw	r2,4(sp)
 100272c:	89400217 	ldw	r5,8(r17)
 1002730:	00804074 	movhi	r2,257
 1002734:	10be6204 	addi	r2,r2,-1656
 1002738:	d8800215 	stw	r2,8(sp)
 100273c:	00800044 	movi	r2,1
 1002740:	d8800315 	stw	r2,12(sp)
 1002744:	8809883a 	mov	r4,r17
 1002748:	00800084 	movi	r2,2
 100274c:	d9800404 	addi	r6,sp,16
 1002750:	dc000015 	stw	r16,0(sp)
 1002754:	d8c00615 	stw	r3,24(sp)
 1002758:	dec00415 	stw	sp,16(sp)
 100275c:	d8800515 	stw	r2,20(sp)
 1002760:	1006f4c0 	call	1006f4c <__sfvwrite_r>
 1002764:	1000061e 	bne	r2,zero,1002780 <_puts_r+0x7c>
 1002768:	00800284 	movi	r2,10
 100276c:	dfc00917 	ldw	ra,36(sp)
 1002770:	dc400817 	ldw	r17,32(sp)
 1002774:	dc000717 	ldw	r16,28(sp)
 1002778:	dec00a04 	addi	sp,sp,40
 100277c:	f800283a 	ret
 1002780:	00bfffc4 	movi	r2,-1
 1002784:	003ff906 	br	100276c <_puts_r+0x68>

01002788 <puts>:
 1002788:	00804074 	movhi	r2,257
 100278c:	1085e104 	addi	r2,r2,6020
 1002790:	200b883a 	mov	r5,r4
 1002794:	11000017 	ldw	r4,0(r2)
 1002798:	10027041 	jmpi	1002704 <_puts_r>

0100279c <lflush>:
 100279c:	20c0030b 	ldhu	r3,12(r4)
 10027a0:	00800244 	movi	r2,9
 10027a4:	18c0024c 	andi	r3,r3,9
 10027a8:	18800226 	beq	r3,r2,10027b4 <lflush+0x18>
 10027ac:	0005883a 	mov	r2,zero
 10027b0:	f800283a 	ret
 10027b4:	100678c1 	jmpi	100678c <fflush>

010027b8 <__srefill_r>:
 10027b8:	defffd04 	addi	sp,sp,-12
 10027bc:	dc400115 	stw	r17,4(sp)
 10027c0:	dc000015 	stw	r16,0(sp)
 10027c4:	dfc00215 	stw	ra,8(sp)
 10027c8:	2023883a 	mov	r17,r4
 10027cc:	2821883a 	mov	r16,r5
 10027d0:	20000226 	beq	r4,zero,10027dc <__srefill_r+0x24>
 10027d4:	20800e17 	ldw	r2,56(r4)
 10027d8:	10004426 	beq	r2,zero,10028ec <__srefill_r+0x134>
 10027dc:	8080030b 	ldhu	r2,12(r16)
 10027e0:	80000115 	stw	zero,4(r16)
 10027e4:	10c0080c 	andi	r3,r2,32
 10027e8:	18ffffcc 	andi	r3,r3,65535
 10027ec:	18e0001c 	xori	r3,r3,32768
 10027f0:	18e00004 	addi	r3,r3,-32768
 10027f4:	1800371e 	bne	r3,zero,10028d4 <__srefill_r+0x11c>
 10027f8:	10c0010c 	andi	r3,r2,4
 10027fc:	18ffffcc 	andi	r3,r3,65535
 1002800:	18e0001c 	xori	r3,r3,32768
 1002804:	18e00004 	addi	r3,r3,-32768
 1002808:	18002226 	beq	r3,zero,1002894 <__srefill_r+0xdc>
 100280c:	81400c17 	ldw	r5,48(r16)
 1002810:	28000826 	beq	r5,zero,1002834 <__srefill_r+0x7c>
 1002814:	80801004 	addi	r2,r16,64
 1002818:	28800226 	beq	r5,r2,1002824 <__srefill_r+0x6c>
 100281c:	8809883a 	mov	r4,r17
 1002820:	1006c7c0 	call	1006c7c <_free_r>
 1002824:	80800f17 	ldw	r2,60(r16)
 1002828:	80000c15 	stw	zero,48(r16)
 100282c:	80800115 	stw	r2,4(r16)
 1002830:	1000401e 	bne	r2,zero,1002934 <__srefill_r+0x17c>
 1002834:	80800417 	ldw	r2,16(r16)
 1002838:	10005026 	beq	r2,zero,100297c <__srefill_r+0x1c4>
 100283c:	8080030b 	ldhu	r2,12(r16)
 1002840:	108000cc 	andi	r2,r2,3
 1002844:	10002b1e 	bne	r2,zero,10028f4 <__srefill_r+0x13c>
 1002848:	81800417 	ldw	r6,16(r16)
 100284c:	80800817 	ldw	r2,32(r16)
 1002850:	81400717 	ldw	r5,28(r16)
 1002854:	81c00517 	ldw	r7,20(r16)
 1002858:	8809883a 	mov	r4,r17
 100285c:	81800015 	stw	r6,0(r16)
 1002860:	103ee83a 	callr	r2
 1002864:	8100030b 	ldhu	r4,12(r16)
 1002868:	00f7ffc4 	movi	r3,-8193
 100286c:	80800115 	stw	r2,4(r16)
 1002870:	20c6703a 	and	r3,r4,r3
 1002874:	80c0030d 	sth	r3,12(r16)
 1002878:	0080130e 	bge	zero,r2,10028c8 <__srefill_r+0x110>
 100287c:	0005883a 	mov	r2,zero
 1002880:	dfc00217 	ldw	ra,8(sp)
 1002884:	dc400117 	ldw	r17,4(sp)
 1002888:	dc000017 	ldw	r16,0(sp)
 100288c:	dec00304 	addi	sp,sp,12
 1002890:	f800283a 	ret
 1002894:	10c0040c 	andi	r3,r2,16
 1002898:	18ffffcc 	andi	r3,r3,65535
 100289c:	18e0001c 	xori	r3,r3,32768
 10028a0:	18e00004 	addi	r3,r3,-32768
 10028a4:	18003926 	beq	r3,zero,100298c <__srefill_r+0x1d4>
 10028a8:	10c0020c 	andi	r3,r2,8
 10028ac:	18ffffcc 	andi	r3,r3,65535
 10028b0:	18e0001c 	xori	r3,r3,32768
 10028b4:	18e00004 	addi	r3,r3,-32768
 10028b8:	1800261e 	bne	r3,zero,1002954 <__srefill_r+0x19c>
 10028bc:	10800114 	ori	r2,r2,4
 10028c0:	8080030d 	sth	r2,12(r16)
 10028c4:	003fdb06 	br	1002834 <__srefill_r+0x7c>
 10028c8:	1000111e 	bne	r2,zero,1002910 <__srefill_r+0x158>
 10028cc:	18c00814 	ori	r3,r3,32
 10028d0:	80c0030d 	sth	r3,12(r16)
 10028d4:	00bfffc4 	movi	r2,-1
 10028d8:	dfc00217 	ldw	ra,8(sp)
 10028dc:	dc400117 	ldw	r17,4(sp)
 10028e0:	dc000017 	ldw	r16,0(sp)
 10028e4:	dec00304 	addi	sp,sp,12
 10028e8:	f800283a 	ret
 10028ec:	10068600 	call	1006860 <__sinit>
 10028f0:	003fba06 	br	10027dc <__srefill_r+0x24>
 10028f4:	00804074 	movhi	r2,257
 10028f8:	1085e004 	addi	r2,r2,6016
 10028fc:	11000017 	ldw	r4,0(r2)
 1002900:	01404034 	movhi	r5,256
 1002904:	2949e704 	addi	r5,r5,10140
 1002908:	10074300 	call	1007430 <_fwalk>
 100290c:	003fce06 	br	1002848 <__srefill_r+0x90>
 1002910:	18c01014 	ori	r3,r3,64
 1002914:	00bfffc4 	movi	r2,-1
 1002918:	80000115 	stw	zero,4(r16)
 100291c:	80c0030d 	sth	r3,12(r16)
 1002920:	dfc00217 	ldw	ra,8(sp)
 1002924:	dc400117 	ldw	r17,4(sp)
 1002928:	dc000017 	ldw	r16,0(sp)
 100292c:	dec00304 	addi	sp,sp,12
 1002930:	f800283a 	ret
 1002934:	80c00e17 	ldw	r3,56(r16)
 1002938:	0005883a 	mov	r2,zero
 100293c:	80c00015 	stw	r3,0(r16)
 1002940:	dfc00217 	ldw	ra,8(sp)
 1002944:	dc400117 	ldw	r17,4(sp)
 1002948:	dc000017 	ldw	r16,0(sp)
 100294c:	dec00304 	addi	sp,sp,12
 1002950:	f800283a 	ret
 1002954:	8809883a 	mov	r4,r17
 1002958:	800b883a 	mov	r5,r16
 100295c:	10065a40 	call	10065a4 <_fflush_r>
 1002960:	103fdc1e 	bne	r2,zero,10028d4 <__srefill_r+0x11c>
 1002964:	8080030b 	ldhu	r2,12(r16)
 1002968:	00fffdc4 	movi	r3,-9
 100296c:	80000215 	stw	zero,8(r16)
 1002970:	1884703a 	and	r2,r3,r2
 1002974:	80000615 	stw	zero,24(r16)
 1002978:	003fd006 	br	10028bc <__srefill_r+0x104>
 100297c:	8809883a 	mov	r4,r17
 1002980:	800b883a 	mov	r5,r16
 1002984:	1001ba00 	call	1001ba0 <__smakebuf_r>
 1002988:	003fac06 	br	100283c <__srefill_r+0x84>
 100298c:	00c00244 	movi	r3,9
 1002990:	10801014 	ori	r2,r2,64
 1002994:	88c00015 	stw	r3,0(r17)
 1002998:	8080030d 	sth	r2,12(r16)
 100299c:	00bfffc4 	movi	r2,-1
 10029a0:	003fb706 	br	1002880 <__srefill_r+0xc8>

010029a4 <__srget_r>:
 10029a4:	defffe04 	addi	sp,sp,-8
 10029a8:	dc000015 	stw	r16,0(sp)
 10029ac:	dfc00115 	stw	ra,4(sp)
 10029b0:	2821883a 	mov	r16,r5
 10029b4:	10027b80 	call	10027b8 <__srefill_r>
 10029b8:	10000b1e 	bne	r2,zero,10029e8 <__srget_r+0x44>
 10029bc:	80c00117 	ldw	r3,4(r16)
 10029c0:	80800017 	ldw	r2,0(r16)
 10029c4:	18ffffc4 	addi	r3,r3,-1
 10029c8:	80c00115 	stw	r3,4(r16)
 10029cc:	10c00044 	addi	r3,r2,1
 10029d0:	10800003 	ldbu	r2,0(r2)
 10029d4:	80c00015 	stw	r3,0(r16)
 10029d8:	dfc00117 	ldw	ra,4(sp)
 10029dc:	dc000017 	ldw	r16,0(sp)
 10029e0:	dec00204 	addi	sp,sp,8
 10029e4:	f800283a 	ret
 10029e8:	00bfffc4 	movi	r2,-1
 10029ec:	003ffa06 	br	10029d8 <__srget_r+0x34>

010029f0 <__srget>:
 10029f0:	00804074 	movhi	r2,257
 10029f4:	1085e104 	addi	r2,r2,6020
 10029f8:	200b883a 	mov	r5,r4
 10029fc:	11000017 	ldw	r4,0(r2)
 1002a00:	10029a41 	jmpi	10029a4 <__srget_r>

01002a04 <_sbrk_r>:
 1002a04:	defffd04 	addi	sp,sp,-12
 1002a08:	dc400115 	stw	r17,4(sp)
 1002a0c:	dc000015 	stw	r16,0(sp)
 1002a10:	2023883a 	mov	r17,r4
 1002a14:	04004074 	movhi	r16,257
 1002a18:	8405f604 	addi	r16,r16,6104
 1002a1c:	2809883a 	mov	r4,r5
 1002a20:	dfc00215 	stw	ra,8(sp)
 1002a24:	80000015 	stw	zero,0(r16)
 1002a28:	100ba940 	call	100ba94 <sbrk>
 1002a2c:	00ffffc4 	movi	r3,-1
 1002a30:	10c00526 	beq	r2,r3,1002a48 <_sbrk_r+0x44>
 1002a34:	dfc00217 	ldw	ra,8(sp)
 1002a38:	dc400117 	ldw	r17,4(sp)
 1002a3c:	dc000017 	ldw	r16,0(sp)
 1002a40:	dec00304 	addi	sp,sp,12
 1002a44:	f800283a 	ret
 1002a48:	80c00017 	ldw	r3,0(r16)
 1002a4c:	183ff926 	beq	r3,zero,1002a34 <_sbrk_r+0x30>
 1002a50:	88c00015 	stw	r3,0(r17)
 1002a54:	dfc00217 	ldw	ra,8(sp)
 1002a58:	dc400117 	ldw	r17,4(sp)
 1002a5c:	dc000017 	ldw	r16,0(sp)
 1002a60:	dec00304 	addi	sp,sp,12
 1002a64:	f800283a 	ret

01002a68 <__sread>:
 1002a68:	defffe04 	addi	sp,sp,-8
 1002a6c:	dc000015 	stw	r16,0(sp)
 1002a70:	2821883a 	mov	r16,r5
 1002a74:	2940038f 	ldh	r5,14(r5)
 1002a78:	dfc00115 	stw	ra,4(sp)
 1002a7c:	1008c980 	call	1008c98 <_read_r>
 1002a80:	10000716 	blt	r2,zero,1002aa0 <__sread+0x38>
 1002a84:	80c01417 	ldw	r3,80(r16)
 1002a88:	1887883a 	add	r3,r3,r2
 1002a8c:	80c01415 	stw	r3,80(r16)
 1002a90:	dfc00117 	ldw	ra,4(sp)
 1002a94:	dc000017 	ldw	r16,0(sp)
 1002a98:	dec00204 	addi	sp,sp,8
 1002a9c:	f800283a 	ret
 1002aa0:	80c0030b 	ldhu	r3,12(r16)
 1002aa4:	18fbffcc 	andi	r3,r3,61439
 1002aa8:	80c0030d 	sth	r3,12(r16)
 1002aac:	dfc00117 	ldw	ra,4(sp)
 1002ab0:	dc000017 	ldw	r16,0(sp)
 1002ab4:	dec00204 	addi	sp,sp,8
 1002ab8:	f800283a 	ret

01002abc <__swrite>:
 1002abc:	2880030b 	ldhu	r2,12(r5)
 1002ac0:	defffb04 	addi	sp,sp,-20
 1002ac4:	dcc00315 	stw	r19,12(sp)
 1002ac8:	10c0400c 	andi	r3,r2,256
 1002acc:	18ffffcc 	andi	r3,r3,65535
 1002ad0:	18e0001c 	xori	r3,r3,32768
 1002ad4:	dc800215 	stw	r18,8(sp)
 1002ad8:	dc400115 	stw	r17,4(sp)
 1002adc:	dc000015 	stw	r16,0(sp)
 1002ae0:	dfc00415 	stw	ra,16(sp)
 1002ae4:	18e00004 	addi	r3,r3,-32768
 1002ae8:	2821883a 	mov	r16,r5
 1002aec:	2027883a 	mov	r19,r4
 1002af0:	3025883a 	mov	r18,r6
 1002af4:	3823883a 	mov	r17,r7
 1002af8:	18000526 	beq	r3,zero,1002b10 <__swrite+0x54>
 1002afc:	2940038f 	ldh	r5,14(r5)
 1002b00:	000d883a 	mov	r6,zero
 1002b04:	01c00084 	movi	r7,2
 1002b08:	10076d00 	call	10076d0 <_lseek_r>
 1002b0c:	8080030b 	ldhu	r2,12(r16)
 1002b10:	8140038f 	ldh	r5,14(r16)
 1002b14:	10bbffcc 	andi	r2,r2,61439
 1002b18:	9809883a 	mov	r4,r19
 1002b1c:	900d883a 	mov	r6,r18
 1002b20:	880f883a 	mov	r7,r17
 1002b24:	8080030d 	sth	r2,12(r16)
 1002b28:	dfc00417 	ldw	ra,16(sp)
 1002b2c:	dcc00317 	ldw	r19,12(sp)
 1002b30:	dc800217 	ldw	r18,8(sp)
 1002b34:	dc400117 	ldw	r17,4(sp)
 1002b38:	dc000017 	ldw	r16,0(sp)
 1002b3c:	dec00504 	addi	sp,sp,20
 1002b40:	1004b081 	jmpi	1004b08 <_write_r>

01002b44 <__sseek>:
 1002b44:	defffe04 	addi	sp,sp,-8
 1002b48:	dc000015 	stw	r16,0(sp)
 1002b4c:	2821883a 	mov	r16,r5
 1002b50:	2940038f 	ldh	r5,14(r5)
 1002b54:	dfc00115 	stw	ra,4(sp)
 1002b58:	10076d00 	call	10076d0 <_lseek_r>
 1002b5c:	00ffffc4 	movi	r3,-1
 1002b60:	10c00826 	beq	r2,r3,1002b84 <__sseek+0x40>
 1002b64:	80c0030b 	ldhu	r3,12(r16)
 1002b68:	80801415 	stw	r2,80(r16)
 1002b6c:	18c40014 	ori	r3,r3,4096
 1002b70:	80c0030d 	sth	r3,12(r16)
 1002b74:	dfc00117 	ldw	ra,4(sp)
 1002b78:	dc000017 	ldw	r16,0(sp)
 1002b7c:	dec00204 	addi	sp,sp,8
 1002b80:	f800283a 	ret
 1002b84:	80c0030b 	ldhu	r3,12(r16)
 1002b88:	18fbffcc 	andi	r3,r3,61439
 1002b8c:	80c0030d 	sth	r3,12(r16)
 1002b90:	dfc00117 	ldw	ra,4(sp)
 1002b94:	dc000017 	ldw	r16,0(sp)
 1002b98:	dec00204 	addi	sp,sp,8
 1002b9c:	f800283a 	ret

01002ba0 <__sclose>:
 1002ba0:	2940038f 	ldh	r5,14(r5)
 1002ba4:	1004ce81 	jmpi	1004ce8 <_close_r>

01002ba8 <strlen>:
 1002ba8:	208000cc 	andi	r2,r4,3
 1002bac:	10001f1e 	bne	r2,zero,1002c2c <strlen+0x84>
 1002bb0:	20800017 	ldw	r2,0(r4)
 1002bb4:	01ffbff4 	movhi	r7,65279
 1002bb8:	39ffbfc4 	addi	r7,r7,-257
 1002bbc:	01a02074 	movhi	r6,32897
 1002bc0:	31a02004 	addi	r6,r6,-32640
 1002bc4:	11c7883a 	add	r3,r2,r7
 1002bc8:	0084303a 	nor	r2,zero,r2
 1002bcc:	1886703a 	and	r3,r3,r2
 1002bd0:	1986703a 	and	r3,r3,r6
 1002bd4:	2005883a 	mov	r2,r4
 1002bd8:	1800101e 	bne	r3,zero,1002c1c <strlen+0x74>
 1002bdc:	10800104 	addi	r2,r2,4
 1002be0:	10c00017 	ldw	r3,0(r2)
 1002be4:	19cb883a 	add	r5,r3,r7
 1002be8:	00c6303a 	nor	r3,zero,r3
 1002bec:	28c6703a 	and	r3,r5,r3
 1002bf0:	1986703a 	and	r3,r3,r6
 1002bf4:	1800091e 	bne	r3,zero,1002c1c <strlen+0x74>
 1002bf8:	10800104 	addi	r2,r2,4
 1002bfc:	10c00017 	ldw	r3,0(r2)
 1002c00:	19cb883a 	add	r5,r3,r7
 1002c04:	00c6303a 	nor	r3,zero,r3
 1002c08:	28c6703a 	and	r3,r5,r3
 1002c0c:	1986703a 	and	r3,r3,r6
 1002c10:	183ff226 	beq	r3,zero,1002bdc <strlen+0x34>
 1002c14:	00000106 	br	1002c1c <strlen+0x74>
 1002c18:	10800044 	addi	r2,r2,1
 1002c1c:	10c00007 	ldb	r3,0(r2)
 1002c20:	183ffd1e 	bne	r3,zero,1002c18 <strlen+0x70>
 1002c24:	1105c83a 	sub	r2,r2,r4
 1002c28:	f800283a 	ret
 1002c2c:	2005883a 	mov	r2,r4
 1002c30:	003ffa06 	br	1002c1c <strlen+0x74>

01002c34 <__sprint_r>:
 1002c34:	30800217 	ldw	r2,8(r6)
 1002c38:	defffe04 	addi	sp,sp,-8
 1002c3c:	dc000015 	stw	r16,0(sp)
 1002c40:	dfc00115 	stw	ra,4(sp)
 1002c44:	3021883a 	mov	r16,r6
 1002c48:	10000226 	beq	r2,zero,1002c54 <__sprint_r+0x20>
 1002c4c:	1006f4c0 	call	1006f4c <__sfvwrite_r>
 1002c50:	80000215 	stw	zero,8(r16)
 1002c54:	80000115 	stw	zero,4(r16)
 1002c58:	dfc00117 	ldw	ra,4(sp)
 1002c5c:	dc000017 	ldw	r16,0(sp)
 1002c60:	dec00204 	addi	sp,sp,8
 1002c64:	f800283a 	ret

01002c68 <___vfprintf_internal_r>:
 1002c68:	defeb904 	addi	sp,sp,-1308
 1002c6c:	dc013d15 	stw	r16,1268(sp)
 1002c70:	d9013015 	stw	r4,1216(sp)
 1002c74:	dfc14615 	stw	ra,1304(sp)
 1002c78:	df014515 	stw	fp,1300(sp)
 1002c7c:	ddc14415 	stw	r23,1296(sp)
 1002c80:	dd814315 	stw	r22,1292(sp)
 1002c84:	dd414215 	stw	r21,1288(sp)
 1002c88:	dd014115 	stw	r20,1284(sp)
 1002c8c:	dcc14015 	stw	r19,1280(sp)
 1002c90:	dc813f15 	stw	r18,1276(sp)
 1002c94:	dc413e15 	stw	r17,1272(sp)
 1002c98:	d9412915 	stw	r5,1188(sp)
 1002c9c:	3021883a 	mov	r16,r6
 1002ca0:	d9c12d15 	stw	r7,1204(sp)
 1002ca4:	100769c0 	call	100769c <_localeconv_r>
 1002ca8:	10800017 	ldw	r2,0(r2)
 1002cac:	d9013017 	ldw	r4,1216(sp)
 1002cb0:	d8013315 	stw	zero,1228(sp)
 1002cb4:	d8813715 	stw	r2,1244(sp)
 1002cb8:	d8013415 	stw	zero,1232(sp)
 1002cbc:	20000226 	beq	r4,zero,1002cc8 <___vfprintf_internal_r+0x60>
 1002cc0:	20800e17 	ldw	r2,56(r4)
 1002cc4:	10014b26 	beq	r2,zero,10031f4 <___vfprintf_internal_r+0x58c>
 1002cc8:	d8c12917 	ldw	r3,1188(sp)
 1002ccc:	1880030b 	ldhu	r2,12(r3)
 1002cd0:	10c0020c 	andi	r3,r2,8
 1002cd4:	18ffffcc 	andi	r3,r3,65535
 1002cd8:	18e0001c 	xori	r3,r3,32768
 1002cdc:	18e00004 	addi	r3,r3,-32768
 1002ce0:	1800ed26 	beq	r3,zero,1003098 <___vfprintf_internal_r+0x430>
 1002ce4:	d9012917 	ldw	r4,1188(sp)
 1002ce8:	20c00417 	ldw	r3,16(r4)
 1002cec:	1800ea26 	beq	r3,zero,1003098 <___vfprintf_internal_r+0x430>
 1002cf0:	1100068c 	andi	r4,r2,26
 1002cf4:	00c00284 	movi	r3,10
 1002cf8:	20c0f026 	beq	r4,r3,10030bc <___vfprintf_internal_r+0x454>
 1002cfc:	d9010dc4 	addi	r4,sp,1079
 1002d00:	d8810e04 	addi	r2,sp,1080
 1002d04:	dc413017 	ldw	r17,1216(sp)
 1002d08:	d8c00404 	addi	r3,sp,16
 1002d0c:	d9012615 	stw	r4,1176(sp)
 1002d10:	1109c83a 	sub	r4,r2,r4
 1002d14:	d8812715 	stw	r2,1180(sp)
 1002d18:	d8c11b15 	stw	r3,1132(sp)
 1002d1c:	d8011d15 	stw	zero,1140(sp)
 1002d20:	d8011c15 	stw	zero,1136(sp)
 1002d24:	802b883a 	mov	r21,r16
 1002d28:	d8013215 	stw	zero,1224(sp)
 1002d2c:	d8013615 	stw	zero,1240(sp)
 1002d30:	d8013515 	stw	zero,1236(sp)
 1002d34:	d8012c15 	stw	zero,1200(sp)
 1002d38:	1813883a 	mov	r9,r3
 1002d3c:	d9013915 	stw	r4,1252(sp)
 1002d40:	a8800007 	ldb	r2,0(r21)
 1002d44:	1002f326 	beq	r2,zero,1003914 <___vfprintf_internal_r+0xcac>
 1002d48:	00c00944 	movi	r3,37
 1002d4c:	a825883a 	mov	r18,r21
 1002d50:	10c0021e 	bne	r2,r3,1002d5c <___vfprintf_internal_r+0xf4>
 1002d54:	00001406 	br	1002da8 <___vfprintf_internal_r+0x140>
 1002d58:	10c00326 	beq	r2,r3,1002d68 <___vfprintf_internal_r+0x100>
 1002d5c:	94800044 	addi	r18,r18,1
 1002d60:	90800007 	ldb	r2,0(r18)
 1002d64:	103ffc1e 	bne	r2,zero,1002d58 <___vfprintf_internal_r+0xf0>
 1002d68:	9561c83a 	sub	r16,r18,r21
 1002d6c:	80000e26 	beq	r16,zero,1002da8 <___vfprintf_internal_r+0x140>
 1002d70:	da011d17 	ldw	r8,1140(sp)
 1002d74:	d8c11c17 	ldw	r3,1136(sp)
 1002d78:	4d400015 	stw	r21,0(r9)
 1002d7c:	4c000115 	stw	r16,4(r9)
 1002d80:	4411883a 	add	r8,r8,r16
 1002d84:	18c00044 	addi	r3,r3,1
 1002d88:	da011d15 	stw	r8,1140(sp)
 1002d8c:	d8c11c15 	stw	r3,1136(sp)
 1002d90:	008001c4 	movi	r2,7
 1002d94:	10c11016 	blt	r2,r3,10031d8 <___vfprintf_internal_r+0x570>
 1002d98:	4a400204 	addi	r9,r9,8
 1002d9c:	d8812c17 	ldw	r2,1200(sp)
 1002da0:	1405883a 	add	r2,r2,r16
 1002da4:	d8812c15 	stw	r2,1200(sp)
 1002da8:	90800007 	ldb	r2,0(r18)
 1002dac:	1000ee26 	beq	r2,zero,1003168 <___vfprintf_internal_r+0x500>
 1002db0:	95400044 	addi	r21,r18,1
 1002db4:	94800047 	ldb	r18,1(r18)
 1002db8:	073fffc4 	movi	fp,-1
 1002dbc:	e007883a 	mov	r3,fp
 1002dc0:	d8012585 	stb	zero,1174(sp)
 1002dc4:	d8012e15 	stw	zero,1208(sp)
 1002dc8:	0021883a 	mov	r16,zero
 1002dcc:	05001604 	movi	r20,88
 1002dd0:	04c00244 	movi	r19,9
 1002dd4:	4839883a 	mov	fp,r9
 1002dd8:	ad400044 	addi	r21,r21,1
 1002ddc:	90bff804 	addi	r2,r18,-32
 1002de0:	a080462e 	bgeu	r20,r2,1002efc <___vfprintf_internal_r+0x294>
 1002de4:	e013883a 	mov	r9,fp
 1002de8:	9000df26 	beq	r18,zero,1003168 <___vfprintf_internal_r+0x500>
 1002dec:	00c00044 	movi	r3,1
 1002df0:	d8c12815 	stw	r3,1184(sp)
 1002df4:	dc810405 	stb	r18,1040(sp)
 1002df8:	d8012585 	stb	zero,1174(sp)
 1002dfc:	d8c12b15 	stw	r3,1196(sp)
 1002e00:	dcc10404 	addi	r19,sp,1040
 1002e04:	d8013115 	stw	zero,1220(sp)
 1002e08:	80c0008c 	andi	r3,r16,2
 1002e0c:	d8c12a15 	stw	r3,1192(sp)
 1002e10:	18000326 	beq	r3,zero,1002e20 <___vfprintf_internal_r+0x1b8>
 1002e14:	d8c12817 	ldw	r3,1184(sp)
 1002e18:	18c00084 	addi	r3,r3,2
 1002e1c:	d8c12815 	stw	r3,1184(sp)
 1002e20:	80c0210c 	andi	r3,r16,132
 1002e24:	d8c12f15 	stw	r3,1212(sp)
 1002e28:	1802251e 	bne	r3,zero,10036c0 <___vfprintf_internal_r+0xa58>
 1002e2c:	d9012e17 	ldw	r4,1208(sp)
 1002e30:	d8c12817 	ldw	r3,1184(sp)
 1002e34:	20edc83a 	sub	r22,r4,r3
 1002e38:	0582210e 	bge	zero,r22,10036c0 <___vfprintf_internal_r+0xa58>
 1002e3c:	02800404 	movi	r10,16
 1002e40:	da011d17 	ldw	r8,1140(sp)
 1002e44:	d8c11c17 	ldw	r3,1136(sp)
 1002e48:	05c04074 	movhi	r23,257
 1002e4c:	bdfe7384 	addi	r23,r23,-1586
 1002e50:	5580200e 	bge	r10,r22,1002ed4 <___vfprintf_internal_r+0x26c>
 1002e54:	dc813815 	stw	r18,1248(sp)
 1002e58:	5039883a 	mov	fp,r10
 1002e5c:	b825883a 	mov	r18,r23
 1002e60:	050001c4 	movi	r20,7
 1002e64:	b02f883a 	mov	r23,r22
 1002e68:	802d883a 	mov	r22,r16
 1002e6c:	dc012917 	ldw	r16,1188(sp)
 1002e70:	00000306 	br	1002e80 <___vfprintf_internal_r+0x218>
 1002e74:	bdfffc04 	addi	r23,r23,-16
 1002e78:	4a400204 	addi	r9,r9,8
 1002e7c:	e5c0110e 	bge	fp,r23,1002ec4 <___vfprintf_internal_r+0x25c>
 1002e80:	4c800015 	stw	r18,0(r9)
 1002e84:	4f000115 	stw	fp,4(r9)
 1002e88:	42000404 	addi	r8,r8,16
 1002e8c:	18c00044 	addi	r3,r3,1
 1002e90:	da011d15 	stw	r8,1140(sp)
 1002e94:	d8c11c15 	stw	r3,1136(sp)
 1002e98:	a0fff60e 	bge	r20,r3,1002e74 <___vfprintf_internal_r+0x20c>
 1002e9c:	8809883a 	mov	r4,r17
 1002ea0:	800b883a 	mov	r5,r16
 1002ea4:	d9811b04 	addi	r6,sp,1132
 1002ea8:	1002c340 	call	1002c34 <__sprint_r>
 1002eac:	1000b41e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1002eb0:	bdfffc04 	addi	r23,r23,-16
 1002eb4:	da011d17 	ldw	r8,1140(sp)
 1002eb8:	d8c11c17 	ldw	r3,1136(sp)
 1002ebc:	da400404 	addi	r9,sp,16
 1002ec0:	e5ffef16 	blt	fp,r23,1002e80 <___vfprintf_internal_r+0x218>
 1002ec4:	b021883a 	mov	r16,r22
 1002ec8:	b82d883a 	mov	r22,r23
 1002ecc:	902f883a 	mov	r23,r18
 1002ed0:	dc813817 	ldw	r18,1248(sp)
 1002ed4:	4dc00015 	stw	r23,0(r9)
 1002ed8:	4d800115 	stw	r22,4(r9)
 1002edc:	4591883a 	add	r8,r8,r22
 1002ee0:	18c00044 	addi	r3,r3,1
 1002ee4:	da011d15 	stw	r8,1140(sp)
 1002ee8:	d8c11c15 	stw	r3,1136(sp)
 1002eec:	008001c4 	movi	r2,7
 1002ef0:	10c3fe16 	blt	r2,r3,1003eec <___vfprintf_internal_r+0x1284>
 1002ef4:	4a400204 	addi	r9,r9,8
 1002ef8:	0001f306 	br	10036c8 <___vfprintf_internal_r+0xa60>
 1002efc:	1085883a 	add	r2,r2,r2
 1002f00:	1085883a 	add	r2,r2,r2
 1002f04:	01004034 	movhi	r4,256
 1002f08:	210bc604 	addi	r4,r4,12056
 1002f0c:	1105883a 	add	r2,r2,r4
 1002f10:	10800017 	ldw	r2,0(r2)
 1002f14:	1000683a 	jmp	r2
 1002f18:	010035f4 	movhi	r4,215
 1002f1c:	01002de4 	muli	r4,zero,183
 1002f20:	01002de4 	muli	r4,zero,183
 1002f24:	0100360c 	andi	r4,zero,216
 1002f28:	01002de4 	muli	r4,zero,183
 1002f2c:	01002de4 	muli	r4,zero,183
 1002f30:	01002de4 	muli	r4,zero,183
 1002f34:	01002de4 	muli	r4,zero,183
 1002f38:	01002de4 	muli	r4,zero,183
 1002f3c:	01002de4 	muli	r4,zero,183
 1002f40:	010034c4 	movi	r4,211
 1002f44:	01003658 	cmpnei	r4,zero,217
 1002f48:	01002de4 	muli	r4,zero,183
 1002f4c:	0100308c 	andi	r4,zero,194
 1002f50:	0100342c 	andhi	r4,zero,208
 1002f54:	01002de4 	muli	r4,zero,183
 1002f58:	01003618 	cmpnei	r4,zero,216
 1002f5c:	01003624 	muli	r4,zero,216
 1002f60:	01003624 	muli	r4,zero,216
 1002f64:	01003624 	muli	r4,zero,216
 1002f68:	01003624 	muli	r4,zero,216
 1002f6c:	01003624 	muli	r4,zero,216
 1002f70:	01003624 	muli	r4,zero,216
 1002f74:	01003624 	muli	r4,zero,216
 1002f78:	01003624 	muli	r4,zero,216
 1002f7c:	01003624 	muli	r4,zero,216
 1002f80:	01002de4 	muli	r4,zero,183
 1002f84:	01002de4 	muli	r4,zero,183
 1002f88:	01002de4 	muli	r4,zero,183
 1002f8c:	01002de4 	muli	r4,zero,183
 1002f90:	01002de4 	muli	r4,zero,183
 1002f94:	01002de4 	muli	r4,zero,183
 1002f98:	01002de4 	muli	r4,zero,183
 1002f9c:	01002de4 	muli	r4,zero,183
 1002fa0:	01002de4 	muli	r4,zero,183
 1002fa4:	01002de4 	muli	r4,zero,183
 1002fa8:	010031fc 	xorhi	r4,zero,199
 1002fac:	010032bc 	xorhi	r4,zero,202
 1002fb0:	01002de4 	muli	r4,zero,183
 1002fb4:	010032bc 	xorhi	r4,zero,202
 1002fb8:	01002de4 	muli	r4,zero,183
 1002fbc:	01002de4 	muli	r4,zero,183
 1002fc0:	01002de4 	muli	r4,zero,183
 1002fc4:	01002de4 	muli	r4,zero,183
 1002fc8:	01003350 	cmplti	r4,zero,205
 1002fcc:	01002de4 	muli	r4,zero,183
 1002fd0:	01002de4 	muli	r4,zero,183
 1002fd4:	0100335c 	xori	r4,zero,205
 1002fd8:	01002de4 	muli	r4,zero,183
 1002fdc:	01002de4 	muli	r4,zero,183
 1002fe0:	01002de4 	muli	r4,zero,183
 1002fe4:	01002de4 	muli	r4,zero,183
 1002fe8:	01002de4 	muli	r4,zero,183
 1002fec:	01003394 	movui	r4,206
 1002ff0:	01002de4 	muli	r4,zero,183
 1002ff4:	01002de4 	muli	r4,zero,183
 1002ff8:	010033d0 	cmplti	r4,zero,207
 1002ffc:	01002de4 	muli	r4,zero,183
 1003000:	01002de4 	muli	r4,zero,183
 1003004:	01002de4 	muli	r4,zero,183
 1003008:	01002de4 	muli	r4,zero,183
 100300c:	01002de4 	muli	r4,zero,183
 1003010:	01002de4 	muli	r4,zero,183
 1003014:	01002de4 	muli	r4,zero,183
 1003018:	01002de4 	muli	r4,zero,183
 100301c:	01002de4 	muli	r4,zero,183
 1003020:	01002de4 	muli	r4,zero,183
 1003024:	01003668 	cmpgeui	r4,zero,217
 1003028:	0100369c 	xori	r4,zero,218
 100302c:	010032bc 	xorhi	r4,zero,202
 1003030:	010032bc 	xorhi	r4,zero,202
 1003034:	010032bc 	xorhi	r4,zero,202
 1003038:	010035e8 	cmpgeui	r4,zero,215
 100303c:	0100369c 	xori	r4,zero,218
 1003040:	01002de4 	muli	r4,zero,183
 1003044:	01002de4 	muli	r4,zero,183
 1003048:	01003474 	movhi	r4,209
 100304c:	01002de4 	muli	r4,zero,183
 1003050:	0100348c 	andi	r4,zero,210
 1003054:	010036a8 	cmpgeui	r4,zero,218
 1003058:	010034ec 	andhi	r4,zero,211
 100305c:	0100353c 	xorhi	r4,zero,212
 1003060:	01002de4 	muli	r4,zero,183
 1003064:	01003548 	cmpgei	r4,zero,213
 1003068:	01002de4 	muli	r4,zero,183
 100306c:	010036b4 	movhi	r4,218
 1003070:	01002de4 	muli	r4,zero,183
 1003074:	01002de4 	muli	r4,zero,183
 1003078:	010035ac 	andhi	r4,zero,214
 100307c:	d9012e17 	ldw	r4,1208(sp)
 1003080:	d8812d15 	stw	r2,1204(sp)
 1003084:	0109c83a 	sub	r4,zero,r4
 1003088:	d9012e15 	stw	r4,1208(sp)
 100308c:	84000114 	ori	r16,r16,4
 1003090:	ac800007 	ldb	r18,0(r21)
 1003094:	003f5006 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1003098:	d9013017 	ldw	r4,1216(sp)
 100309c:	d9412917 	ldw	r5,1188(sp)
 10030a0:	1004b740 	call	1004b74 <__swsetup_r>
 10030a4:	10003d1e 	bne	r2,zero,100319c <___vfprintf_internal_r+0x534>
 10030a8:	d8c12917 	ldw	r3,1188(sp)
 10030ac:	1880030b 	ldhu	r2,12(r3)
 10030b0:	00c00284 	movi	r3,10
 10030b4:	1100068c 	andi	r4,r2,26
 10030b8:	20ff101e 	bne	r4,r3,1002cfc <___vfprintf_internal_r+0x94>
 10030bc:	d9012917 	ldw	r4,1188(sp)
 10030c0:	20c0038b 	ldhu	r3,14(r4)
 10030c4:	193fffcc 	andi	r4,r3,65535
 10030c8:	2120001c 	xori	r4,r4,32768
 10030cc:	21200004 	addi	r4,r4,-32768
 10030d0:	203f0a16 	blt	r4,zero,1002cfc <___vfprintf_internal_r+0x94>
 10030d4:	d9012917 	ldw	r4,1188(sp)
 10030d8:	d9c12d17 	ldw	r7,1204(sp)
 10030dc:	10bfff4c 	andi	r2,r2,65533
 10030e0:	22800717 	ldw	r10,28(r4)
 10030e4:	22400917 	ldw	r9,36(r4)
 10030e8:	d9013017 	ldw	r4,1216(sp)
 10030ec:	02010004 	movi	r8,1024
 10030f0:	d881070d 	sth	r2,1052(sp)
 10030f4:	d9410404 	addi	r5,sp,1040
 10030f8:	d8800404 	addi	r2,sp,16
 10030fc:	800d883a 	mov	r6,r16
 1003100:	d8c1078d 	sth	r3,1054(sp)
 1003104:	da810b15 	stw	r10,1068(sp)
 1003108:	da410d15 	stw	r9,1076(sp)
 100310c:	d8810415 	stw	r2,1040(sp)
 1003110:	d8810815 	stw	r2,1056(sp)
 1003114:	da010615 	stw	r8,1048(sp)
 1003118:	da010915 	stw	r8,1060(sp)
 100311c:	d8010a15 	stw	zero,1064(sp)
 1003120:	1002c680 	call	1002c68 <___vfprintf_internal_r>
 1003124:	d8812c15 	stw	r2,1200(sp)
 1003128:	10000416 	blt	r2,zero,100313c <___vfprintf_internal_r+0x4d4>
 100312c:	d9013017 	ldw	r4,1216(sp)
 1003130:	d9410404 	addi	r5,sp,1040
 1003134:	10065a40 	call	10065a4 <_fflush_r>
 1003138:	1006501e 	bne	r2,zero,1004a7c <___vfprintf_internal_r+0x1e14>
 100313c:	d881070b 	ldhu	r2,1052(sp)
 1003140:	1080100c 	andi	r2,r2,64
 1003144:	10bfffcc 	andi	r2,r2,65535
 1003148:	10a0001c 	xori	r2,r2,32768
 100314c:	10a00004 	addi	r2,r2,-32768
 1003150:	10001426 	beq	r2,zero,10031a4 <___vfprintf_internal_r+0x53c>
 1003154:	d8c12917 	ldw	r3,1188(sp)
 1003158:	1880030b 	ldhu	r2,12(r3)
 100315c:	10801014 	ori	r2,r2,64
 1003160:	1880030d 	sth	r2,12(r3)
 1003164:	00000f06 	br	10031a4 <___vfprintf_internal_r+0x53c>
 1003168:	d8811d17 	ldw	r2,1140(sp)
 100316c:	10000426 	beq	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003170:	d9013017 	ldw	r4,1216(sp)
 1003174:	d9412917 	ldw	r5,1188(sp)
 1003178:	d9811b04 	addi	r6,sp,1132
 100317c:	1002c340 	call	1002c34 <__sprint_r>
 1003180:	d8c12917 	ldw	r3,1188(sp)
 1003184:	1880030b 	ldhu	r2,12(r3)
 1003188:	1080100c 	andi	r2,r2,64
 100318c:	10bfffcc 	andi	r2,r2,65535
 1003190:	10a0001c 	xori	r2,r2,32768
 1003194:	10a00004 	addi	r2,r2,-32768
 1003198:	10000226 	beq	r2,zero,10031a4 <___vfprintf_internal_r+0x53c>
 100319c:	00bfffc4 	movi	r2,-1
 10031a0:	d8812c15 	stw	r2,1200(sp)
 10031a4:	d8812c17 	ldw	r2,1200(sp)
 10031a8:	dfc14617 	ldw	ra,1304(sp)
 10031ac:	df014517 	ldw	fp,1300(sp)
 10031b0:	ddc14417 	ldw	r23,1296(sp)
 10031b4:	dd814317 	ldw	r22,1292(sp)
 10031b8:	dd414217 	ldw	r21,1288(sp)
 10031bc:	dd014117 	ldw	r20,1284(sp)
 10031c0:	dcc14017 	ldw	r19,1280(sp)
 10031c4:	dc813f17 	ldw	r18,1276(sp)
 10031c8:	dc413e17 	ldw	r17,1272(sp)
 10031cc:	dc013d17 	ldw	r16,1268(sp)
 10031d0:	dec14704 	addi	sp,sp,1308
 10031d4:	f800283a 	ret
 10031d8:	d9412917 	ldw	r5,1188(sp)
 10031dc:	8809883a 	mov	r4,r17
 10031e0:	d9811b04 	addi	r6,sp,1132
 10031e4:	1002c340 	call	1002c34 <__sprint_r>
 10031e8:	103fe51e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10031ec:	da400404 	addi	r9,sp,16
 10031f0:	003eea06 	br	1002d9c <___vfprintf_internal_r+0x134>
 10031f4:	10068600 	call	1006860 <__sinit>
 10031f8:	003eb306 	br	1002cc8 <___vfprintf_internal_r+0x60>
 10031fc:	e013883a 	mov	r9,fp
 1003200:	84000414 	ori	r16,r16,16
 1003204:	1839883a 	mov	fp,r3
 1003208:	8080080c 	andi	r2,r16,32
 100320c:	10034426 	beq	r2,zero,1003f20 <___vfprintf_internal_r+0x12b8>
 1003210:	d8c12d17 	ldw	r3,1204(sp)
 1003214:	18800117 	ldw	r2,4(r3)
 1003218:	1dc00017 	ldw	r23,0(r3)
 100321c:	18c00204 	addi	r3,r3,8
 1003220:	d8c12d15 	stw	r3,1204(sp)
 1003224:	102d883a 	mov	r22,r2
 1003228:	1003020e 	bge	r2,zero,1003e34 <___vfprintf_internal_r+0x11cc>
 100322c:	05efc83a 	sub	r23,zero,r23
 1003230:	b804c03a 	cmpne	r2,r23,zero
 1003234:	05adc83a 	sub	r22,zero,r22
 1003238:	b0adc83a 	sub	r22,r22,r2
 100323c:	00800b44 	movi	r2,45
 1003240:	d8812585 	stb	r2,1174(sp)
 1003244:	00c00044 	movi	r3,1
 1003248:	bd84b03a 	or	r2,r23,r22
 100324c:	e0000216 	blt	fp,zero,1003258 <___vfprintf_internal_r+0x5f0>
 1003250:	013fdfc4 	movi	r4,-129
 1003254:	8120703a 	and	r16,r16,r4
 1003258:	1001cc1e 	bne	r2,zero,100398c <___vfprintf_internal_r+0xd24>
 100325c:	e001cb1e 	bne	fp,zero,100398c <___vfprintf_internal_r+0xd24>
 1003260:	18c03fcc 	andi	r3,r3,255
 1003264:	1802ca1e 	bne	r3,zero,1003d90 <___vfprintf_internal_r+0x1128>
 1003268:	8080004c 	andi	r2,r16,1
 100326c:	1002c826 	beq	r2,zero,1003d90 <___vfprintf_internal_r+0x1128>
 1003270:	d8c13917 	ldw	r3,1252(sp)
 1003274:	00800c04 	movi	r2,48
 1003278:	d8810dc5 	stb	r2,1079(sp)
 100327c:	d8c12b15 	stw	r3,1196(sp)
 1003280:	dcc10dc4 	addi	r19,sp,1079
 1003284:	d8812b17 	ldw	r2,1196(sp)
 1003288:	d8812815 	stw	r2,1184(sp)
 100328c:	1700010e 	bge	r2,fp,1003294 <___vfprintf_internal_r+0x62c>
 1003290:	df012815 	stw	fp,1184(sp)
 1003294:	d8812583 	ldbu	r2,1174(sp)
 1003298:	df013115 	stw	fp,1220(sp)
 100329c:	10803fcc 	andi	r2,r2,255
 10032a0:	1080201c 	xori	r2,r2,128
 10032a4:	10bfe004 	addi	r2,r2,-128
 10032a8:	103ed726 	beq	r2,zero,1002e08 <___vfprintf_internal_r+0x1a0>
 10032ac:	d8c12817 	ldw	r3,1184(sp)
 10032b0:	18c00044 	addi	r3,r3,1
 10032b4:	d8c12815 	stw	r3,1184(sp)
 10032b8:	003ed306 	br	1002e08 <___vfprintf_internal_r+0x1a0>
 10032bc:	8080020c 	andi	r2,r16,8
 10032c0:	e013883a 	mov	r9,fp
 10032c4:	1839883a 	mov	fp,r3
 10032c8:	1003a626 	beq	r2,zero,1004164 <___vfprintf_internal_r+0x14fc>
 10032cc:	d9012d17 	ldw	r4,1204(sp)
 10032d0:	25800017 	ldw	r22,0(r4)
 10032d4:	25000117 	ldw	r20,4(r4)
 10032d8:	21000204 	addi	r4,r4,8
 10032dc:	d9012d15 	stw	r4,1204(sp)
 10032e0:	dd813315 	stw	r22,1228(sp)
 10032e4:	dd013415 	stw	r20,1232(sp)
 10032e8:	b009883a 	mov	r4,r22
 10032ec:	a00b883a 	mov	r5,r20
 10032f0:	da413c15 	stw	r9,1264(sp)
 10032f4:	10093000 	call	1009300 <__isinfd>
 10032f8:	da413c17 	ldw	r9,1264(sp)
 10032fc:	b009883a 	mov	r4,r22
 1003300:	a00b883a 	mov	r5,r20
 1003304:	10041d26 	beq	r2,zero,100437c <___vfprintf_internal_r+0x1714>
 1003308:	000d883a 	mov	r6,zero
 100330c:	000f883a 	mov	r7,zero
 1003310:	100a7c40 	call	100a7c4 <__ltdf2>
 1003314:	da413c17 	ldw	r9,1264(sp)
 1003318:	1004da16 	blt	r2,zero,1004684 <___vfprintf_internal_r+0x1a1c>
 100331c:	d8812583 	ldbu	r2,1174(sp)
 1003320:	00c011c4 	movi	r3,71
 1003324:	1c83d116 	blt	r3,r18,100426c <___vfprintf_internal_r+0x1604>
 1003328:	04c04074 	movhi	r19,257
 100332c:	9cfe6304 	addi	r19,r19,-1652
 1003330:	00c000c4 	movi	r3,3
 1003334:	d8c12815 	stw	r3,1184(sp)
 1003338:	00ffdfc4 	movi	r3,-129
 100333c:	80e0703a 	and	r16,r16,r3
 1003340:	d8c12817 	ldw	r3,1184(sp)
 1003344:	d8013115 	stw	zero,1220(sp)
 1003348:	d8c12b15 	stw	r3,1196(sp)
 100334c:	003fd306 	br	100329c <___vfprintf_internal_r+0x634>
 1003350:	84000214 	ori	r16,r16,8
 1003354:	ac800007 	ldb	r18,0(r21)
 1003358:	003e9f06 	br	1002dd8 <___vfprintf_internal_r+0x170>
 100335c:	e013883a 	mov	r9,fp
 1003360:	84000414 	ori	r16,r16,16
 1003364:	1839883a 	mov	fp,r3
 1003368:	8080080c 	andi	r2,r16,32
 100336c:	10031d26 	beq	r2,zero,1003fe4 <___vfprintf_internal_r+0x137c>
 1003370:	d8812d17 	ldw	r2,1204(sp)
 1003374:	0007883a 	mov	r3,zero
 1003378:	15c00017 	ldw	r23,0(r2)
 100337c:	15800117 	ldw	r22,4(r2)
 1003380:	10800204 	addi	r2,r2,8
 1003384:	d8812d15 	stw	r2,1204(sp)
 1003388:	d8012585 	stb	zero,1174(sp)
 100338c:	bd84b03a 	or	r2,r23,r22
 1003390:	003fae06 	br	100324c <___vfprintf_internal_r+0x5e4>
 1003394:	e013883a 	mov	r9,fp
 1003398:	84000414 	ori	r16,r16,16
 100339c:	1839883a 	mov	fp,r3
 10033a0:	8080080c 	andi	r2,r16,32
 10033a4:	1002e726 	beq	r2,zero,1003f44 <___vfprintf_internal_r+0x12dc>
 10033a8:	d8c12d17 	ldw	r3,1204(sp)
 10033ac:	d9012d17 	ldw	r4,1204(sp)
 10033b0:	1dc00017 	ldw	r23,0(r3)
 10033b4:	1d800117 	ldw	r22,4(r3)
 10033b8:	21000204 	addi	r4,r4,8
 10033bc:	00c00044 	movi	r3,1
 10033c0:	d9012d15 	stw	r4,1204(sp)
 10033c4:	bd84b03a 	or	r2,r23,r22
 10033c8:	d8012585 	stb	zero,1174(sp)
 10033cc:	003f9f06 	br	100324c <___vfprintf_internal_r+0x5e4>
 10033d0:	e013883a 	mov	r9,fp
 10033d4:	1839883a 	mov	fp,r3
 10033d8:	00c04074 	movhi	r3,257
 10033dc:	18fe6704 	addi	r3,r3,-1636
 10033e0:	d8c13615 	stw	r3,1240(sp)
 10033e4:	8080080c 	andi	r2,r16,32
 10033e8:	10007726 	beq	r2,zero,10035c8 <___vfprintf_internal_r+0x960>
 10033ec:	d9012d17 	ldw	r4,1204(sp)
 10033f0:	25c00017 	ldw	r23,0(r4)
 10033f4:	25800117 	ldw	r22,4(r4)
 10033f8:	21000204 	addi	r4,r4,8
 10033fc:	d9012d15 	stw	r4,1204(sp)
 1003400:	8080004c 	andi	r2,r16,1
 1003404:	1002c226 	beq	r2,zero,1003f10 <___vfprintf_internal_r+0x12a8>
 1003408:	bd84b03a 	or	r2,r23,r22
 100340c:	10035d26 	beq	r2,zero,1004184 <___vfprintf_internal_r+0x151c>
 1003410:	00c00c04 	movi	r3,48
 1003414:	d8c12505 	stb	r3,1172(sp)
 1003418:	dc812545 	stb	r18,1173(sp)
 100341c:	84000094 	ori	r16,r16,2
 1003420:	00c00084 	movi	r3,2
 1003424:	d8012585 	stb	zero,1174(sp)
 1003428:	003f8806 	br	100324c <___vfprintf_internal_r+0x5e4>
 100342c:	ac800007 	ldb	r18,0(r21)
 1003430:	00c00a84 	movi	r3,42
 1003434:	adc00044 	addi	r23,r21,1
 1003438:	90c57526 	beq	r18,r3,1004a10 <___vfprintf_internal_r+0x1da8>
 100343c:	95bff404 	addi	r22,r18,-48
 1003440:	0009883a 	mov	r4,zero
 1003444:	9d84ff36 	bltu	r19,r22,1004844 <___vfprintf_internal_r+0x1bdc>
 1003448:	01400284 	movi	r5,10
 100344c:	10013440 	call	1001344 <__mulsi3>
 1003450:	bc800007 	ldb	r18,0(r23)
 1003454:	b089883a 	add	r4,r22,r2
 1003458:	bdc00044 	addi	r23,r23,1
 100345c:	95bff404 	addi	r22,r18,-48
 1003460:	9dbff92e 	bgeu	r19,r22,1003448 <___vfprintf_internal_r+0x7e0>
 1003464:	2007883a 	mov	r3,r4
 1003468:	20044316 	blt	r4,zero,1004578 <___vfprintf_internal_r+0x1910>
 100346c:	b82b883a 	mov	r21,r23
 1003470:	003e5a06 	br	1002ddc <___vfprintf_internal_r+0x174>
 1003474:	ac800007 	ldb	r18,0(r21)
 1003478:	01001b04 	movi	r4,108
 100347c:	a805883a 	mov	r2,r21
 1003480:	91045526 	beq	r18,r4,10045d8 <___vfprintf_internal_r+0x1970>
 1003484:	84000414 	ori	r16,r16,16
 1003488:	003e5306 	br	1002dd8 <___vfprintf_internal_r+0x170>
 100348c:	8080080c 	andi	r2,r16,32
 1003490:	e013883a 	mov	r9,fp
 1003494:	10034026 	beq	r2,zero,1004198 <___vfprintf_internal_r+0x1530>
 1003498:	d9012d17 	ldw	r4,1204(sp)
 100349c:	20800017 	ldw	r2,0(r4)
 10034a0:	d9012c17 	ldw	r4,1200(sp)
 10034a4:	2007d7fa 	srai	r3,r4,31
 10034a8:	d9012d17 	ldw	r4,1204(sp)
 10034ac:	10c00115 	stw	r3,4(r2)
 10034b0:	21000104 	addi	r4,r4,4
 10034b4:	d9012d15 	stw	r4,1204(sp)
 10034b8:	d9012c17 	ldw	r4,1200(sp)
 10034bc:	11000015 	stw	r4,0(r2)
 10034c0:	003e1f06 	br	1002d40 <___vfprintf_internal_r+0xd8>
 10034c4:	d9012d17 	ldw	r4,1204(sp)
 10034c8:	21000017 	ldw	r4,0(r4)
 10034cc:	d9012e15 	stw	r4,1208(sp)
 10034d0:	d9012d17 	ldw	r4,1204(sp)
 10034d4:	20800104 	addi	r2,r4,4
 10034d8:	d9012e17 	ldw	r4,1208(sp)
 10034dc:	203ee716 	blt	r4,zero,100307c <___vfprintf_internal_r+0x414>
 10034e0:	d8812d15 	stw	r2,1204(sp)
 10034e4:	ac800007 	ldb	r18,0(r21)
 10034e8:	003e3b06 	br	1002dd8 <___vfprintf_internal_r+0x170>
 10034ec:	e013883a 	mov	r9,fp
 10034f0:	1839883a 	mov	fp,r3
 10034f4:	d8c12d17 	ldw	r3,1204(sp)
 10034f8:	00800c04 	movi	r2,48
 10034fc:	01004074 	movhi	r4,257
 1003500:	213e6c04 	addi	r4,r4,-1616
 1003504:	1dc00017 	ldw	r23,0(r3)
 1003508:	18c00104 	addi	r3,r3,4
 100350c:	d8812505 	stb	r2,1172(sp)
 1003510:	00801e04 	movi	r2,120
 1003514:	d8812545 	stb	r2,1173(sp)
 1003518:	d8c12d15 	stw	r3,1204(sp)
 100351c:	002d883a 	mov	r22,zero
 1003520:	84000094 	ori	r16,r16,2
 1003524:	d9013615 	stw	r4,1240(sp)
 1003528:	00c00084 	movi	r3,2
 100352c:	04801e04 	movi	r18,120
 1003530:	b805883a 	mov	r2,r23
 1003534:	d8012585 	stb	zero,1174(sp)
 1003538:	003f4406 	br	100324c <___vfprintf_internal_r+0x5e4>
 100353c:	84000814 	ori	r16,r16,32
 1003540:	ac800007 	ldb	r18,0(r21)
 1003544:	003e2406 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1003548:	d8812d17 	ldw	r2,1204(sp)
 100354c:	d8012585 	stb	zero,1174(sp)
 1003550:	e013883a 	mov	r9,fp
 1003554:	14c00017 	ldw	r19,0(r2)
 1003558:	1839883a 	mov	fp,r3
 100355c:	15c00104 	addi	r23,r2,4
 1003560:	98045526 	beq	r19,zero,10046b8 <___vfprintf_internal_r+0x1a50>
 1003564:	9809883a 	mov	r4,r19
 1003568:	18043116 	blt	r3,zero,1004630 <___vfprintf_internal_r+0x19c8>
 100356c:	000b883a 	mov	r5,zero
 1003570:	180d883a 	mov	r6,r3
 1003574:	da413c15 	stw	r9,1264(sp)
 1003578:	100773c0 	call	100773c <memchr>
 100357c:	da413c17 	ldw	r9,1264(sp)
 1003580:	10047a26 	beq	r2,zero,100476c <___vfprintf_internal_r+0x1b04>
 1003584:	14c5c83a 	sub	r2,r2,r19
 1003588:	d8812b15 	stw	r2,1196(sp)
 100358c:	e083d40e 	bge	fp,r2,10044e0 <___vfprintf_internal_r+0x1878>
 1003590:	df012815 	stw	fp,1184(sp)
 1003594:	e004e416 	blt	fp,zero,1004928 <___vfprintf_internal_r+0x1cc0>
 1003598:	d8812583 	ldbu	r2,1174(sp)
 100359c:	df012b15 	stw	fp,1196(sp)
 10035a0:	ddc12d15 	stw	r23,1204(sp)
 10035a4:	d8013115 	stw	zero,1220(sp)
 10035a8:	003f3c06 	br	100329c <___vfprintf_internal_r+0x634>
 10035ac:	00804074 	movhi	r2,257
 10035b0:	10be6c04 	addi	r2,r2,-1616
 10035b4:	d8813615 	stw	r2,1240(sp)
 10035b8:	8080080c 	andi	r2,r16,32
 10035bc:	e013883a 	mov	r9,fp
 10035c0:	1839883a 	mov	fp,r3
 10035c4:	103f891e 	bne	r2,zero,10033ec <___vfprintf_internal_r+0x784>
 10035c8:	8080040c 	andi	r2,r16,16
 10035cc:	1002c326 	beq	r2,zero,10040dc <___vfprintf_internal_r+0x1474>
 10035d0:	d8812d17 	ldw	r2,1204(sp)
 10035d4:	002d883a 	mov	r22,zero
 10035d8:	15c00017 	ldw	r23,0(r2)
 10035dc:	10800104 	addi	r2,r2,4
 10035e0:	d8812d15 	stw	r2,1204(sp)
 10035e4:	003f8606 	br	1003400 <___vfprintf_internal_r+0x798>
 10035e8:	84001014 	ori	r16,r16,64
 10035ec:	ac800007 	ldb	r18,0(r21)
 10035f0:	003df906 	br	1002dd8 <___vfprintf_internal_r+0x170>
 10035f4:	d8812587 	ldb	r2,1174(sp)
 10035f8:	1002e51e 	bne	r2,zero,1004190 <___vfprintf_internal_r+0x1528>
 10035fc:	00800804 	movi	r2,32
 1003600:	d8812585 	stb	r2,1174(sp)
 1003604:	ac800007 	ldb	r18,0(r21)
 1003608:	003df306 	br	1002dd8 <___vfprintf_internal_r+0x170>
 100360c:	84000054 	ori	r16,r16,1
 1003610:	ac800007 	ldb	r18,0(r21)
 1003614:	003df006 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1003618:	84002014 	ori	r16,r16,128
 100361c:	ac800007 	ldb	r18,0(r21)
 1003620:	003ded06 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1003624:	0009883a 	mov	r4,zero
 1003628:	95bff404 	addi	r22,r18,-48
 100362c:	182f883a 	mov	r23,r3
 1003630:	01400284 	movi	r5,10
 1003634:	10013440 	call	1001344 <__mulsi3>
 1003638:	ac800007 	ldb	r18,0(r21)
 100363c:	1589883a 	add	r4,r2,r22
 1003640:	ad400044 	addi	r21,r21,1
 1003644:	95bff404 	addi	r22,r18,-48
 1003648:	9dbff92e 	bgeu	r19,r22,1003630 <___vfprintf_internal_r+0x9c8>
 100364c:	b807883a 	mov	r3,r23
 1003650:	d9012e15 	stw	r4,1208(sp)
 1003654:	003de106 	br	1002ddc <___vfprintf_internal_r+0x174>
 1003658:	00800ac4 	movi	r2,43
 100365c:	d8812585 	stb	r2,1174(sp)
 1003660:	ac800007 	ldb	r18,0(r21)
 1003664:	003ddc06 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1003668:	d8c12d17 	ldw	r3,1204(sp)
 100366c:	d9012d17 	ldw	r4,1204(sp)
 1003670:	e013883a 	mov	r9,fp
 1003674:	18800017 	ldw	r2,0(r3)
 1003678:	21000104 	addi	r4,r4,4
 100367c:	00c00044 	movi	r3,1
 1003680:	d8c12815 	stw	r3,1184(sp)
 1003684:	d8012585 	stb	zero,1174(sp)
 1003688:	d8810405 	stb	r2,1040(sp)
 100368c:	d9012d15 	stw	r4,1204(sp)
 1003690:	d8c12b15 	stw	r3,1196(sp)
 1003694:	dcc10404 	addi	r19,sp,1040
 1003698:	003dda06 	br	1002e04 <___vfprintf_internal_r+0x19c>
 100369c:	e013883a 	mov	r9,fp
 10036a0:	1839883a 	mov	fp,r3
 10036a4:	003ed806 	br	1003208 <___vfprintf_internal_r+0x5a0>
 10036a8:	e013883a 	mov	r9,fp
 10036ac:	1839883a 	mov	fp,r3
 10036b0:	003f2d06 	br	1003368 <___vfprintf_internal_r+0x700>
 10036b4:	e013883a 	mov	r9,fp
 10036b8:	1839883a 	mov	fp,r3
 10036bc:	003f3806 	br	10033a0 <___vfprintf_internal_r+0x738>
 10036c0:	da011d17 	ldw	r8,1140(sp)
 10036c4:	d8c11c17 	ldw	r3,1136(sp)
 10036c8:	d8812587 	ldb	r2,1174(sp)
 10036cc:	10000b26 	beq	r2,zero,10036fc <___vfprintf_internal_r+0xa94>
 10036d0:	d8812584 	addi	r2,sp,1174
 10036d4:	48800015 	stw	r2,0(r9)
 10036d8:	00800044 	movi	r2,1
 10036dc:	48800115 	stw	r2,4(r9)
 10036e0:	4091883a 	add	r8,r8,r2
 10036e4:	1887883a 	add	r3,r3,r2
 10036e8:	da011d15 	stw	r8,1140(sp)
 10036ec:	d8c11c15 	stw	r3,1136(sp)
 10036f0:	008001c4 	movi	r2,7
 10036f4:	10c18e16 	blt	r2,r3,1003d30 <___vfprintf_internal_r+0x10c8>
 10036f8:	4a400204 	addi	r9,r9,8
 10036fc:	d9012a17 	ldw	r4,1192(sp)
 1003700:	20000b26 	beq	r4,zero,1003730 <___vfprintf_internal_r+0xac8>
 1003704:	d8812504 	addi	r2,sp,1172
 1003708:	48800015 	stw	r2,0(r9)
 100370c:	00800084 	movi	r2,2
 1003710:	48800115 	stw	r2,4(r9)
 1003714:	4091883a 	add	r8,r8,r2
 1003718:	18c00044 	addi	r3,r3,1
 100371c:	da011d15 	stw	r8,1140(sp)
 1003720:	d8c11c15 	stw	r3,1136(sp)
 1003724:	008001c4 	movi	r2,7
 1003728:	10c17816 	blt	r2,r3,1003d0c <___vfprintf_internal_r+0x10a4>
 100372c:	4a400204 	addi	r9,r9,8
 1003730:	d9012f17 	ldw	r4,1212(sp)
 1003734:	00802004 	movi	r2,128
 1003738:	2080fc26 	beq	r4,r2,1003b2c <___vfprintf_internal_r+0xec4>
 100373c:	d8813117 	ldw	r2,1220(sp)
 1003740:	d9012b17 	ldw	r4,1196(sp)
 1003744:	112fc83a 	sub	r23,r2,r4
 1003748:	05c02a0e 	bge	zero,r23,10037f4 <___vfprintf_internal_r+0xb8c>
 100374c:	07000404 	movi	fp,16
 1003750:	05004074 	movhi	r20,257
 1003754:	a53e7784 	addi	r20,r20,-1570
 1003758:	e5c01d0e 	bge	fp,r23,10037d0 <___vfprintf_internal_r+0xb68>
 100375c:	dc812a15 	stw	r18,1192(sp)
 1003760:	058001c4 	movi	r22,7
 1003764:	a025883a 	mov	r18,r20
 1003768:	8029883a 	mov	r20,r16
 100376c:	dc012917 	ldw	r16,1188(sp)
 1003770:	00000306 	br	1003780 <___vfprintf_internal_r+0xb18>
 1003774:	bdfffc04 	addi	r23,r23,-16
 1003778:	4a400204 	addi	r9,r9,8
 100377c:	e5c0110e 	bge	fp,r23,10037c4 <___vfprintf_internal_r+0xb5c>
 1003780:	4c800015 	stw	r18,0(r9)
 1003784:	4f000115 	stw	fp,4(r9)
 1003788:	42000404 	addi	r8,r8,16
 100378c:	18c00044 	addi	r3,r3,1
 1003790:	da011d15 	stw	r8,1140(sp)
 1003794:	d8c11c15 	stw	r3,1136(sp)
 1003798:	b0fff60e 	bge	r22,r3,1003774 <___vfprintf_internal_r+0xb0c>
 100379c:	8809883a 	mov	r4,r17
 10037a0:	800b883a 	mov	r5,r16
 10037a4:	d9811b04 	addi	r6,sp,1132
 10037a8:	1002c340 	call	1002c34 <__sprint_r>
 10037ac:	103e741e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10037b0:	bdfffc04 	addi	r23,r23,-16
 10037b4:	da011d17 	ldw	r8,1140(sp)
 10037b8:	d8c11c17 	ldw	r3,1136(sp)
 10037bc:	da400404 	addi	r9,sp,16
 10037c0:	e5ffef16 	blt	fp,r23,1003780 <___vfprintf_internal_r+0xb18>
 10037c4:	a021883a 	mov	r16,r20
 10037c8:	9029883a 	mov	r20,r18
 10037cc:	dc812a17 	ldw	r18,1192(sp)
 10037d0:	4d000015 	stw	r20,0(r9)
 10037d4:	4dc00115 	stw	r23,4(r9)
 10037d8:	45d1883a 	add	r8,r8,r23
 10037dc:	18c00044 	addi	r3,r3,1
 10037e0:	da011d15 	stw	r8,1140(sp)
 10037e4:	d8c11c15 	stw	r3,1136(sp)
 10037e8:	008001c4 	movi	r2,7
 10037ec:	10c13e16 	blt	r2,r3,1003ce8 <___vfprintf_internal_r+0x1080>
 10037f0:	4a400204 	addi	r9,r9,8
 10037f4:	8080400c 	andi	r2,r16,256
 10037f8:	1000831e 	bne	r2,zero,1003a08 <___vfprintf_internal_r+0xda0>
 10037fc:	d8812b17 	ldw	r2,1196(sp)
 1003800:	4cc00015 	stw	r19,0(r9)
 1003804:	48800115 	stw	r2,4(r9)
 1003808:	4091883a 	add	r8,r8,r2
 100380c:	18c00044 	addi	r3,r3,1
 1003810:	da011d15 	stw	r8,1140(sp)
 1003814:	d8c11c15 	stw	r3,1136(sp)
 1003818:	008001c4 	movi	r2,7
 100381c:	10c05316 	blt	r2,r3,100396c <___vfprintf_internal_r+0xd04>
 1003820:	4a400204 	addi	r9,r9,8
 1003824:	8400010c 	andi	r16,r16,4
 1003828:	80002e26 	beq	r16,zero,10038e4 <___vfprintf_internal_r+0xc7c>
 100382c:	d8812e17 	ldw	r2,1208(sp)
 1003830:	d8c12817 	ldw	r3,1184(sp)
 1003834:	10e1c83a 	sub	r16,r2,r3
 1003838:	04002a0e 	bge	zero,r16,10038e4 <___vfprintf_internal_r+0xc7c>
 100383c:	04800404 	movi	r18,16
 1003840:	d8c11c17 	ldw	r3,1136(sp)
 1003844:	05c04074 	movhi	r23,257
 1003848:	bdfe7384 	addi	r23,r23,-1586
 100384c:	9400170e 	bge	r18,r16,10038ac <___vfprintf_internal_r+0xc44>
 1003850:	04c001c4 	movi	r19,7
 1003854:	dd012917 	ldw	r20,1188(sp)
 1003858:	00000306 	br	1003868 <___vfprintf_internal_r+0xc00>
 100385c:	843ffc04 	addi	r16,r16,-16
 1003860:	4a400204 	addi	r9,r9,8
 1003864:	9400110e 	bge	r18,r16,10038ac <___vfprintf_internal_r+0xc44>
 1003868:	4dc00015 	stw	r23,0(r9)
 100386c:	4c800115 	stw	r18,4(r9)
 1003870:	42000404 	addi	r8,r8,16
 1003874:	18c00044 	addi	r3,r3,1
 1003878:	da011d15 	stw	r8,1140(sp)
 100387c:	d8c11c15 	stw	r3,1136(sp)
 1003880:	98fff60e 	bge	r19,r3,100385c <___vfprintf_internal_r+0xbf4>
 1003884:	8809883a 	mov	r4,r17
 1003888:	a00b883a 	mov	r5,r20
 100388c:	d9811b04 	addi	r6,sp,1132
 1003890:	1002c340 	call	1002c34 <__sprint_r>
 1003894:	103e3a1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003898:	843ffc04 	addi	r16,r16,-16
 100389c:	da011d17 	ldw	r8,1140(sp)
 10038a0:	d8c11c17 	ldw	r3,1136(sp)
 10038a4:	da400404 	addi	r9,sp,16
 10038a8:	943fef16 	blt	r18,r16,1003868 <___vfprintf_internal_r+0xc00>
 10038ac:	4dc00015 	stw	r23,0(r9)
 10038b0:	4c000115 	stw	r16,4(r9)
 10038b4:	8211883a 	add	r8,r16,r8
 10038b8:	18c00044 	addi	r3,r3,1
 10038bc:	da011d15 	stw	r8,1140(sp)
 10038c0:	d8c11c15 	stw	r3,1136(sp)
 10038c4:	008001c4 	movi	r2,7
 10038c8:	10c0060e 	bge	r2,r3,10038e4 <___vfprintf_internal_r+0xc7c>
 10038cc:	d9412917 	ldw	r5,1188(sp)
 10038d0:	8809883a 	mov	r4,r17
 10038d4:	d9811b04 	addi	r6,sp,1132
 10038d8:	1002c340 	call	1002c34 <__sprint_r>
 10038dc:	103e281e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10038e0:	da011d17 	ldw	r8,1140(sp)
 10038e4:	dd012817 	ldw	r20,1184(sp)
 10038e8:	d9012e17 	ldw	r4,1208(sp)
 10038ec:	a100010e 	bge	r20,r4,10038f4 <___vfprintf_internal_r+0xc8c>
 10038f0:	2029883a 	mov	r20,r4
 10038f4:	d8812c17 	ldw	r2,1200(sp)
 10038f8:	1505883a 	add	r2,r2,r20
 10038fc:	d8812c15 	stw	r2,1200(sp)
 1003900:	4000b91e 	bne	r8,zero,1003be8 <___vfprintf_internal_r+0xf80>
 1003904:	d8011c15 	stw	zero,1136(sp)
 1003908:	a8800007 	ldb	r2,0(r21)
 100390c:	da400404 	addi	r9,sp,16
 1003910:	103d0d1e 	bne	r2,zero,1002d48 <___vfprintf_internal_r+0xe0>
 1003914:	a825883a 	mov	r18,r21
 1003918:	003d2306 	br	1002da8 <___vfprintf_internal_r+0x140>
 100391c:	d9412917 	ldw	r5,1188(sp)
 1003920:	8809883a 	mov	r4,r17
 1003924:	d9811b04 	addi	r6,sp,1132
 1003928:	1002c340 	call	1002c34 <__sprint_r>
 100392c:	103e141e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003930:	da011d17 	ldw	r8,1140(sp)
 1003934:	da400404 	addi	r9,sp,16
 1003938:	8080004c 	andi	r2,r16,1
 100393c:	103fb926 	beq	r2,zero,1003824 <___vfprintf_internal_r+0xbbc>
 1003940:	d8c11c17 	ldw	r3,1136(sp)
 1003944:	d9013717 	ldw	r4,1244(sp)
 1003948:	00800044 	movi	r2,1
 100394c:	48800115 	stw	r2,4(r9)
 1003950:	49000015 	stw	r4,0(r9)
 1003954:	4091883a 	add	r8,r8,r2
 1003958:	1887883a 	add	r3,r3,r2
 100395c:	da011d15 	stw	r8,1140(sp)
 1003960:	d8c11c15 	stw	r3,1136(sp)
 1003964:	008001c4 	movi	r2,7
 1003968:	10ffad0e 	bge	r2,r3,1003820 <___vfprintf_internal_r+0xbb8>
 100396c:	d9412917 	ldw	r5,1188(sp)
 1003970:	8809883a 	mov	r4,r17
 1003974:	d9811b04 	addi	r6,sp,1132
 1003978:	1002c340 	call	1002c34 <__sprint_r>
 100397c:	103e001e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003980:	da400404 	addi	r9,sp,16
 1003984:	da011d17 	ldw	r8,1140(sp)
 1003988:	003fa606 	br	1003824 <___vfprintf_internal_r+0xbbc>
 100398c:	18803fcc 	andi	r2,r3,255
 1003990:	00c00044 	movi	r3,1
 1003994:	10c10126 	beq	r2,r3,1003d9c <___vfprintf_internal_r+0x1134>
 1003998:	00c00084 	movi	r3,2
 100399c:	10c0ed26 	beq	r2,r3,1003d54 <___vfprintf_internal_r+0x10ec>
 10039a0:	d8c10dc4 	addi	r3,sp,1079
 10039a4:	b808d0fa 	srli	r4,r23,3
 10039a8:	b00a977a 	slli	r5,r22,29
 10039ac:	b02cd0fa 	srli	r22,r22,3
 10039b0:	bdc001cc 	andi	r23,r23,7
 10039b4:	b8800c04 	addi	r2,r23,48
 10039b8:	292eb03a 	or	r23,r5,r4
 10039bc:	18800005 	stb	r2,0(r3)
 10039c0:	bd88b03a 	or	r4,r23,r22
 10039c4:	1827883a 	mov	r19,r3
 10039c8:	18ffffc4 	addi	r3,r3,-1
 10039cc:	203ff51e 	bne	r4,zero,10039a4 <___vfprintf_internal_r+0xd3c>
 10039d0:	8100004c 	andi	r4,r16,1
 10039d4:	980b883a 	mov	r5,r19
 10039d8:	20000726 	beq	r4,zero,10039f8 <___vfprintf_internal_r+0xd90>
 10039dc:	10803fcc 	andi	r2,r2,255
 10039e0:	1080201c 	xori	r2,r2,128
 10039e4:	10bfe004 	addi	r2,r2,-128
 10039e8:	01000c04 	movi	r4,48
 10039ec:	11000226 	beq	r2,r4,10039f8 <___vfprintf_internal_r+0xd90>
 10039f0:	1827883a 	mov	r19,r3
 10039f4:	293fffc5 	stb	r4,-1(r5)
 10039f8:	d8812717 	ldw	r2,1180(sp)
 10039fc:	14c5c83a 	sub	r2,r2,r19
 1003a00:	d8812b15 	stw	r2,1196(sp)
 1003a04:	003e1f06 	br	1003284 <___vfprintf_internal_r+0x61c>
 1003a08:	00801944 	movi	r2,101
 1003a0c:	14807c0e 	bge	r2,r18,1003c00 <___vfprintf_internal_r+0xf98>
 1003a10:	d9013317 	ldw	r4,1228(sp)
 1003a14:	d9413417 	ldw	r5,1232(sp)
 1003a18:	000d883a 	mov	r6,zero
 1003a1c:	000f883a 	mov	r7,zero
 1003a20:	d8c13b15 	stw	r3,1260(sp)
 1003a24:	da013a15 	stw	r8,1256(sp)
 1003a28:	da413c15 	stw	r9,1264(sp)
 1003a2c:	100a6440 	call	100a644 <__eqdf2>
 1003a30:	d8c13b17 	ldw	r3,1260(sp)
 1003a34:	da013a17 	ldw	r8,1256(sp)
 1003a38:	da413c17 	ldw	r9,1264(sp)
 1003a3c:	1001001e 	bne	r2,zero,1003e40 <___vfprintf_internal_r+0x11d8>
 1003a40:	00804074 	movhi	r2,257
 1003a44:	10be7304 	addi	r2,r2,-1588
 1003a48:	48800015 	stw	r2,0(r9)
 1003a4c:	00800044 	movi	r2,1
 1003a50:	48800115 	stw	r2,4(r9)
 1003a54:	4091883a 	add	r8,r8,r2
 1003a58:	1887883a 	add	r3,r3,r2
 1003a5c:	da011d15 	stw	r8,1140(sp)
 1003a60:	d8c11c15 	stw	r3,1136(sp)
 1003a64:	008001c4 	movi	r2,7
 1003a68:	10c20316 	blt	r2,r3,1004278 <___vfprintf_internal_r+0x1610>
 1003a6c:	4a400204 	addi	r9,r9,8
 1003a70:	d8812417 	ldw	r2,1168(sp)
 1003a74:	d8c13217 	ldw	r3,1224(sp)
 1003a78:	10c00216 	blt	r2,r3,1003a84 <___vfprintf_internal_r+0xe1c>
 1003a7c:	8080004c 	andi	r2,r16,1
 1003a80:	103f6826 	beq	r2,zero,1003824 <___vfprintf_internal_r+0xbbc>
 1003a84:	d8c11c17 	ldw	r3,1136(sp)
 1003a88:	d9013717 	ldw	r4,1244(sp)
 1003a8c:	00800044 	movi	r2,1
 1003a90:	48800115 	stw	r2,4(r9)
 1003a94:	49000015 	stw	r4,0(r9)
 1003a98:	4091883a 	add	r8,r8,r2
 1003a9c:	1887883a 	add	r3,r3,r2
 1003aa0:	da011d15 	stw	r8,1140(sp)
 1003aa4:	d8c11c15 	stw	r3,1136(sp)
 1003aa8:	008001c4 	movi	r2,7
 1003aac:	10c2ce16 	blt	r2,r3,10045e8 <___vfprintf_internal_r+0x1980>
 1003ab0:	4a400204 	addi	r9,r9,8
 1003ab4:	d8813217 	ldw	r2,1224(sp)
 1003ab8:	14bfffc4 	addi	r18,r2,-1
 1003abc:	04bf590e 	bge	zero,r18,1003824 <___vfprintf_internal_r+0xbbc>
 1003ac0:	04c00404 	movi	r19,16
 1003ac4:	d8c11c17 	ldw	r3,1136(sp)
 1003ac8:	05004074 	movhi	r20,257
 1003acc:	a53e7784 	addi	r20,r20,-1570
 1003ad0:	9c818a0e 	bge	r19,r18,10040fc <___vfprintf_internal_r+0x1494>
 1003ad4:	058001c4 	movi	r22,7
 1003ad8:	ddc12917 	ldw	r23,1188(sp)
 1003adc:	00000306 	br	1003aec <___vfprintf_internal_r+0xe84>
 1003ae0:	4a400204 	addi	r9,r9,8
 1003ae4:	94bffc04 	addi	r18,r18,-16
 1003ae8:	9c81840e 	bge	r19,r18,10040fc <___vfprintf_internal_r+0x1494>
 1003aec:	4d000015 	stw	r20,0(r9)
 1003af0:	4cc00115 	stw	r19,4(r9)
 1003af4:	42000404 	addi	r8,r8,16
 1003af8:	18c00044 	addi	r3,r3,1
 1003afc:	da011d15 	stw	r8,1140(sp)
 1003b00:	d8c11c15 	stw	r3,1136(sp)
 1003b04:	b0fff60e 	bge	r22,r3,1003ae0 <___vfprintf_internal_r+0xe78>
 1003b08:	8809883a 	mov	r4,r17
 1003b0c:	b80b883a 	mov	r5,r23
 1003b10:	d9811b04 	addi	r6,sp,1132
 1003b14:	1002c340 	call	1002c34 <__sprint_r>
 1003b18:	103d991e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003b1c:	da011d17 	ldw	r8,1140(sp)
 1003b20:	d8c11c17 	ldw	r3,1136(sp)
 1003b24:	da400404 	addi	r9,sp,16
 1003b28:	003fee06 	br	1003ae4 <___vfprintf_internal_r+0xe7c>
 1003b2c:	d8812e17 	ldw	r2,1208(sp)
 1003b30:	d9012817 	ldw	r4,1184(sp)
 1003b34:	112fc83a 	sub	r23,r2,r4
 1003b38:	05ff000e 	bge	zero,r23,100373c <___vfprintf_internal_r+0xad4>
 1003b3c:	07000404 	movi	fp,16
 1003b40:	05004074 	movhi	r20,257
 1003b44:	a53e7784 	addi	r20,r20,-1570
 1003b48:	e5c01d0e 	bge	fp,r23,1003bc0 <___vfprintf_internal_r+0xf58>
 1003b4c:	dc812a15 	stw	r18,1192(sp)
 1003b50:	058001c4 	movi	r22,7
 1003b54:	a025883a 	mov	r18,r20
 1003b58:	8029883a 	mov	r20,r16
 1003b5c:	dc012917 	ldw	r16,1188(sp)
 1003b60:	00000306 	br	1003b70 <___vfprintf_internal_r+0xf08>
 1003b64:	bdfffc04 	addi	r23,r23,-16
 1003b68:	4a400204 	addi	r9,r9,8
 1003b6c:	e5c0110e 	bge	fp,r23,1003bb4 <___vfprintf_internal_r+0xf4c>
 1003b70:	4c800015 	stw	r18,0(r9)
 1003b74:	4f000115 	stw	fp,4(r9)
 1003b78:	42000404 	addi	r8,r8,16
 1003b7c:	18c00044 	addi	r3,r3,1
 1003b80:	da011d15 	stw	r8,1140(sp)
 1003b84:	d8c11c15 	stw	r3,1136(sp)
 1003b88:	b0fff60e 	bge	r22,r3,1003b64 <___vfprintf_internal_r+0xefc>
 1003b8c:	8809883a 	mov	r4,r17
 1003b90:	800b883a 	mov	r5,r16
 1003b94:	d9811b04 	addi	r6,sp,1132
 1003b98:	1002c340 	call	1002c34 <__sprint_r>
 1003b9c:	103d781e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003ba0:	bdfffc04 	addi	r23,r23,-16
 1003ba4:	da011d17 	ldw	r8,1140(sp)
 1003ba8:	d8c11c17 	ldw	r3,1136(sp)
 1003bac:	da400404 	addi	r9,sp,16
 1003bb0:	e5ffef16 	blt	fp,r23,1003b70 <___vfprintf_internal_r+0xf08>
 1003bb4:	a021883a 	mov	r16,r20
 1003bb8:	9029883a 	mov	r20,r18
 1003bbc:	dc812a17 	ldw	r18,1192(sp)
 1003bc0:	4d000015 	stw	r20,0(r9)
 1003bc4:	4dc00115 	stw	r23,4(r9)
 1003bc8:	45d1883a 	add	r8,r8,r23
 1003bcc:	18c00044 	addi	r3,r3,1
 1003bd0:	da011d15 	stw	r8,1140(sp)
 1003bd4:	d8c11c15 	stw	r3,1136(sp)
 1003bd8:	008001c4 	movi	r2,7
 1003bdc:	10c13616 	blt	r2,r3,10040b8 <___vfprintf_internal_r+0x1450>
 1003be0:	4a400204 	addi	r9,r9,8
 1003be4:	003ed506 	br	100373c <___vfprintf_internal_r+0xad4>
 1003be8:	d9412917 	ldw	r5,1188(sp)
 1003bec:	8809883a 	mov	r4,r17
 1003bf0:	d9811b04 	addi	r6,sp,1132
 1003bf4:	1002c340 	call	1002c34 <__sprint_r>
 1003bf8:	103f4226 	beq	r2,zero,1003904 <___vfprintf_internal_r+0xc9c>
 1003bfc:	003d6006 	br	1003180 <___vfprintf_internal_r+0x518>
 1003c00:	d9013217 	ldw	r4,1224(sp)
 1003c04:	00800044 	movi	r2,1
 1003c08:	4cc00015 	stw	r19,0(r9)
 1003c0c:	1101000e 	bge	r2,r4,1004010 <___vfprintf_internal_r+0x13a8>
 1003c10:	00800044 	movi	r2,1
 1003c14:	48800115 	stw	r2,4(r9)
 1003c18:	4091883a 	add	r8,r8,r2
 1003c1c:	1887883a 	add	r3,r3,r2
 1003c20:	da011d15 	stw	r8,1140(sp)
 1003c24:	d8c11c15 	stw	r3,1136(sp)
 1003c28:	008001c4 	movi	r2,7
 1003c2c:	10c10c16 	blt	r2,r3,1004060 <___vfprintf_internal_r+0x13f8>
 1003c30:	4a400204 	addi	r9,r9,8
 1003c34:	d8813717 	ldw	r2,1244(sp)
 1003c38:	48800015 	stw	r2,0(r9)
 1003c3c:	00800044 	movi	r2,1
 1003c40:	48800115 	stw	r2,4(r9)
 1003c44:	4091883a 	add	r8,r8,r2
 1003c48:	1887883a 	add	r3,r3,r2
 1003c4c:	da011d15 	stw	r8,1140(sp)
 1003c50:	d8c11c15 	stw	r3,1136(sp)
 1003c54:	008001c4 	movi	r2,7
 1003c58:	10c10a16 	blt	r2,r3,1004084 <___vfprintf_internal_r+0x141c>
 1003c5c:	4c800204 	addi	r18,r9,8
 1003c60:	d9013317 	ldw	r4,1228(sp)
 1003c64:	d9413417 	ldw	r5,1232(sp)
 1003c68:	000d883a 	mov	r6,zero
 1003c6c:	000f883a 	mov	r7,zero
 1003c70:	d8c13b15 	stw	r3,1260(sp)
 1003c74:	da013a15 	stw	r8,1256(sp)
 1003c78:	100a6a00 	call	100a6a0 <__nedf2>
 1003c7c:	d8c13b17 	ldw	r3,1260(sp)
 1003c80:	da013a17 	ldw	r8,1256(sp)
 1003c84:	1000ba26 	beq	r2,zero,1003f70 <___vfprintf_internal_r+0x1308>
 1003c88:	d9013217 	ldw	r4,1224(sp)
 1003c8c:	9cc00044 	addi	r19,r19,1
 1003c90:	94c00015 	stw	r19,0(r18)
 1003c94:	20bfffc4 	addi	r2,r4,-1
 1003c98:	90800115 	stw	r2,4(r18)
 1003c9c:	4091883a 	add	r8,r8,r2
 1003ca0:	18c00044 	addi	r3,r3,1
 1003ca4:	da011d15 	stw	r8,1140(sp)
 1003ca8:	d8c11c15 	stw	r3,1136(sp)
 1003cac:	008001c4 	movi	r2,7
 1003cb0:	10c0e216 	blt	r2,r3,100403c <___vfprintf_internal_r+0x13d4>
 1003cb4:	94800204 	addi	r18,r18,8
 1003cb8:	d9013517 	ldw	r4,1236(sp)
 1003cbc:	d8811fc4 	addi	r2,sp,1151
 1003cc0:	90800015 	stw	r2,0(r18)
 1003cc4:	91000115 	stw	r4,4(r18)
 1003cc8:	4111883a 	add	r8,r8,r4
 1003ccc:	18c00044 	addi	r3,r3,1
 1003cd0:	da011d15 	stw	r8,1140(sp)
 1003cd4:	d8c11c15 	stw	r3,1136(sp)
 1003cd8:	008001c4 	movi	r2,7
 1003cdc:	10ff2316 	blt	r2,r3,100396c <___vfprintf_internal_r+0xd04>
 1003ce0:	92400204 	addi	r9,r18,8
 1003ce4:	003ecf06 	br	1003824 <___vfprintf_internal_r+0xbbc>
 1003ce8:	d9412917 	ldw	r5,1188(sp)
 1003cec:	8809883a 	mov	r4,r17
 1003cf0:	d9811b04 	addi	r6,sp,1132
 1003cf4:	1002c340 	call	1002c34 <__sprint_r>
 1003cf8:	103d211e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003cfc:	da011d17 	ldw	r8,1140(sp)
 1003d00:	d8c11c17 	ldw	r3,1136(sp)
 1003d04:	da400404 	addi	r9,sp,16
 1003d08:	003eba06 	br	10037f4 <___vfprintf_internal_r+0xb8c>
 1003d0c:	d9412917 	ldw	r5,1188(sp)
 1003d10:	8809883a 	mov	r4,r17
 1003d14:	d9811b04 	addi	r6,sp,1132
 1003d18:	1002c340 	call	1002c34 <__sprint_r>
 1003d1c:	103d181e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003d20:	da011d17 	ldw	r8,1140(sp)
 1003d24:	d8c11c17 	ldw	r3,1136(sp)
 1003d28:	da400404 	addi	r9,sp,16
 1003d2c:	003e8006 	br	1003730 <___vfprintf_internal_r+0xac8>
 1003d30:	d9412917 	ldw	r5,1188(sp)
 1003d34:	8809883a 	mov	r4,r17
 1003d38:	d9811b04 	addi	r6,sp,1132
 1003d3c:	1002c340 	call	1002c34 <__sprint_r>
 1003d40:	103d0f1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003d44:	da011d17 	ldw	r8,1140(sp)
 1003d48:	d8c11c17 	ldw	r3,1136(sp)
 1003d4c:	da400404 	addi	r9,sp,16
 1003d50:	003e6a06 	br	10036fc <___vfprintf_internal_r+0xa94>
 1003d54:	d9413617 	ldw	r5,1240(sp)
 1003d58:	d8810dc4 	addi	r2,sp,1079
 1003d5c:	b8c003cc 	andi	r3,r23,15
 1003d60:	b008973a 	slli	r4,r22,28
 1003d64:	28c7883a 	add	r3,r5,r3
 1003d68:	b82ed13a 	srli	r23,r23,4
 1003d6c:	18c00003 	ldbu	r3,0(r3)
 1003d70:	b02cd13a 	srli	r22,r22,4
 1003d74:	25eeb03a 	or	r23,r4,r23
 1003d78:	10c00005 	stb	r3,0(r2)
 1003d7c:	bd86b03a 	or	r3,r23,r22
 1003d80:	1027883a 	mov	r19,r2
 1003d84:	10bfffc4 	addi	r2,r2,-1
 1003d88:	183ff41e 	bne	r3,zero,1003d5c <___vfprintf_internal_r+0x10f4>
 1003d8c:	003f1a06 	br	10039f8 <___vfprintf_internal_r+0xd90>
 1003d90:	d8012b15 	stw	zero,1196(sp)
 1003d94:	dcc10e04 	addi	r19,sp,1080
 1003d98:	003d3a06 	br	1003284 <___vfprintf_internal_r+0x61c>
 1003d9c:	b0025426 	beq	r22,zero,10046f0 <___vfprintf_internal_r+0x1a88>
 1003da0:	b807883a 	mov	r3,r23
 1003da4:	d8810dc4 	addi	r2,sp,1079
 1003da8:	882f883a 	mov	r23,r17
 1003dac:	04c00244 	movi	r19,9
 1003db0:	8023883a 	mov	r17,r16
 1003db4:	da412815 	stw	r9,1184(sp)
 1003db8:	1821883a 	mov	r16,r3
 1003dbc:	8009883a 	mov	r4,r16
 1003dc0:	b00b883a 	mov	r5,r22
 1003dc4:	01800284 	movi	r6,10
 1003dc8:	000f883a 	mov	r7,zero
 1003dcc:	1029883a 	mov	r20,r2
 1003dd0:	100977c0 	call	100977c <__umoddi3>
 1003dd4:	10800c04 	addi	r2,r2,48
 1003dd8:	8009883a 	mov	r4,r16
 1003ddc:	b00b883a 	mov	r5,r22
 1003de0:	a0800005 	stb	r2,0(r20)
 1003de4:	01800284 	movi	r6,10
 1003de8:	000f883a 	mov	r7,zero
 1003dec:	1000bc40 	call	1000bc4 <__udivdi3>
 1003df0:	1021883a 	mov	r16,r2
 1003df4:	182d883a 	mov	r22,r3
 1003df8:	a0bfffc4 	addi	r2,r20,-1
 1003dfc:	183fef1e 	bne	r3,zero,1003dbc <___vfprintf_internal_r+0x1154>
 1003e00:	9c3fee36 	bltu	r19,r16,1003dbc <___vfprintf_internal_r+0x1154>
 1003e04:	da412817 	ldw	r9,1184(sp)
 1003e08:	8005883a 	mov	r2,r16
 1003e0c:	8821883a 	mov	r16,r17
 1003e10:	b823883a 	mov	r17,r23
 1003e14:	102f883a 	mov	r23,r2
 1003e18:	d8812717 	ldw	r2,1180(sp)
 1003e1c:	a4ffffc4 	addi	r19,r20,-1
 1003e20:	bdc00c04 	addi	r23,r23,48
 1003e24:	14c5c83a 	sub	r2,r2,r19
 1003e28:	a5ffffc5 	stb	r23,-1(r20)
 1003e2c:	d8812b15 	stw	r2,1196(sp)
 1003e30:	003d1406 	br	1003284 <___vfprintf_internal_r+0x61c>
 1003e34:	00c00044 	movi	r3,1
 1003e38:	bd84b03a 	or	r2,r23,r22
 1003e3c:	003d0306 	br	100324c <___vfprintf_internal_r+0x5e4>
 1003e40:	dc812417 	ldw	r18,1168(sp)
 1003e44:	0481140e 	bge	zero,r18,1004298 <___vfprintf_internal_r+0x1630>
 1003e48:	d9013217 	ldw	r4,1224(sp)
 1003e4c:	4cc00015 	stw	r19,0(r9)
 1003e50:	9100ec16 	blt	r18,r4,1004204 <___vfprintf_internal_r+0x159c>
 1003e54:	49000115 	stw	r4,4(r9)
 1003e58:	4111883a 	add	r8,r8,r4
 1003e5c:	18c00044 	addi	r3,r3,1
 1003e60:	da011d15 	stw	r8,1140(sp)
 1003e64:	d8c11c15 	stw	r3,1136(sp)
 1003e68:	008001c4 	movi	r2,7
 1003e6c:	10c23616 	blt	r2,r3,1004748 <___vfprintf_internal_r+0x1ae0>
 1003e70:	4a400204 	addi	r9,r9,8
 1003e74:	d8813217 	ldw	r2,1224(sp)
 1003e78:	90a5c83a 	sub	r18,r18,r2
 1003e7c:	04beae0e 	bge	zero,r18,1003938 <___vfprintf_internal_r+0xcd0>
 1003e80:	04c00404 	movi	r19,16
 1003e84:	d8c11c17 	ldw	r3,1136(sp)
 1003e88:	05004074 	movhi	r20,257
 1003e8c:	a53e7784 	addi	r20,r20,-1570
 1003e90:	9c81dd0e 	bge	r19,r18,1004608 <___vfprintf_internal_r+0x19a0>
 1003e94:	058001c4 	movi	r22,7
 1003e98:	ddc12917 	ldw	r23,1188(sp)
 1003e9c:	00000306 	br	1003eac <___vfprintf_internal_r+0x1244>
 1003ea0:	4a400204 	addi	r9,r9,8
 1003ea4:	94bffc04 	addi	r18,r18,-16
 1003ea8:	9c81d70e 	bge	r19,r18,1004608 <___vfprintf_internal_r+0x19a0>
 1003eac:	4d000015 	stw	r20,0(r9)
 1003eb0:	4cc00115 	stw	r19,4(r9)
 1003eb4:	42000404 	addi	r8,r8,16
 1003eb8:	18c00044 	addi	r3,r3,1
 1003ebc:	da011d15 	stw	r8,1140(sp)
 1003ec0:	d8c11c15 	stw	r3,1136(sp)
 1003ec4:	b0fff60e 	bge	r22,r3,1003ea0 <___vfprintf_internal_r+0x1238>
 1003ec8:	8809883a 	mov	r4,r17
 1003ecc:	b80b883a 	mov	r5,r23
 1003ed0:	d9811b04 	addi	r6,sp,1132
 1003ed4:	1002c340 	call	1002c34 <__sprint_r>
 1003ed8:	103ca91e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003edc:	da011d17 	ldw	r8,1140(sp)
 1003ee0:	d8c11c17 	ldw	r3,1136(sp)
 1003ee4:	da400404 	addi	r9,sp,16
 1003ee8:	003fee06 	br	1003ea4 <___vfprintf_internal_r+0x123c>
 1003eec:	d9412917 	ldw	r5,1188(sp)
 1003ef0:	8809883a 	mov	r4,r17
 1003ef4:	d9811b04 	addi	r6,sp,1132
 1003ef8:	1002c340 	call	1002c34 <__sprint_r>
 1003efc:	103ca01e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003f00:	da011d17 	ldw	r8,1140(sp)
 1003f04:	d8c11c17 	ldw	r3,1136(sp)
 1003f08:	da400404 	addi	r9,sp,16
 1003f0c:	003dee06 	br	10036c8 <___vfprintf_internal_r+0xa60>
 1003f10:	00c00084 	movi	r3,2
 1003f14:	bd84b03a 	or	r2,r23,r22
 1003f18:	d8012585 	stb	zero,1174(sp)
 1003f1c:	003ccb06 	br	100324c <___vfprintf_internal_r+0x5e4>
 1003f20:	8080040c 	andi	r2,r16,16
 1003f24:	1000ae26 	beq	r2,zero,10041e0 <___vfprintf_internal_r+0x1578>
 1003f28:	d9012d17 	ldw	r4,1204(sp)
 1003f2c:	25c00017 	ldw	r23,0(r4)
 1003f30:	21000104 	addi	r4,r4,4
 1003f34:	d9012d15 	stw	r4,1204(sp)
 1003f38:	b82dd7fa 	srai	r22,r23,31
 1003f3c:	b005883a 	mov	r2,r22
 1003f40:	003cb906 	br	1003228 <___vfprintf_internal_r+0x5c0>
 1003f44:	8080040c 	andi	r2,r16,16
 1003f48:	10007026 	beq	r2,zero,100410c <___vfprintf_internal_r+0x14a4>
 1003f4c:	d8812d17 	ldw	r2,1204(sp)
 1003f50:	002d883a 	mov	r22,zero
 1003f54:	00c00044 	movi	r3,1
 1003f58:	15c00017 	ldw	r23,0(r2)
 1003f5c:	10800104 	addi	r2,r2,4
 1003f60:	d8812d15 	stw	r2,1204(sp)
 1003f64:	d8012585 	stb	zero,1174(sp)
 1003f68:	b805883a 	mov	r2,r23
 1003f6c:	003cb706 	br	100324c <___vfprintf_internal_r+0x5e4>
 1003f70:	d8813217 	ldw	r2,1224(sp)
 1003f74:	14ffffc4 	addi	r19,r2,-1
 1003f78:	04ff4f0e 	bge	zero,r19,1003cb8 <___vfprintf_internal_r+0x1050>
 1003f7c:	05800404 	movi	r22,16
 1003f80:	05004074 	movhi	r20,257
 1003f84:	a53e7784 	addi	r20,r20,-1570
 1003f88:	b4c0470e 	bge	r22,r19,10040a8 <___vfprintf_internal_r+0x1440>
 1003f8c:	05c001c4 	movi	r23,7
 1003f90:	df012917 	ldw	fp,1188(sp)
 1003f94:	00000306 	br	1003fa4 <___vfprintf_internal_r+0x133c>
 1003f98:	94800204 	addi	r18,r18,8
 1003f9c:	9cfffc04 	addi	r19,r19,-16
 1003fa0:	b4c0410e 	bge	r22,r19,10040a8 <___vfprintf_internal_r+0x1440>
 1003fa4:	95000015 	stw	r20,0(r18)
 1003fa8:	95800115 	stw	r22,4(r18)
 1003fac:	42000404 	addi	r8,r8,16
 1003fb0:	18c00044 	addi	r3,r3,1
 1003fb4:	da011d15 	stw	r8,1140(sp)
 1003fb8:	d8c11c15 	stw	r3,1136(sp)
 1003fbc:	b8fff60e 	bge	r23,r3,1003f98 <___vfprintf_internal_r+0x1330>
 1003fc0:	8809883a 	mov	r4,r17
 1003fc4:	e00b883a 	mov	r5,fp
 1003fc8:	d9811b04 	addi	r6,sp,1132
 1003fcc:	1002c340 	call	1002c34 <__sprint_r>
 1003fd0:	103c6b1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1003fd4:	da011d17 	ldw	r8,1140(sp)
 1003fd8:	d8c11c17 	ldw	r3,1136(sp)
 1003fdc:	dc800404 	addi	r18,sp,16
 1003fe0:	003fee06 	br	1003f9c <___vfprintf_internal_r+0x1334>
 1003fe4:	8080040c 	andi	r2,r16,16
 1003fe8:	10005326 	beq	r2,zero,1004138 <___vfprintf_internal_r+0x14d0>
 1003fec:	d8c12d17 	ldw	r3,1204(sp)
 1003ff0:	002d883a 	mov	r22,zero
 1003ff4:	1dc00017 	ldw	r23,0(r3)
 1003ff8:	18c00104 	addi	r3,r3,4
 1003ffc:	d8c12d15 	stw	r3,1204(sp)
 1004000:	b805883a 	mov	r2,r23
 1004004:	0007883a 	mov	r3,zero
 1004008:	d8012585 	stb	zero,1174(sp)
 100400c:	003c8f06 	br	100324c <___vfprintf_internal_r+0x5e4>
 1004010:	8088703a 	and	r4,r16,r2
 1004014:	203efe1e 	bne	r4,zero,1003c10 <___vfprintf_internal_r+0xfa8>
 1004018:	48800115 	stw	r2,4(r9)
 100401c:	42000044 	addi	r8,r8,1
 1004020:	18c00044 	addi	r3,r3,1
 1004024:	da011d15 	stw	r8,1140(sp)
 1004028:	d8c11c15 	stw	r3,1136(sp)
 100402c:	008001c4 	movi	r2,7
 1004030:	10c00216 	blt	r2,r3,100403c <___vfprintf_internal_r+0x13d4>
 1004034:	4c800204 	addi	r18,r9,8
 1004038:	003f1f06 	br	1003cb8 <___vfprintf_internal_r+0x1050>
 100403c:	d9412917 	ldw	r5,1188(sp)
 1004040:	8809883a 	mov	r4,r17
 1004044:	d9811b04 	addi	r6,sp,1132
 1004048:	1002c340 	call	1002c34 <__sprint_r>
 100404c:	103c4c1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004050:	dc800404 	addi	r18,sp,16
 1004054:	da011d17 	ldw	r8,1140(sp)
 1004058:	d8c11c17 	ldw	r3,1136(sp)
 100405c:	003f1606 	br	1003cb8 <___vfprintf_internal_r+0x1050>
 1004060:	d9412917 	ldw	r5,1188(sp)
 1004064:	8809883a 	mov	r4,r17
 1004068:	d9811b04 	addi	r6,sp,1132
 100406c:	1002c340 	call	1002c34 <__sprint_r>
 1004070:	103c431e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004074:	da011d17 	ldw	r8,1140(sp)
 1004078:	d8c11c17 	ldw	r3,1136(sp)
 100407c:	da400404 	addi	r9,sp,16
 1004080:	003eec06 	br	1003c34 <___vfprintf_internal_r+0xfcc>
 1004084:	d9412917 	ldw	r5,1188(sp)
 1004088:	8809883a 	mov	r4,r17
 100408c:	d9811b04 	addi	r6,sp,1132
 1004090:	1002c340 	call	1002c34 <__sprint_r>
 1004094:	103c3a1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004098:	da011d17 	ldw	r8,1140(sp)
 100409c:	d8c11c17 	ldw	r3,1136(sp)
 10040a0:	dc800404 	addi	r18,sp,16
 10040a4:	003eee06 	br	1003c60 <___vfprintf_internal_r+0xff8>
 10040a8:	95000015 	stw	r20,0(r18)
 10040ac:	94c00115 	stw	r19,4(r18)
 10040b0:	44d1883a 	add	r8,r8,r19
 10040b4:	003efa06 	br	1003ca0 <___vfprintf_internal_r+0x1038>
 10040b8:	d9412917 	ldw	r5,1188(sp)
 10040bc:	8809883a 	mov	r4,r17
 10040c0:	d9811b04 	addi	r6,sp,1132
 10040c4:	1002c340 	call	1002c34 <__sprint_r>
 10040c8:	103c2d1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10040cc:	da011d17 	ldw	r8,1140(sp)
 10040d0:	d8c11c17 	ldw	r3,1136(sp)
 10040d4:	da400404 	addi	r9,sp,16
 10040d8:	003d9806 	br	100373c <___vfprintf_internal_r+0xad4>
 10040dc:	8080100c 	andi	r2,r16,64
 10040e0:	10011626 	beq	r2,zero,100453c <___vfprintf_internal_r+0x18d4>
 10040e4:	d8c12d17 	ldw	r3,1204(sp)
 10040e8:	002d883a 	mov	r22,zero
 10040ec:	1dc0000b 	ldhu	r23,0(r3)
 10040f0:	18c00104 	addi	r3,r3,4
 10040f4:	d8c12d15 	stw	r3,1204(sp)
 10040f8:	003cc106 	br	1003400 <___vfprintf_internal_r+0x798>
 10040fc:	4d000015 	stw	r20,0(r9)
 1004100:	4c800115 	stw	r18,4(r9)
 1004104:	4491883a 	add	r8,r8,r18
 1004108:	003dc006 	br	100380c <___vfprintf_internal_r+0xba4>
 100410c:	8080100c 	andi	r2,r16,64
 1004110:	10010126 	beq	r2,zero,1004518 <___vfprintf_internal_r+0x18b0>
 1004114:	d8c12d17 	ldw	r3,1204(sp)
 1004118:	002d883a 	mov	r22,zero
 100411c:	1dc0000b 	ldhu	r23,0(r3)
 1004120:	18c00104 	addi	r3,r3,4
 1004124:	d8c12d15 	stw	r3,1204(sp)
 1004128:	b805883a 	mov	r2,r23
 100412c:	00c00044 	movi	r3,1
 1004130:	d8012585 	stb	zero,1174(sp)
 1004134:	003c4506 	br	100324c <___vfprintf_internal_r+0x5e4>
 1004138:	8080100c 	andi	r2,r16,64
 100413c:	10010526 	beq	r2,zero,1004554 <___vfprintf_internal_r+0x18ec>
 1004140:	d9012d17 	ldw	r4,1204(sp)
 1004144:	002d883a 	mov	r22,zero
 1004148:	0007883a 	mov	r3,zero
 100414c:	25c0000b 	ldhu	r23,0(r4)
 1004150:	21000104 	addi	r4,r4,4
 1004154:	d9012d15 	stw	r4,1204(sp)
 1004158:	b805883a 	mov	r2,r23
 100415c:	d8012585 	stb	zero,1174(sp)
 1004160:	003c3a06 	br	100324c <___vfprintf_internal_r+0x5e4>
 1004164:	d8812d17 	ldw	r2,1204(sp)
 1004168:	15800017 	ldw	r22,0(r2)
 100416c:	15000117 	ldw	r20,4(r2)
 1004170:	10800204 	addi	r2,r2,8
 1004174:	d8812d15 	stw	r2,1204(sp)
 1004178:	dd813315 	stw	r22,1228(sp)
 100417c:	dd013415 	stw	r20,1232(sp)
 1004180:	003c5906 	br	10032e8 <___vfprintf_internal_r+0x680>
 1004184:	00c00084 	movi	r3,2
 1004188:	d8012585 	stb	zero,1174(sp)
 100418c:	003c2f06 	br	100324c <___vfprintf_internal_r+0x5e4>
 1004190:	ac800007 	ldb	r18,0(r21)
 1004194:	003b1006 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1004198:	8080040c 	andi	r2,r16,16
 100419c:	1000091e 	bne	r2,zero,10041c4 <___vfprintf_internal_r+0x155c>
 10041a0:	8400100c 	andi	r16,r16,64
 10041a4:	80000726 	beq	r16,zero,10041c4 <___vfprintf_internal_r+0x155c>
 10041a8:	d8c12d17 	ldw	r3,1204(sp)
 10041ac:	d9012c17 	ldw	r4,1200(sp)
 10041b0:	18800017 	ldw	r2,0(r3)
 10041b4:	18c00104 	addi	r3,r3,4
 10041b8:	d8c12d15 	stw	r3,1204(sp)
 10041bc:	1100000d 	sth	r4,0(r2)
 10041c0:	003adf06 	br	1002d40 <___vfprintf_internal_r+0xd8>
 10041c4:	d8c12d17 	ldw	r3,1204(sp)
 10041c8:	d9012c17 	ldw	r4,1200(sp)
 10041cc:	18800017 	ldw	r2,0(r3)
 10041d0:	18c00104 	addi	r3,r3,4
 10041d4:	d8c12d15 	stw	r3,1204(sp)
 10041d8:	11000015 	stw	r4,0(r2)
 10041dc:	003ad806 	br	1002d40 <___vfprintf_internal_r+0xd8>
 10041e0:	8080100c 	andi	r2,r16,64
 10041e4:	1000c526 	beq	r2,zero,10044fc <___vfprintf_internal_r+0x1894>
 10041e8:	d8812d17 	ldw	r2,1204(sp)
 10041ec:	15c0000f 	ldh	r23,0(r2)
 10041f0:	10800104 	addi	r2,r2,4
 10041f4:	d8812d15 	stw	r2,1204(sp)
 10041f8:	b82dd7fa 	srai	r22,r23,31
 10041fc:	b005883a 	mov	r2,r22
 1004200:	003c0906 	br	1003228 <___vfprintf_internal_r+0x5c0>
 1004204:	4c800115 	stw	r18,4(r9)
 1004208:	9211883a 	add	r8,r18,r8
 100420c:	18c00044 	addi	r3,r3,1
 1004210:	da011d15 	stw	r8,1140(sp)
 1004214:	d8c11c15 	stw	r3,1136(sp)
 1004218:	008001c4 	movi	r2,7
 100421c:	10c14016 	blt	r2,r3,1004720 <___vfprintf_internal_r+0x1ab8>
 1004220:	4a400204 	addi	r9,r9,8
 1004224:	d8813717 	ldw	r2,1244(sp)
 1004228:	9ca7883a 	add	r19,r19,r18
 100422c:	48800015 	stw	r2,0(r9)
 1004230:	00800044 	movi	r2,1
 1004234:	48800115 	stw	r2,4(r9)
 1004238:	4091883a 	add	r8,r8,r2
 100423c:	1887883a 	add	r3,r3,r2
 1004240:	da011d15 	stw	r8,1140(sp)
 1004244:	d8c11c15 	stw	r3,1136(sp)
 1004248:	008001c4 	movi	r2,7
 100424c:	10c12c16 	blt	r2,r3,1004700 <___vfprintf_internal_r+0x1a98>
 1004250:	4a400204 	addi	r9,r9,8
 1004254:	d9013217 	ldw	r4,1224(sp)
 1004258:	da011d17 	ldw	r8,1140(sp)
 100425c:	d8c11c17 	ldw	r3,1136(sp)
 1004260:	24a5c83a 	sub	r18,r4,r18
 1004264:	4cc00015 	stw	r19,0(r9)
 1004268:	003fa506 	br	1004100 <___vfprintf_internal_r+0x1498>
 100426c:	04c04074 	movhi	r19,257
 1004270:	9cfe6404 	addi	r19,r19,-1648
 1004274:	003c2e06 	br	1003330 <___vfprintf_internal_r+0x6c8>
 1004278:	d9412917 	ldw	r5,1188(sp)
 100427c:	8809883a 	mov	r4,r17
 1004280:	d9811b04 	addi	r6,sp,1132
 1004284:	1002c340 	call	1002c34 <__sprint_r>
 1004288:	103bbd1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 100428c:	da011d17 	ldw	r8,1140(sp)
 1004290:	da400404 	addi	r9,sp,16
 1004294:	003df606 	br	1003a70 <___vfprintf_internal_r+0xe08>
 1004298:	00804074 	movhi	r2,257
 100429c:	10be7304 	addi	r2,r2,-1588
 10042a0:	48800015 	stw	r2,0(r9)
 10042a4:	00800044 	movi	r2,1
 10042a8:	48800115 	stw	r2,4(r9)
 10042ac:	4091883a 	add	r8,r8,r2
 10042b0:	1887883a 	add	r3,r3,r2
 10042b4:	da011d15 	stw	r8,1140(sp)
 10042b8:	d8c11c15 	stw	r3,1136(sp)
 10042bc:	008001c4 	movi	r2,7
 10042c0:	10c0bc16 	blt	r2,r3,10045b4 <___vfprintf_internal_r+0x194c>
 10042c4:	4a400204 	addi	r9,r9,8
 10042c8:	9000041e 	bne	r18,zero,10042dc <___vfprintf_internal_r+0x1674>
 10042cc:	d8c13217 	ldw	r3,1224(sp)
 10042d0:	1800021e 	bne	r3,zero,10042dc <___vfprintf_internal_r+0x1674>
 10042d4:	8080004c 	andi	r2,r16,1
 10042d8:	103d5226 	beq	r2,zero,1003824 <___vfprintf_internal_r+0xbbc>
 10042dc:	d8c11c17 	ldw	r3,1136(sp)
 10042e0:	d9013717 	ldw	r4,1244(sp)
 10042e4:	00800044 	movi	r2,1
 10042e8:	48800115 	stw	r2,4(r9)
 10042ec:	49000015 	stw	r4,0(r9)
 10042f0:	4091883a 	add	r8,r8,r2
 10042f4:	1887883a 	add	r3,r3,r2
 10042f8:	da011d15 	stw	r8,1140(sp)
 10042fc:	d8c11c15 	stw	r3,1136(sp)
 1004300:	008001c4 	movi	r2,7
 1004304:	10c14516 	blt	r2,r3,100481c <___vfprintf_internal_r+0x1bb4>
 1004308:	4a400204 	addi	r9,r9,8
 100430c:	04a5c83a 	sub	r18,zero,r18
 1004310:	0480d70e 	bge	zero,r18,1004670 <___vfprintf_internal_r+0x1a08>
 1004314:	05800404 	movi	r22,16
 1004318:	05004074 	movhi	r20,257
 100431c:	a53e7784 	addi	r20,r20,-1570
 1004320:	b480db0e 	bge	r22,r18,1004690 <___vfprintf_internal_r+0x1a28>
 1004324:	05c001c4 	movi	r23,7
 1004328:	df012917 	ldw	fp,1188(sp)
 100432c:	00000306 	br	100433c <___vfprintf_internal_r+0x16d4>
 1004330:	4a400204 	addi	r9,r9,8
 1004334:	94bffc04 	addi	r18,r18,-16
 1004338:	b480d50e 	bge	r22,r18,1004690 <___vfprintf_internal_r+0x1a28>
 100433c:	4d000015 	stw	r20,0(r9)
 1004340:	4d800115 	stw	r22,4(r9)
 1004344:	42000404 	addi	r8,r8,16
 1004348:	18c00044 	addi	r3,r3,1
 100434c:	da011d15 	stw	r8,1140(sp)
 1004350:	d8c11c15 	stw	r3,1136(sp)
 1004354:	b8fff60e 	bge	r23,r3,1004330 <___vfprintf_internal_r+0x16c8>
 1004358:	8809883a 	mov	r4,r17
 100435c:	e00b883a 	mov	r5,fp
 1004360:	d9811b04 	addi	r6,sp,1132
 1004364:	1002c340 	call	1002c34 <__sprint_r>
 1004368:	103b851e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 100436c:	da011d17 	ldw	r8,1140(sp)
 1004370:	d8c11c17 	ldw	r3,1136(sp)
 1004374:	da400404 	addi	r9,sp,16
 1004378:	003fee06 	br	1004334 <___vfprintf_internal_r+0x16cc>
 100437c:	da413c15 	stw	r9,1264(sp)
 1004380:	10093380 	call	1009338 <__isnand>
 1004384:	da413c17 	ldw	r9,1264(sp)
 1004388:	10007e1e 	bne	r2,zero,1004584 <___vfprintf_internal_r+0x191c>
 100438c:	00bfffc4 	movi	r2,-1
 1004390:	e0816a26 	beq	fp,r2,100493c <___vfprintf_internal_r+0x1cd4>
 1004394:	008019c4 	movi	r2,103
 1004398:	90816526 	beq	r18,r2,1004930 <___vfprintf_internal_r+0x1cc8>
 100439c:	008011c4 	movi	r2,71
 10043a0:	90816326 	beq	r18,r2,1004930 <___vfprintf_internal_r+0x1cc8>
 10043a4:	80c04014 	ori	r3,r16,256
 10043a8:	d8c12a15 	stw	r3,1192(sp)
 10043ac:	a0016516 	blt	r20,zero,1004944 <___vfprintf_internal_r+0x1cdc>
 10043b0:	d8012f05 	stb	zero,1212(sp)
 10043b4:	00801984 	movi	r2,102
 10043b8:	9080f226 	beq	r18,r2,1004784 <___vfprintf_internal_r+0x1b1c>
 10043bc:	00801184 	movi	r2,70
 10043c0:	9080f026 	beq	r18,r2,1004784 <___vfprintf_internal_r+0x1b1c>
 10043c4:	00801944 	movi	r2,101
 10043c8:	90818d26 	beq	r18,r2,1004a00 <___vfprintf_internal_r+0x1d98>
 10043cc:	00801144 	movi	r2,69
 10043d0:	90818b26 	beq	r18,r2,1004a00 <___vfprintf_internal_r+0x1d98>
 10043d4:	e02f883a 	mov	r23,fp
 10043d8:	d8812404 	addi	r2,sp,1168
 10043dc:	d8800115 	stw	r2,4(sp)
 10043e0:	d8812304 	addi	r2,sp,1164
 10043e4:	d8800215 	stw	r2,8(sp)
 10043e8:	d8812204 	addi	r2,sp,1160
 10043ec:	ddc00015 	stw	r23,0(sp)
 10043f0:	d8800315 	stw	r2,12(sp)
 10043f4:	8809883a 	mov	r4,r17
 10043f8:	b00b883a 	mov	r5,r22
 10043fc:	a00d883a 	mov	r6,r20
 1004400:	01c00084 	movi	r7,2
 1004404:	da413c15 	stw	r9,1264(sp)
 1004408:	1004f880 	call	1004f88 <_dtoa_r>
 100440c:	1027883a 	mov	r19,r2
 1004410:	008019c4 	movi	r2,103
 1004414:	da413c17 	ldw	r9,1264(sp)
 1004418:	9081951e 	bne	r18,r2,1004a70 <___vfprintf_internal_r+0x1e08>
 100441c:	8080004c 	andi	r2,r16,1
 1004420:	10017926 	beq	r2,zero,1004a08 <___vfprintf_internal_r+0x1da0>
 1004424:	00801184 	movi	r2,70
 1004428:	9dc7883a 	add	r3,r19,r23
 100442c:	9080e626 	beq	r18,r2,10047c8 <___vfprintf_internal_r+0x1b60>
 1004430:	b009883a 	mov	r4,r22
 1004434:	a00b883a 	mov	r5,r20
 1004438:	000d883a 	mov	r6,zero
 100443c:	000f883a 	mov	r7,zero
 1004440:	d8c13b15 	stw	r3,1260(sp)
 1004444:	da413c15 	stw	r9,1264(sp)
 1004448:	100a6440 	call	100a644 <__eqdf2>
 100444c:	d8c13b17 	ldw	r3,1260(sp)
 1004450:	da413c17 	ldw	r9,1264(sp)
 1004454:	10000726 	beq	r2,zero,1004474 <___vfprintf_internal_r+0x180c>
 1004458:	d8812217 	ldw	r2,1160(sp)
 100445c:	10c18a2e 	bgeu	r2,r3,1004a88 <___vfprintf_internal_r+0x1e20>
 1004460:	01000c04 	movi	r4,48
 1004464:	11000005 	stb	r4,0(r2)
 1004468:	10800044 	addi	r2,r2,1
 100446c:	d8812215 	stw	r2,1160(sp)
 1004470:	10fffc1e 	bne	r2,r3,1004464 <___vfprintf_internal_r+0x17fc>
 1004474:	1cc7c83a 	sub	r3,r3,r19
 1004478:	d8c13215 	stw	r3,1224(sp)
 100447c:	008019c4 	movi	r2,103
 1004480:	9080fa26 	beq	r18,r2,100486c <___vfprintf_internal_r+0x1c04>
 1004484:	008011c4 	movi	r2,71
 1004488:	9080f826 	beq	r18,r2,100486c <___vfprintf_internal_r+0x1c04>
 100448c:	00801984 	movi	r2,102
 1004490:	90818e1e 	bne	r18,r2,1004acc <___vfprintf_internal_r+0x1e64>
 1004494:	d8812417 	ldw	r2,1168(sp)
 1004498:	d8812b15 	stw	r2,1196(sp)
 100449c:	00817c0e 	bge	zero,r2,1004a90 <___vfprintf_internal_r+0x1e28>
 10044a0:	e000021e 	bne	fp,zero,10044ac <___vfprintf_internal_r+0x1844>
 10044a4:	8400004c 	andi	r16,r16,1
 10044a8:	80000426 	beq	r16,zero,10044bc <___vfprintf_internal_r+0x1854>
 10044ac:	d8812b17 	ldw	r2,1196(sp)
 10044b0:	e2000044 	addi	r8,fp,1
 10044b4:	1205883a 	add	r2,r2,r8
 10044b8:	d8812b15 	stw	r2,1196(sp)
 10044bc:	d8812815 	stw	r2,1184(sp)
 10044c0:	10010b16 	blt	r2,zero,10048f0 <___vfprintf_internal_r+0x1c88>
 10044c4:	ddc12f07 	ldb	r23,1212(sp)
 10044c8:	b800e426 	beq	r23,zero,100485c <___vfprintf_internal_r+0x1bf4>
 10044cc:	00800b44 	movi	r2,45
 10044d0:	d8812585 	stb	r2,1174(sp)
 10044d4:	dc012a17 	ldw	r16,1192(sp)
 10044d8:	d8013115 	stw	zero,1220(sp)
 10044dc:	003b7306 	br	10032ac <___vfprintf_internal_r+0x644>
 10044e0:	d8812b17 	ldw	r2,1196(sp)
 10044e4:	d8812815 	stw	r2,1184(sp)
 10044e8:	10005716 	blt	r2,zero,1004648 <___vfprintf_internal_r+0x19e0>
 10044ec:	d8812583 	ldbu	r2,1174(sp)
 10044f0:	ddc12d15 	stw	r23,1204(sp)
 10044f4:	d8013115 	stw	zero,1220(sp)
 10044f8:	003b6806 	br	100329c <___vfprintf_internal_r+0x634>
 10044fc:	d8c12d17 	ldw	r3,1204(sp)
 1004500:	1dc00017 	ldw	r23,0(r3)
 1004504:	18c00104 	addi	r3,r3,4
 1004508:	d8c12d15 	stw	r3,1204(sp)
 100450c:	b82dd7fa 	srai	r22,r23,31
 1004510:	b005883a 	mov	r2,r22
 1004514:	003b4406 	br	1003228 <___vfprintf_internal_r+0x5c0>
 1004518:	d9012d17 	ldw	r4,1204(sp)
 100451c:	002d883a 	mov	r22,zero
 1004520:	00c00044 	movi	r3,1
 1004524:	25c00017 	ldw	r23,0(r4)
 1004528:	21000104 	addi	r4,r4,4
 100452c:	d9012d15 	stw	r4,1204(sp)
 1004530:	b805883a 	mov	r2,r23
 1004534:	d8012585 	stb	zero,1174(sp)
 1004538:	003b4406 	br	100324c <___vfprintf_internal_r+0x5e4>
 100453c:	d9012d17 	ldw	r4,1204(sp)
 1004540:	002d883a 	mov	r22,zero
 1004544:	25c00017 	ldw	r23,0(r4)
 1004548:	21000104 	addi	r4,r4,4
 100454c:	d9012d15 	stw	r4,1204(sp)
 1004550:	003bab06 	br	1003400 <___vfprintf_internal_r+0x798>
 1004554:	d8812d17 	ldw	r2,1204(sp)
 1004558:	002d883a 	mov	r22,zero
 100455c:	0007883a 	mov	r3,zero
 1004560:	15c00017 	ldw	r23,0(r2)
 1004564:	10800104 	addi	r2,r2,4
 1004568:	d8812d15 	stw	r2,1204(sp)
 100456c:	d8012585 	stb	zero,1174(sp)
 1004570:	b805883a 	mov	r2,r23
 1004574:	003b3506 	br	100324c <___vfprintf_internal_r+0x5e4>
 1004578:	00ffffc4 	movi	r3,-1
 100457c:	b82b883a 	mov	r21,r23
 1004580:	003a1606 	br	1002ddc <___vfprintf_internal_r+0x174>
 1004584:	008011c4 	movi	r2,71
 1004588:	1480b116 	blt	r2,r18,1004850 <___vfprintf_internal_r+0x1be8>
 100458c:	04c04074 	movhi	r19,257
 1004590:	9cfe6504 	addi	r19,r19,-1644
 1004594:	00c000c4 	movi	r3,3
 1004598:	00bfdfc4 	movi	r2,-129
 100459c:	80a0703a 	and	r16,r16,r2
 10045a0:	d8c12815 	stw	r3,1184(sp)
 10045a4:	d8812583 	ldbu	r2,1174(sp)
 10045a8:	d8c12b15 	stw	r3,1196(sp)
 10045ac:	d8013115 	stw	zero,1220(sp)
 10045b0:	003b3a06 	br	100329c <___vfprintf_internal_r+0x634>
 10045b4:	d9412917 	ldw	r5,1188(sp)
 10045b8:	8809883a 	mov	r4,r17
 10045bc:	d9811b04 	addi	r6,sp,1132
 10045c0:	1002c340 	call	1002c34 <__sprint_r>
 10045c4:	103aee1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10045c8:	dc812417 	ldw	r18,1168(sp)
 10045cc:	da011d17 	ldw	r8,1140(sp)
 10045d0:	da400404 	addi	r9,sp,16
 10045d4:	003f3c06 	br	10042c8 <___vfprintf_internal_r+0x1660>
 10045d8:	ad400044 	addi	r21,r21,1
 10045dc:	84000814 	ori	r16,r16,32
 10045e0:	14800047 	ldb	r18,1(r2)
 10045e4:	0039fc06 	br	1002dd8 <___vfprintf_internal_r+0x170>
 10045e8:	d9412917 	ldw	r5,1188(sp)
 10045ec:	8809883a 	mov	r4,r17
 10045f0:	d9811b04 	addi	r6,sp,1132
 10045f4:	1002c340 	call	1002c34 <__sprint_r>
 10045f8:	103ae11e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 10045fc:	da011d17 	ldw	r8,1140(sp)
 1004600:	da400404 	addi	r9,sp,16
 1004604:	003d2b06 	br	1003ab4 <___vfprintf_internal_r+0xe4c>
 1004608:	4d000015 	stw	r20,0(r9)
 100460c:	4c800115 	stw	r18,4(r9)
 1004610:	4491883a 	add	r8,r8,r18
 1004614:	18c00044 	addi	r3,r3,1
 1004618:	da011d15 	stw	r8,1140(sp)
 100461c:	d8c11c15 	stw	r3,1136(sp)
 1004620:	008001c4 	movi	r2,7
 1004624:	10fcbd16 	blt	r2,r3,100391c <___vfprintf_internal_r+0xcb4>
 1004628:	4a400204 	addi	r9,r9,8
 100462c:	003cc206 	br	1003938 <___vfprintf_internal_r+0xcd0>
 1004630:	da413c15 	stw	r9,1264(sp)
 1004634:	1002ba80 	call	1002ba8 <strlen>
 1004638:	d8812b15 	stw	r2,1196(sp)
 100463c:	d8812815 	stw	r2,1184(sp)
 1004640:	da413c17 	ldw	r9,1264(sp)
 1004644:	103fa90e 	bge	r2,zero,10044ec <___vfprintf_internal_r+0x1884>
 1004648:	d8012815 	stw	zero,1184(sp)
 100464c:	003fa706 	br	10044ec <___vfprintf_internal_r+0x1884>
 1004650:	d9412917 	ldw	r5,1188(sp)
 1004654:	8809883a 	mov	r4,r17
 1004658:	d9811b04 	addi	r6,sp,1132
 100465c:	1002c340 	call	1002c34 <__sprint_r>
 1004660:	103ac71e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004664:	da011d17 	ldw	r8,1140(sp)
 1004668:	d8c11c17 	ldw	r3,1136(sp)
 100466c:	da400404 	addi	r9,sp,16
 1004670:	d8813217 	ldw	r2,1224(sp)
 1004674:	4cc00015 	stw	r19,0(r9)
 1004678:	48800115 	stw	r2,4(r9)
 100467c:	4091883a 	add	r8,r8,r2
 1004680:	003c6206 	br	100380c <___vfprintf_internal_r+0xba4>
 1004684:	00800b44 	movi	r2,45
 1004688:	d8812585 	stb	r2,1174(sp)
 100468c:	003b2406 	br	1003320 <___vfprintf_internal_r+0x6b8>
 1004690:	4d000015 	stw	r20,0(r9)
 1004694:	4c800115 	stw	r18,4(r9)
 1004698:	4491883a 	add	r8,r8,r18
 100469c:	18c00044 	addi	r3,r3,1
 10046a0:	da011d15 	stw	r8,1140(sp)
 10046a4:	d8c11c15 	stw	r3,1136(sp)
 10046a8:	008001c4 	movi	r2,7
 10046ac:	10ffe816 	blt	r2,r3,1004650 <___vfprintf_internal_r+0x19e8>
 10046b0:	4a400204 	addi	r9,r9,8
 10046b4:	003fee06 	br	1004670 <___vfprintf_internal_r+0x1a08>
 10046b8:	d8c12b15 	stw	r3,1196(sp)
 10046bc:	00800184 	movi	r2,6
 10046c0:	10c0062e 	bgeu	r2,r3,10046dc <___vfprintf_internal_r+0x1a74>
 10046c4:	d8812b15 	stw	r2,1196(sp)
 10046c8:	d8812815 	stw	r2,1184(sp)
 10046cc:	ddc12d15 	stw	r23,1204(sp)
 10046d0:	04c04074 	movhi	r19,257
 10046d4:	9cfe7104 	addi	r19,r19,-1596
 10046d8:	0039ca06 	br	1002e04 <___vfprintf_internal_r+0x19c>
 10046dc:	d8812b17 	ldw	r2,1196(sp)
 10046e0:	d8812815 	stw	r2,1184(sp)
 10046e4:	103ff90e 	bge	r2,zero,10046cc <___vfprintf_internal_r+0x1a64>
 10046e8:	d8012815 	stw	zero,1184(sp)
 10046ec:	003ff706 	br	10046cc <___vfprintf_internal_r+0x1a64>
 10046f0:	00800244 	movi	r2,9
 10046f4:	15fdaa36 	bltu	r2,r23,1003da0 <___vfprintf_internal_r+0x1138>
 10046f8:	dd010e04 	addi	r20,sp,1080
 10046fc:	003dc606 	br	1003e18 <___vfprintf_internal_r+0x11b0>
 1004700:	d9412917 	ldw	r5,1188(sp)
 1004704:	8809883a 	mov	r4,r17
 1004708:	d9811b04 	addi	r6,sp,1132
 100470c:	1002c340 	call	1002c34 <__sprint_r>
 1004710:	103a9b1e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004714:	dc812417 	ldw	r18,1168(sp)
 1004718:	da400404 	addi	r9,sp,16
 100471c:	003ecd06 	br	1004254 <___vfprintf_internal_r+0x15ec>
 1004720:	d9412917 	ldw	r5,1188(sp)
 1004724:	8809883a 	mov	r4,r17
 1004728:	d9811b04 	addi	r6,sp,1132
 100472c:	1002c340 	call	1002c34 <__sprint_r>
 1004730:	103a931e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004734:	dc812417 	ldw	r18,1168(sp)
 1004738:	da011d17 	ldw	r8,1140(sp)
 100473c:	d8c11c17 	ldw	r3,1136(sp)
 1004740:	da400404 	addi	r9,sp,16
 1004744:	003eb706 	br	1004224 <___vfprintf_internal_r+0x15bc>
 1004748:	d9412917 	ldw	r5,1188(sp)
 100474c:	8809883a 	mov	r4,r17
 1004750:	d9811b04 	addi	r6,sp,1132
 1004754:	1002c340 	call	1002c34 <__sprint_r>
 1004758:	103a891e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 100475c:	dc812417 	ldw	r18,1168(sp)
 1004760:	da011d17 	ldw	r8,1140(sp)
 1004764:	da400404 	addi	r9,sp,16
 1004768:	003dc206 	br	1003e74 <___vfprintf_internal_r+0x120c>
 100476c:	df012815 	stw	fp,1184(sp)
 1004770:	d8812583 	ldbu	r2,1174(sp)
 1004774:	df012b15 	stw	fp,1196(sp)
 1004778:	ddc12d15 	stw	r23,1204(sp)
 100477c:	d8013115 	stw	zero,1220(sp)
 1004780:	003ac606 	br	100329c <___vfprintf_internal_r+0x634>
 1004784:	d8812404 	addi	r2,sp,1168
 1004788:	d8800115 	stw	r2,4(sp)
 100478c:	d8812304 	addi	r2,sp,1164
 1004790:	d8800215 	stw	r2,8(sp)
 1004794:	d8812204 	addi	r2,sp,1160
 1004798:	df000015 	stw	fp,0(sp)
 100479c:	d8800315 	stw	r2,12(sp)
 10047a0:	8809883a 	mov	r4,r17
 10047a4:	b00b883a 	mov	r5,r22
 10047a8:	a00d883a 	mov	r6,r20
 10047ac:	01c000c4 	movi	r7,3
 10047b0:	da413c15 	stw	r9,1264(sp)
 10047b4:	1004f880 	call	1004f88 <_dtoa_r>
 10047b8:	da413c17 	ldw	r9,1264(sp)
 10047bc:	1027883a 	mov	r19,r2
 10047c0:	1707883a 	add	r3,r2,fp
 10047c4:	e02f883a 	mov	r23,fp
 10047c8:	99000007 	ldb	r4,0(r19)
 10047cc:	00800c04 	movi	r2,48
 10047d0:	20800326 	beq	r4,r2,10047e0 <___vfprintf_internal_r+0x1b78>
 10047d4:	da812417 	ldw	r10,1168(sp)
 10047d8:	1a87883a 	add	r3,r3,r10
 10047dc:	003f1406 	br	1004430 <___vfprintf_internal_r+0x17c8>
 10047e0:	b009883a 	mov	r4,r22
 10047e4:	a00b883a 	mov	r5,r20
 10047e8:	000d883a 	mov	r6,zero
 10047ec:	000f883a 	mov	r7,zero
 10047f0:	d8c13b15 	stw	r3,1260(sp)
 10047f4:	da413c15 	stw	r9,1264(sp)
 10047f8:	100a6a00 	call	100a6a0 <__nedf2>
 10047fc:	d8c13b17 	ldw	r3,1260(sp)
 1004800:	da413c17 	ldw	r9,1264(sp)
 1004804:	103ff326 	beq	r2,zero,10047d4 <___vfprintf_internal_r+0x1b6c>
 1004808:	00800044 	movi	r2,1
 100480c:	15d5c83a 	sub	r10,r2,r23
 1004810:	da812415 	stw	r10,1168(sp)
 1004814:	1a87883a 	add	r3,r3,r10
 1004818:	003f0506 	br	1004430 <___vfprintf_internal_r+0x17c8>
 100481c:	d9412917 	ldw	r5,1188(sp)
 1004820:	8809883a 	mov	r4,r17
 1004824:	d9811b04 	addi	r6,sp,1132
 1004828:	1002c340 	call	1002c34 <__sprint_r>
 100482c:	103a541e 	bne	r2,zero,1003180 <___vfprintf_internal_r+0x518>
 1004830:	dc812417 	ldw	r18,1168(sp)
 1004834:	da011d17 	ldw	r8,1140(sp)
 1004838:	d8c11c17 	ldw	r3,1136(sp)
 100483c:	da400404 	addi	r9,sp,16
 1004840:	003eb206 	br	100430c <___vfprintf_internal_r+0x16a4>
 1004844:	b82b883a 	mov	r21,r23
 1004848:	0007883a 	mov	r3,zero
 100484c:	00396306 	br	1002ddc <___vfprintf_internal_r+0x174>
 1004850:	04c04074 	movhi	r19,257
 1004854:	9cfe6604 	addi	r19,r19,-1640
 1004858:	003f4e06 	br	1004594 <___vfprintf_internal_r+0x192c>
 100485c:	d8812583 	ldbu	r2,1174(sp)
 1004860:	dc012a17 	ldw	r16,1192(sp)
 1004864:	d8013115 	stw	zero,1220(sp)
 1004868:	003a8c06 	br	100329c <___vfprintf_internal_r+0x634>
 100486c:	d8812417 	ldw	r2,1168(sp)
 1004870:	d8812b15 	stw	r2,1196(sp)
 1004874:	1029883a 	mov	r20,r2
 1004878:	00bfff44 	movi	r2,-3
 100487c:	a0800116 	blt	r20,r2,1004884 <___vfprintf_internal_r+0x1c1c>
 1004880:	e5001d0e 	bge	fp,r20,10048f8 <___vfprintf_internal_r+0x1c90>
 1004884:	94bfff84 	addi	r18,r18,-2
 1004888:	a53fffc4 	addi	r20,r20,-1
 100488c:	dd012415 	stw	r20,1168(sp)
 1004890:	dc811fc5 	stb	r18,1151(sp)
 1004894:	a0007216 	blt	r20,zero,1004a60 <___vfprintf_internal_r+0x1df8>
 1004898:	00800ac4 	movi	r2,43
 100489c:	d8812005 	stb	r2,1152(sp)
 10048a0:	00800244 	movi	r2,9
 10048a4:	15003516 	blt	r2,r20,100497c <___vfprintf_internal_r+0x1d14>
 10048a8:	00800c04 	movi	r2,48
 10048ac:	a5000c04 	addi	r20,r20,48
 10048b0:	d8812045 	stb	r2,1153(sp)
 10048b4:	dd012085 	stb	r20,1154(sp)
 10048b8:	d8c120c4 	addi	r3,sp,1155
 10048bc:	d8811fc4 	addi	r2,sp,1151
 10048c0:	1885c83a 	sub	r2,r3,r2
 10048c4:	d8c13217 	ldw	r3,1224(sp)
 10048c8:	d8813515 	stw	r2,1236(sp)
 10048cc:	1885883a 	add	r2,r3,r2
 10048d0:	d8812b15 	stw	r2,1196(sp)
 10048d4:	00800044 	movi	r2,1
 10048d8:	10c0580e 	bge	r2,r3,1004a3c <___vfprintf_internal_r+0x1dd4>
 10048dc:	d8812b17 	ldw	r2,1196(sp)
 10048e0:	10800044 	addi	r2,r2,1
 10048e4:	d8812b15 	stw	r2,1196(sp)
 10048e8:	d8812815 	stw	r2,1184(sp)
 10048ec:	103ef50e 	bge	r2,zero,10044c4 <___vfprintf_internal_r+0x185c>
 10048f0:	d8012815 	stw	zero,1184(sp)
 10048f4:	003ef306 	br	10044c4 <___vfprintf_internal_r+0x185c>
 10048f8:	d8812b17 	ldw	r2,1196(sp)
 10048fc:	d8c13217 	ldw	r3,1224(sp)
 1004900:	10c01416 	blt	r2,r3,1004954 <___vfprintf_internal_r+0x1cec>
 1004904:	8400004c 	andi	r16,r16,1
 1004908:	80000326 	beq	r16,zero,1004918 <___vfprintf_internal_r+0x1cb0>
 100490c:	d8812b17 	ldw	r2,1196(sp)
 1004910:	10800044 	addi	r2,r2,1
 1004914:	d8812b15 	stw	r2,1196(sp)
 1004918:	d8812815 	stw	r2,1184(sp)
 100491c:	10001416 	blt	r2,zero,1004970 <___vfprintf_internal_r+0x1d08>
 1004920:	048019c4 	movi	r18,103
 1004924:	003ee706 	br	10044c4 <___vfprintf_internal_r+0x185c>
 1004928:	d8012815 	stw	zero,1184(sp)
 100492c:	003b1a06 	br	1003598 <___vfprintf_internal_r+0x930>
 1004930:	e03e9c1e 	bne	fp,zero,10043a4 <___vfprintf_internal_r+0x173c>
 1004934:	07000044 	movi	fp,1
 1004938:	003e9a06 	br	10043a4 <___vfprintf_internal_r+0x173c>
 100493c:	07000184 	movi	fp,6
 1004940:	003e9806 	br	10043a4 <___vfprintf_internal_r+0x173c>
 1004944:	00c00b44 	movi	r3,45
 1004948:	a520003c 	xorhi	r20,r20,32768
 100494c:	d8c12f05 	stb	r3,1212(sp)
 1004950:	003e9806 	br	10043b4 <___vfprintf_internal_r+0x174c>
 1004954:	05003f0e 	bge	zero,r20,1004a54 <___vfprintf_internal_r+0x1dec>
 1004958:	05000044 	movi	r20,1
 100495c:	d8c13217 	ldw	r3,1224(sp)
 1004960:	a0e9883a 	add	r20,r20,r3
 1004964:	dd012b15 	stw	r20,1196(sp)
 1004968:	dd012815 	stw	r20,1184(sp)
 100496c:	a03fec0e 	bge	r20,zero,1004920 <___vfprintf_internal_r+0x1cb8>
 1004970:	d8012815 	stw	zero,1184(sp)
 1004974:	048019c4 	movi	r18,103
 1004978:	003ed206 	br	10044c4 <___vfprintf_internal_r+0x185c>
 100497c:	d8c11f84 	addi	r3,sp,1150
 1004980:	102f883a 	mov	r23,r2
 1004984:	4839883a 	mov	fp,r9
 1004988:	a009883a 	mov	r4,r20
 100498c:	01400284 	movi	r5,10
 1004990:	182d883a 	mov	r22,r3
 1004994:	10012d80 	call	10012d8 <__modsi3>
 1004998:	10800c04 	addi	r2,r2,48
 100499c:	a009883a 	mov	r4,r20
 10049a0:	b0800005 	stb	r2,0(r22)
 10049a4:	01400284 	movi	r5,10
 10049a8:	10012880 	call	1001288 <__divsi3>
 10049ac:	1029883a 	mov	r20,r2
 10049b0:	b0ffffc4 	addi	r3,r22,-1
 10049b4:	b8bff416 	blt	r23,r2,1004988 <___vfprintf_internal_r+0x1d20>
 10049b8:	11400c04 	addi	r5,r2,48
 10049bc:	b17fffc5 	stb	r5,-1(r22)
 10049c0:	d8811fc4 	addi	r2,sp,1151
 10049c4:	e013883a 	mov	r9,fp
 10049c8:	18803e2e 	bgeu	r3,r2,1004ac4 <___vfprintf_internal_r+0x1e5c>
 10049cc:	b007883a 	mov	r3,r22
 10049d0:	d9012044 	addi	r4,sp,1153
 10049d4:	00000206 	br	10049e0 <___vfprintf_internal_r+0x1d78>
 10049d8:	19400003 	ldbu	r5,0(r3)
 10049dc:	18c00044 	addi	r3,r3,1
 10049e0:	21400005 	stb	r5,0(r4)
 10049e4:	21000044 	addi	r4,r4,1
 10049e8:	10fffb1e 	bne	r2,r3,10049d8 <___vfprintf_internal_r+0x1d70>
 10049ec:	d8c12004 	addi	r3,sp,1152
 10049f0:	1d87c83a 	sub	r3,r3,r22
 10049f4:	d9012044 	addi	r4,sp,1153
 10049f8:	20c7883a 	add	r3,r4,r3
 10049fc:	003fb006 	br	10048c0 <___vfprintf_internal_r+0x1c58>
 1004a00:	e5c00044 	addi	r23,fp,1
 1004a04:	003e7406 	br	10043d8 <___vfprintf_internal_r+0x1770>
 1004a08:	d8c12217 	ldw	r3,1160(sp)
 1004a0c:	003e9906 	br	1004474 <___vfprintf_internal_r+0x180c>
 1004a10:	d9012d17 	ldw	r4,1204(sp)
 1004a14:	ac800043 	ldbu	r18,1(r21)
 1004a18:	b82b883a 	mov	r21,r23
 1004a1c:	20c00017 	ldw	r3,0(r4)
 1004a20:	20800104 	addi	r2,r4,4
 1004a24:	d8812d15 	stw	r2,1204(sp)
 1004a28:	18002116 	blt	r3,zero,1004ab0 <___vfprintf_internal_r+0x1e48>
 1004a2c:	94803fcc 	andi	r18,r18,255
 1004a30:	9480201c 	xori	r18,r18,128
 1004a34:	94bfe004 	addi	r18,r18,-128
 1004a38:	0038e706 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1004a3c:	80a0703a 	and	r16,r16,r2
 1004a40:	803fa61e 	bne	r16,zero,10048dc <___vfprintf_internal_r+0x1c74>
 1004a44:	d8812b17 	ldw	r2,1196(sp)
 1004a48:	d8812815 	stw	r2,1184(sp)
 1004a4c:	103e9d0e 	bge	r2,zero,10044c4 <___vfprintf_internal_r+0x185c>
 1004a50:	003fa706 	br	10048f0 <___vfprintf_internal_r+0x1c88>
 1004a54:	00800084 	movi	r2,2
 1004a58:	1529c83a 	sub	r20,r2,r20
 1004a5c:	003fbf06 	br	100495c <___vfprintf_internal_r+0x1cf4>
 1004a60:	00800b44 	movi	r2,45
 1004a64:	0529c83a 	sub	r20,zero,r20
 1004a68:	d8812005 	stb	r2,1152(sp)
 1004a6c:	003f8c06 	br	10048a0 <___vfprintf_internal_r+0x1c38>
 1004a70:	008011c4 	movi	r2,71
 1004a74:	90be6926 	beq	r18,r2,100441c <___vfprintf_internal_r+0x17b4>
 1004a78:	003e6a06 	br	1004424 <___vfprintf_internal_r+0x17bc>
 1004a7c:	00bfffc4 	movi	r2,-1
 1004a80:	d8812c15 	stw	r2,1200(sp)
 1004a84:	0039ad06 	br	100313c <___vfprintf_internal_r+0x4d4>
 1004a88:	1007883a 	mov	r3,r2
 1004a8c:	003e7906 	br	1004474 <___vfprintf_internal_r+0x180c>
 1004a90:	e000021e 	bne	fp,zero,1004a9c <___vfprintf_internal_r+0x1e34>
 1004a94:	8400004c 	andi	r16,r16,1
 1004a98:	80000e26 	beq	r16,zero,1004ad4 <___vfprintf_internal_r+0x1e6c>
 1004a9c:	e7000084 	addi	fp,fp,2
 1004aa0:	df012b15 	stw	fp,1196(sp)
 1004aa4:	df012815 	stw	fp,1184(sp)
 1004aa8:	e03e860e 	bge	fp,zero,10044c4 <___vfprintf_internal_r+0x185c>
 1004aac:	003f9006 	br	10048f0 <___vfprintf_internal_r+0x1c88>
 1004ab0:	94803fcc 	andi	r18,r18,255
 1004ab4:	9480201c 	xori	r18,r18,128
 1004ab8:	00ffffc4 	movi	r3,-1
 1004abc:	94bfe004 	addi	r18,r18,-128
 1004ac0:	0038c506 	br	1002dd8 <___vfprintf_internal_r+0x170>
 1004ac4:	d8c12044 	addi	r3,sp,1153
 1004ac8:	003f7d06 	br	10048c0 <___vfprintf_internal_r+0x1c58>
 1004acc:	dd012417 	ldw	r20,1168(sp)
 1004ad0:	003f6d06 	br	1004888 <___vfprintf_internal_r+0x1c20>
 1004ad4:	00c00044 	movi	r3,1
 1004ad8:	d8c12815 	stw	r3,1184(sp)
 1004adc:	d8c12b15 	stw	r3,1196(sp)
 1004ae0:	003e7806 	br	10044c4 <___vfprintf_internal_r+0x185c>

01004ae4 <__vfprintf_internal>:
 1004ae4:	00804074 	movhi	r2,257
 1004ae8:	1085e104 	addi	r2,r2,6020
 1004aec:	2007883a 	mov	r3,r4
 1004af0:	11000017 	ldw	r4,0(r2)
 1004af4:	2805883a 	mov	r2,r5
 1004af8:	300f883a 	mov	r7,r6
 1004afc:	180b883a 	mov	r5,r3
 1004b00:	100d883a 	mov	r6,r2
 1004b04:	1002c681 	jmpi	1002c68 <___vfprintf_internal_r>

01004b08 <_write_r>:
 1004b08:	defffd04 	addi	sp,sp,-12
 1004b0c:	dc400115 	stw	r17,4(sp)
 1004b10:	dc000015 	stw	r16,0(sp)
 1004b14:	2023883a 	mov	r17,r4
 1004b18:	04004074 	movhi	r16,257
 1004b1c:	8405f604 	addi	r16,r16,6104
 1004b20:	2809883a 	mov	r4,r5
 1004b24:	300b883a 	mov	r5,r6
 1004b28:	380d883a 	mov	r6,r7
 1004b2c:	dfc00215 	stw	ra,8(sp)
 1004b30:	80000015 	stw	zero,0(r16)
 1004b34:	100bbc40 	call	100bbc4 <write>
 1004b38:	00ffffc4 	movi	r3,-1
 1004b3c:	10c00526 	beq	r2,r3,1004b54 <_write_r+0x4c>
 1004b40:	dfc00217 	ldw	ra,8(sp)
 1004b44:	dc400117 	ldw	r17,4(sp)
 1004b48:	dc000017 	ldw	r16,0(sp)
 1004b4c:	dec00304 	addi	sp,sp,12
 1004b50:	f800283a 	ret
 1004b54:	80c00017 	ldw	r3,0(r16)
 1004b58:	183ff926 	beq	r3,zero,1004b40 <_write_r+0x38>
 1004b5c:	88c00015 	stw	r3,0(r17)
 1004b60:	dfc00217 	ldw	ra,8(sp)
 1004b64:	dc400117 	ldw	r17,4(sp)
 1004b68:	dc000017 	ldw	r16,0(sp)
 1004b6c:	dec00304 	addi	sp,sp,12
 1004b70:	f800283a 	ret

01004b74 <__swsetup_r>:
 1004b74:	00804074 	movhi	r2,257
 1004b78:	1085e104 	addi	r2,r2,6020
 1004b7c:	10800017 	ldw	r2,0(r2)
 1004b80:	defffd04 	addi	sp,sp,-12
 1004b84:	dc400115 	stw	r17,4(sp)
 1004b88:	dc000015 	stw	r16,0(sp)
 1004b8c:	dfc00215 	stw	ra,8(sp)
 1004b90:	2023883a 	mov	r17,r4
 1004b94:	2821883a 	mov	r16,r5
 1004b98:	10000226 	beq	r2,zero,1004ba4 <__swsetup_r+0x30>
 1004b9c:	10c00e17 	ldw	r3,56(r2)
 1004ba0:	18003d26 	beq	r3,zero,1004c98 <__swsetup_r+0x124>
 1004ba4:	8080030b 	ldhu	r2,12(r16)
 1004ba8:	10c0020c 	andi	r3,r2,8
 1004bac:	18ffffcc 	andi	r3,r3,65535
 1004bb0:	18e0001c 	xori	r3,r3,32768
 1004bb4:	18e00004 	addi	r3,r3,-32768
 1004bb8:	18001226 	beq	r3,zero,1004c04 <__swsetup_r+0x90>
 1004bbc:	80c00417 	ldw	r3,16(r16)
 1004bc0:	18001f26 	beq	r3,zero,1004c40 <__swsetup_r+0xcc>
 1004bc4:	1100004c 	andi	r4,r2,1
 1004bc8:	2000261e 	bne	r4,zero,1004c64 <__swsetup_r+0xf0>
 1004bcc:	1080008c 	andi	r2,r2,2
 1004bd0:	10bfffcc 	andi	r2,r2,65535
 1004bd4:	10a0001c 	xori	r2,r2,32768
 1004bd8:	10a00004 	addi	r2,r2,-32768
 1004bdc:	1000311e 	bne	r2,zero,1004ca4 <__swsetup_r+0x130>
 1004be0:	80800517 	ldw	r2,20(r16)
 1004be4:	80800215 	stw	r2,8(r16)
 1004be8:	18002326 	beq	r3,zero,1004c78 <__swsetup_r+0x104>
 1004bec:	0005883a 	mov	r2,zero
 1004bf0:	dfc00217 	ldw	ra,8(sp)
 1004bf4:	dc400117 	ldw	r17,4(sp)
 1004bf8:	dc000017 	ldw	r16,0(sp)
 1004bfc:	dec00304 	addi	sp,sp,12
 1004c00:	f800283a 	ret
 1004c04:	10c0040c 	andi	r3,r2,16
 1004c08:	18ffffcc 	andi	r3,r3,65535
 1004c0c:	18e0001c 	xori	r3,r3,32768
 1004c10:	18e00004 	addi	r3,r3,-32768
 1004c14:	18001e26 	beq	r3,zero,1004c90 <__swsetup_r+0x11c>
 1004c18:	10c0010c 	andi	r3,r2,4
 1004c1c:	18ffffcc 	andi	r3,r3,65535
 1004c20:	18e0001c 	xori	r3,r3,32768
 1004c24:	18e00004 	addi	r3,r3,-32768
 1004c28:	1800211e 	bne	r3,zero,1004cb0 <__swsetup_r+0x13c>
 1004c2c:	80c00417 	ldw	r3,16(r16)
 1004c30:	11400214 	ori	r5,r2,8
 1004c34:	8140030d 	sth	r5,12(r16)
 1004c38:	2805883a 	mov	r2,r5
 1004c3c:	183fe11e 	bne	r3,zero,1004bc4 <__swsetup_r+0x50>
 1004c40:	1140a00c 	andi	r5,r2,640
 1004c44:	01008004 	movi	r4,512
 1004c48:	293fde26 	beq	r5,r4,1004bc4 <__swsetup_r+0x50>
 1004c4c:	8809883a 	mov	r4,r17
 1004c50:	800b883a 	mov	r5,r16
 1004c54:	1001ba00 	call	1001ba0 <__smakebuf_r>
 1004c58:	8080030b 	ldhu	r2,12(r16)
 1004c5c:	80c00417 	ldw	r3,16(r16)
 1004c60:	003fd806 	br	1004bc4 <__swsetup_r+0x50>
 1004c64:	80800517 	ldw	r2,20(r16)
 1004c68:	80000215 	stw	zero,8(r16)
 1004c6c:	0085c83a 	sub	r2,zero,r2
 1004c70:	80800615 	stw	r2,24(r16)
 1004c74:	183fdd1e 	bne	r3,zero,1004bec <__swsetup_r+0x78>
 1004c78:	8080030b 	ldhu	r2,12(r16)
 1004c7c:	1080200c 	andi	r2,r2,128
 1004c80:	10bfffcc 	andi	r2,r2,65535
 1004c84:	10a0001c 	xori	r2,r2,32768
 1004c88:	10a00004 	addi	r2,r2,-32768
 1004c8c:	103fd826 	beq	r2,zero,1004bf0 <__swsetup_r+0x7c>
 1004c90:	00bfffc4 	movi	r2,-1
 1004c94:	003fd606 	br	1004bf0 <__swsetup_r+0x7c>
 1004c98:	1009883a 	mov	r4,r2
 1004c9c:	10068600 	call	1006860 <__sinit>
 1004ca0:	003fc006 	br	1004ba4 <__swsetup_r+0x30>
 1004ca4:	0005883a 	mov	r2,zero
 1004ca8:	80800215 	stw	r2,8(r16)
 1004cac:	003fce06 	br	1004be8 <__swsetup_r+0x74>
 1004cb0:	81400c17 	ldw	r5,48(r16)
 1004cb4:	28000626 	beq	r5,zero,1004cd0 <__swsetup_r+0x15c>
 1004cb8:	80c01004 	addi	r3,r16,64
 1004cbc:	28c00326 	beq	r5,r3,1004ccc <__swsetup_r+0x158>
 1004cc0:	8809883a 	mov	r4,r17
 1004cc4:	1006c7c0 	call	1006c7c <_free_r>
 1004cc8:	8080030b 	ldhu	r2,12(r16)
 1004ccc:	80000c15 	stw	zero,48(r16)
 1004cd0:	80c00417 	ldw	r3,16(r16)
 1004cd4:	013ff6c4 	movi	r4,-37
 1004cd8:	2084703a 	and	r2,r4,r2
 1004cdc:	80000115 	stw	zero,4(r16)
 1004ce0:	80c00015 	stw	r3,0(r16)
 1004ce4:	003fd206 	br	1004c30 <__swsetup_r+0xbc>

01004ce8 <_close_r>:
 1004ce8:	defffd04 	addi	sp,sp,-12
 1004cec:	dc400115 	stw	r17,4(sp)
 1004cf0:	dc000015 	stw	r16,0(sp)
 1004cf4:	2023883a 	mov	r17,r4
 1004cf8:	04004074 	movhi	r16,257
 1004cfc:	8405f604 	addi	r16,r16,6104
 1004d00:	2809883a 	mov	r4,r5
 1004d04:	dfc00215 	stw	ra,8(sp)
 1004d08:	80000015 	stw	zero,0(r16)
 1004d0c:	100b1700 	call	100b170 <close>
 1004d10:	00ffffc4 	movi	r3,-1
 1004d14:	10c00526 	beq	r2,r3,1004d2c <_close_r+0x44>
 1004d18:	dfc00217 	ldw	ra,8(sp)
 1004d1c:	dc400117 	ldw	r17,4(sp)
 1004d20:	dc000017 	ldw	r16,0(sp)
 1004d24:	dec00304 	addi	sp,sp,12
 1004d28:	f800283a 	ret
 1004d2c:	80c00017 	ldw	r3,0(r16)
 1004d30:	183ff926 	beq	r3,zero,1004d18 <_close_r+0x30>
 1004d34:	88c00015 	stw	r3,0(r17)
 1004d38:	dfc00217 	ldw	ra,8(sp)
 1004d3c:	dc400117 	ldw	r17,4(sp)
 1004d40:	dc000017 	ldw	r16,0(sp)
 1004d44:	dec00304 	addi	sp,sp,12
 1004d48:	f800283a 	ret

01004d4c <quorem>:
 1004d4c:	defff204 	addi	sp,sp,-56
 1004d50:	dd000815 	stw	r20,32(sp)
 1004d54:	20800417 	ldw	r2,16(r4)
 1004d58:	2d000417 	ldw	r20,16(r5)
 1004d5c:	dcc00715 	stw	r19,28(sp)
 1004d60:	dfc00d15 	stw	ra,52(sp)
 1004d64:	df000c15 	stw	fp,48(sp)
 1004d68:	ddc00b15 	stw	r23,44(sp)
 1004d6c:	dd800a15 	stw	r22,40(sp)
 1004d70:	dd400915 	stw	r21,36(sp)
 1004d74:	dc800615 	stw	r18,24(sp)
 1004d78:	dc400515 	stw	r17,20(sp)
 1004d7c:	dc000415 	stw	r16,16(sp)
 1004d80:	d9400015 	stw	r5,0(sp)
 1004d84:	2027883a 	mov	r19,r4
 1004d88:	15007d16 	blt	r2,r20,1004f80 <quorem+0x234>
 1004d8c:	a0800104 	addi	r2,r20,4
 1004d90:	1085883a 	add	r2,r2,r2
 1004d94:	1085883a 	add	r2,r2,r2
 1004d98:	28ad883a 	add	r22,r5,r2
 1004d9c:	2085883a 	add	r2,r4,r2
 1004da0:	10800017 	ldw	r2,0(r2)
 1004da4:	b1400017 	ldw	r5,0(r22)
 1004da8:	a53fffc4 	addi	r20,r20,-1
 1004dac:	1009883a 	mov	r4,r2
 1004db0:	29400044 	addi	r5,r5,1
 1004db4:	d8800115 	stw	r2,4(sp)
 1004db8:	10013340 	call	1001334 <__udivsi3>
 1004dbc:	1025883a 	mov	r18,r2
 1004dc0:	d8800017 	ldw	r2,0(sp)
 1004dc4:	9f000504 	addi	fp,r19,20
 1004dc8:	14000504 	addi	r16,r2,20
 1004dcc:	90003626 	beq	r18,zero,1004ea8 <quorem+0x15c>
 1004dd0:	802b883a 	mov	r21,r16
 1004dd4:	e023883a 	mov	r17,fp
 1004dd8:	0007883a 	mov	r3,zero
 1004ddc:	002f883a 	mov	r23,zero
 1004de0:	a9800017 	ldw	r6,0(r21)
 1004de4:	900b883a 	mov	r5,r18
 1004de8:	d8c00315 	stw	r3,12(sp)
 1004dec:	313fffcc 	andi	r4,r6,65535
 1004df0:	d9800215 	stw	r6,8(sp)
 1004df4:	10013440 	call	1001344 <__mulsi3>
 1004df8:	d9800217 	ldw	r6,8(sp)
 1004dfc:	d8c00317 	ldw	r3,12(sp)
 1004e00:	900b883a 	mov	r5,r18
 1004e04:	3008d43a 	srli	r4,r6,16
 1004e08:	1887883a 	add	r3,r3,r2
 1004e0c:	d8c00315 	stw	r3,12(sp)
 1004e10:	10013440 	call	1001344 <__mulsi3>
 1004e14:	89400017 	ldw	r5,0(r17)
 1004e18:	d8c00317 	ldw	r3,12(sp)
 1004e1c:	ad400104 	addi	r21,r21,4
 1004e20:	293fffcc 	andi	r4,r5,65535
 1004e24:	1810d43a 	srli	r8,r3,16
 1004e28:	25c9883a 	add	r4,r4,r23
 1004e2c:	18ffffcc 	andi	r3,r3,65535
 1004e30:	20c9c83a 	sub	r4,r4,r3
 1004e34:	280cd43a 	srli	r6,r5,16
 1004e38:	4085883a 	add	r2,r8,r2
 1004e3c:	2007d43a 	srai	r3,r4,16
 1004e40:	117fffcc 	andi	r5,r2,65535
 1004e44:	314bc83a 	sub	r5,r6,r5
 1004e48:	28cb883a 	add	r5,r5,r3
 1004e4c:	8940008d 	sth	r5,2(r17)
 1004e50:	8900000d 	sth	r4,0(r17)
 1004e54:	1006d43a 	srli	r3,r2,16
 1004e58:	282fd43a 	srai	r23,r5,16
 1004e5c:	8c400104 	addi	r17,r17,4
 1004e60:	b57fdf2e 	bgeu	r22,r21,1004de0 <quorem+0x94>
 1004e64:	d8c00117 	ldw	r3,4(sp)
 1004e68:	18000f1e 	bne	r3,zero,1004ea8 <quorem+0x15c>
 1004e6c:	a0800144 	addi	r2,r20,5
 1004e70:	1085883a 	add	r2,r2,r2
 1004e74:	1085883a 	add	r2,r2,r2
 1004e78:	9887883a 	add	r3,r19,r2
 1004e7c:	18bfff04 	addi	r2,r3,-4
 1004e80:	e080082e 	bgeu	fp,r2,1004ea4 <quorem+0x158>
 1004e84:	18ffff17 	ldw	r3,-4(r3)
 1004e88:	18000326 	beq	r3,zero,1004e98 <quorem+0x14c>
 1004e8c:	00000506 	br	1004ea4 <quorem+0x158>
 1004e90:	10c00017 	ldw	r3,0(r2)
 1004e94:	1800031e 	bne	r3,zero,1004ea4 <quorem+0x158>
 1004e98:	10bfff04 	addi	r2,r2,-4
 1004e9c:	a53fffc4 	addi	r20,r20,-1
 1004ea0:	e0bffb36 	bltu	fp,r2,1004e90 <quorem+0x144>
 1004ea4:	9d000415 	stw	r20,16(r19)
 1004ea8:	d9400017 	ldw	r5,0(sp)
 1004eac:	9809883a 	mov	r4,r19
 1004eb0:	10083e80 	call	10083e8 <__mcmp>
 1004eb4:	10002516 	blt	r2,zero,1004f4c <quorem+0x200>
 1004eb8:	94800044 	addi	r18,r18,1
 1004ebc:	e007883a 	mov	r3,fp
 1004ec0:	000d883a 	mov	r6,zero
 1004ec4:	18800017 	ldw	r2,0(r3)
 1004ec8:	82000017 	ldw	r8,0(r16)
 1004ecc:	84000104 	addi	r16,r16,4
 1004ed0:	11ffffcc 	andi	r7,r2,65535
 1004ed4:	413fffcc 	andi	r4,r8,65535
 1004ed8:	398d883a 	add	r6,r7,r6
 1004edc:	310fc83a 	sub	r7,r6,r4
 1004ee0:	4010d43a 	srli	r8,r8,16
 1004ee4:	100cd43a 	srli	r6,r2,16
 1004ee8:	3809d43a 	srai	r4,r7,16
 1004eec:	19c0000d 	sth	r7,0(r3)
 1004ef0:	320dc83a 	sub	r6,r6,r8
 1004ef4:	310d883a 	add	r6,r6,r4
 1004ef8:	1980008d 	sth	r6,2(r3)
 1004efc:	300dd43a 	srai	r6,r6,16
 1004f00:	18c00104 	addi	r3,r3,4
 1004f04:	b43fef2e 	bgeu	r22,r16,1004ec4 <quorem+0x178>
 1004f08:	a0800144 	addi	r2,r20,5
 1004f0c:	1085883a 	add	r2,r2,r2
 1004f10:	1085883a 	add	r2,r2,r2
 1004f14:	9885883a 	add	r2,r19,r2
 1004f18:	10c00017 	ldw	r3,0(r2)
 1004f1c:	18000b1e 	bne	r3,zero,1004f4c <quorem+0x200>
 1004f20:	10ffff04 	addi	r3,r2,-4
 1004f24:	e0c0082e 	bgeu	fp,r3,1004f48 <quorem+0x1fc>
 1004f28:	10bfff17 	ldw	r2,-4(r2)
 1004f2c:	10000326 	beq	r2,zero,1004f3c <quorem+0x1f0>
 1004f30:	00000506 	br	1004f48 <quorem+0x1fc>
 1004f34:	18800017 	ldw	r2,0(r3)
 1004f38:	1000031e 	bne	r2,zero,1004f48 <quorem+0x1fc>
 1004f3c:	18ffff04 	addi	r3,r3,-4
 1004f40:	a53fffc4 	addi	r20,r20,-1
 1004f44:	e0fffb36 	bltu	fp,r3,1004f34 <quorem+0x1e8>
 1004f48:	9d000415 	stw	r20,16(r19)
 1004f4c:	9005883a 	mov	r2,r18
 1004f50:	dfc00d17 	ldw	ra,52(sp)
 1004f54:	df000c17 	ldw	fp,48(sp)
 1004f58:	ddc00b17 	ldw	r23,44(sp)
 1004f5c:	dd800a17 	ldw	r22,40(sp)
 1004f60:	dd400917 	ldw	r21,36(sp)
 1004f64:	dd000817 	ldw	r20,32(sp)
 1004f68:	dcc00717 	ldw	r19,28(sp)
 1004f6c:	dc800617 	ldw	r18,24(sp)
 1004f70:	dc400517 	ldw	r17,20(sp)
 1004f74:	dc000417 	ldw	r16,16(sp)
 1004f78:	dec00e04 	addi	sp,sp,56
 1004f7c:	f800283a 	ret
 1004f80:	0005883a 	mov	r2,zero
 1004f84:	003ff206 	br	1004f50 <quorem+0x204>

01004f88 <_dtoa_r>:
 1004f88:	20801017 	ldw	r2,64(r4)
 1004f8c:	deffdf04 	addi	sp,sp,-132
 1004f90:	dcc01a15 	stw	r19,104(sp)
 1004f94:	dc801915 	stw	r18,100(sp)
 1004f98:	dc401815 	stw	r17,96(sp)
 1004f9c:	dc001715 	stw	r16,92(sp)
 1004fa0:	dfc02015 	stw	ra,128(sp)
 1004fa4:	df001f15 	stw	fp,124(sp)
 1004fa8:	ddc01e15 	stw	r23,120(sp)
 1004fac:	dd801d15 	stw	r22,116(sp)
 1004fb0:	dd401c15 	stw	r21,112(sp)
 1004fb4:	dd001b15 	stw	r20,108(sp)
 1004fb8:	d9400315 	stw	r5,12(sp)
 1004fbc:	d9c00415 	stw	r7,16(sp)
 1004fc0:	2021883a 	mov	r16,r4
 1004fc4:	3025883a 	mov	r18,r6
 1004fc8:	dcc02317 	ldw	r19,140(sp)
 1004fcc:	3023883a 	mov	r17,r6
 1004fd0:	10000826 	beq	r2,zero,1004ff4 <_dtoa_r+0x6c>
 1004fd4:	20c01117 	ldw	r3,68(r4)
 1004fd8:	01800044 	movi	r6,1
 1004fdc:	100b883a 	mov	r5,r2
 1004fe0:	30cc983a 	sll	r6,r6,r3
 1004fe4:	10c00115 	stw	r3,4(r2)
 1004fe8:	11800215 	stw	r6,8(r2)
 1004fec:	1007b440 	call	1007b44 <_Bfree>
 1004ff0:	80001015 	stw	zero,64(r16)
 1004ff4:	90002f16 	blt	r18,zero,10050b4 <_dtoa_r+0x12c>
 1004ff8:	98000015 	stw	zero,0(r19)
 1004ffc:	90dffc2c 	andhi	r3,r18,32752
 1005000:	009ffc34 	movhi	r2,32752
 1005004:	18801c26 	beq	r3,r2,1005078 <_dtoa_r+0xf0>
 1005008:	d9000317 	ldw	r4,12(sp)
 100500c:	880b883a 	mov	r5,r17
 1005010:	000d883a 	mov	r6,zero
 1005014:	000f883a 	mov	r7,zero
 1005018:	100a6440 	call	100a644 <__eqdf2>
 100501c:	10002c1e 	bne	r2,zero,10050d0 <_dtoa_r+0x148>
 1005020:	d9002217 	ldw	r4,136(sp)
 1005024:	d9c02417 	ldw	r7,144(sp)
 1005028:	00800044 	movi	r2,1
 100502c:	20800015 	stw	r2,0(r4)
 1005030:	38019426 	beq	r7,zero,1005684 <_dtoa_r+0x6fc>
 1005034:	00804074 	movhi	r2,257
 1005038:	10be7344 	addi	r2,r2,-1587
 100503c:	38800015 	stw	r2,0(r7)
 1005040:	15ffffc4 	addi	r23,r2,-1
 1005044:	b805883a 	mov	r2,r23
 1005048:	dfc02017 	ldw	ra,128(sp)
 100504c:	df001f17 	ldw	fp,124(sp)
 1005050:	ddc01e17 	ldw	r23,120(sp)
 1005054:	dd801d17 	ldw	r22,116(sp)
 1005058:	dd401c17 	ldw	r21,112(sp)
 100505c:	dd001b17 	ldw	r20,108(sp)
 1005060:	dcc01a17 	ldw	r19,104(sp)
 1005064:	dc801917 	ldw	r18,100(sp)
 1005068:	dc401817 	ldw	r17,96(sp)
 100506c:	dc001717 	ldw	r16,92(sp)
 1005070:	dec02104 	addi	sp,sp,132
 1005074:	f800283a 	ret
 1005078:	d8c02217 	ldw	r3,136(sp)
 100507c:	d9000317 	ldw	r4,12(sp)
 1005080:	0089c3c4 	movi	r2,9999
 1005084:	18800015 	stw	r2,0(r3)
 1005088:	20016c26 	beq	r4,zero,100563c <_dtoa_r+0x6b4>
 100508c:	05c04074 	movhi	r23,257
 1005090:	bdfe7f04 	addi	r23,r23,-1540
 1005094:	d9c02417 	ldw	r7,144(sp)
 1005098:	383fea26 	beq	r7,zero,1005044 <_dtoa_r+0xbc>
 100509c:	b88000c7 	ldb	r2,3(r23)
 10050a0:	10016d1e 	bne	r2,zero,1005658 <_dtoa_r+0x6d0>
 10050a4:	b88000c4 	addi	r2,r23,3
 10050a8:	d8c02417 	ldw	r3,144(sp)
 10050ac:	18800015 	stw	r2,0(r3)
 10050b0:	003fe406 	br	1005044 <_dtoa_r+0xbc>
 10050b4:	04600034 	movhi	r17,32768
 10050b8:	8c7fffc4 	addi	r17,r17,-1
 10050bc:	9462703a 	and	r17,r18,r17
 10050c0:	00800044 	movi	r2,1
 10050c4:	98800015 	stw	r2,0(r19)
 10050c8:	8825883a 	mov	r18,r17
 10050cc:	003fcb06 	br	1004ffc <_dtoa_r+0x74>
 10050d0:	d9400317 	ldw	r5,12(sp)
 10050d4:	9028d53a 	srli	r20,r18,20
 10050d8:	d8800204 	addi	r2,sp,8
 10050dc:	d8800015 	stw	r2,0(sp)
 10050e0:	8009883a 	mov	r4,r16
 10050e4:	880d883a 	mov	r6,r17
 10050e8:	d9c00104 	addi	r7,sp,4
 10050ec:	10087900 	call	1008790 <__d2b>
 10050f0:	a501ffcc 	andi	r20,r20,2047
 10050f4:	1039883a 	mov	fp,r2
 10050f8:	a001591e 	bne	r20,zero,1005660 <_dtoa_r+0x6d8>
 10050fc:	dd400217 	ldw	r21,8(sp)
 1005100:	dd000117 	ldw	r20,4(sp)
 1005104:	00befbc4 	movi	r2,-1041
 1005108:	ad29883a 	add	r20,r21,r20
 100510c:	a082d216 	blt	r20,r2,1005c58 <_dtoa_r+0xcd0>
 1005110:	d8c00317 	ldw	r3,12(sp)
 1005114:	013f0384 	movi	r4,-1010
 1005118:	2509c83a 	sub	r4,r4,r20
 100511c:	a0810484 	addi	r2,r20,1042
 1005120:	9124983a 	sll	r18,r18,r4
 1005124:	1884d83a 	srl	r2,r3,r2
 1005128:	9088b03a 	or	r4,r18,r2
 100512c:	100a9c80 	call	100a9c8 <__floatunsidf>
 1005130:	1009883a 	mov	r4,r2
 1005134:	017f8434 	movhi	r5,65040
 1005138:	00800044 	movi	r2,1
 100513c:	194b883a 	add	r5,r3,r5
 1005140:	a53fffc4 	addi	r20,r20,-1
 1005144:	d8800f15 	stw	r2,60(sp)
 1005148:	000d883a 	mov	r6,zero
 100514c:	01cffe34 	movhi	r7,16376
 1005150:	100a14c0 	call	100a14c <__subdf3>
 1005154:	1009883a 	mov	r4,r2
 1005158:	180b883a 	mov	r5,r3
 100515c:	0198dbf4 	movhi	r6,25455
 1005160:	3190d844 	addi	r6,r6,17249
 1005164:	01cff4f4 	movhi	r7,16339
 1005168:	39e1e9c4 	addi	r7,r7,-30809
 100516c:	100a1ac0 	call	100a1ac <__muldf3>
 1005170:	180b883a 	mov	r5,r3
 1005174:	01a2d874 	movhi	r6,35681
 1005178:	31b22cc4 	addi	r6,r6,-14157
 100517c:	01cff1f4 	movhi	r7,16327
 1005180:	39e28a04 	addi	r7,r7,-30168
 1005184:	1009883a 	mov	r4,r2
 1005188:	100a0f80 	call	100a0f8 <__adddf3>
 100518c:	a009883a 	mov	r4,r20
 1005190:	1027883a 	mov	r19,r2
 1005194:	1825883a 	mov	r18,r3
 1005198:	100a8200 	call	100a820 <__floatsidf>
 100519c:	1009883a 	mov	r4,r2
 10051a0:	180b883a 	mov	r5,r3
 10051a4:	019427f4 	movhi	r6,20639
 10051a8:	319e7ec4 	addi	r6,r6,31227
 10051ac:	01cff4f4 	movhi	r7,16339
 10051b0:	39d104c4 	addi	r7,r7,17427
 10051b4:	100a1ac0 	call	100a1ac <__muldf3>
 10051b8:	9809883a 	mov	r4,r19
 10051bc:	900b883a 	mov	r5,r18
 10051c0:	100d883a 	mov	r6,r2
 10051c4:	180f883a 	mov	r7,r3
 10051c8:	100a0f80 	call	100a0f8 <__adddf3>
 10051cc:	1009883a 	mov	r4,r2
 10051d0:	180b883a 	mov	r5,r3
 10051d4:	1027883a 	mov	r19,r2
 10051d8:	1825883a 	mov	r18,r3
 10051dc:	100a8f40 	call	100a8f4 <__fixdfsi>
 10051e0:	9809883a 	mov	r4,r19
 10051e4:	900b883a 	mov	r5,r18
 10051e8:	000d883a 	mov	r6,zero
 10051ec:	000f883a 	mov	r7,zero
 10051f0:	d8800615 	stw	r2,24(sp)
 10051f4:	100a7c40 	call	100a7c4 <__ltdf2>
 10051f8:	10027e16 	blt	r2,zero,1005bf4 <_dtoa_r+0xc6c>
 10051fc:	d8c00617 	ldw	r3,24(sp)
 1005200:	00800584 	movi	r2,22
 1005204:	10c26c36 	bltu	r2,r3,1005bb8 <_dtoa_r+0xc30>
 1005208:	180490fa 	slli	r2,r3,3
 100520c:	00c04074 	movhi	r3,257
 1005210:	18fea404 	addi	r3,r3,-1392
 1005214:	d9800317 	ldw	r6,12(sp)
 1005218:	1885883a 	add	r2,r3,r2
 100521c:	11000017 	ldw	r4,0(r2)
 1005220:	11400117 	ldw	r5,4(r2)
 1005224:	880f883a 	mov	r7,r17
 1005228:	100a6fc0 	call	100a6fc <__gtdf2>
 100522c:	00828f0e 	bge	zero,r2,1005c6c <_dtoa_r+0xce4>
 1005230:	d8800617 	ldw	r2,24(sp)
 1005234:	d8000d15 	stw	zero,52(sp)
 1005238:	10bfffc4 	addi	r2,r2,-1
 100523c:	d8800615 	stw	r2,24(sp)
 1005240:	ad29c83a 	sub	r20,r21,r20
 1005244:	a53fffc4 	addi	r20,r20,-1
 1005248:	a0026616 	blt	r20,zero,1005be4 <_dtoa_r+0xc5c>
 100524c:	dd000715 	stw	r20,28(sp)
 1005250:	d8000815 	stw	zero,32(sp)
 1005254:	d8800617 	ldw	r2,24(sp)
 1005258:	10025a16 	blt	r2,zero,1005bc4 <_dtoa_r+0xc3c>
 100525c:	d8c00717 	ldw	r3,28(sp)
 1005260:	d8800b15 	stw	r2,44(sp)
 1005264:	d8000a15 	stw	zero,40(sp)
 1005268:	1887883a 	add	r3,r3,r2
 100526c:	d8c00715 	stw	r3,28(sp)
 1005270:	d9c00417 	ldw	r7,16(sp)
 1005274:	00800244 	movi	r2,9
 1005278:	11c10536 	bltu	r2,r7,1005690 <_dtoa_r+0x708>
 100527c:	00800144 	movi	r2,5
 1005280:	11c4c60e 	bge	r2,r7,100659c <_dtoa_r+0x1614>
 1005284:	39ffff04 	addi	r7,r7,-4
 1005288:	d9c00415 	stw	r7,16(sp)
 100528c:	0027883a 	mov	r19,zero
 1005290:	d9c00417 	ldw	r7,16(sp)
 1005294:	008000c4 	movi	r2,3
 1005298:	3883a226 	beq	r7,r2,1006124 <_dtoa_r+0x119c>
 100529c:	11c2bc16 	blt	r2,r7,1005d90 <_dtoa_r+0xe08>
 10052a0:	00800084 	movi	r2,2
 10052a4:	3880fb1e 	bne	r7,r2,1005694 <_dtoa_r+0x70c>
 10052a8:	d8000c15 	stw	zero,48(sp)
 10052ac:	d9002117 	ldw	r4,132(sp)
 10052b0:	0103ae0e 	bge	zero,r4,100616c <_dtoa_r+0x11e4>
 10052b4:	2025883a 	mov	r18,r4
 10052b8:	d9000e15 	stw	r4,56(sp)
 10052bc:	d9000915 	stw	r4,36(sp)
 10052c0:	80001115 	stw	zero,68(r16)
 10052c4:	008005c4 	movi	r2,23
 10052c8:	1484b22e 	bgeu	r2,r18,1006594 <_dtoa_r+0x160c>
 10052cc:	00c00044 	movi	r3,1
 10052d0:	00800104 	movi	r2,4
 10052d4:	1085883a 	add	r2,r2,r2
 10052d8:	11000504 	addi	r4,r2,20
 10052dc:	180b883a 	mov	r5,r3
 10052e0:	18c00044 	addi	r3,r3,1
 10052e4:	913ffb2e 	bgeu	r18,r4,10052d4 <_dtoa_r+0x34c>
 10052e8:	81401115 	stw	r5,68(r16)
 10052ec:	8009883a 	mov	r4,r16
 10052f0:	1007a9c0 	call	1007a9c <_Balloc>
 10052f4:	102f883a 	mov	r23,r2
 10052f8:	80801015 	stw	r2,64(r16)
 10052fc:	00800384 	movi	r2,14
 1005300:	1480f036 	bltu	r2,r18,10056c4 <_dtoa_r+0x73c>
 1005304:	9800ef26 	beq	r19,zero,10056c4 <_dtoa_r+0x73c>
 1005308:	d8800617 	ldw	r2,24(sp)
 100530c:	00839c0e 	bge	zero,r2,1006180 <_dtoa_r+0x11f8>
 1005310:	d8c00617 	ldw	r3,24(sp)
 1005314:	108003cc 	andi	r2,r2,15
 1005318:	100490fa 	slli	r2,r2,3
 100531c:	182bd13a 	srai	r21,r3,4
 1005320:	00c04074 	movhi	r3,257
 1005324:	18fea404 	addi	r3,r3,-1392
 1005328:	1885883a 	add	r2,r3,r2
 100532c:	a8c0040c 	andi	r3,r21,16
 1005330:	12800017 	ldw	r10,0(r2)
 1005334:	15800117 	ldw	r22,4(r2)
 1005338:	18038726 	beq	r3,zero,1006158 <_dtoa_r+0x11d0>
 100533c:	00804074 	movhi	r2,257
 1005340:	10be9a04 	addi	r2,r2,-1432
 1005344:	11800817 	ldw	r6,32(r2)
 1005348:	11c00917 	ldw	r7,36(r2)
 100534c:	d9000317 	ldw	r4,12(sp)
 1005350:	880b883a 	mov	r5,r17
 1005354:	da801515 	stw	r10,84(sp)
 1005358:	100a4900 	call	100a490 <__divdf3>
 100535c:	da801517 	ldw	r10,84(sp)
 1005360:	d8801015 	stw	r2,64(sp)
 1005364:	1829883a 	mov	r20,r3
 1005368:	ad4003cc 	andi	r21,r21,15
 100536c:	048000c4 	movi	r18,3
 1005370:	a8001126 	beq	r21,zero,10053b8 <_dtoa_r+0x430>
 1005374:	04c04074 	movhi	r19,257
 1005378:	9cfe9a04 	addi	r19,r19,-1432
 100537c:	5005883a 	mov	r2,r10
 1005380:	b007883a 	mov	r3,r22
 1005384:	a980004c 	andi	r6,r21,1
 1005388:	1009883a 	mov	r4,r2
 100538c:	a82bd07a 	srai	r21,r21,1
 1005390:	180b883a 	mov	r5,r3
 1005394:	30000426 	beq	r6,zero,10053a8 <_dtoa_r+0x420>
 1005398:	99800017 	ldw	r6,0(r19)
 100539c:	99c00117 	ldw	r7,4(r19)
 10053a0:	94800044 	addi	r18,r18,1
 10053a4:	100a1ac0 	call	100a1ac <__muldf3>
 10053a8:	9cc00204 	addi	r19,r19,8
 10053ac:	a83ff51e 	bne	r21,zero,1005384 <_dtoa_r+0x3fc>
 10053b0:	1015883a 	mov	r10,r2
 10053b4:	182d883a 	mov	r22,r3
 10053b8:	d9001017 	ldw	r4,64(sp)
 10053bc:	a00b883a 	mov	r5,r20
 10053c0:	500d883a 	mov	r6,r10
 10053c4:	b00f883a 	mov	r7,r22
 10053c8:	100a4900 	call	100a490 <__divdf3>
 10053cc:	1027883a 	mov	r19,r2
 10053d0:	1829883a 	mov	r20,r3
 10053d4:	d8c00d17 	ldw	r3,52(sp)
 10053d8:	18000626 	beq	r3,zero,10053f4 <_dtoa_r+0x46c>
 10053dc:	9809883a 	mov	r4,r19
 10053e0:	a00b883a 	mov	r5,r20
 10053e4:	000d883a 	mov	r6,zero
 10053e8:	01cffc34 	movhi	r7,16368
 10053ec:	100a7c40 	call	100a7c4 <__ltdf2>
 10053f0:	10040e16 	blt	r2,zero,100642c <_dtoa_r+0x14a4>
 10053f4:	9009883a 	mov	r4,r18
 10053f8:	100a8200 	call	100a820 <__floatsidf>
 10053fc:	1009883a 	mov	r4,r2
 1005400:	180b883a 	mov	r5,r3
 1005404:	980d883a 	mov	r6,r19
 1005408:	a00f883a 	mov	r7,r20
 100540c:	100a1ac0 	call	100a1ac <__muldf3>
 1005410:	1009883a 	mov	r4,r2
 1005414:	180b883a 	mov	r5,r3
 1005418:	000d883a 	mov	r6,zero
 100541c:	01d00734 	movhi	r7,16412
 1005420:	100a0f80 	call	100a0f8 <__adddf3>
 1005424:	057f3034 	movhi	r21,64704
 1005428:	1d6b883a 	add	r21,r3,r21
 100542c:	d8c00917 	ldw	r3,36(sp)
 1005430:	1025883a 	mov	r18,r2
 1005434:	18031f26 	beq	r3,zero,10060b4 <_dtoa_r+0x112c>
 1005438:	d8800617 	ldw	r2,24(sp)
 100543c:	dac00917 	ldw	r11,36(sp)
 1005440:	d8801315 	stw	r2,76(sp)
 1005444:	d8c00c17 	ldw	r3,48(sp)
 1005448:	18039026 	beq	r3,zero,100628c <_dtoa_r+0x1304>
 100544c:	58bfffc4 	addi	r2,r11,-1
 1005450:	100490fa 	slli	r2,r2,3
 1005454:	00c04074 	movhi	r3,257
 1005458:	18fea404 	addi	r3,r3,-1392
 100545c:	0009883a 	mov	r4,zero
 1005460:	1885883a 	add	r2,r3,r2
 1005464:	11800017 	ldw	r6,0(r2)
 1005468:	11c00117 	ldw	r7,4(r2)
 100546c:	014ff834 	movhi	r5,16352
 1005470:	dac01615 	stw	r11,88(sp)
 1005474:	100a4900 	call	100a490 <__divdf3>
 1005478:	900d883a 	mov	r6,r18
 100547c:	a80f883a 	mov	r7,r21
 1005480:	1009883a 	mov	r4,r2
 1005484:	180b883a 	mov	r5,r3
 1005488:	100a14c0 	call	100a14c <__subdf3>
 100548c:	a00b883a 	mov	r5,r20
 1005490:	9809883a 	mov	r4,r19
 1005494:	182b883a 	mov	r21,r3
 1005498:	d8801015 	stw	r2,64(sp)
 100549c:	100a8f40 	call	100a8f4 <__fixdfsi>
 10054a0:	1009883a 	mov	r4,r2
 10054a4:	d8801515 	stw	r2,84(sp)
 10054a8:	100a8200 	call	100a820 <__floatsidf>
 10054ac:	9809883a 	mov	r4,r19
 10054b0:	a00b883a 	mov	r5,r20
 10054b4:	100d883a 	mov	r6,r2
 10054b8:	180f883a 	mov	r7,r3
 10054bc:	100a14c0 	call	100a14c <__subdf3>
 10054c0:	da401517 	ldw	r9,84(sp)
 10054c4:	d9001017 	ldw	r4,64(sp)
 10054c8:	a80b883a 	mov	r5,r21
 10054cc:	4d000c04 	addi	r20,r9,48
 10054d0:	bd000005 	stb	r20,0(r23)
 10054d4:	100d883a 	mov	r6,r2
 10054d8:	180f883a 	mov	r7,r3
 10054dc:	bd800044 	addi	r22,r23,1
 10054e0:	1025883a 	mov	r18,r2
 10054e4:	1827883a 	mov	r19,r3
 10054e8:	100a6fc0 	call	100a6fc <__gtdf2>
 10054ec:	00842216 	blt	zero,r2,1006578 <_dtoa_r+0x15f0>
 10054f0:	0009883a 	mov	r4,zero
 10054f4:	014ffc34 	movhi	r5,16368
 10054f8:	900d883a 	mov	r6,r18
 10054fc:	980f883a 	mov	r7,r19
 1005500:	100a14c0 	call	100a14c <__subdf3>
 1005504:	d9001017 	ldw	r4,64(sp)
 1005508:	a80b883a 	mov	r5,r21
 100550c:	100d883a 	mov	r6,r2
 1005510:	180f883a 	mov	r7,r3
 1005514:	100a6fc0 	call	100a6fc <__gtdf2>
 1005518:	dac01617 	ldw	r11,88(sp)
 100551c:	00841316 	blt	zero,r2,100656c <_dtoa_r+0x15e4>
 1005520:	00800044 	movi	r2,1
 1005524:	12c0670e 	bge	r2,r11,10056c4 <_dtoa_r+0x73c>
 1005528:	bad7883a 	add	r11,r23,r11
 100552c:	df001115 	stw	fp,68(sp)
 1005530:	dc401215 	stw	r17,72(sp)
 1005534:	5839883a 	mov	fp,r11
 1005538:	dc401017 	ldw	r17,64(sp)
 100553c:	00000806 	br	1005560 <_dtoa_r+0x5d8>
 1005540:	100a14c0 	call	100a14c <__subdf3>
 1005544:	1009883a 	mov	r4,r2
 1005548:	180b883a 	mov	r5,r3
 100554c:	880d883a 	mov	r6,r17
 1005550:	a80f883a 	mov	r7,r21
 1005554:	100a7c40 	call	100a7c4 <__ltdf2>
 1005558:	1003ee16 	blt	r2,zero,1006514 <_dtoa_r+0x158c>
 100555c:	b703f126 	beq	r22,fp,1006524 <_dtoa_r+0x159c>
 1005560:	8809883a 	mov	r4,r17
 1005564:	a80b883a 	mov	r5,r21
 1005568:	000d883a 	mov	r6,zero
 100556c:	01d00934 	movhi	r7,16420
 1005570:	100a1ac0 	call	100a1ac <__muldf3>
 1005574:	000d883a 	mov	r6,zero
 1005578:	01d00934 	movhi	r7,16420
 100557c:	9009883a 	mov	r4,r18
 1005580:	980b883a 	mov	r5,r19
 1005584:	1023883a 	mov	r17,r2
 1005588:	182b883a 	mov	r21,r3
 100558c:	100a1ac0 	call	100a1ac <__muldf3>
 1005590:	180b883a 	mov	r5,r3
 1005594:	1009883a 	mov	r4,r2
 1005598:	1825883a 	mov	r18,r3
 100559c:	1027883a 	mov	r19,r2
 10055a0:	100a8f40 	call	100a8f4 <__fixdfsi>
 10055a4:	1009883a 	mov	r4,r2
 10055a8:	1029883a 	mov	r20,r2
 10055ac:	100a8200 	call	100a820 <__floatsidf>
 10055b0:	9809883a 	mov	r4,r19
 10055b4:	900b883a 	mov	r5,r18
 10055b8:	100d883a 	mov	r6,r2
 10055bc:	180f883a 	mov	r7,r3
 10055c0:	100a14c0 	call	100a14c <__subdf3>
 10055c4:	a5000c04 	addi	r20,r20,48
 10055c8:	b5000005 	stb	r20,0(r22)
 10055cc:	1009883a 	mov	r4,r2
 10055d0:	180b883a 	mov	r5,r3
 10055d4:	880d883a 	mov	r6,r17
 10055d8:	a80f883a 	mov	r7,r21
 10055dc:	1025883a 	mov	r18,r2
 10055e0:	1827883a 	mov	r19,r3
 10055e4:	100a7c40 	call	100a7c4 <__ltdf2>
 10055e8:	b5800044 	addi	r22,r22,1
 10055ec:	0009883a 	mov	r4,zero
 10055f0:	014ffc34 	movhi	r5,16368
 10055f4:	900d883a 	mov	r6,r18
 10055f8:	980f883a 	mov	r7,r19
 10055fc:	103fd00e 	bge	r2,zero,1005540 <_dtoa_r+0x5b8>
 1005600:	d9001317 	ldw	r4,76(sp)
 1005604:	df001117 	ldw	fp,68(sp)
 1005608:	d9000615 	stw	r4,24(sp)
 100560c:	8009883a 	mov	r4,r16
 1005610:	e00b883a 	mov	r5,fp
 1005614:	1007b440 	call	1007b44 <_Bfree>
 1005618:	d9c00617 	ldw	r7,24(sp)
 100561c:	d8c02217 	ldw	r3,136(sp)
 1005620:	d9002417 	ldw	r4,144(sp)
 1005624:	b0000005 	stb	zero,0(r22)
 1005628:	38800044 	addi	r2,r7,1
 100562c:	18800015 	stw	r2,0(r3)
 1005630:	203e8426 	beq	r4,zero,1005044 <_dtoa_r+0xbc>
 1005634:	25800015 	stw	r22,0(r4)
 1005638:	003e8206 	br	1005044 <_dtoa_r+0xbc>
 100563c:	00800434 	movhi	r2,16
 1005640:	10bfffc4 	addi	r2,r2,-1
 1005644:	90a4703a 	and	r18,r18,r2
 1005648:	903e901e 	bne	r18,zero,100508c <_dtoa_r+0x104>
 100564c:	05c04074 	movhi	r23,257
 1005650:	bdfe7c04 	addi	r23,r23,-1552
 1005654:	003e8f06 	br	1005094 <_dtoa_r+0x10c>
 1005658:	b8800204 	addi	r2,r23,8
 100565c:	003e9206 	br	10050a8 <_dtoa_r+0x120>
 1005660:	01400434 	movhi	r5,16
 1005664:	297fffc4 	addi	r5,r5,-1
 1005668:	894a703a 	and	r5,r17,r5
 100566c:	d9000317 	ldw	r4,12(sp)
 1005670:	294ffc34 	orhi	r5,r5,16368
 1005674:	a53f0044 	addi	r20,r20,-1023
 1005678:	dd400217 	ldw	r21,8(sp)
 100567c:	d8000f15 	stw	zero,60(sp)
 1005680:	003eb106 	br	1005148 <_dtoa_r+0x1c0>
 1005684:	05c04074 	movhi	r23,257
 1005688:	bdfe7304 	addi	r23,r23,-1588
 100568c:	003e6d06 	br	1005044 <_dtoa_r+0xbc>
 1005690:	d8000415 	stw	zero,16(sp)
 1005694:	80001115 	stw	zero,68(r16)
 1005698:	8009883a 	mov	r4,r16
 100569c:	000b883a 	mov	r5,zero
 10056a0:	1007a9c0 	call	1007a9c <_Balloc>
 10056a4:	01ffffc4 	movi	r7,-1
 10056a8:	102f883a 	mov	r23,r2
 10056ac:	80801015 	stw	r2,64(r16)
 10056b0:	00800044 	movi	r2,1
 10056b4:	d9c00915 	stw	r7,36(sp)
 10056b8:	d8002115 	stw	zero,132(sp)
 10056bc:	d9c00e15 	stw	r7,56(sp)
 10056c0:	d8800c15 	stw	r2,48(sp)
 10056c4:	d8800117 	ldw	r2,4(sp)
 10056c8:	10008b16 	blt	r2,zero,10058f8 <_dtoa_r+0x970>
 10056cc:	d9000617 	ldw	r4,24(sp)
 10056d0:	00c00384 	movi	r3,14
 10056d4:	19008816 	blt	r3,r4,10058f8 <_dtoa_r+0x970>
 10056d8:	200490fa 	slli	r2,r4,3
 10056dc:	d9c02117 	ldw	r7,132(sp)
 10056e0:	00c04074 	movhi	r3,257
 10056e4:	18fea404 	addi	r3,r3,-1392
 10056e8:	1885883a 	add	r2,r3,r2
 10056ec:	14800017 	ldw	r18,0(r2)
 10056f0:	14c00117 	ldw	r19,4(r2)
 10056f4:	3801c916 	blt	r7,zero,1005e1c <_dtoa_r+0xe94>
 10056f8:	d9000317 	ldw	r4,12(sp)
 10056fc:	900d883a 	mov	r6,r18
 1005700:	980f883a 	mov	r7,r19
 1005704:	880b883a 	mov	r5,r17
 1005708:	100a4900 	call	100a490 <__divdf3>
 100570c:	180b883a 	mov	r5,r3
 1005710:	1009883a 	mov	r4,r2
 1005714:	100a8f40 	call	100a8f4 <__fixdfsi>
 1005718:	1009883a 	mov	r4,r2
 100571c:	102b883a 	mov	r21,r2
 1005720:	100a8200 	call	100a820 <__floatsidf>
 1005724:	1009883a 	mov	r4,r2
 1005728:	180b883a 	mov	r5,r3
 100572c:	900d883a 	mov	r6,r18
 1005730:	980f883a 	mov	r7,r19
 1005734:	100a1ac0 	call	100a1ac <__muldf3>
 1005738:	d9000317 	ldw	r4,12(sp)
 100573c:	880b883a 	mov	r5,r17
 1005740:	100d883a 	mov	r6,r2
 1005744:	180f883a 	mov	r7,r3
 1005748:	100a14c0 	call	100a14c <__subdf3>
 100574c:	d9c00917 	ldw	r7,36(sp)
 1005750:	1009883a 	mov	r4,r2
 1005754:	a8800c04 	addi	r2,r21,48
 1005758:	b8800005 	stb	r2,0(r23)
 100575c:	01800044 	movi	r6,1
 1005760:	180b883a 	mov	r5,r3
 1005764:	2005883a 	mov	r2,r4
 1005768:	bd800044 	addi	r22,r23,1
 100576c:	39803726 	beq	r7,r6,100584c <_dtoa_r+0x8c4>
 1005770:	000d883a 	mov	r6,zero
 1005774:	01d00934 	movhi	r7,16420
 1005778:	100a1ac0 	call	100a1ac <__muldf3>
 100577c:	1009883a 	mov	r4,r2
 1005780:	180b883a 	mov	r5,r3
 1005784:	000d883a 	mov	r6,zero
 1005788:	000f883a 	mov	r7,zero
 100578c:	1029883a 	mov	r20,r2
 1005790:	1823883a 	mov	r17,r3
 1005794:	100a6440 	call	100a644 <__eqdf2>
 1005798:	103f9c26 	beq	r2,zero,100560c <_dtoa_r+0x684>
 100579c:	dd400917 	ldw	r21,36(sp)
 10057a0:	dc000415 	stw	r16,16(sp)
 10057a4:	00000906 	br	10057cc <_dtoa_r+0x844>
 10057a8:	100a1ac0 	call	100a1ac <__muldf3>
 10057ac:	1009883a 	mov	r4,r2
 10057b0:	180b883a 	mov	r5,r3
 10057b4:	000d883a 	mov	r6,zero
 10057b8:	000f883a 	mov	r7,zero
 10057bc:	1029883a 	mov	r20,r2
 10057c0:	1823883a 	mov	r17,r3
 10057c4:	100a6440 	call	100a644 <__eqdf2>
 10057c8:	10022926 	beq	r2,zero,1006070 <_dtoa_r+0x10e8>
 10057cc:	900d883a 	mov	r6,r18
 10057d0:	980f883a 	mov	r7,r19
 10057d4:	a009883a 	mov	r4,r20
 10057d8:	880b883a 	mov	r5,r17
 10057dc:	100a4900 	call	100a490 <__divdf3>
 10057e0:	180b883a 	mov	r5,r3
 10057e4:	1009883a 	mov	r4,r2
 10057e8:	100a8f40 	call	100a8f4 <__fixdfsi>
 10057ec:	1009883a 	mov	r4,r2
 10057f0:	1021883a 	mov	r16,r2
 10057f4:	100a8200 	call	100a820 <__floatsidf>
 10057f8:	1009883a 	mov	r4,r2
 10057fc:	180b883a 	mov	r5,r3
 1005800:	900d883a 	mov	r6,r18
 1005804:	980f883a 	mov	r7,r19
 1005808:	100a1ac0 	call	100a1ac <__muldf3>
 100580c:	a009883a 	mov	r4,r20
 1005810:	880b883a 	mov	r5,r17
 1005814:	100d883a 	mov	r6,r2
 1005818:	180f883a 	mov	r7,r3
 100581c:	100a14c0 	call	100a14c <__subdf3>
 1005820:	82400c04 	addi	r9,r16,48
 1005824:	b2400005 	stb	r9,0(r22)
 1005828:	b5800044 	addi	r22,r22,1
 100582c:	b5d3c83a 	sub	r9,r22,r23
 1005830:	000d883a 	mov	r6,zero
 1005834:	01d00934 	movhi	r7,16420
 1005838:	1009883a 	mov	r4,r2
 100583c:	180b883a 	mov	r5,r3
 1005840:	aa7fd91e 	bne	r21,r9,10057a8 <_dtoa_r+0x820>
 1005844:	802b883a 	mov	r21,r16
 1005848:	dc000417 	ldw	r16,16(sp)
 100584c:	1009883a 	mov	r4,r2
 1005850:	180b883a 	mov	r5,r3
 1005854:	100d883a 	mov	r6,r2
 1005858:	180f883a 	mov	r7,r3
 100585c:	100a0f80 	call	100a0f8 <__adddf3>
 1005860:	9009883a 	mov	r4,r18
 1005864:	980b883a 	mov	r5,r19
 1005868:	100d883a 	mov	r6,r2
 100586c:	180f883a 	mov	r7,r3
 1005870:	1023883a 	mov	r17,r2
 1005874:	1829883a 	mov	r20,r3
 1005878:	100a7c40 	call	100a7c4 <__ltdf2>
 100587c:	10000816 	blt	r2,zero,10058a0 <_dtoa_r+0x918>
 1005880:	9009883a 	mov	r4,r18
 1005884:	980b883a 	mov	r5,r19
 1005888:	880d883a 	mov	r6,r17
 100588c:	a00f883a 	mov	r7,r20
 1005890:	100a6440 	call	100a644 <__eqdf2>
 1005894:	103f5d1e 	bne	r2,zero,100560c <_dtoa_r+0x684>
 1005898:	ad40004c 	andi	r21,r21,1
 100589c:	a83f5b26 	beq	r21,zero,100560c <_dtoa_r+0x684>
 10058a0:	b53fffc3 	ldbu	r20,-1(r22)
 10058a4:	b0ffff84 	addi	r3,r22,-2
 10058a8:	01400e44 	movi	r5,57
 10058ac:	00000306 	br	10058bc <_dtoa_r+0x934>
 10058b0:	1d000003 	ldbu	r20,0(r3)
 10058b4:	102d883a 	mov	r22,r2
 10058b8:	18ffffc4 	addi	r3,r3,-1
 10058bc:	a1003fcc 	andi	r4,r20,255
 10058c0:	2100201c 	xori	r4,r4,128
 10058c4:	213fe004 	addi	r4,r4,-128
 10058c8:	b0bfffc4 	addi	r2,r22,-1
 10058cc:	2142ca1e 	bne	r4,r5,10063f8 <_dtoa_r+0x1470>
 10058d0:	b8bff71e 	bne	r23,r2,10058b0 <_dtoa_r+0x928>
 10058d4:	d8800617 	ldw	r2,24(sp)
 10058d8:	05000c44 	movi	r20,49
 10058dc:	10800044 	addi	r2,r2,1
 10058e0:	d8800615 	stw	r2,24(sp)
 10058e4:	00800c04 	movi	r2,48
 10058e8:	b8800005 	stb	r2,0(r23)
 10058ec:	b805883a 	mov	r2,r23
 10058f0:	15000005 	stb	r20,0(r2)
 10058f4:	003f4506 	br	100560c <_dtoa_r+0x684>
 10058f8:	d9c00c17 	ldw	r7,48(sp)
 10058fc:	3800c926 	beq	r7,zero,1005c24 <_dtoa_r+0xc9c>
 1005900:	d9c00417 	ldw	r7,16(sp)
 1005904:	00c00044 	movi	r3,1
 1005908:	19c16c0e 	bge	r3,r7,1005ebc <_dtoa_r+0xf34>
 100590c:	d9000917 	ldw	r4,36(sp)
 1005910:	d9c00a17 	ldw	r7,40(sp)
 1005914:	24ffffc4 	addi	r19,r4,-1
 1005918:	3cc20716 	blt	r7,r19,1006138 <_dtoa_r+0x11b0>
 100591c:	3ce7c83a 	sub	r19,r7,r19
 1005920:	d9c00917 	ldw	r7,36(sp)
 1005924:	3802ae16 	blt	r7,zero,10063e0 <_dtoa_r+0x1458>
 1005928:	dc800817 	ldw	r18,32(sp)
 100592c:	d8800917 	ldw	r2,36(sp)
 1005930:	d8c00817 	ldw	r3,32(sp)
 1005934:	d9c00717 	ldw	r7,28(sp)
 1005938:	8009883a 	mov	r4,r16
 100593c:	1887883a 	add	r3,r3,r2
 1005940:	388f883a 	add	r7,r7,r2
 1005944:	01400044 	movi	r5,1
 1005948:	d8c00815 	stw	r3,32(sp)
 100594c:	d9c00715 	stw	r7,28(sp)
 1005950:	1007ecc0 	call	1007ecc <__i2b>
 1005954:	102b883a 	mov	r21,r2
 1005958:	90000a26 	beq	r18,zero,1005984 <_dtoa_r+0x9fc>
 100595c:	d8800717 	ldw	r2,28(sp)
 1005960:	0080080e 	bge	zero,r2,1005984 <_dtoa_r+0x9fc>
 1005964:	90812b16 	blt	r18,r2,1005e14 <_dtoa_r+0xe8c>
 1005968:	d8c00817 	ldw	r3,32(sp)
 100596c:	d9000717 	ldw	r4,28(sp)
 1005970:	90a5c83a 	sub	r18,r18,r2
 1005974:	1887c83a 	sub	r3,r3,r2
 1005978:	2089c83a 	sub	r4,r4,r2
 100597c:	d8c00815 	stw	r3,32(sp)
 1005980:	d9000715 	stw	r4,28(sp)
 1005984:	d9c00a17 	ldw	r7,40(sp)
 1005988:	01c0140e 	bge	zero,r7,10059dc <_dtoa_r+0xa54>
 100598c:	d8800c17 	ldw	r2,48(sp)
 1005990:	1001de26 	beq	r2,zero,100610c <_dtoa_r+0x1184>
 1005994:	04c00e0e 	bge	zero,r19,10059d0 <_dtoa_r+0xa48>
 1005998:	a80b883a 	mov	r5,r21
 100599c:	8009883a 	mov	r4,r16
 10059a0:	980d883a 	mov	r6,r19
 10059a4:	10081600 	call	1008160 <__pow5mult>
 10059a8:	e00d883a 	mov	r6,fp
 10059ac:	8009883a 	mov	r4,r16
 10059b0:	100b883a 	mov	r5,r2
 10059b4:	102b883a 	mov	r21,r2
 10059b8:	1007f080 	call	1007f08 <__multiply>
 10059bc:	1029883a 	mov	r20,r2
 10059c0:	e00b883a 	mov	r5,fp
 10059c4:	8009883a 	mov	r4,r16
 10059c8:	1007b440 	call	1007b44 <_Bfree>
 10059cc:	a039883a 	mov	fp,r20
 10059d0:	d8c00a17 	ldw	r3,40(sp)
 10059d4:	1ccdc83a 	sub	r6,r3,r19
 10059d8:	3001291e 	bne	r6,zero,1005e80 <_dtoa_r+0xef8>
 10059dc:	8009883a 	mov	r4,r16
 10059e0:	01400044 	movi	r5,1
 10059e4:	1007ecc0 	call	1007ecc <__i2b>
 10059e8:	d9000b17 	ldw	r4,44(sp)
 10059ec:	1029883a 	mov	r20,r2
 10059f0:	0100050e 	bge	zero,r4,1005a08 <_dtoa_r+0xa80>
 10059f4:	d9800b17 	ldw	r6,44(sp)
 10059f8:	8009883a 	mov	r4,r16
 10059fc:	100b883a 	mov	r5,r2
 1005a00:	10081600 	call	1008160 <__pow5mult>
 1005a04:	1029883a 	mov	r20,r2
 1005a08:	d9c00417 	ldw	r7,16(sp)
 1005a0c:	00800044 	movi	r2,1
 1005a10:	11c0f00e 	bge	r2,r7,1005dd4 <_dtoa_r+0xe4c>
 1005a14:	0023883a 	mov	r17,zero
 1005a18:	d8800b17 	ldw	r2,44(sp)
 1005a1c:	1001741e 	bne	r2,zero,1005ff0 <_dtoa_r+0x1068>
 1005a20:	00800044 	movi	r2,1
 1005a24:	d8c00717 	ldw	r3,28(sp)
 1005a28:	10c5883a 	add	r2,r2,r3
 1005a2c:	108007cc 	andi	r2,r2,31
 1005a30:	10008026 	beq	r2,zero,1005c34 <_dtoa_r+0xcac>
 1005a34:	01000804 	movi	r4,32
 1005a38:	2089c83a 	sub	r4,r4,r2
 1005a3c:	00c00104 	movi	r3,4
 1005a40:	1902d00e 	bge	r3,r4,1006584 <_dtoa_r+0x15fc>
 1005a44:	d9000817 	ldw	r4,32(sp)
 1005a48:	d9c00717 	ldw	r7,28(sp)
 1005a4c:	00c00704 	movi	r3,28
 1005a50:	1885c83a 	sub	r2,r3,r2
 1005a54:	2089883a 	add	r4,r4,r2
 1005a58:	388f883a 	add	r7,r7,r2
 1005a5c:	d9000815 	stw	r4,32(sp)
 1005a60:	90a5883a 	add	r18,r18,r2
 1005a64:	d9c00715 	stw	r7,28(sp)
 1005a68:	d9c00817 	ldw	r7,32(sp)
 1005a6c:	01c0050e 	bge	zero,r7,1005a84 <_dtoa_r+0xafc>
 1005a70:	e00b883a 	mov	r5,fp
 1005a74:	8009883a 	mov	r4,r16
 1005a78:	380d883a 	mov	r6,r7
 1005a7c:	100828c0 	call	100828c <__lshift>
 1005a80:	1039883a 	mov	fp,r2
 1005a84:	d8800717 	ldw	r2,28(sp)
 1005a88:	0080050e 	bge	zero,r2,1005aa0 <_dtoa_r+0xb18>
 1005a8c:	a00b883a 	mov	r5,r20
 1005a90:	8009883a 	mov	r4,r16
 1005a94:	100d883a 	mov	r6,r2
 1005a98:	100828c0 	call	100828c <__lshift>
 1005a9c:	1029883a 	mov	r20,r2
 1005aa0:	d8c00d17 	ldw	r3,52(sp)
 1005aa4:	1801401e 	bne	r3,zero,1005fa8 <_dtoa_r+0x1020>
 1005aa8:	d8800917 	ldw	r2,36(sp)
 1005aac:	00815a0e 	bge	zero,r2,1006018 <_dtoa_r+0x1090>
 1005ab0:	d8c00c17 	ldw	r3,48(sp)
 1005ab4:	18006f1e 	bne	r3,zero,1005c74 <_dtoa_r+0xcec>
 1005ab8:	b823883a 	mov	r17,r23
 1005abc:	dc800917 	ldw	r18,36(sp)
 1005ac0:	00000206 	br	1005acc <_dtoa_r+0xb44>
 1005ac4:	1007b6c0 	call	1007b6c <__multadd>
 1005ac8:	1039883a 	mov	fp,r2
 1005acc:	e009883a 	mov	r4,fp
 1005ad0:	a00b883a 	mov	r5,r20
 1005ad4:	1004d4c0 	call	1004d4c <quorem>
 1005ad8:	10800c04 	addi	r2,r2,48
 1005adc:	88800005 	stb	r2,0(r17)
 1005ae0:	8c400044 	addi	r17,r17,1
 1005ae4:	8dc7c83a 	sub	r3,r17,r23
 1005ae8:	8009883a 	mov	r4,r16
 1005aec:	e00b883a 	mov	r5,fp
 1005af0:	01800284 	movi	r6,10
 1005af4:	000f883a 	mov	r7,zero
 1005af8:	1cbff216 	blt	r3,r18,1005ac4 <_dtoa_r+0xb3c>
 1005afc:	dd800917 	ldw	r22,36(sp)
 1005b00:	1007883a 	mov	r3,r2
 1005b04:	05823a0e 	bge	zero,r22,10063f0 <_dtoa_r+0x1468>
 1005b08:	bdad883a 	add	r22,r23,r22
 1005b0c:	0023883a 	mov	r17,zero
 1005b10:	e00b883a 	mov	r5,fp
 1005b14:	01800044 	movi	r6,1
 1005b18:	8009883a 	mov	r4,r16
 1005b1c:	d8c01515 	stw	r3,84(sp)
 1005b20:	100828c0 	call	100828c <__lshift>
 1005b24:	1009883a 	mov	r4,r2
 1005b28:	a00b883a 	mov	r5,r20
 1005b2c:	1039883a 	mov	fp,r2
 1005b30:	10083e80 	call	10083e8 <__mcmp>
 1005b34:	d8c01517 	ldw	r3,84(sp)
 1005b38:	0080d60e 	bge	zero,r2,1005e94 <_dtoa_r+0xf0c>
 1005b3c:	b13fffc3 	ldbu	r4,-1(r22)
 1005b40:	b0ffff84 	addi	r3,r22,-2
 1005b44:	01800e44 	movi	r6,57
 1005b48:	00000306 	br	1005b58 <_dtoa_r+0xbd0>
 1005b4c:	19000003 	ldbu	r4,0(r3)
 1005b50:	102d883a 	mov	r22,r2
 1005b54:	18ffffc4 	addi	r3,r3,-1
 1005b58:	21403fcc 	andi	r5,r4,255
 1005b5c:	2940201c 	xori	r5,r5,128
 1005b60:	297fe004 	addi	r5,r5,-128
 1005b64:	b0bfffc4 	addi	r2,r22,-1
 1005b68:	2981a71e 	bne	r5,r6,1006208 <_dtoa_r+0x1280>
 1005b6c:	b8bff71e 	bne	r23,r2,1005b4c <_dtoa_r+0xbc4>
 1005b70:	d8800617 	ldw	r2,24(sp)
 1005b74:	10800044 	addi	r2,r2,1
 1005b78:	d8800615 	stw	r2,24(sp)
 1005b7c:	00800c44 	movi	r2,49
 1005b80:	b8800005 	stb	r2,0(r23)
 1005b84:	8009883a 	mov	r4,r16
 1005b88:	a00b883a 	mov	r5,r20
 1005b8c:	1007b440 	call	1007b44 <_Bfree>
 1005b90:	a83e9e26 	beq	r21,zero,100560c <_dtoa_r+0x684>
 1005b94:	88000426 	beq	r17,zero,1005ba8 <_dtoa_r+0xc20>
 1005b98:	8d400326 	beq	r17,r21,1005ba8 <_dtoa_r+0xc20>
 1005b9c:	8009883a 	mov	r4,r16
 1005ba0:	880b883a 	mov	r5,r17
 1005ba4:	1007b440 	call	1007b44 <_Bfree>
 1005ba8:	8009883a 	mov	r4,r16
 1005bac:	a80b883a 	mov	r5,r21
 1005bb0:	1007b440 	call	1007b44 <_Bfree>
 1005bb4:	003e9506 	br	100560c <_dtoa_r+0x684>
 1005bb8:	00c00044 	movi	r3,1
 1005bbc:	d8c00d15 	stw	r3,52(sp)
 1005bc0:	003d9f06 	br	1005240 <_dtoa_r+0x2b8>
 1005bc4:	d9000817 	ldw	r4,32(sp)
 1005bc8:	d8800617 	ldw	r2,24(sp)
 1005bcc:	d8000b15 	stw	zero,44(sp)
 1005bd0:	2089c83a 	sub	r4,r4,r2
 1005bd4:	0087c83a 	sub	r3,zero,r2
 1005bd8:	d9000815 	stw	r4,32(sp)
 1005bdc:	d8c00a15 	stw	r3,40(sp)
 1005be0:	003da306 	br	1005270 <_dtoa_r+0x2e8>
 1005be4:	0529c83a 	sub	r20,zero,r20
 1005be8:	dd000815 	stw	r20,32(sp)
 1005bec:	d8000715 	stw	zero,28(sp)
 1005bf0:	003d9806 	br	1005254 <_dtoa_r+0x2cc>
 1005bf4:	d9000617 	ldw	r4,24(sp)
 1005bf8:	100a8200 	call	100a820 <__floatsidf>
 1005bfc:	1009883a 	mov	r4,r2
 1005c00:	180b883a 	mov	r5,r3
 1005c04:	980d883a 	mov	r6,r19
 1005c08:	900f883a 	mov	r7,r18
 1005c0c:	100a6a00 	call	100a6a0 <__nedf2>
 1005c10:	103d7a26 	beq	r2,zero,10051fc <_dtoa_r+0x274>
 1005c14:	d8800617 	ldw	r2,24(sp)
 1005c18:	10bfffc4 	addi	r2,r2,-1
 1005c1c:	d8800615 	stw	r2,24(sp)
 1005c20:	003d7606 	br	10051fc <_dtoa_r+0x274>
 1005c24:	dcc00a17 	ldw	r19,40(sp)
 1005c28:	dc800817 	ldw	r18,32(sp)
 1005c2c:	002b883a 	mov	r21,zero
 1005c30:	003f4906 	br	1005958 <_dtoa_r+0x9d0>
 1005c34:	00800704 	movi	r2,28
 1005c38:	d8c00817 	ldw	r3,32(sp)
 1005c3c:	d9000717 	ldw	r4,28(sp)
 1005c40:	90a5883a 	add	r18,r18,r2
 1005c44:	1887883a 	add	r3,r3,r2
 1005c48:	2089883a 	add	r4,r4,r2
 1005c4c:	d8c00815 	stw	r3,32(sp)
 1005c50:	d9000715 	stw	r4,28(sp)
 1005c54:	003f8406 	br	1005a68 <_dtoa_r+0xae0>
 1005c58:	d9c00317 	ldw	r7,12(sp)
 1005c5c:	013efb84 	movi	r4,-1042
 1005c60:	2509c83a 	sub	r4,r4,r20
 1005c64:	3908983a 	sll	r4,r7,r4
 1005c68:	003d3006 	br	100512c <_dtoa_r+0x1a4>
 1005c6c:	d8000d15 	stw	zero,52(sp)
 1005c70:	003d7306 	br	1005240 <_dtoa_r+0x2b8>
 1005c74:	0480050e 	bge	zero,r18,1005c8c <_dtoa_r+0xd04>
 1005c78:	a80b883a 	mov	r5,r21
 1005c7c:	8009883a 	mov	r4,r16
 1005c80:	900d883a 	mov	r6,r18
 1005c84:	100828c0 	call	100828c <__lshift>
 1005c88:	102b883a 	mov	r21,r2
 1005c8c:	8801611e 	bne	r17,zero,1006214 <_dtoa_r+0x128c>
 1005c90:	a827883a 	mov	r19,r21
 1005c94:	d8c00317 	ldw	r3,12(sp)
 1005c98:	d9000917 	ldw	r4,36(sp)
 1005c9c:	b8bfffc4 	addi	r2,r23,-1
 1005ca0:	18c0004c 	andi	r3,r3,1
 1005ca4:	1105883a 	add	r2,r2,r4
 1005ca8:	b825883a 	mov	r18,r23
 1005cac:	d8800515 	stw	r2,20(sp)
 1005cb0:	a823883a 	mov	r17,r21
 1005cb4:	d8c00315 	stw	r3,12(sp)
 1005cb8:	ddc00715 	stw	r23,28(sp)
 1005cbc:	e009883a 	mov	r4,fp
 1005cc0:	a00b883a 	mov	r5,r20
 1005cc4:	1004d4c0 	call	1004d4c <quorem>
 1005cc8:	e009883a 	mov	r4,fp
 1005ccc:	880b883a 	mov	r5,r17
 1005cd0:	102d883a 	mov	r22,r2
 1005cd4:	10083e80 	call	10083e8 <__mcmp>
 1005cd8:	980d883a 	mov	r6,r19
 1005cdc:	8009883a 	mov	r4,r16
 1005ce0:	a00b883a 	mov	r5,r20
 1005ce4:	102b883a 	mov	r21,r2
 1005ce8:	10084400 	call	1008440 <__mdiff>
 1005cec:	100d883a 	mov	r6,r2
 1005cf0:	10800317 	ldw	r2,12(r2)
 1005cf4:	b5c00c04 	addi	r23,r22,48
 1005cf8:	10008c26 	beq	r2,zero,1005f2c <_dtoa_r+0xfa4>
 1005cfc:	8009883a 	mov	r4,r16
 1005d00:	300b883a 	mov	r5,r6
 1005d04:	1007b440 	call	1007b44 <_Bfree>
 1005d08:	00800044 	movi	r2,1
 1005d0c:	a8007116 	blt	r21,zero,1005ed4 <_dtoa_r+0xf4c>
 1005d10:	a800041e 	bne	r21,zero,1005d24 <_dtoa_r+0xd9c>
 1005d14:	d9c00417 	ldw	r7,16(sp)
 1005d18:	3800021e 	bne	r7,zero,1005d24 <_dtoa_r+0xd9c>
 1005d1c:	d8c00317 	ldw	r3,12(sp)
 1005d20:	18006c26 	beq	r3,zero,1005ed4 <_dtoa_r+0xf4c>
 1005d24:	00814c16 	blt	zero,r2,1006258 <_dtoa_r+0x12d0>
 1005d28:	d8c00517 	ldw	r3,20(sp)
 1005d2c:	95400044 	addi	r21,r18,1
 1005d30:	95c00005 	stb	r23,0(r18)
 1005d34:	a82d883a 	mov	r22,r21
 1005d38:	90c14d26 	beq	r18,r3,1006270 <_dtoa_r+0x12e8>
 1005d3c:	e00b883a 	mov	r5,fp
 1005d40:	8009883a 	mov	r4,r16
 1005d44:	01800284 	movi	r6,10
 1005d48:	000f883a 	mov	r7,zero
 1005d4c:	1007b6c0 	call	1007b6c <__multadd>
 1005d50:	1039883a 	mov	fp,r2
 1005d54:	8cc08b26 	beq	r17,r19,1005f84 <_dtoa_r+0xffc>
 1005d58:	880b883a 	mov	r5,r17
 1005d5c:	01800284 	movi	r6,10
 1005d60:	000f883a 	mov	r7,zero
 1005d64:	8009883a 	mov	r4,r16
 1005d68:	1007b6c0 	call	1007b6c <__multadd>
 1005d6c:	980b883a 	mov	r5,r19
 1005d70:	8009883a 	mov	r4,r16
 1005d74:	01800284 	movi	r6,10
 1005d78:	000f883a 	mov	r7,zero
 1005d7c:	1023883a 	mov	r17,r2
 1005d80:	1007b6c0 	call	1007b6c <__multadd>
 1005d84:	1027883a 	mov	r19,r2
 1005d88:	a825883a 	mov	r18,r21
 1005d8c:	003fcb06 	br	1005cbc <_dtoa_r+0xd34>
 1005d90:	d9c00417 	ldw	r7,16(sp)
 1005d94:	00800104 	movi	r2,4
 1005d98:	3880e426 	beq	r7,r2,100612c <_dtoa_r+0x11a4>
 1005d9c:	00800144 	movi	r2,5
 1005da0:	38be3c1e 	bne	r7,r2,1005694 <_dtoa_r+0x70c>
 1005da4:	00c00044 	movi	r3,1
 1005da8:	d8c00c15 	stw	r3,48(sp)
 1005dac:	d9c02117 	ldw	r7,132(sp)
 1005db0:	d8800617 	ldw	r2,24(sp)
 1005db4:	388f883a 	add	r7,r7,r2
 1005db8:	3c800044 	addi	r18,r7,1
 1005dbc:	d9c00e15 	stw	r7,56(sp)
 1005dc0:	dc800915 	stw	r18,36(sp)
 1005dc4:	04bd3e16 	blt	zero,r18,10052c0 <_dtoa_r+0x338>
 1005dc8:	80001115 	stw	zero,68(r16)
 1005dcc:	000b883a 	mov	r5,zero
 1005dd0:	003d4606 	br	10052ec <_dtoa_r+0x364>
 1005dd4:	d8c00317 	ldw	r3,12(sp)
 1005dd8:	183f0e1e 	bne	r3,zero,1005a14 <_dtoa_r+0xa8c>
 1005ddc:	00c00434 	movhi	r3,16
 1005de0:	18ffffc4 	addi	r3,r3,-1
 1005de4:	88c6703a 	and	r3,r17,r3
 1005de8:	183f0a1e 	bne	r3,zero,1005a14 <_dtoa_r+0xa8c>
 1005dec:	8c5ffc2c 	andhi	r17,r17,32752
 1005df0:	883f0826 	beq	r17,zero,1005a14 <_dtoa_r+0xa8c>
 1005df4:	d9000817 	ldw	r4,32(sp)
 1005df8:	d9c00717 	ldw	r7,28(sp)
 1005dfc:	1023883a 	mov	r17,r2
 1005e00:	2089883a 	add	r4,r4,r2
 1005e04:	388f883a 	add	r7,r7,r2
 1005e08:	d9000815 	stw	r4,32(sp)
 1005e0c:	d9c00715 	stw	r7,28(sp)
 1005e10:	003f0106 	br	1005a18 <_dtoa_r+0xa90>
 1005e14:	9005883a 	mov	r2,r18
 1005e18:	003ed306 	br	1005968 <_dtoa_r+0x9e0>
 1005e1c:	d8800917 	ldw	r2,36(sp)
 1005e20:	00be3516 	blt	zero,r2,10056f8 <_dtoa_r+0x770>
 1005e24:	1000b61e 	bne	r2,zero,1006100 <_dtoa_r+0x1178>
 1005e28:	9009883a 	mov	r4,r18
 1005e2c:	980b883a 	mov	r5,r19
 1005e30:	000d883a 	mov	r6,zero
 1005e34:	01d00534 	movhi	r7,16404
 1005e38:	100a1ac0 	call	100a1ac <__muldf3>
 1005e3c:	d9800317 	ldw	r6,12(sp)
 1005e40:	1009883a 	mov	r4,r2
 1005e44:	180b883a 	mov	r5,r3
 1005e48:	880f883a 	mov	r7,r17
 1005e4c:	100a7600 	call	100a760 <__gedf2>
 1005e50:	0029883a 	mov	r20,zero
 1005e54:	002b883a 	mov	r21,zero
 1005e58:	10007e16 	blt	r2,zero,1006054 <_dtoa_r+0x10cc>
 1005e5c:	d8802117 	ldw	r2,132(sp)
 1005e60:	b82d883a 	mov	r22,r23
 1005e64:	0084303a 	nor	r2,zero,r2
 1005e68:	d8800615 	stw	r2,24(sp)
 1005e6c:	8009883a 	mov	r4,r16
 1005e70:	a00b883a 	mov	r5,r20
 1005e74:	1007b440 	call	1007b44 <_Bfree>
 1005e78:	a83f4b1e 	bne	r21,zero,1005ba8 <_dtoa_r+0xc20>
 1005e7c:	003de306 	br	100560c <_dtoa_r+0x684>
 1005e80:	e00b883a 	mov	r5,fp
 1005e84:	8009883a 	mov	r4,r16
 1005e88:	10081600 	call	1008160 <__pow5mult>
 1005e8c:	1039883a 	mov	fp,r2
 1005e90:	003ed206 	br	10059dc <_dtoa_r+0xa54>
 1005e94:	1000021e 	bne	r2,zero,1005ea0 <_dtoa_r+0xf18>
 1005e98:	18c0004c 	andi	r3,r3,1
 1005e9c:	183f271e 	bne	r3,zero,1005b3c <_dtoa_r+0xbb4>
 1005ea0:	01000c04 	movi	r4,48
 1005ea4:	00000106 	br	1005eac <_dtoa_r+0xf24>
 1005ea8:	102d883a 	mov	r22,r2
 1005eac:	b0bfffc4 	addi	r2,r22,-1
 1005eb0:	10c00007 	ldb	r3,0(r2)
 1005eb4:	193ffc26 	beq	r3,r4,1005ea8 <_dtoa_r+0xf20>
 1005eb8:	003f3206 	br	1005b84 <_dtoa_r+0xbfc>
 1005ebc:	d8c00f17 	ldw	r3,60(sp)
 1005ec0:	18015026 	beq	r3,zero,1006404 <_dtoa_r+0x147c>
 1005ec4:	10810cc4 	addi	r2,r2,1075
 1005ec8:	dcc00a17 	ldw	r19,40(sp)
 1005ecc:	dc800817 	ldw	r18,32(sp)
 1005ed0:	003e9706 	br	1005930 <_dtoa_r+0x9a8>
 1005ed4:	b807883a 	mov	r3,r23
 1005ed8:	182b883a 	mov	r21,r3
 1005edc:	ddc00717 	ldw	r23,28(sp)
 1005ee0:	00800e0e 	bge	zero,r2,1005f1c <_dtoa_r+0xf94>
 1005ee4:	e00b883a 	mov	r5,fp
 1005ee8:	01800044 	movi	r6,1
 1005eec:	8009883a 	mov	r4,r16
 1005ef0:	d8c01515 	stw	r3,84(sp)
 1005ef4:	100828c0 	call	100828c <__lshift>
 1005ef8:	1009883a 	mov	r4,r2
 1005efc:	a00b883a 	mov	r5,r20
 1005f00:	1039883a 	mov	fp,r2
 1005f04:	10083e80 	call	10083e8 <__mcmp>
 1005f08:	d8c01517 	ldw	r3,84(sp)
 1005f0c:	0081880e 	bge	zero,r2,1006530 <_dtoa_r+0x15a8>
 1005f10:	00800e44 	movi	r2,57
 1005f14:	b0c00c44 	addi	r3,r22,49
 1005f18:	a8816326 	beq	r21,r2,10064a8 <_dtoa_r+0x1520>
 1005f1c:	90c00005 	stb	r3,0(r18)
 1005f20:	95800044 	addi	r22,r18,1
 1005f24:	982b883a 	mov	r21,r19
 1005f28:	003f1606 	br	1005b84 <_dtoa_r+0xbfc>
 1005f2c:	300b883a 	mov	r5,r6
 1005f30:	e009883a 	mov	r4,fp
 1005f34:	d9801515 	stw	r6,84(sp)
 1005f38:	10083e80 	call	10083e8 <__mcmp>
 1005f3c:	d9801517 	ldw	r6,84(sp)
 1005f40:	8009883a 	mov	r4,r16
 1005f44:	d8801515 	stw	r2,84(sp)
 1005f48:	300b883a 	mov	r5,r6
 1005f4c:	1007b440 	call	1007b44 <_Bfree>
 1005f50:	d8801517 	ldw	r2,84(sp)
 1005f54:	103f6d1e 	bne	r2,zero,1005d0c <_dtoa_r+0xd84>
 1005f58:	d9c00417 	ldw	r7,16(sp)
 1005f5c:	383f6b1e 	bne	r7,zero,1005d0c <_dtoa_r+0xd84>
 1005f60:	d8c00317 	ldw	r3,12(sp)
 1005f64:	183f691e 	bne	r3,zero,1005d0c <_dtoa_r+0xd84>
 1005f68:	b807883a 	mov	r3,r23
 1005f6c:	00800e44 	movi	r2,57
 1005f70:	ddc00717 	ldw	r23,28(sp)
 1005f74:	18814c26 	beq	r3,r2,10064a8 <_dtoa_r+0x1520>
 1005f78:	057fe80e 	bge	zero,r21,1005f1c <_dtoa_r+0xf94>
 1005f7c:	b0c00c44 	addi	r3,r22,49
 1005f80:	003fe606 	br	1005f1c <_dtoa_r+0xf94>
 1005f84:	880b883a 	mov	r5,r17
 1005f88:	8009883a 	mov	r4,r16
 1005f8c:	01800284 	movi	r6,10
 1005f90:	000f883a 	mov	r7,zero
 1005f94:	1007b6c0 	call	1007b6c <__multadd>
 1005f98:	1023883a 	mov	r17,r2
 1005f9c:	1027883a 	mov	r19,r2
 1005fa0:	a825883a 	mov	r18,r21
 1005fa4:	003f4506 	br	1005cbc <_dtoa_r+0xd34>
 1005fa8:	e009883a 	mov	r4,fp
 1005fac:	a00b883a 	mov	r5,r20
 1005fb0:	10083e80 	call	10083e8 <__mcmp>
 1005fb4:	103ebc0e 	bge	r2,zero,1005aa8 <_dtoa_r+0xb20>
 1005fb8:	e00b883a 	mov	r5,fp
 1005fbc:	8009883a 	mov	r4,r16
 1005fc0:	01800284 	movi	r6,10
 1005fc4:	000f883a 	mov	r7,zero
 1005fc8:	1007b6c0 	call	1007b6c <__multadd>
 1005fcc:	1039883a 	mov	fp,r2
 1005fd0:	d8800617 	ldw	r2,24(sp)
 1005fd4:	d8c00c17 	ldw	r3,48(sp)
 1005fd8:	10bfffc4 	addi	r2,r2,-1
 1005fdc:	d8800615 	stw	r2,24(sp)
 1005fe0:	1801571e 	bne	r3,zero,1006540 <_dtoa_r+0x15b8>
 1005fe4:	d9c00e17 	ldw	r7,56(sp)
 1005fe8:	d9c00915 	stw	r7,36(sp)
 1005fec:	003eae06 	br	1005aa8 <_dtoa_r+0xb20>
 1005ff0:	a0800417 	ldw	r2,16(r20)
 1005ff4:	10800104 	addi	r2,r2,4
 1005ff8:	1085883a 	add	r2,r2,r2
 1005ffc:	1085883a 	add	r2,r2,r2
 1006000:	a085883a 	add	r2,r20,r2
 1006004:	11000017 	ldw	r4,0(r2)
 1006008:	1007db40 	call	1007db4 <__hi0bits>
 100600c:	00c00804 	movi	r3,32
 1006010:	1885c83a 	sub	r2,r3,r2
 1006014:	003e8306 	br	1005a24 <_dtoa_r+0xa9c>
 1006018:	d9c00417 	ldw	r7,16(sp)
 100601c:	00800084 	movi	r2,2
 1006020:	11fea30e 	bge	r2,r7,1005ab0 <_dtoa_r+0xb28>
 1006024:	d8800917 	ldw	r2,36(sp)
 1006028:	103f8c1e 	bne	r2,zero,1005e5c <_dtoa_r+0xed4>
 100602c:	a00b883a 	mov	r5,r20
 1006030:	8009883a 	mov	r4,r16
 1006034:	01800144 	movi	r6,5
 1006038:	000f883a 	mov	r7,zero
 100603c:	1007b6c0 	call	1007b6c <__multadd>
 1006040:	e009883a 	mov	r4,fp
 1006044:	100b883a 	mov	r5,r2
 1006048:	1029883a 	mov	r20,r2
 100604c:	10083e80 	call	10083e8 <__mcmp>
 1006050:	00bf820e 	bge	zero,r2,1005e5c <_dtoa_r+0xed4>
 1006054:	00800c44 	movi	r2,49
 1006058:	b8800005 	stb	r2,0(r23)
 100605c:	d8800617 	ldw	r2,24(sp)
 1006060:	bd800044 	addi	r22,r23,1
 1006064:	10800044 	addi	r2,r2,1
 1006068:	d8800615 	stw	r2,24(sp)
 100606c:	003f7f06 	br	1005e6c <_dtoa_r+0xee4>
 1006070:	dc000417 	ldw	r16,16(sp)
 1006074:	003d6506 	br	100560c <_dtoa_r+0x684>
 1006078:	9009883a 	mov	r4,r18
 100607c:	100a8200 	call	100a820 <__floatsidf>
 1006080:	1009883a 	mov	r4,r2
 1006084:	180b883a 	mov	r5,r3
 1006088:	980d883a 	mov	r6,r19
 100608c:	a00f883a 	mov	r7,r20
 1006090:	100a1ac0 	call	100a1ac <__muldf3>
 1006094:	1009883a 	mov	r4,r2
 1006098:	180b883a 	mov	r5,r3
 100609c:	000d883a 	mov	r6,zero
 10060a0:	01d00734 	movhi	r7,16412
 10060a4:	100a0f80 	call	100a0f8 <__adddf3>
 10060a8:	057f3034 	movhi	r21,64704
 10060ac:	1025883a 	mov	r18,r2
 10060b0:	1d6b883a 	add	r21,r3,r21
 10060b4:	9809883a 	mov	r4,r19
 10060b8:	a00b883a 	mov	r5,r20
 10060bc:	000d883a 	mov	r6,zero
 10060c0:	01d00534 	movhi	r7,16404
 10060c4:	100a14c0 	call	100a14c <__subdf3>
 10060c8:	1009883a 	mov	r4,r2
 10060cc:	180b883a 	mov	r5,r3
 10060d0:	900d883a 	mov	r6,r18
 10060d4:	a80f883a 	mov	r7,r21
 10060d8:	1027883a 	mov	r19,r2
 10060dc:	1829883a 	mov	r20,r3
 10060e0:	100a6fc0 	call	100a6fc <__gtdf2>
 10060e4:	00806616 	blt	zero,r2,1006280 <_dtoa_r+0x12f8>
 10060e8:	a9e0003c 	xorhi	r7,r21,32768
 10060ec:	9809883a 	mov	r4,r19
 10060f0:	a00b883a 	mov	r5,r20
 10060f4:	900d883a 	mov	r6,r18
 10060f8:	100a7c40 	call	100a7c4 <__ltdf2>
 10060fc:	103d710e 	bge	r2,zero,10056c4 <_dtoa_r+0x73c>
 1006100:	0029883a 	mov	r20,zero
 1006104:	002b883a 	mov	r21,zero
 1006108:	003f5406 	br	1005e5c <_dtoa_r+0xed4>
 100610c:	d9800a17 	ldw	r6,40(sp)
 1006110:	e00b883a 	mov	r5,fp
 1006114:	8009883a 	mov	r4,r16
 1006118:	10081600 	call	1008160 <__pow5mult>
 100611c:	1039883a 	mov	fp,r2
 1006120:	003e2e06 	br	10059dc <_dtoa_r+0xa54>
 1006124:	d8000c15 	stw	zero,48(sp)
 1006128:	003f2006 	br	1005dac <_dtoa_r+0xe24>
 100612c:	00800044 	movi	r2,1
 1006130:	d8800c15 	stw	r2,48(sp)
 1006134:	003c5d06 	br	10052ac <_dtoa_r+0x324>
 1006138:	d8c00a17 	ldw	r3,40(sp)
 100613c:	d9000b17 	ldw	r4,44(sp)
 1006140:	dcc00a15 	stw	r19,40(sp)
 1006144:	98c5c83a 	sub	r2,r19,r3
 1006148:	2089883a 	add	r4,r4,r2
 100614c:	d9000b15 	stw	r4,44(sp)
 1006150:	0027883a 	mov	r19,zero
 1006154:	003df206 	br	1005920 <_dtoa_r+0x998>
 1006158:	d9000317 	ldw	r4,12(sp)
 100615c:	8829883a 	mov	r20,r17
 1006160:	04800084 	movi	r18,2
 1006164:	d9001015 	stw	r4,64(sp)
 1006168:	003c8106 	br	1005370 <_dtoa_r+0x3e8>
 100616c:	04800044 	movi	r18,1
 1006170:	dc800e15 	stw	r18,56(sp)
 1006174:	dc800915 	stw	r18,36(sp)
 1006178:	dc802115 	stw	r18,132(sp)
 100617c:	003f1206 	br	1005dc8 <_dtoa_r+0xe40>
 1006180:	d8800617 	ldw	r2,24(sp)
 1006184:	00abc83a 	sub	r21,zero,r2
 1006188:	a800a426 	beq	r21,zero,100641c <_dtoa_r+0x1494>
 100618c:	a88003cc 	andi	r2,r21,15
 1006190:	100490fa 	slli	r2,r2,3
 1006194:	00c04074 	movhi	r3,257
 1006198:	18fea404 	addi	r3,r3,-1392
 100619c:	d9000317 	ldw	r4,12(sp)
 10061a0:	1885883a 	add	r2,r3,r2
 10061a4:	11800017 	ldw	r6,0(r2)
 10061a8:	11c00117 	ldw	r7,4(r2)
 10061ac:	a82bd13a 	srai	r21,r21,4
 10061b0:	880b883a 	mov	r5,r17
 10061b4:	100a1ac0 	call	100a1ac <__muldf3>
 10061b8:	1027883a 	mov	r19,r2
 10061bc:	1829883a 	mov	r20,r3
 10061c0:	a800e826 	beq	r21,zero,1006564 <_dtoa_r+0x15dc>
 10061c4:	05804074 	movhi	r22,257
 10061c8:	b5be9a04 	addi	r22,r22,-1432
 10061cc:	04800084 	movi	r18,2
 10061d0:	a980004c 	andi	r6,r21,1
 10061d4:	1009883a 	mov	r4,r2
 10061d8:	a82bd07a 	srai	r21,r21,1
 10061dc:	180b883a 	mov	r5,r3
 10061e0:	30000426 	beq	r6,zero,10061f4 <_dtoa_r+0x126c>
 10061e4:	b1800017 	ldw	r6,0(r22)
 10061e8:	b1c00117 	ldw	r7,4(r22)
 10061ec:	94800044 	addi	r18,r18,1
 10061f0:	100a1ac0 	call	100a1ac <__muldf3>
 10061f4:	b5800204 	addi	r22,r22,8
 10061f8:	a83ff51e 	bne	r21,zero,10061d0 <_dtoa_r+0x1248>
 10061fc:	1027883a 	mov	r19,r2
 1006200:	1829883a 	mov	r20,r3
 1006204:	003c7306 	br	10053d4 <_dtoa_r+0x44c>
 1006208:	21000044 	addi	r4,r4,1
 100620c:	11000005 	stb	r4,0(r2)
 1006210:	003e5c06 	br	1005b84 <_dtoa_r+0xbfc>
 1006214:	a9400117 	ldw	r5,4(r21)
 1006218:	8009883a 	mov	r4,r16
 100621c:	1007a9c0 	call	1007a9c <_Balloc>
 1006220:	a9800417 	ldw	r6,16(r21)
 1006224:	11000304 	addi	r4,r2,12
 1006228:	a9400304 	addi	r5,r21,12
 100622c:	31800084 	addi	r6,r6,2
 1006230:	318d883a 	add	r6,r6,r6
 1006234:	318d883a 	add	r6,r6,r6
 1006238:	1023883a 	mov	r17,r2
 100623c:	10024cc0 	call	10024cc <memcpy>
 1006240:	8009883a 	mov	r4,r16
 1006244:	880b883a 	mov	r5,r17
 1006248:	01800044 	movi	r6,1
 100624c:	100828c0 	call	100828c <__lshift>
 1006250:	1027883a 	mov	r19,r2
 1006254:	003e8f06 	br	1005c94 <_dtoa_r+0xd0c>
 1006258:	b807883a 	mov	r3,r23
 100625c:	00800e44 	movi	r2,57
 1006260:	ddc00717 	ldw	r23,28(sp)
 1006264:	18809026 	beq	r3,r2,10064a8 <_dtoa_r+0x1520>
 1006268:	18c00044 	addi	r3,r3,1
 100626c:	003f2b06 	br	1005f1c <_dtoa_r+0xf94>
 1006270:	b807883a 	mov	r3,r23
 1006274:	982b883a 	mov	r21,r19
 1006278:	ddc00717 	ldw	r23,28(sp)
 100627c:	003e2406 	br	1005b10 <_dtoa_r+0xb88>
 1006280:	0029883a 	mov	r20,zero
 1006284:	002b883a 	mov	r21,zero
 1006288:	003f7206 	br	1006054 <_dtoa_r+0x10cc>
 100628c:	593fffc4 	addi	r4,r11,-1
 1006290:	200490fa 	slli	r2,r4,3
 1006294:	00c04074 	movhi	r3,257
 1006298:	18fea404 	addi	r3,r3,-1392
 100629c:	d9001015 	stw	r4,64(sp)
 10062a0:	1885883a 	add	r2,r3,r2
 10062a4:	11000017 	ldw	r4,0(r2)
 10062a8:	11400117 	ldw	r5,4(r2)
 10062ac:	900d883a 	mov	r6,r18
 10062b0:	a80f883a 	mov	r7,r21
 10062b4:	dac01615 	stw	r11,88(sp)
 10062b8:	100a1ac0 	call	100a1ac <__muldf3>
 10062bc:	a00b883a 	mov	r5,r20
 10062c0:	9809883a 	mov	r4,r19
 10062c4:	d8c01215 	stw	r3,72(sp)
 10062c8:	d8801115 	stw	r2,68(sp)
 10062cc:	100a8f40 	call	100a8f4 <__fixdfsi>
 10062d0:	1009883a 	mov	r4,r2
 10062d4:	1025883a 	mov	r18,r2
 10062d8:	100a8200 	call	100a820 <__floatsidf>
 10062dc:	9809883a 	mov	r4,r19
 10062e0:	a00b883a 	mov	r5,r20
 10062e4:	100d883a 	mov	r6,r2
 10062e8:	180f883a 	mov	r7,r3
 10062ec:	94800c04 	addi	r18,r18,48
 10062f0:	100a14c0 	call	100a14c <__subdf3>
 10062f4:	bc800005 	stb	r18,0(r23)
 10062f8:	dac01617 	ldw	r11,88(sp)
 10062fc:	102b883a 	mov	r21,r2
 1006300:	00800044 	movi	r2,1
 1006304:	bd800044 	addi	r22,r23,1
 1006308:	1815883a 	mov	r10,r3
 100630c:	58802226 	beq	r11,r2,1006398 <_dtoa_r+0x1410>
 1006310:	bad7883a 	add	r11,r23,r11
 1006314:	dc001415 	stw	r16,80(sp)
 1006318:	a805883a 	mov	r2,r21
 100631c:	b027883a 	mov	r19,r22
 1006320:	5821883a 	mov	r16,r11
 1006324:	882b883a 	mov	r21,r17
 1006328:	000d883a 	mov	r6,zero
 100632c:	01d00934 	movhi	r7,16420
 1006330:	1009883a 	mov	r4,r2
 1006334:	180b883a 	mov	r5,r3
 1006338:	100a1ac0 	call	100a1ac <__muldf3>
 100633c:	180b883a 	mov	r5,r3
 1006340:	1009883a 	mov	r4,r2
 1006344:	1829883a 	mov	r20,r3
 1006348:	1023883a 	mov	r17,r2
 100634c:	100a8f40 	call	100a8f4 <__fixdfsi>
 1006350:	1009883a 	mov	r4,r2
 1006354:	1025883a 	mov	r18,r2
 1006358:	100a8200 	call	100a820 <__floatsidf>
 100635c:	8809883a 	mov	r4,r17
 1006360:	a00b883a 	mov	r5,r20
 1006364:	100d883a 	mov	r6,r2
 1006368:	180f883a 	mov	r7,r3
 100636c:	94800c04 	addi	r18,r18,48
 1006370:	100a14c0 	call	100a14c <__subdf3>
 1006374:	9cc00044 	addi	r19,r19,1
 1006378:	9cbfffc5 	stb	r18,-1(r19)
 100637c:	9c3fea1e 	bne	r19,r16,1006328 <_dtoa_r+0x13a0>
 1006380:	1815883a 	mov	r10,r3
 1006384:	d8c01017 	ldw	r3,64(sp)
 1006388:	dc001417 	ldw	r16,80(sp)
 100638c:	a823883a 	mov	r17,r21
 1006390:	b0ed883a 	add	r22,r22,r3
 1006394:	102b883a 	mov	r21,r2
 1006398:	d9001117 	ldw	r4,68(sp)
 100639c:	d9401217 	ldw	r5,72(sp)
 10063a0:	000d883a 	mov	r6,zero
 10063a4:	01cff834 	movhi	r7,16352
 10063a8:	da801515 	stw	r10,84(sp)
 10063ac:	100a0f80 	call	100a0f8 <__adddf3>
 10063b0:	da801517 	ldw	r10,84(sp)
 10063b4:	1009883a 	mov	r4,r2
 10063b8:	180b883a 	mov	r5,r3
 10063bc:	500f883a 	mov	r7,r10
 10063c0:	a80d883a 	mov	r6,r21
 10063c4:	100a7c40 	call	100a7c4 <__ltdf2>
 10063c8:	da801517 	ldw	r10,84(sp)
 10063cc:	10003b0e 	bge	r2,zero,10064bc <_dtoa_r+0x1534>
 10063d0:	d9c01317 	ldw	r7,76(sp)
 10063d4:	b53fffc3 	ldbu	r20,-1(r22)
 10063d8:	d9c00615 	stw	r7,24(sp)
 10063dc:	003d3106 	br	10058a4 <_dtoa_r+0x91c>
 10063e0:	d8800817 	ldw	r2,32(sp)
 10063e4:	11e5c83a 	sub	r18,r2,r7
 10063e8:	0005883a 	mov	r2,zero
 10063ec:	003d5006 	br	1005930 <_dtoa_r+0x9a8>
 10063f0:	05800044 	movi	r22,1
 10063f4:	003dc406 	br	1005b08 <_dtoa_r+0xb80>
 10063f8:	a5000044 	addi	r20,r20,1
 10063fc:	15000005 	stb	r20,0(r2)
 1006400:	003c8206 	br	100560c <_dtoa_r+0x684>
 1006404:	d8800217 	ldw	r2,8(sp)
 1006408:	00c00d84 	movi	r3,54
 100640c:	dcc00a17 	ldw	r19,40(sp)
 1006410:	1885c83a 	sub	r2,r3,r2
 1006414:	dc800817 	ldw	r18,32(sp)
 1006418:	003d4506 	br	1005930 <_dtoa_r+0x9a8>
 100641c:	dcc00317 	ldw	r19,12(sp)
 1006420:	8829883a 	mov	r20,r17
 1006424:	04800084 	movi	r18,2
 1006428:	003bea06 	br	10053d4 <_dtoa_r+0x44c>
 100642c:	d9000917 	ldw	r4,36(sp)
 1006430:	203f1126 	beq	r4,zero,1006078 <_dtoa_r+0x10f0>
 1006434:	d9c00e17 	ldw	r7,56(sp)
 1006438:	01fca20e 	bge	zero,r7,10056c4 <_dtoa_r+0x73c>
 100643c:	a00b883a 	mov	r5,r20
 1006440:	9809883a 	mov	r4,r19
 1006444:	000d883a 	mov	r6,zero
 1006448:	01d00934 	movhi	r7,16420
 100644c:	100a1ac0 	call	100a1ac <__muldf3>
 1006450:	91000044 	addi	r4,r18,1
 1006454:	1027883a 	mov	r19,r2
 1006458:	1829883a 	mov	r20,r3
 100645c:	100a8200 	call	100a820 <__floatsidf>
 1006460:	9809883a 	mov	r4,r19
 1006464:	a00b883a 	mov	r5,r20
 1006468:	100d883a 	mov	r6,r2
 100646c:	180f883a 	mov	r7,r3
 1006470:	100a1ac0 	call	100a1ac <__muldf3>
 1006474:	1009883a 	mov	r4,r2
 1006478:	180b883a 	mov	r5,r3
 100647c:	000d883a 	mov	r6,zero
 1006480:	01d00734 	movhi	r7,16412
 1006484:	100a0f80 	call	100a0f8 <__adddf3>
 1006488:	1025883a 	mov	r18,r2
 100648c:	d8800617 	ldw	r2,24(sp)
 1006490:	057f3034 	movhi	r21,64704
 1006494:	1d6b883a 	add	r21,r3,r21
 1006498:	10bfffc4 	addi	r2,r2,-1
 100649c:	d8801315 	stw	r2,76(sp)
 10064a0:	dac00e17 	ldw	r11,56(sp)
 10064a4:	003be706 	br	1005444 <_dtoa_r+0x4bc>
 10064a8:	01000e44 	movi	r4,57
 10064ac:	91000005 	stb	r4,0(r18)
 10064b0:	95800044 	addi	r22,r18,1
 10064b4:	982b883a 	mov	r21,r19
 10064b8:	003da106 	br	1005b40 <_dtoa_r+0xbb8>
 10064bc:	d9801117 	ldw	r6,68(sp)
 10064c0:	d9c01217 	ldw	r7,72(sp)
 10064c4:	0009883a 	mov	r4,zero
 10064c8:	014ff834 	movhi	r5,16352
 10064cc:	da801515 	stw	r10,84(sp)
 10064d0:	100a14c0 	call	100a14c <__subdf3>
 10064d4:	da801517 	ldw	r10,84(sp)
 10064d8:	1009883a 	mov	r4,r2
 10064dc:	180b883a 	mov	r5,r3
 10064e0:	a80d883a 	mov	r6,r21
 10064e4:	500f883a 	mov	r7,r10
 10064e8:	100a6fc0 	call	100a6fc <__gtdf2>
 10064ec:	00bc750e 	bge	zero,r2,10056c4 <_dtoa_r+0x73c>
 10064f0:	01000c04 	movi	r4,48
 10064f4:	00000106 	br	10064fc <_dtoa_r+0x1574>
 10064f8:	102d883a 	mov	r22,r2
 10064fc:	b0bfffc4 	addi	r2,r22,-1
 1006500:	10c00007 	ldb	r3,0(r2)
 1006504:	193ffc26 	beq	r3,r4,10064f8 <_dtoa_r+0x1570>
 1006508:	d8801317 	ldw	r2,76(sp)
 100650c:	d8800615 	stw	r2,24(sp)
 1006510:	003c3e06 	br	100560c <_dtoa_r+0x684>
 1006514:	d9001317 	ldw	r4,76(sp)
 1006518:	df001117 	ldw	fp,68(sp)
 100651c:	d9000615 	stw	r4,24(sp)
 1006520:	003ce006 	br	10058a4 <_dtoa_r+0x91c>
 1006524:	df001117 	ldw	fp,68(sp)
 1006528:	dc401217 	ldw	r17,72(sp)
 100652c:	003c6506 	br	10056c4 <_dtoa_r+0x73c>
 1006530:	103e7a1e 	bne	r2,zero,1005f1c <_dtoa_r+0xf94>
 1006534:	1880004c 	andi	r2,r3,1
 1006538:	103e7826 	beq	r2,zero,1005f1c <_dtoa_r+0xf94>
 100653c:	003e7406 	br	1005f10 <_dtoa_r+0xf88>
 1006540:	8009883a 	mov	r4,r16
 1006544:	a80b883a 	mov	r5,r21
 1006548:	01800284 	movi	r6,10
 100654c:	000f883a 	mov	r7,zero
 1006550:	1007b6c0 	call	1007b6c <__multadd>
 1006554:	d9000e17 	ldw	r4,56(sp)
 1006558:	102b883a 	mov	r21,r2
 100655c:	d9000915 	stw	r4,36(sp)
 1006560:	003d5106 	br	1005aa8 <_dtoa_r+0xb20>
 1006564:	04800084 	movi	r18,2
 1006568:	003b9a06 	br	10053d4 <_dtoa_r+0x44c>
 100656c:	d8c01317 	ldw	r3,76(sp)
 1006570:	d8c00615 	stw	r3,24(sp)
 1006574:	003ccb06 	br	10058a4 <_dtoa_r+0x91c>
 1006578:	d8c01317 	ldw	r3,76(sp)
 100657c:	d8c00615 	stw	r3,24(sp)
 1006580:	003c2206 	br	100560c <_dtoa_r+0x684>
 1006584:	20fd3826 	beq	r4,r3,1005a68 <_dtoa_r+0xae0>
 1006588:	00c00f04 	movi	r3,60
 100658c:	1885c83a 	sub	r2,r3,r2
 1006590:	003da906 	br	1005c38 <_dtoa_r+0xcb0>
 1006594:	000b883a 	mov	r5,zero
 1006598:	003b5406 	br	10052ec <_dtoa_r+0x364>
 100659c:	04c00044 	movi	r19,1
 10065a0:	003b3b06 	br	1005290 <_dtoa_r+0x308>

010065a4 <_fflush_r>:
 10065a4:	defffb04 	addi	sp,sp,-20
 10065a8:	dcc00315 	stw	r19,12(sp)
 10065ac:	dc400115 	stw	r17,4(sp)
 10065b0:	dfc00415 	stw	ra,16(sp)
 10065b4:	dc800215 	stw	r18,8(sp)
 10065b8:	dc000015 	stw	r16,0(sp)
 10065bc:	2027883a 	mov	r19,r4
 10065c0:	2823883a 	mov	r17,r5
 10065c4:	20000226 	beq	r4,zero,10065d0 <_fflush_r+0x2c>
 10065c8:	20800e17 	ldw	r2,56(r4)
 10065cc:	10005726 	beq	r2,zero,100672c <_fflush_r+0x188>
 10065d0:	8880030b 	ldhu	r2,12(r17)
 10065d4:	10c0020c 	andi	r3,r2,8
 10065d8:	18ffffcc 	andi	r3,r3,65535
 10065dc:	18e0001c 	xori	r3,r3,32768
 10065e0:	18e00004 	addi	r3,r3,-32768
 10065e4:	1800311e 	bne	r3,zero,10066ac <_fflush_r+0x108>
 10065e8:	89000117 	ldw	r4,4(r17)
 10065ec:	10c20014 	ori	r3,r2,2048
 10065f0:	88c0030d 	sth	r3,12(r17)
 10065f4:	180b883a 	mov	r5,r3
 10065f8:	0100520e 	bge	zero,r4,1006744 <_fflush_r+0x1a0>
 10065fc:	88c00a17 	ldw	r3,40(r17)
 1006600:	18002226 	beq	r3,zero,100668c <_fflush_r+0xe8>
 1006604:	1084000c 	andi	r2,r2,4096
 1006608:	10bfffcc 	andi	r2,r2,65535
 100660c:	10a0001c 	xori	r2,r2,32768
 1006610:	10a00004 	addi	r2,r2,-32768
 1006614:	10004e26 	beq	r2,zero,1006750 <_fflush_r+0x1ac>
 1006618:	8c001417 	ldw	r16,80(r17)
 100661c:	2940010c 	andi	r5,r5,4
 1006620:	297fffcc 	andi	r5,r5,65535
 1006624:	2960001c 	xori	r5,r5,32768
 1006628:	29600004 	addi	r5,r5,-32768
 100662c:	28000626 	beq	r5,zero,1006648 <_fflush_r+0xa4>
 1006630:	89000117 	ldw	r4,4(r17)
 1006634:	88800c17 	ldw	r2,48(r17)
 1006638:	8121c83a 	sub	r16,r16,r4
 100663c:	10000226 	beq	r2,zero,1006648 <_fflush_r+0xa4>
 1006640:	88800f17 	ldw	r2,60(r17)
 1006644:	80a1c83a 	sub	r16,r16,r2
 1006648:	89400717 	ldw	r5,28(r17)
 100664c:	9809883a 	mov	r4,r19
 1006650:	800d883a 	mov	r6,r16
 1006654:	000f883a 	mov	r7,zero
 1006658:	183ee83a 	callr	r3
 100665c:	8080281e 	bne	r16,r2,1006700 <_fflush_r+0x15c>
 1006660:	8880030b 	ldhu	r2,12(r17)
 1006664:	88c00417 	ldw	r3,16(r17)
 1006668:	88000115 	stw	zero,4(r17)
 100666c:	113dffcc 	andi	r4,r2,63487
 1006670:	1084000c 	andi	r2,r2,4096
 1006674:	10bfffcc 	andi	r2,r2,65535
 1006678:	10a0001c 	xori	r2,r2,32768
 100667c:	8900030d 	sth	r4,12(r17)
 1006680:	88c00015 	stw	r3,0(r17)
 1006684:	10a00004 	addi	r2,r2,-32768
 1006688:	10002c1e 	bne	r2,zero,100673c <_fflush_r+0x198>
 100668c:	0005883a 	mov	r2,zero
 1006690:	dfc00417 	ldw	ra,16(sp)
 1006694:	dcc00317 	ldw	r19,12(sp)
 1006698:	dc800217 	ldw	r18,8(sp)
 100669c:	dc400117 	ldw	r17,4(sp)
 10066a0:	dc000017 	ldw	r16,0(sp)
 10066a4:	dec00504 	addi	sp,sp,20
 10066a8:	f800283a 	ret
 10066ac:	8c800417 	ldw	r18,16(r17)
 10066b0:	903ff626 	beq	r18,zero,100668c <_fflush_r+0xe8>
 10066b4:	8c000017 	ldw	r16,0(r17)
 10066b8:	108000cc 	andi	r2,r2,3
 10066bc:	8c800015 	stw	r18,0(r17)
 10066c0:	84a1c83a 	sub	r16,r16,r18
 10066c4:	10001b1e 	bne	r2,zero,1006734 <_fflush_r+0x190>
 10066c8:	88800517 	ldw	r2,20(r17)
 10066cc:	88800215 	stw	r2,8(r17)
 10066d0:	04000316 	blt	zero,r16,10066e0 <_fflush_r+0x13c>
 10066d4:	003fed06 	br	100668c <_fflush_r+0xe8>
 10066d8:	90a5883a 	add	r18,r18,r2
 10066dc:	043feb0e 	bge	zero,r16,100668c <_fflush_r+0xe8>
 10066e0:	88800917 	ldw	r2,36(r17)
 10066e4:	89400717 	ldw	r5,28(r17)
 10066e8:	800f883a 	mov	r7,r16
 10066ec:	900d883a 	mov	r6,r18
 10066f0:	9809883a 	mov	r4,r19
 10066f4:	103ee83a 	callr	r2
 10066f8:	80a1c83a 	sub	r16,r16,r2
 10066fc:	00bff616 	blt	zero,r2,10066d8 <_fflush_r+0x134>
 1006700:	88c0030b 	ldhu	r3,12(r17)
 1006704:	00bfffc4 	movi	r2,-1
 1006708:	18c01014 	ori	r3,r3,64
 100670c:	88c0030d 	sth	r3,12(r17)
 1006710:	dfc00417 	ldw	ra,16(sp)
 1006714:	dcc00317 	ldw	r19,12(sp)
 1006718:	dc800217 	ldw	r18,8(sp)
 100671c:	dc400117 	ldw	r17,4(sp)
 1006720:	dc000017 	ldw	r16,0(sp)
 1006724:	dec00504 	addi	sp,sp,20
 1006728:	f800283a 	ret
 100672c:	10068600 	call	1006860 <__sinit>
 1006730:	003fa706 	br	10065d0 <_fflush_r+0x2c>
 1006734:	0005883a 	mov	r2,zero
 1006738:	003fe406 	br	10066cc <_fflush_r+0x128>
 100673c:	8c001415 	stw	r16,80(r17)
 1006740:	003fd206 	br	100668c <_fflush_r+0xe8>
 1006744:	88c00f17 	ldw	r3,60(r17)
 1006748:	00ffac16 	blt	zero,r3,10065fc <_fflush_r+0x58>
 100674c:	003fcf06 	br	100668c <_fflush_r+0xe8>
 1006750:	89400717 	ldw	r5,28(r17)
 1006754:	9809883a 	mov	r4,r19
 1006758:	000d883a 	mov	r6,zero
 100675c:	01c00044 	movi	r7,1
 1006760:	183ee83a 	callr	r3
 1006764:	1021883a 	mov	r16,r2
 1006768:	00bfffc4 	movi	r2,-1
 100676c:	80800326 	beq	r16,r2,100677c <_fflush_r+0x1d8>
 1006770:	8940030b 	ldhu	r5,12(r17)
 1006774:	88c00a17 	ldw	r3,40(r17)
 1006778:	003fa806 	br	100661c <_fflush_r+0x78>
 100677c:	98c00017 	ldw	r3,0(r19)
 1006780:	00800744 	movi	r2,29
 1006784:	18bfde1e 	bne	r3,r2,1006700 <_fflush_r+0x15c>
 1006788:	003fc006 	br	100668c <_fflush_r+0xe8>

0100678c <fflush>:
 100678c:	200b883a 	mov	r5,r4
 1006790:	20000426 	beq	r4,zero,10067a4 <fflush+0x18>
 1006794:	00804074 	movhi	r2,257
 1006798:	1085e104 	addi	r2,r2,6020
 100679c:	11000017 	ldw	r4,0(r2)
 10067a0:	10065a41 	jmpi	10065a4 <_fflush_r>
 10067a4:	00804074 	movhi	r2,257
 10067a8:	1085e004 	addi	r2,r2,6016
 10067ac:	11000017 	ldw	r4,0(r2)
 10067b0:	01404034 	movhi	r5,256
 10067b4:	29596904 	addi	r5,r5,26020
 10067b8:	10074d81 	jmpi	10074d8 <_fwalk_reent>

010067bc <__fp_lock>:
 10067bc:	0005883a 	mov	r2,zero
 10067c0:	f800283a 	ret

010067c4 <__fp_unlock>:
 10067c4:	0005883a 	mov	r2,zero
 10067c8:	f800283a 	ret

010067cc <_cleanup_r>:
 10067cc:	01404074 	movhi	r5,257
 10067d0:	2965da04 	addi	r5,r5,-26776
 10067d4:	10074301 	jmpi	1007430 <_fwalk>

010067d8 <__sfmoreglue>:
 10067d8:	defffc04 	addi	sp,sp,-16
 10067dc:	dc800215 	stw	r18,8(sp)
 10067e0:	2825883a 	mov	r18,r5
 10067e4:	dc000015 	stw	r16,0(sp)
 10067e8:	01401704 	movi	r5,92
 10067ec:	2021883a 	mov	r16,r4
 10067f0:	9009883a 	mov	r4,r18
 10067f4:	dfc00315 	stw	ra,12(sp)
 10067f8:	dc400115 	stw	r17,4(sp)
 10067fc:	10013440 	call	1001344 <__mulsi3>
 1006800:	8009883a 	mov	r4,r16
 1006804:	11400304 	addi	r5,r2,12
 1006808:	1023883a 	mov	r17,r2
 100680c:	1001d480 	call	1001d48 <_malloc_r>
 1006810:	1021883a 	mov	r16,r2
 1006814:	10000726 	beq	r2,zero,1006834 <__sfmoreglue+0x5c>
 1006818:	11000304 	addi	r4,r2,12
 100681c:	10000015 	stw	zero,0(r2)
 1006820:	14800115 	stw	r18,4(r2)
 1006824:	11000215 	stw	r4,8(r2)
 1006828:	000b883a 	mov	r5,zero
 100682c:	880d883a 	mov	r6,r17
 1006830:	10079c00 	call	10079c0 <memset>
 1006834:	8005883a 	mov	r2,r16
 1006838:	dfc00317 	ldw	ra,12(sp)
 100683c:	dc800217 	ldw	r18,8(sp)
 1006840:	dc400117 	ldw	r17,4(sp)
 1006844:	dc000017 	ldw	r16,0(sp)
 1006848:	dec00404 	addi	sp,sp,16
 100684c:	f800283a 	ret

01006850 <_cleanup>:
 1006850:	00804074 	movhi	r2,257
 1006854:	1085e004 	addi	r2,r2,6016
 1006858:	11000017 	ldw	r4,0(r2)
 100685c:	10067cc1 	jmpi	10067cc <_cleanup_r>

01006860 <__sinit>:
 1006860:	20800e17 	ldw	r2,56(r4)
 1006864:	1000401e 	bne	r2,zero,1006968 <__sinit+0x108>
 1006868:	21400117 	ldw	r5,4(r4)
 100686c:	01804034 	movhi	r6,256
 1006870:	3199f304 	addi	r6,r6,26572
 1006874:	20c00217 	ldw	r3,8(r4)
 1006878:	21800f15 	stw	r6,60(r4)
 100687c:	2080bb04 	addi	r2,r4,748
 1006880:	02400044 	movi	r9,1
 1006884:	018000c4 	movi	r6,3
 1006888:	2180b915 	stw	r6,740(r4)
 100688c:	2080ba15 	stw	r2,744(r4)
 1006890:	22400e15 	stw	r9,56(r4)
 1006894:	20800317 	ldw	r2,12(r4)
 1006898:	2000b815 	stw	zero,736(r4)
 100689c:	02004034 	movhi	r8,256
 10068a0:	420a9a04 	addi	r8,r8,10856
 10068a4:	01c04034 	movhi	r7,256
 10068a8:	39caaf04 	addi	r7,r7,10940
 10068ac:	01804034 	movhi	r6,256
 10068b0:	318ad104 	addi	r6,r6,11076
 10068b4:	01004034 	movhi	r4,256
 10068b8:	210ae804 	addi	r4,r4,11168
 10068bc:	02800104 	movi	r10,4
 10068c0:	28000015 	stw	zero,0(r5)
 10068c4:	28000115 	stw	zero,4(r5)
 10068c8:	28000215 	stw	zero,8(r5)
 10068cc:	2a80030d 	sth	r10,12(r5)
 10068d0:	2800038d 	sth	zero,14(r5)
 10068d4:	28000415 	stw	zero,16(r5)
 10068d8:	28000515 	stw	zero,20(r5)
 10068dc:	28000615 	stw	zero,24(r5)
 10068e0:	29400715 	stw	r5,28(r5)
 10068e4:	2a000815 	stw	r8,32(r5)
 10068e8:	29c00915 	stw	r7,36(r5)
 10068ec:	29800a15 	stw	r6,40(r5)
 10068f0:	29000b15 	stw	r4,44(r5)
 10068f4:	01400284 	movi	r5,10
 10068f8:	18000015 	stw	zero,0(r3)
 10068fc:	18000115 	stw	zero,4(r3)
 1006900:	18000215 	stw	zero,8(r3)
 1006904:	1940030d 	sth	r5,12(r3)
 1006908:	1a40038d 	sth	r9,14(r3)
 100690c:	18000415 	stw	zero,16(r3)
 1006910:	18000515 	stw	zero,20(r3)
 1006914:	18000615 	stw	zero,24(r3)
 1006918:	18c00715 	stw	r3,28(r3)
 100691c:	1a000815 	stw	r8,32(r3)
 1006920:	19c00915 	stw	r7,36(r3)
 1006924:	19800a15 	stw	r6,40(r3)
 1006928:	19000b15 	stw	r4,44(r3)
 100692c:	00c00484 	movi	r3,18
 1006930:	10c0030d 	sth	r3,12(r2)
 1006934:	00c00084 	movi	r3,2
 1006938:	10000015 	stw	zero,0(r2)
 100693c:	10000115 	stw	zero,4(r2)
 1006940:	10000215 	stw	zero,8(r2)
 1006944:	10c0038d 	sth	r3,14(r2)
 1006948:	10000415 	stw	zero,16(r2)
 100694c:	10000515 	stw	zero,20(r2)
 1006950:	10000615 	stw	zero,24(r2)
 1006954:	10800715 	stw	r2,28(r2)
 1006958:	12000815 	stw	r8,32(r2)
 100695c:	11c00915 	stw	r7,36(r2)
 1006960:	11800a15 	stw	r6,40(r2)
 1006964:	11000b15 	stw	r4,44(r2)
 1006968:	f800283a 	ret

0100696c <__sfp>:
 100696c:	defffc04 	addi	sp,sp,-16
 1006970:	00804074 	movhi	r2,257
 1006974:	1085e004 	addi	r2,r2,6016
 1006978:	dc400115 	stw	r17,4(sp)
 100697c:	14400017 	ldw	r17,0(r2)
 1006980:	dc800215 	stw	r18,8(sp)
 1006984:	dfc00315 	stw	ra,12(sp)
 1006988:	88800e17 	ldw	r2,56(r17)
 100698c:	dc000015 	stw	r16,0(sp)
 1006990:	2025883a 	mov	r18,r4
 1006994:	10002826 	beq	r2,zero,1006a38 <__sfp+0xcc>
 1006998:	8c40b804 	addi	r17,r17,736
 100699c:	043fffc4 	movi	r16,-1
 10069a0:	89400117 	ldw	r5,4(r17)
 10069a4:	88800217 	ldw	r2,8(r17)
 10069a8:	297fffc4 	addi	r5,r5,-1
 10069ac:	28000a16 	blt	r5,zero,10069d8 <__sfp+0x6c>
 10069b0:	10c0030f 	ldh	r3,12(r2)
 10069b4:	18000c26 	beq	r3,zero,10069e8 <__sfp+0x7c>
 10069b8:	10c01a04 	addi	r3,r2,104
 10069bc:	00000206 	br	10069c8 <__sfp+0x5c>
 10069c0:	19bfe90f 	ldh	r6,-92(r3)
 10069c4:	30000826 	beq	r6,zero,10069e8 <__sfp+0x7c>
 10069c8:	297fffc4 	addi	r5,r5,-1
 10069cc:	18bffd04 	addi	r2,r3,-12
 10069d0:	18c01704 	addi	r3,r3,92
 10069d4:	2c3ffa1e 	bne	r5,r16,10069c0 <__sfp+0x54>
 10069d8:	88800017 	ldw	r2,0(r17)
 10069dc:	10001926 	beq	r2,zero,1006a44 <__sfp+0xd8>
 10069e0:	1023883a 	mov	r17,r2
 10069e4:	003fee06 	br	10069a0 <__sfp+0x34>
 10069e8:	00ffffc4 	movi	r3,-1
 10069ec:	10c0038d 	sth	r3,14(r2)
 10069f0:	00c00044 	movi	r3,1
 10069f4:	10c0030d 	sth	r3,12(r2)
 10069f8:	10000015 	stw	zero,0(r2)
 10069fc:	10000215 	stw	zero,8(r2)
 1006a00:	10000115 	stw	zero,4(r2)
 1006a04:	10000415 	stw	zero,16(r2)
 1006a08:	10000515 	stw	zero,20(r2)
 1006a0c:	10000615 	stw	zero,24(r2)
 1006a10:	10000c15 	stw	zero,48(r2)
 1006a14:	10000d15 	stw	zero,52(r2)
 1006a18:	10001115 	stw	zero,68(r2)
 1006a1c:	10001215 	stw	zero,72(r2)
 1006a20:	dfc00317 	ldw	ra,12(sp)
 1006a24:	dc800217 	ldw	r18,8(sp)
 1006a28:	dc400117 	ldw	r17,4(sp)
 1006a2c:	dc000017 	ldw	r16,0(sp)
 1006a30:	dec00404 	addi	sp,sp,16
 1006a34:	f800283a 	ret
 1006a38:	8809883a 	mov	r4,r17
 1006a3c:	10068600 	call	1006860 <__sinit>
 1006a40:	003fd506 	br	1006998 <__sfp+0x2c>
 1006a44:	9009883a 	mov	r4,r18
 1006a48:	01400104 	movi	r5,4
 1006a4c:	10067d80 	call	10067d8 <__sfmoreglue>
 1006a50:	88800015 	stw	r2,0(r17)
 1006a54:	103fe21e 	bne	r2,zero,10069e0 <__sfp+0x74>
 1006a58:	00800304 	movi	r2,12
 1006a5c:	90800015 	stw	r2,0(r18)
 1006a60:	0005883a 	mov	r2,zero
 1006a64:	003fee06 	br	1006a20 <__sfp+0xb4>

01006a68 <__sfp_lock_acquire>:
 1006a68:	f800283a 	ret

01006a6c <__sfp_lock_release>:
 1006a6c:	f800283a 	ret

01006a70 <__sinit_lock_acquire>:
 1006a70:	f800283a 	ret

01006a74 <__sinit_lock_release>:
 1006a74:	f800283a 	ret

01006a78 <__fp_lock_all>:
 1006a78:	00804074 	movhi	r2,257
 1006a7c:	1085e104 	addi	r2,r2,6020
 1006a80:	11000017 	ldw	r4,0(r2)
 1006a84:	01404034 	movhi	r5,256
 1006a88:	2959ef04 	addi	r5,r5,26556
 1006a8c:	10074301 	jmpi	1007430 <_fwalk>

01006a90 <__fp_unlock_all>:
 1006a90:	00804074 	movhi	r2,257
 1006a94:	1085e104 	addi	r2,r2,6020
 1006a98:	11000017 	ldw	r4,0(r2)
 1006a9c:	01404034 	movhi	r5,256
 1006aa0:	2959f104 	addi	r5,r5,26564
 1006aa4:	10074301 	jmpi	1007430 <_fwalk>

01006aa8 <__sflags>:
 1006aa8:	28800007 	ldb	r2,0(r5)
 1006aac:	00c01c84 	movi	r3,114
 1006ab0:	10c01826 	beq	r2,r3,1006b14 <__sflags+0x6c>
 1006ab4:	00c01dc4 	movi	r3,119
 1006ab8:	10c01226 	beq	r2,r3,1006b04 <__sflags+0x5c>
 1006abc:	00c01844 	movi	r3,97
 1006ac0:	10c00426 	beq	r2,r3,1006ad4 <__sflags+0x2c>
 1006ac4:	00800584 	movi	r2,22
 1006ac8:	20800015 	stw	r2,0(r4)
 1006acc:	0005883a 	mov	r2,zero
 1006ad0:	f800283a 	ret
 1006ad4:	01c08204 	movi	r7,520
 1006ad8:	01000044 	movi	r4,1
 1006adc:	00804204 	movi	r2,264
 1006ae0:	28c00047 	ldb	r3,1(r5)
 1006ae4:	18000426 	beq	r3,zero,1006af8 <__sflags+0x50>
 1006ae8:	02000ac4 	movi	r8,43
 1006aec:	1a000d26 	beq	r3,r8,1006b24 <__sflags+0x7c>
 1006af0:	28c00087 	ldb	r3,2(r5)
 1006af4:	1a000b26 	beq	r3,r8,1006b24 <__sflags+0x7c>
 1006af8:	21c8b03a 	or	r4,r4,r7
 1006afc:	31000015 	stw	r4,0(r6)
 1006b00:	f800283a 	ret
 1006b04:	01c18004 	movi	r7,1536
 1006b08:	01000044 	movi	r4,1
 1006b0c:	00800204 	movi	r2,8
 1006b10:	003ff306 	br	1006ae0 <__sflags+0x38>
 1006b14:	000f883a 	mov	r7,zero
 1006b18:	0009883a 	mov	r4,zero
 1006b1c:	00800104 	movi	r2,4
 1006b20:	003fef06 	br	1006ae0 <__sflags+0x38>
 1006b24:	00fff8c4 	movi	r3,-29
 1006b28:	01000084 	movi	r4,2
 1006b2c:	10c4703a 	and	r2,r2,r3
 1006b30:	21c8b03a 	or	r4,r4,r7
 1006b34:	10800414 	ori	r2,r2,16
 1006b38:	31000015 	stw	r4,0(r6)
 1006b3c:	f800283a 	ret

01006b40 <_malloc_trim_r>:
 1006b40:	defffb04 	addi	sp,sp,-20
 1006b44:	dcc00315 	stw	r19,12(sp)
 1006b48:	dc800215 	stw	r18,8(sp)
 1006b4c:	dc400115 	stw	r17,4(sp)
 1006b50:	dc000015 	stw	r16,0(sp)
 1006b54:	2827883a 	mov	r19,r5
 1006b58:	dfc00415 	stw	ra,16(sp)
 1006b5c:	04404074 	movhi	r17,257
 1006b60:	8c7ff404 	addi	r17,r17,-48
 1006b64:	2021883a 	mov	r16,r4
 1006b68:	100b5f80 	call	100b5f8 <__malloc_lock>
 1006b6c:	88800217 	ldw	r2,8(r17)
 1006b70:	14800117 	ldw	r18,4(r2)
 1006b74:	00bfff04 	movi	r2,-4
 1006b78:	90a4703a 	and	r18,r18,r2
 1006b7c:	9083fbc4 	addi	r2,r18,4079
 1006b80:	14e7c83a 	sub	r19,r2,r19
 1006b84:	9826d33a 	srli	r19,r19,12
 1006b88:	0083ffc4 	movi	r2,4095
 1006b8c:	9cffffc4 	addi	r19,r19,-1
 1006b90:	9826933a 	slli	r19,r19,12
 1006b94:	14c0060e 	bge	r2,r19,1006bb0 <_malloc_trim_r+0x70>
 1006b98:	8009883a 	mov	r4,r16
 1006b9c:	000b883a 	mov	r5,zero
 1006ba0:	1002a040 	call	1002a04 <_sbrk_r>
 1006ba4:	88c00217 	ldw	r3,8(r17)
 1006ba8:	1c87883a 	add	r3,r3,r18
 1006bac:	10c00a26 	beq	r2,r3,1006bd8 <_malloc_trim_r+0x98>
 1006bb0:	8009883a 	mov	r4,r16
 1006bb4:	100b6180 	call	100b618 <__malloc_unlock>
 1006bb8:	0005883a 	mov	r2,zero
 1006bbc:	dfc00417 	ldw	ra,16(sp)
 1006bc0:	dcc00317 	ldw	r19,12(sp)
 1006bc4:	dc800217 	ldw	r18,8(sp)
 1006bc8:	dc400117 	ldw	r17,4(sp)
 1006bcc:	dc000017 	ldw	r16,0(sp)
 1006bd0:	dec00504 	addi	sp,sp,20
 1006bd4:	f800283a 	ret
 1006bd8:	8009883a 	mov	r4,r16
 1006bdc:	04cbc83a 	sub	r5,zero,r19
 1006be0:	1002a040 	call	1002a04 <_sbrk_r>
 1006be4:	00ffffc4 	movi	r3,-1
 1006be8:	10c01326 	beq	r2,r3,1006c38 <_malloc_trim_r+0xf8>
 1006bec:	00804074 	movhi	r2,257
 1006bf0:	10860504 	addi	r2,r2,6164
 1006bf4:	11000017 	ldw	r4,0(r2)
 1006bf8:	88c00217 	ldw	r3,8(r17)
 1006bfc:	94e5c83a 	sub	r18,r18,r19
 1006c00:	94800054 	ori	r18,r18,1
 1006c04:	24e7c83a 	sub	r19,r4,r19
 1006c08:	1c800115 	stw	r18,4(r3)
 1006c0c:	8009883a 	mov	r4,r16
 1006c10:	14c00015 	stw	r19,0(r2)
 1006c14:	100b6180 	call	100b618 <__malloc_unlock>
 1006c18:	00800044 	movi	r2,1
 1006c1c:	dfc00417 	ldw	ra,16(sp)
 1006c20:	dcc00317 	ldw	r19,12(sp)
 1006c24:	dc800217 	ldw	r18,8(sp)
 1006c28:	dc400117 	ldw	r17,4(sp)
 1006c2c:	dc000017 	ldw	r16,0(sp)
 1006c30:	dec00504 	addi	sp,sp,20
 1006c34:	f800283a 	ret
 1006c38:	8009883a 	mov	r4,r16
 1006c3c:	000b883a 	mov	r5,zero
 1006c40:	1002a040 	call	1002a04 <_sbrk_r>
 1006c44:	88c00217 	ldw	r3,8(r17)
 1006c48:	014003c4 	movi	r5,15
 1006c4c:	10c9c83a 	sub	r4,r2,r3
 1006c50:	293fd70e 	bge	r5,r4,1006bb0 <_malloc_trim_r+0x70>
 1006c54:	01404074 	movhi	r5,257
 1006c58:	2945e204 	addi	r5,r5,6024
 1006c5c:	29400017 	ldw	r5,0(r5)
 1006c60:	21000054 	ori	r4,r4,1
 1006c64:	19000115 	stw	r4,4(r3)
 1006c68:	1145c83a 	sub	r2,r2,r5
 1006c6c:	01404074 	movhi	r5,257
 1006c70:	29460504 	addi	r5,r5,6164
 1006c74:	28800015 	stw	r2,0(r5)
 1006c78:	003fcd06 	br	1006bb0 <_malloc_trim_r+0x70>

01006c7c <_free_r>:
 1006c7c:	defffd04 	addi	sp,sp,-12
 1006c80:	dc400115 	stw	r17,4(sp)
 1006c84:	dc000015 	stw	r16,0(sp)
 1006c88:	dfc00215 	stw	ra,8(sp)
 1006c8c:	2821883a 	mov	r16,r5
 1006c90:	2023883a 	mov	r17,r4
 1006c94:	28004b26 	beq	r5,zero,1006dc4 <_free_r+0x148>
 1006c98:	100b5f80 	call	100b5f8 <__malloc_lock>
 1006c9c:	823fff17 	ldw	r8,-4(r16)
 1006ca0:	00bfff84 	movi	r2,-2
 1006ca4:	81bffe04 	addi	r6,r16,-8
 1006ca8:	4084703a 	and	r2,r8,r2
 1006cac:	3087883a 	add	r3,r6,r2
 1006cb0:	01404074 	movhi	r5,257
 1006cb4:	297ff404 	addi	r5,r5,-48
 1006cb8:	1a400117 	ldw	r9,4(r3)
 1006cbc:	29000217 	ldw	r4,8(r5)
 1006cc0:	01ffff04 	movi	r7,-4
 1006cc4:	49ce703a 	and	r7,r9,r7
 1006cc8:	20c06526 	beq	r4,r3,1006e60 <_free_r+0x1e4>
 1006ccc:	19c00115 	stw	r7,4(r3)
 1006cd0:	4200004c 	andi	r8,r8,1
 1006cd4:	40003026 	beq	r8,zero,1006d98 <_free_r+0x11c>
 1006cd8:	0009883a 	mov	r4,zero
 1006cdc:	19d1883a 	add	r8,r3,r7
 1006ce0:	42000117 	ldw	r8,4(r8)
 1006ce4:	4200004c 	andi	r8,r8,1
 1006ce8:	4000061e 	bne	r8,zero,1006d04 <_free_r+0x88>
 1006cec:	11c5883a 	add	r2,r2,r7
 1006cf0:	19c00217 	ldw	r7,8(r3)
 1006cf4:	20004e26 	beq	r4,zero,1006e30 <_free_r+0x1b4>
 1006cf8:	18c00317 	ldw	r3,12(r3)
 1006cfc:	38c00315 	stw	r3,12(r7)
 1006d00:	19c00215 	stw	r7,8(r3)
 1006d04:	11c00054 	ori	r7,r2,1
 1006d08:	3087883a 	add	r3,r6,r2
 1006d0c:	31c00115 	stw	r7,4(r6)
 1006d10:	18800015 	stw	r2,0(r3)
 1006d14:	20001a1e 	bne	r4,zero,1006d80 <_free_r+0x104>
 1006d18:	00c07fc4 	movi	r3,511
 1006d1c:	18802e2e 	bgeu	r3,r2,1006dd8 <_free_r+0x15c>
 1006d20:	1006d27a 	srli	r3,r2,9
 1006d24:	01000104 	movi	r4,4
 1006d28:	20c06636 	bltu	r4,r3,1006ec4 <_free_r+0x248>
 1006d2c:	1008d1ba 	srli	r4,r2,6
 1006d30:	21000e04 	addi	r4,r4,56
 1006d34:	210f883a 	add	r7,r4,r4
 1006d38:	39cf883a 	add	r7,r7,r7
 1006d3c:	39cf883a 	add	r7,r7,r7
 1006d40:	29cf883a 	add	r7,r5,r7
 1006d44:	38c00217 	ldw	r3,8(r7)
 1006d48:	01404074 	movhi	r5,257
 1006d4c:	297ff404 	addi	r5,r5,-48
 1006d50:	19c06126 	beq	r3,r7,1006ed8 <_free_r+0x25c>
 1006d54:	013fff04 	movi	r4,-4
 1006d58:	19400117 	ldw	r5,4(r3)
 1006d5c:	290a703a 	and	r5,r5,r4
 1006d60:	1140022e 	bgeu	r2,r5,1006d6c <_free_r+0xf0>
 1006d64:	18c00217 	ldw	r3,8(r3)
 1006d68:	38fffb1e 	bne	r7,r3,1006d58 <_free_r+0xdc>
 1006d6c:	18800317 	ldw	r2,12(r3)
 1006d70:	30800315 	stw	r2,12(r6)
 1006d74:	30c00215 	stw	r3,8(r6)
 1006d78:	11800215 	stw	r6,8(r2)
 1006d7c:	19800315 	stw	r6,12(r3)
 1006d80:	8809883a 	mov	r4,r17
 1006d84:	dfc00217 	ldw	ra,8(sp)
 1006d88:	dc400117 	ldw	r17,4(sp)
 1006d8c:	dc000017 	ldw	r16,0(sp)
 1006d90:	dec00304 	addi	sp,sp,12
 1006d94:	100b6181 	jmpi	100b618 <__malloc_unlock>
 1006d98:	813ffe17 	ldw	r4,-8(r16)
 1006d9c:	2a400204 	addi	r9,r5,8
 1006da0:	310dc83a 	sub	r6,r6,r4
 1006da4:	32000217 	ldw	r8,8(r6)
 1006da8:	1105883a 	add	r2,r2,r4
 1006dac:	42404326 	beq	r8,r9,1006ebc <_free_r+0x240>
 1006db0:	32400317 	ldw	r9,12(r6)
 1006db4:	0009883a 	mov	r4,zero
 1006db8:	42400315 	stw	r9,12(r8)
 1006dbc:	4a000215 	stw	r8,8(r9)
 1006dc0:	003fc606 	br	1006cdc <_free_r+0x60>
 1006dc4:	dfc00217 	ldw	ra,8(sp)
 1006dc8:	dc400117 	ldw	r17,4(sp)
 1006dcc:	dc000017 	ldw	r16,0(sp)
 1006dd0:	dec00304 	addi	sp,sp,12
 1006dd4:	f800283a 	ret
 1006dd8:	1004d0fa 	srli	r2,r2,3
 1006ddc:	02000044 	movi	r8,1
 1006de0:	29c00117 	ldw	r7,4(r5)
 1006de4:	1087883a 	add	r3,r2,r2
 1006de8:	18c7883a 	add	r3,r3,r3
 1006dec:	1005d0ba 	srai	r2,r2,2
 1006df0:	18c7883a 	add	r3,r3,r3
 1006df4:	28c7883a 	add	r3,r5,r3
 1006df8:	19000217 	ldw	r4,8(r3)
 1006dfc:	4084983a 	sll	r2,r8,r2
 1006e00:	30c00315 	stw	r3,12(r6)
 1006e04:	31000215 	stw	r4,8(r6)
 1006e08:	11c4b03a 	or	r2,r2,r7
 1006e0c:	21800315 	stw	r6,12(r4)
 1006e10:	8809883a 	mov	r4,r17
 1006e14:	28800115 	stw	r2,4(r5)
 1006e18:	19800215 	stw	r6,8(r3)
 1006e1c:	dfc00217 	ldw	ra,8(sp)
 1006e20:	dc400117 	ldw	r17,4(sp)
 1006e24:	dc000017 	ldw	r16,0(sp)
 1006e28:	dec00304 	addi	sp,sp,12
 1006e2c:	100b6181 	jmpi	100b618 <__malloc_unlock>
 1006e30:	02004074 	movhi	r8,257
 1006e34:	423ff604 	addi	r8,r8,-40
 1006e38:	3a3faf1e 	bne	r7,r8,1006cf8 <_free_r+0x7c>
 1006e3c:	29800515 	stw	r6,20(r5)
 1006e40:	29800415 	stw	r6,16(r5)
 1006e44:	11000054 	ori	r4,r2,1
 1006e48:	3087883a 	add	r3,r6,r2
 1006e4c:	31c00315 	stw	r7,12(r6)
 1006e50:	31c00215 	stw	r7,8(r6)
 1006e54:	31000115 	stw	r4,4(r6)
 1006e58:	18800015 	stw	r2,0(r3)
 1006e5c:	003fc806 	br	1006d80 <_free_r+0x104>
 1006e60:	4200004c 	andi	r8,r8,1
 1006e64:	3885883a 	add	r2,r7,r2
 1006e68:	4000071e 	bne	r8,zero,1006e88 <_free_r+0x20c>
 1006e6c:	81fffe17 	ldw	r7,-8(r16)
 1006e70:	31cdc83a 	sub	r6,r6,r7
 1006e74:	30c00317 	ldw	r3,12(r6)
 1006e78:	31000217 	ldw	r4,8(r6)
 1006e7c:	11c5883a 	add	r2,r2,r7
 1006e80:	20c00315 	stw	r3,12(r4)
 1006e84:	19000215 	stw	r4,8(r3)
 1006e88:	00c04074 	movhi	r3,257
 1006e8c:	18c5e304 	addi	r3,r3,6028
 1006e90:	18c00017 	ldw	r3,0(r3)
 1006e94:	11000054 	ori	r4,r2,1
 1006e98:	31000115 	stw	r4,4(r6)
 1006e9c:	29800215 	stw	r6,8(r5)
 1006ea0:	10ffb736 	bltu	r2,r3,1006d80 <_free_r+0x104>
 1006ea4:	00804074 	movhi	r2,257
 1006ea8:	1085f904 	addi	r2,r2,6116
 1006eac:	11400017 	ldw	r5,0(r2)
 1006eb0:	8809883a 	mov	r4,r17
 1006eb4:	1006b400 	call	1006b40 <_malloc_trim_r>
 1006eb8:	003fb106 	br	1006d80 <_free_r+0x104>
 1006ebc:	01000044 	movi	r4,1
 1006ec0:	003f8606 	br	1006cdc <_free_r+0x60>
 1006ec4:	01000504 	movi	r4,20
 1006ec8:	20c00b36 	bltu	r4,r3,1006ef8 <_free_r+0x27c>
 1006ecc:	190016c4 	addi	r4,r3,91
 1006ed0:	210f883a 	add	r7,r4,r4
 1006ed4:	003f9806 	br	1006d38 <_free_r+0xbc>
 1006ed8:	2009d0ba 	srai	r4,r4,2
 1006edc:	00800044 	movi	r2,1
 1006ee0:	29c00117 	ldw	r7,4(r5)
 1006ee4:	1108983a 	sll	r4,r2,r4
 1006ee8:	1805883a 	mov	r2,r3
 1006eec:	21c8b03a 	or	r4,r4,r7
 1006ef0:	29000115 	stw	r4,4(r5)
 1006ef4:	003f9e06 	br	1006d70 <_free_r+0xf4>
 1006ef8:	01001504 	movi	r4,84
 1006efc:	20c00436 	bltu	r4,r3,1006f10 <_free_r+0x294>
 1006f00:	1008d33a 	srli	r4,r2,12
 1006f04:	21001b84 	addi	r4,r4,110
 1006f08:	210f883a 	add	r7,r4,r4
 1006f0c:	003f8a06 	br	1006d38 <_free_r+0xbc>
 1006f10:	01005504 	movi	r4,340
 1006f14:	20c00436 	bltu	r4,r3,1006f28 <_free_r+0x2ac>
 1006f18:	1008d3fa 	srli	r4,r2,15
 1006f1c:	21001dc4 	addi	r4,r4,119
 1006f20:	210f883a 	add	r7,r4,r4
 1006f24:	003f8406 	br	1006d38 <_free_r+0xbc>
 1006f28:	01015504 	movi	r4,1364
 1006f2c:	20c00436 	bltu	r4,r3,1006f40 <_free_r+0x2c4>
 1006f30:	1008d4ba 	srli	r4,r2,18
 1006f34:	21001f04 	addi	r4,r4,124
 1006f38:	210f883a 	add	r7,r4,r4
 1006f3c:	003f7e06 	br	1006d38 <_free_r+0xbc>
 1006f40:	01c03f04 	movi	r7,252
 1006f44:	01001f84 	movi	r4,126
 1006f48:	003f7b06 	br	1006d38 <_free_r+0xbc>

01006f4c <__sfvwrite_r>:
 1006f4c:	30800217 	ldw	r2,8(r6)
 1006f50:	defff504 	addi	sp,sp,-44
 1006f54:	dd400615 	stw	r21,24(sp)
 1006f58:	dd000515 	stw	r20,20(sp)
 1006f5c:	dc000115 	stw	r16,4(sp)
 1006f60:	dfc00a15 	stw	ra,40(sp)
 1006f64:	df000915 	stw	fp,36(sp)
 1006f68:	ddc00815 	stw	r23,32(sp)
 1006f6c:	dd800715 	stw	r22,28(sp)
 1006f70:	dcc00415 	stw	r19,16(sp)
 1006f74:	dc800315 	stw	r18,12(sp)
 1006f78:	dc400215 	stw	r17,8(sp)
 1006f7c:	3029883a 	mov	r20,r6
 1006f80:	202b883a 	mov	r21,r4
 1006f84:	2821883a 	mov	r16,r5
 1006f88:	10002126 	beq	r2,zero,1007010 <__sfvwrite_r+0xc4>
 1006f8c:	2880030b 	ldhu	r2,12(r5)
 1006f90:	10c0020c 	andi	r3,r2,8
 1006f94:	18ffffcc 	andi	r3,r3,65535
 1006f98:	18e0001c 	xori	r3,r3,32768
 1006f9c:	18e00004 	addi	r3,r3,-32768
 1006fa0:	18002826 	beq	r3,zero,1007044 <__sfvwrite_r+0xf8>
 1006fa4:	28c00417 	ldw	r3,16(r5)
 1006fa8:	18002626 	beq	r3,zero,1007044 <__sfvwrite_r+0xf8>
 1006fac:	10c0008c 	andi	r3,r2,2
 1006fb0:	18ffffcc 	andi	r3,r3,65535
 1006fb4:	18e0001c 	xori	r3,r3,32768
 1006fb8:	18e00004 	addi	r3,r3,-32768
 1006fbc:	a4400017 	ldw	r17,0(r20)
 1006fc0:	18002b26 	beq	r3,zero,1007070 <__sfvwrite_r+0x124>
 1006fc4:	0027883a 	mov	r19,zero
 1006fc8:	0025883a 	mov	r18,zero
 1006fcc:	05810004 	movi	r22,1024
 1006fd0:	980d883a 	mov	r6,r19
 1006fd4:	a809883a 	mov	r4,r21
 1006fd8:	90004f26 	beq	r18,zero,1007118 <__sfvwrite_r+0x1cc>
 1006fdc:	900f883a 	mov	r7,r18
 1006fe0:	81400717 	ldw	r5,28(r16)
 1006fe4:	b480012e 	bgeu	r22,r18,1006fec <__sfvwrite_r+0xa0>
 1006fe8:	01c10004 	movi	r7,1024
 1006fec:	80800917 	ldw	r2,36(r16)
 1006ff0:	103ee83a 	callr	r2
 1006ff4:	0080540e 	bge	zero,r2,1007148 <__sfvwrite_r+0x1fc>
 1006ff8:	a0c00217 	ldw	r3,8(r20)
 1006ffc:	98a7883a 	add	r19,r19,r2
 1007000:	90a5c83a 	sub	r18,r18,r2
 1007004:	1885c83a 	sub	r2,r3,r2
 1007008:	a0800215 	stw	r2,8(r20)
 100700c:	103ff01e 	bne	r2,zero,1006fd0 <__sfvwrite_r+0x84>
 1007010:	0005883a 	mov	r2,zero
 1007014:	dfc00a17 	ldw	ra,40(sp)
 1007018:	df000917 	ldw	fp,36(sp)
 100701c:	ddc00817 	ldw	r23,32(sp)
 1007020:	dd800717 	ldw	r22,28(sp)
 1007024:	dd400617 	ldw	r21,24(sp)
 1007028:	dd000517 	ldw	r20,20(sp)
 100702c:	dcc00417 	ldw	r19,16(sp)
 1007030:	dc800317 	ldw	r18,12(sp)
 1007034:	dc400217 	ldw	r17,8(sp)
 1007038:	dc000117 	ldw	r16,4(sp)
 100703c:	dec00b04 	addi	sp,sp,44
 1007040:	f800283a 	ret
 1007044:	a809883a 	mov	r4,r21
 1007048:	800b883a 	mov	r5,r16
 100704c:	1004b740 	call	1004b74 <__swsetup_r>
 1007050:	1000f01e 	bne	r2,zero,1007414 <__sfvwrite_r+0x4c8>
 1007054:	8080030b 	ldhu	r2,12(r16)
 1007058:	a4400017 	ldw	r17,0(r20)
 100705c:	10c0008c 	andi	r3,r2,2
 1007060:	18ffffcc 	andi	r3,r3,65535
 1007064:	18e0001c 	xori	r3,r3,32768
 1007068:	18e00004 	addi	r3,r3,-32768
 100706c:	183fd51e 	bne	r3,zero,1006fc4 <__sfvwrite_r+0x78>
 1007070:	10c0004c 	andi	r3,r2,1
 1007074:	002d883a 	mov	r22,zero
 1007078:	1800381e 	bne	r3,zero,100715c <__sfvwrite_r+0x210>
 100707c:	0025883a 	mov	r18,zero
 1007080:	90002126 	beq	r18,zero,1007108 <__sfvwrite_r+0x1bc>
 1007084:	10c0800c 	andi	r3,r2,512
 1007088:	18ffffcc 	andi	r3,r3,65535
 100708c:	18e0001c 	xori	r3,r3,32768
 1007090:	18e00004 	addi	r3,r3,-32768
 1007094:	84c00217 	ldw	r19,8(r16)
 1007098:	18006b26 	beq	r3,zero,1007248 <__sfvwrite_r+0x2fc>
 100709c:	980f883a 	mov	r7,r19
 10070a0:	94c08636 	bltu	r18,r19,10072bc <__sfvwrite_r+0x370>
 10070a4:	10c1200c 	andi	r3,r2,1152
 10070a8:	18009f1e 	bne	r3,zero,1007328 <__sfvwrite_r+0x3dc>
 10070ac:	81000017 	ldw	r4,0(r16)
 10070b0:	982f883a 	mov	r23,r19
 10070b4:	9039883a 	mov	fp,r18
 10070b8:	9027883a 	mov	r19,r18
 10070bc:	380d883a 	mov	r6,r7
 10070c0:	b00b883a 	mov	r5,r22
 10070c4:	d9c00015 	stw	r7,0(sp)
 10070c8:	10078340 	call	1007834 <memmove>
 10070cc:	d9c00017 	ldw	r7,0(sp)
 10070d0:	81000217 	ldw	r4,8(r16)
 10070d4:	80800017 	ldw	r2,0(r16)
 10070d8:	25efc83a 	sub	r23,r4,r23
 10070dc:	11cf883a 	add	r7,r2,r7
 10070e0:	85c00215 	stw	r23,8(r16)
 10070e4:	81c00015 	stw	r7,0(r16)
 10070e8:	a0800217 	ldw	r2,8(r20)
 10070ec:	b72d883a 	add	r22,r22,fp
 10070f0:	9725c83a 	sub	r18,r18,fp
 10070f4:	14e7c83a 	sub	r19,r2,r19
 10070f8:	a4c00215 	stw	r19,8(r20)
 10070fc:	983fc426 	beq	r19,zero,1007010 <__sfvwrite_r+0xc4>
 1007100:	8080030b 	ldhu	r2,12(r16)
 1007104:	903fdf1e 	bne	r18,zero,1007084 <__sfvwrite_r+0x138>
 1007108:	8d800017 	ldw	r22,0(r17)
 100710c:	8c800117 	ldw	r18,4(r17)
 1007110:	8c400204 	addi	r17,r17,8
 1007114:	003fda06 	br	1007080 <__sfvwrite_r+0x134>
 1007118:	8cc00017 	ldw	r19,0(r17)
 100711c:	8c800117 	ldw	r18,4(r17)
 1007120:	8c400204 	addi	r17,r17,8
 1007124:	003faa06 	br	1006fd0 <__sfvwrite_r+0x84>
 1007128:	1008d040 	call	1008d04 <_realloc_r>
 100712c:	102f883a 	mov	r23,r2
 1007130:	10009f1e 	bne	r2,zero,10073b0 <__sfvwrite_r+0x464>
 1007134:	81400417 	ldw	r5,16(r16)
 1007138:	a809883a 	mov	r4,r21
 100713c:	1006c7c0 	call	1006c7c <_free_r>
 1007140:	00800304 	movi	r2,12
 1007144:	a8800015 	stw	r2,0(r21)
 1007148:	80c0030b 	ldhu	r3,12(r16)
 100714c:	00bfffc4 	movi	r2,-1
 1007150:	18c01014 	ori	r3,r3,64
 1007154:	80c0030d 	sth	r3,12(r16)
 1007158:	003fae06 	br	1007014 <__sfvwrite_r+0xc8>
 100715c:	0007883a 	mov	r3,zero
 1007160:	0039883a 	mov	fp,zero
 1007164:	0025883a 	mov	r18,zero
 1007168:	90001e26 	beq	r18,zero,10071e4 <__sfvwrite_r+0x298>
 100716c:	18006526 	beq	r3,zero,1007304 <__sfvwrite_r+0x3b8>
 1007170:	b02f883a 	mov	r23,r22
 1007174:	9580012e 	bgeu	r18,r22,100717c <__sfvwrite_r+0x230>
 1007178:	902f883a 	mov	r23,r18
 100717c:	81000017 	ldw	r4,0(r16)
 1007180:	80800417 	ldw	r2,16(r16)
 1007184:	84c00217 	ldw	r19,8(r16)
 1007188:	81c00517 	ldw	r7,20(r16)
 100718c:	1100022e 	bgeu	r2,r4,1007198 <__sfvwrite_r+0x24c>
 1007190:	99e7883a 	add	r19,r19,r7
 1007194:	9dc01816 	blt	r19,r23,10071f8 <__sfvwrite_r+0x2ac>
 1007198:	b9c03b16 	blt	r23,r7,1007288 <__sfvwrite_r+0x33c>
 100719c:	80800917 	ldw	r2,36(r16)
 10071a0:	81400717 	ldw	r5,28(r16)
 10071a4:	a809883a 	mov	r4,r21
 10071a8:	d8c00015 	stw	r3,0(sp)
 10071ac:	e00d883a 	mov	r6,fp
 10071b0:	103ee83a 	callr	r2
 10071b4:	1027883a 	mov	r19,r2
 10071b8:	d8c00017 	ldw	r3,0(sp)
 10071bc:	00bfe20e 	bge	zero,r2,1007148 <__sfvwrite_r+0x1fc>
 10071c0:	b4edc83a 	sub	r22,r22,r19
 10071c4:	b0001a26 	beq	r22,zero,1007230 <__sfvwrite_r+0x2e4>
 10071c8:	a0800217 	ldw	r2,8(r20)
 10071cc:	e4f9883a 	add	fp,fp,r19
 10071d0:	94e5c83a 	sub	r18,r18,r19
 10071d4:	14e7c83a 	sub	r19,r2,r19
 10071d8:	a4c00215 	stw	r19,8(r20)
 10071dc:	983f8c26 	beq	r19,zero,1007010 <__sfvwrite_r+0xc4>
 10071e0:	903fe21e 	bne	r18,zero,100716c <__sfvwrite_r+0x220>
 10071e4:	8f000017 	ldw	fp,0(r17)
 10071e8:	8c800117 	ldw	r18,4(r17)
 10071ec:	0007883a 	mov	r3,zero
 10071f0:	8c400204 	addi	r17,r17,8
 10071f4:	003fdc06 	br	1007168 <__sfvwrite_r+0x21c>
 10071f8:	e00b883a 	mov	r5,fp
 10071fc:	980d883a 	mov	r6,r19
 1007200:	d8c00015 	stw	r3,0(sp)
 1007204:	10078340 	call	1007834 <memmove>
 1007208:	80800017 	ldw	r2,0(r16)
 100720c:	a809883a 	mov	r4,r21
 1007210:	800b883a 	mov	r5,r16
 1007214:	14c5883a 	add	r2,r2,r19
 1007218:	80800015 	stw	r2,0(r16)
 100721c:	10065a40 	call	10065a4 <_fflush_r>
 1007220:	d8c00017 	ldw	r3,0(sp)
 1007224:	103fc81e 	bne	r2,zero,1007148 <__sfvwrite_r+0x1fc>
 1007228:	b4edc83a 	sub	r22,r22,r19
 100722c:	b03fe61e 	bne	r22,zero,10071c8 <__sfvwrite_r+0x27c>
 1007230:	a809883a 	mov	r4,r21
 1007234:	800b883a 	mov	r5,r16
 1007238:	10065a40 	call	10065a4 <_fflush_r>
 100723c:	103fc21e 	bne	r2,zero,1007148 <__sfvwrite_r+0x1fc>
 1007240:	0007883a 	mov	r3,zero
 1007244:	003fe006 	br	10071c8 <__sfvwrite_r+0x27c>
 1007248:	81000017 	ldw	r4,0(r16)
 100724c:	80800417 	ldw	r2,16(r16)
 1007250:	1100022e 	bgeu	r2,r4,100725c <__sfvwrite_r+0x310>
 1007254:	9839883a 	mov	fp,r19
 1007258:	9c806036 	bltu	r19,r18,10073dc <__sfvwrite_r+0x490>
 100725c:	81c00517 	ldw	r7,20(r16)
 1007260:	91c01c36 	bltu	r18,r7,10072d4 <__sfvwrite_r+0x388>
 1007264:	80800917 	ldw	r2,36(r16)
 1007268:	81400717 	ldw	r5,28(r16)
 100726c:	a809883a 	mov	r4,r21
 1007270:	b00d883a 	mov	r6,r22
 1007274:	103ee83a 	callr	r2
 1007278:	1027883a 	mov	r19,r2
 100727c:	00bfb20e 	bge	zero,r2,1007148 <__sfvwrite_r+0x1fc>
 1007280:	1039883a 	mov	fp,r2
 1007284:	003f9806 	br	10070e8 <__sfvwrite_r+0x19c>
 1007288:	b80d883a 	mov	r6,r23
 100728c:	e00b883a 	mov	r5,fp
 1007290:	d8c00015 	stw	r3,0(sp)
 1007294:	10078340 	call	1007834 <memmove>
 1007298:	80800217 	ldw	r2,8(r16)
 100729c:	81000017 	ldw	r4,0(r16)
 10072a0:	b827883a 	mov	r19,r23
 10072a4:	15c5c83a 	sub	r2,r2,r23
 10072a8:	25ef883a 	add	r23,r4,r23
 10072ac:	80800215 	stw	r2,8(r16)
 10072b0:	85c00015 	stw	r23,0(r16)
 10072b4:	d8c00017 	ldw	r3,0(sp)
 10072b8:	003fc106 	br	10071c0 <__sfvwrite_r+0x274>
 10072bc:	81000017 	ldw	r4,0(r16)
 10072c0:	902f883a 	mov	r23,r18
 10072c4:	9039883a 	mov	fp,r18
 10072c8:	9027883a 	mov	r19,r18
 10072cc:	900f883a 	mov	r7,r18
 10072d0:	003f7a06 	br	10070bc <__sfvwrite_r+0x170>
 10072d4:	b00b883a 	mov	r5,r22
 10072d8:	900d883a 	mov	r6,r18
 10072dc:	10078340 	call	1007834 <memmove>
 10072e0:	80c00217 	ldw	r3,8(r16)
 10072e4:	80800017 	ldw	r2,0(r16)
 10072e8:	9027883a 	mov	r19,r18
 10072ec:	1c87c83a 	sub	r3,r3,r18
 10072f0:	1485883a 	add	r2,r2,r18
 10072f4:	80c00215 	stw	r3,8(r16)
 10072f8:	80800015 	stw	r2,0(r16)
 10072fc:	9039883a 	mov	fp,r18
 1007300:	003f7906 	br	10070e8 <__sfvwrite_r+0x19c>
 1007304:	e009883a 	mov	r4,fp
 1007308:	01400284 	movi	r5,10
 100730c:	900d883a 	mov	r6,r18
 1007310:	100773c0 	call	100773c <memchr>
 1007314:	10003c26 	beq	r2,zero,1007408 <__sfvwrite_r+0x4bc>
 1007318:	15800044 	addi	r22,r2,1
 100731c:	b72dc83a 	sub	r22,r22,fp
 1007320:	00c00044 	movi	r3,1
 1007324:	003f9206 	br	1007170 <__sfvwrite_r+0x224>
 1007328:	81000517 	ldw	r4,20(r16)
 100732c:	81400417 	ldw	r5,16(r16)
 1007330:	80c00017 	ldw	r3,0(r16)
 1007334:	210d883a 	add	r6,r4,r4
 1007338:	3109883a 	add	r4,r6,r4
 100733c:	2026d7fa 	srli	r19,r4,31
 1007340:	1979c83a 	sub	fp,r3,r5
 1007344:	e1800044 	addi	r6,fp,1
 1007348:	9909883a 	add	r4,r19,r4
 100734c:	2027d07a 	srai	r19,r4,1
 1007350:	3489883a 	add	r4,r6,r18
 1007354:	980d883a 	mov	r6,r19
 1007358:	9900022e 	bgeu	r19,r4,1007364 <__sfvwrite_r+0x418>
 100735c:	2027883a 	mov	r19,r4
 1007360:	200d883a 	mov	r6,r4
 1007364:	1081000c 	andi	r2,r2,1024
 1007368:	10bfffcc 	andi	r2,r2,65535
 100736c:	10a0001c 	xori	r2,r2,32768
 1007370:	10a00004 	addi	r2,r2,-32768
 1007374:	a809883a 	mov	r4,r21
 1007378:	103f6b26 	beq	r2,zero,1007128 <__sfvwrite_r+0x1dc>
 100737c:	300b883a 	mov	r5,r6
 1007380:	1001d480 	call	1001d48 <_malloc_r>
 1007384:	102f883a 	mov	r23,r2
 1007388:	103f6d26 	beq	r2,zero,1007140 <__sfvwrite_r+0x1f4>
 100738c:	81400417 	ldw	r5,16(r16)
 1007390:	1009883a 	mov	r4,r2
 1007394:	e00d883a 	mov	r6,fp
 1007398:	10024cc0 	call	10024cc <memcpy>
 100739c:	8080030b 	ldhu	r2,12(r16)
 10073a0:	00fedfc4 	movi	r3,-1153
 10073a4:	10c4703a 	and	r2,r2,r3
 10073a8:	10802014 	ori	r2,r2,128
 10073ac:	8080030d 	sth	r2,12(r16)
 10073b0:	bf09883a 	add	r4,r23,fp
 10073b4:	9f07c83a 	sub	r3,r19,fp
 10073b8:	85c00415 	stw	r23,16(r16)
 10073bc:	84c00515 	stw	r19,20(r16)
 10073c0:	81000015 	stw	r4,0(r16)
 10073c4:	902f883a 	mov	r23,r18
 10073c8:	80c00215 	stw	r3,8(r16)
 10073cc:	9039883a 	mov	fp,r18
 10073d0:	9027883a 	mov	r19,r18
 10073d4:	900f883a 	mov	r7,r18
 10073d8:	003f3806 	br	10070bc <__sfvwrite_r+0x170>
 10073dc:	b00b883a 	mov	r5,r22
 10073e0:	980d883a 	mov	r6,r19
 10073e4:	10078340 	call	1007834 <memmove>
 10073e8:	80800017 	ldw	r2,0(r16)
 10073ec:	a809883a 	mov	r4,r21
 10073f0:	800b883a 	mov	r5,r16
 10073f4:	14c5883a 	add	r2,r2,r19
 10073f8:	80800015 	stw	r2,0(r16)
 10073fc:	10065a40 	call	10065a4 <_fflush_r>
 1007400:	103f3926 	beq	r2,zero,10070e8 <__sfvwrite_r+0x19c>
 1007404:	003f5006 	br	1007148 <__sfvwrite_r+0x1fc>
 1007408:	95800044 	addi	r22,r18,1
 100740c:	00c00044 	movi	r3,1
 1007410:	003f5706 	br	1007170 <__sfvwrite_r+0x224>
 1007414:	80c0030b 	ldhu	r3,12(r16)
 1007418:	00bfffc4 	movi	r2,-1
 100741c:	18c01014 	ori	r3,r3,64
 1007420:	80c0030d 	sth	r3,12(r16)
 1007424:	00c00244 	movi	r3,9
 1007428:	a8c00015 	stw	r3,0(r21)
 100742c:	003ef906 	br	1007014 <__sfvwrite_r+0xc8>

01007430 <_fwalk>:
 1007430:	defff904 	addi	sp,sp,-28
 1007434:	dcc00315 	stw	r19,12(sp)
 1007438:	24c0b804 	addi	r19,r4,736
 100743c:	dd400515 	stw	r21,20(sp)
 1007440:	dd000415 	stw	r20,16(sp)
 1007444:	dfc00615 	stw	ra,24(sp)
 1007448:	dc800215 	stw	r18,8(sp)
 100744c:	dc400115 	stw	r17,4(sp)
 1007450:	dc000015 	stw	r16,0(sp)
 1007454:	282b883a 	mov	r21,r5
 1007458:	0029883a 	mov	r20,zero
 100745c:	1006a680 	call	1006a68 <__sfp_lock_acquire>
 1007460:	98001226 	beq	r19,zero,10074ac <_fwalk+0x7c>
 1007464:	04bfffc4 	movi	r18,-1
 1007468:	9c400117 	ldw	r17,4(r19)
 100746c:	9c000217 	ldw	r16,8(r19)
 1007470:	8c7fffc4 	addi	r17,r17,-1
 1007474:	88000b16 	blt	r17,zero,10074a4 <_fwalk+0x74>
 1007478:	84000304 	addi	r16,r16,12
 100747c:	80c0000f 	ldh	r3,0(r16)
 1007480:	8c7fffc4 	addi	r17,r17,-1
 1007484:	813ffd04 	addi	r4,r16,-12
 1007488:	18000426 	beq	r3,zero,100749c <_fwalk+0x6c>
 100748c:	80c0008f 	ldh	r3,2(r16)
 1007490:	1c800226 	beq	r3,r18,100749c <_fwalk+0x6c>
 1007494:	a83ee83a 	callr	r21
 1007498:	a0a8b03a 	or	r20,r20,r2
 100749c:	84001704 	addi	r16,r16,92
 10074a0:	8cbff61e 	bne	r17,r18,100747c <_fwalk+0x4c>
 10074a4:	9cc00017 	ldw	r19,0(r19)
 10074a8:	983fef1e 	bne	r19,zero,1007468 <_fwalk+0x38>
 10074ac:	1006a6c0 	call	1006a6c <__sfp_lock_release>
 10074b0:	a005883a 	mov	r2,r20
 10074b4:	dfc00617 	ldw	ra,24(sp)
 10074b8:	dd400517 	ldw	r21,20(sp)
 10074bc:	dd000417 	ldw	r20,16(sp)
 10074c0:	dcc00317 	ldw	r19,12(sp)
 10074c4:	dc800217 	ldw	r18,8(sp)
 10074c8:	dc400117 	ldw	r17,4(sp)
 10074cc:	dc000017 	ldw	r16,0(sp)
 10074d0:	dec00704 	addi	sp,sp,28
 10074d4:	f800283a 	ret

010074d8 <_fwalk_reent>:
 10074d8:	defff804 	addi	sp,sp,-32
 10074dc:	dcc00315 	stw	r19,12(sp)
 10074e0:	24c0b804 	addi	r19,r4,736
 10074e4:	dd800615 	stw	r22,24(sp)
 10074e8:	dd400515 	stw	r21,20(sp)
 10074ec:	dd000415 	stw	r20,16(sp)
 10074f0:	dfc00715 	stw	ra,28(sp)
 10074f4:	dc800215 	stw	r18,8(sp)
 10074f8:	dc400115 	stw	r17,4(sp)
 10074fc:	dc000015 	stw	r16,0(sp)
 1007500:	2029883a 	mov	r20,r4
 1007504:	282b883a 	mov	r21,r5
 1007508:	002d883a 	mov	r22,zero
 100750c:	1006a680 	call	1006a68 <__sfp_lock_acquire>
 1007510:	98001326 	beq	r19,zero,1007560 <_fwalk_reent+0x88>
 1007514:	04bfffc4 	movi	r18,-1
 1007518:	9c400117 	ldw	r17,4(r19)
 100751c:	9c000217 	ldw	r16,8(r19)
 1007520:	8c7fffc4 	addi	r17,r17,-1
 1007524:	88000c16 	blt	r17,zero,1007558 <_fwalk_reent+0x80>
 1007528:	84000304 	addi	r16,r16,12
 100752c:	80c0000f 	ldh	r3,0(r16)
 1007530:	8c7fffc4 	addi	r17,r17,-1
 1007534:	817ffd04 	addi	r5,r16,-12
 1007538:	18000526 	beq	r3,zero,1007550 <_fwalk_reent+0x78>
 100753c:	80c0008f 	ldh	r3,2(r16)
 1007540:	a009883a 	mov	r4,r20
 1007544:	1c800226 	beq	r3,r18,1007550 <_fwalk_reent+0x78>
 1007548:	a83ee83a 	callr	r21
 100754c:	b0acb03a 	or	r22,r22,r2
 1007550:	84001704 	addi	r16,r16,92
 1007554:	8cbff51e 	bne	r17,r18,100752c <_fwalk_reent+0x54>
 1007558:	9cc00017 	ldw	r19,0(r19)
 100755c:	983fee1e 	bne	r19,zero,1007518 <_fwalk_reent+0x40>
 1007560:	1006a6c0 	call	1006a6c <__sfp_lock_release>
 1007564:	b005883a 	mov	r2,r22
 1007568:	dfc00717 	ldw	ra,28(sp)
 100756c:	dd800617 	ldw	r22,24(sp)
 1007570:	dd400517 	ldw	r21,20(sp)
 1007574:	dd000417 	ldw	r20,16(sp)
 1007578:	dcc00317 	ldw	r19,12(sp)
 100757c:	dc800217 	ldw	r18,8(sp)
 1007580:	dc400117 	ldw	r17,4(sp)
 1007584:	dc000017 	ldw	r16,0(sp)
 1007588:	dec00804 	addi	sp,sp,32
 100758c:	f800283a 	ret

01007590 <_isatty_r>:
 1007590:	defffd04 	addi	sp,sp,-12
 1007594:	dc400115 	stw	r17,4(sp)
 1007598:	dc000015 	stw	r16,0(sp)
 100759c:	2023883a 	mov	r17,r4
 10075a0:	04004074 	movhi	r16,257
 10075a4:	8405f604 	addi	r16,r16,6104
 10075a8:	2809883a 	mov	r4,r5
 10075ac:	dfc00215 	stw	ra,8(sp)
 10075b0:	80000015 	stw	zero,0(r16)
 10075b4:	100b3b80 	call	100b3b8 <isatty>
 10075b8:	00ffffc4 	movi	r3,-1
 10075bc:	10c00526 	beq	r2,r3,10075d4 <_isatty_r+0x44>
 10075c0:	dfc00217 	ldw	ra,8(sp)
 10075c4:	dc400117 	ldw	r17,4(sp)
 10075c8:	dc000017 	ldw	r16,0(sp)
 10075cc:	dec00304 	addi	sp,sp,12
 10075d0:	f800283a 	ret
 10075d4:	80c00017 	ldw	r3,0(r16)
 10075d8:	183ff926 	beq	r3,zero,10075c0 <_isatty_r+0x30>
 10075dc:	88c00015 	stw	r3,0(r17)
 10075e0:	dfc00217 	ldw	ra,8(sp)
 10075e4:	dc400117 	ldw	r17,4(sp)
 10075e8:	dc000017 	ldw	r16,0(sp)
 10075ec:	dec00304 	addi	sp,sp,12
 10075f0:	f800283a 	ret

010075f4 <_setlocale_r>:
 10075f4:	defffc04 	addi	sp,sp,-16
 10075f8:	dc800215 	stw	r18,8(sp)
 10075fc:	dc400115 	stw	r17,4(sp)
 1007600:	dc000015 	stw	r16,0(sp)
 1007604:	dfc00315 	stw	ra,12(sp)
 1007608:	3021883a 	mov	r16,r6
 100760c:	2023883a 	mov	r17,r4
 1007610:	2825883a 	mov	r18,r5
 1007614:	30001626 	beq	r6,zero,1007670 <_setlocale_r+0x7c>
 1007618:	3009883a 	mov	r4,r6
 100761c:	01404074 	movhi	r5,257
 1007620:	297e6104 	addi	r5,r5,-1660
 1007624:	10093640 	call	1009364 <strcmp>
 1007628:	10000a1e 	bne	r2,zero,1007654 <_setlocale_r+0x60>
 100762c:	8c800c15 	stw	r18,48(r17)
 1007630:	8c000d15 	stw	r16,52(r17)
 1007634:	00804074 	movhi	r2,257
 1007638:	10be6104 	addi	r2,r2,-1660
 100763c:	dfc00317 	ldw	ra,12(sp)
 1007640:	dc800217 	ldw	r18,8(sp)
 1007644:	dc400117 	ldw	r17,4(sp)
 1007648:	dc000017 	ldw	r16,0(sp)
 100764c:	dec00404 	addi	sp,sp,16
 1007650:	f800283a 	ret
 1007654:	8009883a 	mov	r4,r16
 1007658:	01404074 	movhi	r5,257
 100765c:	297e6b04 	addi	r5,r5,-1620
 1007660:	10093640 	call	1009364 <strcmp>
 1007664:	103ff126 	beq	r2,zero,100762c <_setlocale_r+0x38>
 1007668:	0005883a 	mov	r2,zero
 100766c:	003ff306 	br	100763c <_setlocale_r+0x48>
 1007670:	00804074 	movhi	r2,257
 1007674:	10be6104 	addi	r2,r2,-1660
 1007678:	dfc00317 	ldw	ra,12(sp)
 100767c:	dc800217 	ldw	r18,8(sp)
 1007680:	dc400117 	ldw	r17,4(sp)
 1007684:	dc000017 	ldw	r16,0(sp)
 1007688:	dec00404 	addi	sp,sp,16
 100768c:	f800283a 	ret

01007690 <__locale_charset>:
 1007690:	00804074 	movhi	r2,257
 1007694:	10be8004 	addi	r2,r2,-1536
 1007698:	f800283a 	ret

0100769c <_localeconv_r>:
 100769c:	00804074 	movhi	r2,257
 10076a0:	10be8404 	addi	r2,r2,-1520
 10076a4:	f800283a 	ret

010076a8 <setlocale>:
 10076a8:	00c04074 	movhi	r3,257
 10076ac:	18c5e104 	addi	r3,r3,6020
 10076b0:	2005883a 	mov	r2,r4
 10076b4:	19000017 	ldw	r4,0(r3)
 10076b8:	280d883a 	mov	r6,r5
 10076bc:	100b883a 	mov	r5,r2
 10076c0:	10075f41 	jmpi	10075f4 <_setlocale_r>

010076c4 <localeconv>:
 10076c4:	00804074 	movhi	r2,257
 10076c8:	10be8404 	addi	r2,r2,-1520
 10076cc:	f800283a 	ret

010076d0 <_lseek_r>:
 10076d0:	defffd04 	addi	sp,sp,-12
 10076d4:	dc400115 	stw	r17,4(sp)
 10076d8:	dc000015 	stw	r16,0(sp)
 10076dc:	2023883a 	mov	r17,r4
 10076e0:	04004074 	movhi	r16,257
 10076e4:	8405f604 	addi	r16,r16,6104
 10076e8:	2809883a 	mov	r4,r5
 10076ec:	300b883a 	mov	r5,r6
 10076f0:	380d883a 	mov	r6,r7
 10076f4:	dfc00215 	stw	ra,8(sp)
 10076f8:	80000015 	stw	zero,0(r16)
 10076fc:	100b4ac0 	call	100b4ac <lseek>
 1007700:	00ffffc4 	movi	r3,-1
 1007704:	10c00526 	beq	r2,r3,100771c <_lseek_r+0x4c>
 1007708:	dfc00217 	ldw	ra,8(sp)
 100770c:	dc400117 	ldw	r17,4(sp)
 1007710:	dc000017 	ldw	r16,0(sp)
 1007714:	dec00304 	addi	sp,sp,12
 1007718:	f800283a 	ret
 100771c:	80c00017 	ldw	r3,0(r16)
 1007720:	183ff926 	beq	r3,zero,1007708 <_lseek_r+0x38>
 1007724:	88c00015 	stw	r3,0(r17)
 1007728:	dfc00217 	ldw	ra,8(sp)
 100772c:	dc400117 	ldw	r17,4(sp)
 1007730:	dc000017 	ldw	r16,0(sp)
 1007734:	dec00304 	addi	sp,sp,12
 1007738:	f800283a 	ret

0100773c <memchr>:
 100773c:	008000c4 	movi	r2,3
 1007740:	29403fcc 	andi	r5,r5,255
 1007744:	1180282e 	bgeu	r2,r6,10077e8 <memchr+0xac>
 1007748:	2086703a 	and	r3,r4,r2
 100774c:	1800351e 	bne	r3,zero,1007824 <memchr+0xe8>
 1007750:	2816923a 	slli	r11,r5,8
 1007754:	2093883a 	add	r9,r4,r2
 1007758:	22000084 	addi	r8,r4,2
 100775c:	5957883a 	add	r11,r11,r5
 1007760:	5816923a 	slli	r11,r11,8
 1007764:	20c00044 	addi	r3,r4,1
 1007768:	037fbff4 	movhi	r13,65279
 100776c:	6b7fbfc4 	addi	r13,r13,-257
 1007770:	5957883a 	add	r11,r11,r5
 1007774:	5816923a 	slli	r11,r11,8
 1007778:	03202074 	movhi	r12,32897
 100777c:	63202004 	addi	r12,r12,-32640
 1007780:	101d883a 	mov	r14,r2
 1007784:	5957883a 	add	r11,r11,r5
 1007788:	21c00017 	ldw	r7,0(r4)
 100778c:	31bfff04 	addi	r6,r6,-4
 1007790:	1805883a 	mov	r2,r3
 1007794:	3acef03a 	xor	r7,r7,r11
 1007798:	3b55883a 	add	r10,r7,r13
 100779c:	01ce303a 	nor	r7,zero,r7
 10077a0:	51ce703a 	and	r7,r10,r7
 10077a4:	3b0e703a 	and	r7,r7,r12
 10077a8:	38000a26 	beq	r7,zero,10077d4 <memchr+0x98>
 10077ac:	21c00003 	ldbu	r7,0(r4)
 10077b0:	39401e26 	beq	r7,r5,100782c <memchr+0xf0>
 10077b4:	19c00003 	ldbu	r7,0(r3)
 10077b8:	39401926 	beq	r7,r5,1007820 <memchr+0xe4>
 10077bc:	41c00003 	ldbu	r7,0(r8)
 10077c0:	4005883a 	mov	r2,r8
 10077c4:	39401626 	beq	r7,r5,1007820 <memchr+0xe4>
 10077c8:	49c00003 	ldbu	r7,0(r9)
 10077cc:	4805883a 	mov	r2,r9
 10077d0:	39401326 	beq	r7,r5,1007820 <memchr+0xe4>
 10077d4:	21000104 	addi	r4,r4,4
 10077d8:	4a400104 	addi	r9,r9,4
 10077dc:	42000104 	addi	r8,r8,4
 10077e0:	18c00104 	addi	r3,r3,4
 10077e4:	71bfe836 	bltu	r14,r6,1007788 <memchr+0x4c>
 10077e8:	2005883a 	mov	r2,r4
 10077ec:	30000a26 	beq	r6,zero,1007818 <memchr+0xdc>
 10077f0:	10c00003 	ldbu	r3,0(r2)
 10077f4:	19400a26 	beq	r3,r5,1007820 <memchr+0xe4>
 10077f8:	10c00044 	addi	r3,r2,1
 10077fc:	118d883a 	add	r6,r2,r6
 1007800:	00000306 	br	1007810 <memchr+0xd4>
 1007804:	11000003 	ldbu	r4,0(r2)
 1007808:	18c00044 	addi	r3,r3,1
 100780c:	21400426 	beq	r4,r5,1007820 <memchr+0xe4>
 1007810:	1805883a 	mov	r2,r3
 1007814:	19bffb1e 	bne	r3,r6,1007804 <memchr+0xc8>
 1007818:	0005883a 	mov	r2,zero
 100781c:	f800283a 	ret
 1007820:	f800283a 	ret
 1007824:	2005883a 	mov	r2,r4
 1007828:	003ff106 	br	10077f0 <memchr+0xb4>
 100782c:	2005883a 	mov	r2,r4
 1007830:	f800283a 	ret

01007834 <memmove>:
 1007834:	defffb04 	addi	sp,sp,-20
 1007838:	dc000015 	stw	r16,0(sp)
 100783c:	dfc00415 	stw	ra,16(sp)
 1007840:	dcc00315 	stw	r19,12(sp)
 1007844:	dc800215 	stw	r18,8(sp)
 1007848:	dc400115 	stw	r17,4(sp)
 100784c:	2021883a 	mov	r16,r4
 1007850:	300f883a 	mov	r7,r6
 1007854:	2900122e 	bgeu	r5,r4,10078a0 <memmove+0x6c>
 1007858:	2987883a 	add	r3,r5,r6
 100785c:	20c0102e 	bgeu	r4,r3,10078a0 <memmove+0x6c>
 1007860:	218b883a 	add	r5,r4,r6
 1007864:	1989c83a 	sub	r4,r3,r6
 1007868:	30000526 	beq	r6,zero,1007880 <memmove+0x4c>
 100786c:	18ffffc4 	addi	r3,r3,-1
 1007870:	18800003 	ldbu	r2,0(r3)
 1007874:	297fffc4 	addi	r5,r5,-1
 1007878:	28800005 	stb	r2,0(r5)
 100787c:	193ffb1e 	bne	r3,r4,100786c <memmove+0x38>
 1007880:	8005883a 	mov	r2,r16
 1007884:	dfc00417 	ldw	ra,16(sp)
 1007888:	dcc00317 	ldw	r19,12(sp)
 100788c:	dc800217 	ldw	r18,8(sp)
 1007890:	dc400117 	ldw	r17,4(sp)
 1007894:	dc000017 	ldw	r16,0(sp)
 1007898:	dec00504 	addi	sp,sp,20
 100789c:	f800283a 	ret
 10078a0:	008003c4 	movi	r2,15
 10078a4:	1180422e 	bgeu	r2,r6,10079b0 <memmove+0x17c>
 10078a8:	2c04b03a 	or	r2,r5,r16
 10078ac:	108000cc 	andi	r2,r2,3
 10078b0:	10003f1e 	bne	r2,zero,10079b0 <memmove+0x17c>
 10078b4:	32bffc04 	addi	r10,r6,-16
 10078b8:	5014d13a 	srli	r10,r10,4
 10078bc:	81000404 	addi	r4,r16,16
 10078c0:	8007883a 	mov	r3,r16
 10078c4:	5004913a 	slli	r2,r10,4
 10078c8:	280f883a 	mov	r7,r5
 10078cc:	2089883a 	add	r4,r4,r2
 10078d0:	38800017 	ldw	r2,0(r7)
 10078d4:	18c00404 	addi	r3,r3,16
 10078d8:	39c00404 	addi	r7,r7,16
 10078dc:	18bffc15 	stw	r2,-16(r3)
 10078e0:	38bffd17 	ldw	r2,-12(r7)
 10078e4:	18bffd15 	stw	r2,-12(r3)
 10078e8:	38bffe17 	ldw	r2,-8(r7)
 10078ec:	18bffe15 	stw	r2,-8(r3)
 10078f0:	38bfff17 	ldw	r2,-4(r7)
 10078f4:	18bfff15 	stw	r2,-4(r3)
 10078f8:	193ff51e 	bne	r3,r4,10078d0 <memmove+0x9c>
 10078fc:	52800044 	addi	r10,r10,1
 1007900:	5014913a 	slli	r10,r10,4
 1007904:	31c003cc 	andi	r7,r6,15
 1007908:	008000c4 	movi	r2,3
 100790c:	8287883a 	add	r3,r16,r10
 1007910:	2a95883a 	add	r10,r5,r10
 1007914:	11c0282e 	bgeu	r2,r7,10079b8 <memmove+0x184>
 1007918:	3c7fff04 	addi	r17,r7,-4
 100791c:	8808d0ba 	srli	r4,r17,2
 1007920:	1a400104 	addi	r9,r3,4
 1007924:	180d883a 	mov	r6,r3
 1007928:	2105883a 	add	r2,r4,r4
 100792c:	1085883a 	add	r2,r2,r2
 1007930:	4893883a 	add	r9,r9,r2
 1007934:	5005883a 	mov	r2,r10
 1007938:	12000017 	ldw	r8,0(r2)
 100793c:	31800104 	addi	r6,r6,4
 1007940:	10800104 	addi	r2,r2,4
 1007944:	323fff15 	stw	r8,-4(r6)
 1007948:	327ffb1e 	bne	r6,r9,1007938 <memmove+0x104>
 100794c:	20800044 	addi	r2,r4,1
 1007950:	1085883a 	add	r2,r2,r2
 1007954:	1085883a 	add	r2,r2,r2
 1007958:	017fff04 	movi	r5,-4
 100795c:	18a5883a 	add	r18,r3,r2
 1007960:	50a7883a 	add	r19,r10,r2
 1007964:	10013440 	call	1001344 <__mulsi3>
 1007968:	144f883a 	add	r7,r2,r17
 100796c:	980b883a 	mov	r5,r19
 1007970:	9007883a 	mov	r3,r18
 1007974:	383fc226 	beq	r7,zero,1007880 <memmove+0x4c>
 1007978:	19cf883a 	add	r7,r3,r7
 100797c:	29800003 	ldbu	r6,0(r5)
 1007980:	18c00044 	addi	r3,r3,1
 1007984:	29400044 	addi	r5,r5,1
 1007988:	19bfffc5 	stb	r6,-1(r3)
 100798c:	19fffb1e 	bne	r3,r7,100797c <memmove+0x148>
 1007990:	8005883a 	mov	r2,r16
 1007994:	dfc00417 	ldw	ra,16(sp)
 1007998:	dcc00317 	ldw	r19,12(sp)
 100799c:	dc800217 	ldw	r18,8(sp)
 10079a0:	dc400117 	ldw	r17,4(sp)
 10079a4:	dc000017 	ldw	r16,0(sp)
 10079a8:	dec00504 	addi	sp,sp,20
 10079ac:	f800283a 	ret
 10079b0:	8007883a 	mov	r3,r16
 10079b4:	003fef06 	br	1007974 <memmove+0x140>
 10079b8:	500b883a 	mov	r5,r10
 10079bc:	003fed06 	br	1007974 <memmove+0x140>

010079c0 <memset>:
 10079c0:	00c000c4 	movi	r3,3
 10079c4:	2005883a 	mov	r2,r4
 10079c8:	29403fcc 	andi	r5,r5,255
 10079cc:	19802d2e 	bgeu	r3,r6,1007a84 <memset+0xc4>
 10079d0:	20c6703a 	and	r3,r4,r3
 10079d4:	18002e1e 	bne	r3,zero,1007a90 <memset+0xd0>
 10079d8:	2806923a 	slli	r3,r5,8
 10079dc:	010003c4 	movi	r4,15
 10079e0:	3011883a 	mov	r8,r6
 10079e4:	1946b03a 	or	r3,r3,r5
 10079e8:	180e943a 	slli	r7,r3,16
 10079ec:	38ceb03a 	or	r7,r7,r3
 10079f0:	1007883a 	mov	r3,r2
 10079f4:	21800f2e 	bgeu	r4,r6,1007a34 <memset+0x74>
 10079f8:	19c00015 	stw	r7,0(r3)
 10079fc:	19c00115 	stw	r7,4(r3)
 1007a00:	19c00215 	stw	r7,8(r3)
 1007a04:	19c00315 	stw	r7,12(r3)
 1007a08:	423ffc04 	addi	r8,r8,-16
 1007a0c:	18c00404 	addi	r3,r3,16
 1007a10:	223ff936 	bltu	r4,r8,10079f8 <memset+0x38>
 1007a14:	30fffc04 	addi	r3,r6,-16
 1007a18:	1806d13a 	srli	r3,r3,4
 1007a1c:	318003cc 	andi	r6,r6,15
 1007a20:	010000c4 	movi	r4,3
 1007a24:	18c00044 	addi	r3,r3,1
 1007a28:	1806913a 	slli	r3,r3,4
 1007a2c:	10c7883a 	add	r3,r2,r3
 1007a30:	21800e2e 	bgeu	r4,r6,1007a6c <memset+0xac>
 1007a34:	1813883a 	mov	r9,r3
 1007a38:	3011883a 	mov	r8,r6
 1007a3c:	010000c4 	movi	r4,3
 1007a40:	49c00015 	stw	r7,0(r9)
 1007a44:	423fff04 	addi	r8,r8,-4
 1007a48:	4a400104 	addi	r9,r9,4
 1007a4c:	223ffc36 	bltu	r4,r8,1007a40 <memset+0x80>
 1007a50:	313fff04 	addi	r4,r6,-4
 1007a54:	2008d0ba 	srli	r4,r4,2
 1007a58:	318000cc 	andi	r6,r6,3
 1007a5c:	21000044 	addi	r4,r4,1
 1007a60:	2109883a 	add	r4,r4,r4
 1007a64:	2109883a 	add	r4,r4,r4
 1007a68:	1907883a 	add	r3,r3,r4
 1007a6c:	30000a26 	beq	r6,zero,1007a98 <memset+0xd8>
 1007a70:	198d883a 	add	r6,r3,r6
 1007a74:	19400005 	stb	r5,0(r3)
 1007a78:	18c00044 	addi	r3,r3,1
 1007a7c:	19bffd1e 	bne	r3,r6,1007a74 <memset+0xb4>
 1007a80:	f800283a 	ret
 1007a84:	2007883a 	mov	r3,r4
 1007a88:	303ff91e 	bne	r6,zero,1007a70 <memset+0xb0>
 1007a8c:	00000206 	br	1007a98 <memset+0xd8>
 1007a90:	2007883a 	mov	r3,r4
 1007a94:	003ff606 	br	1007a70 <memset+0xb0>
 1007a98:	f800283a 	ret

01007a9c <_Balloc>:
 1007a9c:	20801317 	ldw	r2,76(r4)
 1007aa0:	defffc04 	addi	sp,sp,-16
 1007aa4:	dc400115 	stw	r17,4(sp)
 1007aa8:	dc000015 	stw	r16,0(sp)
 1007aac:	dfc00315 	stw	ra,12(sp)
 1007ab0:	dc800215 	stw	r18,8(sp)
 1007ab4:	2023883a 	mov	r17,r4
 1007ab8:	2821883a 	mov	r16,r5
 1007abc:	10000f26 	beq	r2,zero,1007afc <_Balloc+0x60>
 1007ac0:	8407883a 	add	r3,r16,r16
 1007ac4:	18c7883a 	add	r3,r3,r3
 1007ac8:	10c7883a 	add	r3,r2,r3
 1007acc:	18800017 	ldw	r2,0(r3)
 1007ad0:	10001126 	beq	r2,zero,1007b18 <_Balloc+0x7c>
 1007ad4:	11000017 	ldw	r4,0(r2)
 1007ad8:	19000015 	stw	r4,0(r3)
 1007adc:	10000415 	stw	zero,16(r2)
 1007ae0:	10000315 	stw	zero,12(r2)
 1007ae4:	dfc00317 	ldw	ra,12(sp)
 1007ae8:	dc800217 	ldw	r18,8(sp)
 1007aec:	dc400117 	ldw	r17,4(sp)
 1007af0:	dc000017 	ldw	r16,0(sp)
 1007af4:	dec00404 	addi	sp,sp,16
 1007af8:	f800283a 	ret
 1007afc:	01400104 	movi	r5,4
 1007b00:	01800404 	movi	r6,16
 1007b04:	10095600 	call	1009560 <_calloc_r>
 1007b08:	88801315 	stw	r2,76(r17)
 1007b0c:	103fec1e 	bne	r2,zero,1007ac0 <_Balloc+0x24>
 1007b10:	0005883a 	mov	r2,zero
 1007b14:	003ff306 	br	1007ae4 <_Balloc+0x48>
 1007b18:	01400044 	movi	r5,1
 1007b1c:	2c24983a 	sll	r18,r5,r16
 1007b20:	8809883a 	mov	r4,r17
 1007b24:	91800144 	addi	r6,r18,5
 1007b28:	318d883a 	add	r6,r6,r6
 1007b2c:	318d883a 	add	r6,r6,r6
 1007b30:	10095600 	call	1009560 <_calloc_r>
 1007b34:	103ff626 	beq	r2,zero,1007b10 <_Balloc+0x74>
 1007b38:	14000115 	stw	r16,4(r2)
 1007b3c:	14800215 	stw	r18,8(r2)
 1007b40:	003fe606 	br	1007adc <_Balloc+0x40>

01007b44 <_Bfree>:
 1007b44:	28000826 	beq	r5,zero,1007b68 <_Bfree+0x24>
 1007b48:	28c00117 	ldw	r3,4(r5)
 1007b4c:	20801317 	ldw	r2,76(r4)
 1007b50:	18c7883a 	add	r3,r3,r3
 1007b54:	18c7883a 	add	r3,r3,r3
 1007b58:	10c5883a 	add	r2,r2,r3
 1007b5c:	10c00017 	ldw	r3,0(r2)
 1007b60:	28c00015 	stw	r3,0(r5)
 1007b64:	11400015 	stw	r5,0(r2)
 1007b68:	f800283a 	ret

01007b6c <__multadd>:
 1007b6c:	defff604 	addi	sp,sp,-40
 1007b70:	dd400515 	stw	r21,20(sp)
 1007b74:	2d400417 	ldw	r21,16(r5)
 1007b78:	df000815 	stw	fp,32(sp)
 1007b7c:	ddc00715 	stw	r23,28(sp)
 1007b80:	dd800615 	stw	r22,24(sp)
 1007b84:	dd000415 	stw	r20,16(sp)
 1007b88:	dc400115 	stw	r17,4(sp)
 1007b8c:	dc000015 	stw	r16,0(sp)
 1007b90:	dfc00915 	stw	ra,36(sp)
 1007b94:	dcc00315 	stw	r19,12(sp)
 1007b98:	dc800215 	stw	r18,8(sp)
 1007b9c:	282d883a 	mov	r22,r5
 1007ba0:	202f883a 	mov	r23,r4
 1007ba4:	3029883a 	mov	r20,r6
 1007ba8:	3839883a 	mov	fp,r7
 1007bac:	2c000504 	addi	r16,r5,20
 1007bb0:	0023883a 	mov	r17,zero
 1007bb4:	84c00017 	ldw	r19,0(r16)
 1007bb8:	a00b883a 	mov	r5,r20
 1007bbc:	8c400044 	addi	r17,r17,1
 1007bc0:	993fffcc 	andi	r4,r19,65535
 1007bc4:	10013440 	call	1001344 <__mulsi3>
 1007bc8:	1725883a 	add	r18,r2,fp
 1007bcc:	9808d43a 	srli	r4,r19,16
 1007bd0:	9026d43a 	srli	r19,r18,16
 1007bd4:	a00b883a 	mov	r5,r20
 1007bd8:	10013440 	call	1001344 <__mulsi3>
 1007bdc:	988f883a 	add	r7,r19,r2
 1007be0:	3804943a 	slli	r2,r7,16
 1007be4:	94bfffcc 	andi	r18,r18,65535
 1007be8:	3838d43a 	srli	fp,r7,16
 1007bec:	14a5883a 	add	r18,r2,r18
 1007bf0:	84800015 	stw	r18,0(r16)
 1007bf4:	84000104 	addi	r16,r16,4
 1007bf8:	8d7fee16 	blt	r17,r21,1007bb4 <__multadd+0x48>
 1007bfc:	e0000926 	beq	fp,zero,1007c24 <__multadd+0xb8>
 1007c00:	b0800217 	ldw	r2,8(r22)
 1007c04:	a880140e 	bge	r21,r2,1007c58 <__multadd+0xec>
 1007c08:	a8800144 	addi	r2,r21,5
 1007c0c:	1085883a 	add	r2,r2,r2
 1007c10:	1085883a 	add	r2,r2,r2
 1007c14:	b085883a 	add	r2,r22,r2
 1007c18:	ad400044 	addi	r21,r21,1
 1007c1c:	17000015 	stw	fp,0(r2)
 1007c20:	b5400415 	stw	r21,16(r22)
 1007c24:	b005883a 	mov	r2,r22
 1007c28:	dfc00917 	ldw	ra,36(sp)
 1007c2c:	df000817 	ldw	fp,32(sp)
 1007c30:	ddc00717 	ldw	r23,28(sp)
 1007c34:	dd800617 	ldw	r22,24(sp)
 1007c38:	dd400517 	ldw	r21,20(sp)
 1007c3c:	dd000417 	ldw	r20,16(sp)
 1007c40:	dcc00317 	ldw	r19,12(sp)
 1007c44:	dc800217 	ldw	r18,8(sp)
 1007c48:	dc400117 	ldw	r17,4(sp)
 1007c4c:	dc000017 	ldw	r16,0(sp)
 1007c50:	dec00a04 	addi	sp,sp,40
 1007c54:	f800283a 	ret
 1007c58:	b1400117 	ldw	r5,4(r22)
 1007c5c:	b809883a 	mov	r4,r23
 1007c60:	29400044 	addi	r5,r5,1
 1007c64:	1007a9c0 	call	1007a9c <_Balloc>
 1007c68:	b1800417 	ldw	r6,16(r22)
 1007c6c:	b1400304 	addi	r5,r22,12
 1007c70:	11000304 	addi	r4,r2,12
 1007c74:	31800084 	addi	r6,r6,2
 1007c78:	318d883a 	add	r6,r6,r6
 1007c7c:	318d883a 	add	r6,r6,r6
 1007c80:	1021883a 	mov	r16,r2
 1007c84:	10024cc0 	call	10024cc <memcpy>
 1007c88:	b0c00117 	ldw	r3,4(r22)
 1007c8c:	b8801317 	ldw	r2,76(r23)
 1007c90:	18c7883a 	add	r3,r3,r3
 1007c94:	18c7883a 	add	r3,r3,r3
 1007c98:	10c5883a 	add	r2,r2,r3
 1007c9c:	10c00017 	ldw	r3,0(r2)
 1007ca0:	b0c00015 	stw	r3,0(r22)
 1007ca4:	15800015 	stw	r22,0(r2)
 1007ca8:	802d883a 	mov	r22,r16
 1007cac:	003fd606 	br	1007c08 <__multadd+0x9c>

01007cb0 <__s2b>:
 1007cb0:	defff904 	addi	sp,sp,-28
 1007cb4:	dd000415 	stw	r20,16(sp)
 1007cb8:	dc400115 	stw	r17,4(sp)
 1007cbc:	2829883a 	mov	r20,r5
 1007cc0:	2023883a 	mov	r17,r4
 1007cc4:	01400244 	movi	r5,9
 1007cc8:	39000204 	addi	r4,r7,8
 1007ccc:	dcc00315 	stw	r19,12(sp)
 1007cd0:	dc800215 	stw	r18,8(sp)
 1007cd4:	dfc00615 	stw	ra,24(sp)
 1007cd8:	dd400515 	stw	r21,20(sp)
 1007cdc:	dc000015 	stw	r16,0(sp)
 1007ce0:	3825883a 	mov	r18,r7
 1007ce4:	3027883a 	mov	r19,r6
 1007ce8:	10012880 	call	1001288 <__divsi3>
 1007cec:	00c00044 	movi	r3,1
 1007cf0:	000b883a 	mov	r5,zero
 1007cf4:	1880030e 	bge	r3,r2,1007d04 <__s2b+0x54>
 1007cf8:	18c7883a 	add	r3,r3,r3
 1007cfc:	29400044 	addi	r5,r5,1
 1007d00:	18bffd16 	blt	r3,r2,1007cf8 <__s2b+0x48>
 1007d04:	8809883a 	mov	r4,r17
 1007d08:	1007a9c0 	call	1007a9c <_Balloc>
 1007d0c:	d8c00717 	ldw	r3,28(sp)
 1007d10:	10c00515 	stw	r3,20(r2)
 1007d14:	00c00044 	movi	r3,1
 1007d18:	10c00415 	stw	r3,16(r2)
 1007d1c:	00c00244 	movi	r3,9
 1007d20:	1cc0210e 	bge	r3,r19,1007da8 <__s2b+0xf8>
 1007d24:	a0eb883a 	add	r21,r20,r3
 1007d28:	a821883a 	mov	r16,r21
 1007d2c:	a4e9883a 	add	r20,r20,r19
 1007d30:	81c00007 	ldb	r7,0(r16)
 1007d34:	8809883a 	mov	r4,r17
 1007d38:	84000044 	addi	r16,r16,1
 1007d3c:	100b883a 	mov	r5,r2
 1007d40:	01800284 	movi	r6,10
 1007d44:	39fff404 	addi	r7,r7,-48
 1007d48:	1007b6c0 	call	1007b6c <__multadd>
 1007d4c:	853ff81e 	bne	r16,r20,1007d30 <__s2b+0x80>
 1007d50:	ace1883a 	add	r16,r21,r19
 1007d54:	843ffe04 	addi	r16,r16,-8
 1007d58:	9c800a0e 	bge	r19,r18,1007d84 <__s2b+0xd4>
 1007d5c:	94e5c83a 	sub	r18,r18,r19
 1007d60:	84a5883a 	add	r18,r16,r18
 1007d64:	81c00007 	ldb	r7,0(r16)
 1007d68:	8809883a 	mov	r4,r17
 1007d6c:	84000044 	addi	r16,r16,1
 1007d70:	100b883a 	mov	r5,r2
 1007d74:	01800284 	movi	r6,10
 1007d78:	39fff404 	addi	r7,r7,-48
 1007d7c:	1007b6c0 	call	1007b6c <__multadd>
 1007d80:	84bff81e 	bne	r16,r18,1007d64 <__s2b+0xb4>
 1007d84:	dfc00617 	ldw	ra,24(sp)
 1007d88:	dd400517 	ldw	r21,20(sp)
 1007d8c:	dd000417 	ldw	r20,16(sp)
 1007d90:	dcc00317 	ldw	r19,12(sp)
 1007d94:	dc800217 	ldw	r18,8(sp)
 1007d98:	dc400117 	ldw	r17,4(sp)
 1007d9c:	dc000017 	ldw	r16,0(sp)
 1007da0:	dec00704 	addi	sp,sp,28
 1007da4:	f800283a 	ret
 1007da8:	a4000284 	addi	r16,r20,10
 1007dac:	1827883a 	mov	r19,r3
 1007db0:	003fe906 	br	1007d58 <__s2b+0xa8>

01007db4 <__hi0bits>:
 1007db4:	20bfffec 	andhi	r2,r4,65535
 1007db8:	1000141e 	bne	r2,zero,1007e0c <__hi0bits+0x58>
 1007dbc:	2008943a 	slli	r4,r4,16
 1007dc0:	00800404 	movi	r2,16
 1007dc4:	20ffc02c 	andhi	r3,r4,65280
 1007dc8:	1800021e 	bne	r3,zero,1007dd4 <__hi0bits+0x20>
 1007dcc:	2008923a 	slli	r4,r4,8
 1007dd0:	10800204 	addi	r2,r2,8
 1007dd4:	20fc002c 	andhi	r3,r4,61440
 1007dd8:	1800021e 	bne	r3,zero,1007de4 <__hi0bits+0x30>
 1007ddc:	2008913a 	slli	r4,r4,4
 1007de0:	10800104 	addi	r2,r2,4
 1007de4:	20f0002c 	andhi	r3,r4,49152
 1007de8:	1800031e 	bne	r3,zero,1007df8 <__hi0bits+0x44>
 1007dec:	2109883a 	add	r4,r4,r4
 1007df0:	10800084 	addi	r2,r2,2
 1007df4:	2109883a 	add	r4,r4,r4
 1007df8:	20000316 	blt	r4,zero,1007e08 <__hi0bits+0x54>
 1007dfc:	2110002c 	andhi	r4,r4,16384
 1007e00:	2000041e 	bne	r4,zero,1007e14 <__hi0bits+0x60>
 1007e04:	00800804 	movi	r2,32
 1007e08:	f800283a 	ret
 1007e0c:	0005883a 	mov	r2,zero
 1007e10:	003fec06 	br	1007dc4 <__hi0bits+0x10>
 1007e14:	10800044 	addi	r2,r2,1
 1007e18:	f800283a 	ret

01007e1c <__lo0bits>:
 1007e1c:	20c00017 	ldw	r3,0(r4)
 1007e20:	188001cc 	andi	r2,r3,7
 1007e24:	10000826 	beq	r2,zero,1007e48 <__lo0bits+0x2c>
 1007e28:	1880004c 	andi	r2,r3,1
 1007e2c:	1000211e 	bne	r2,zero,1007eb4 <__lo0bits+0x98>
 1007e30:	1880008c 	andi	r2,r3,2
 1007e34:	1000211e 	bne	r2,zero,1007ebc <__lo0bits+0xa0>
 1007e38:	1806d0ba 	srli	r3,r3,2
 1007e3c:	00800084 	movi	r2,2
 1007e40:	20c00015 	stw	r3,0(r4)
 1007e44:	f800283a 	ret
 1007e48:	18bfffcc 	andi	r2,r3,65535
 1007e4c:	10001326 	beq	r2,zero,1007e9c <__lo0bits+0x80>
 1007e50:	0005883a 	mov	r2,zero
 1007e54:	19403fcc 	andi	r5,r3,255
 1007e58:	2800021e 	bne	r5,zero,1007e64 <__lo0bits+0x48>
 1007e5c:	1806d23a 	srli	r3,r3,8
 1007e60:	10800204 	addi	r2,r2,8
 1007e64:	194003cc 	andi	r5,r3,15
 1007e68:	2800021e 	bne	r5,zero,1007e74 <__lo0bits+0x58>
 1007e6c:	1806d13a 	srli	r3,r3,4
 1007e70:	10800104 	addi	r2,r2,4
 1007e74:	194000cc 	andi	r5,r3,3
 1007e78:	2800021e 	bne	r5,zero,1007e84 <__lo0bits+0x68>
 1007e7c:	1806d0ba 	srli	r3,r3,2
 1007e80:	10800084 	addi	r2,r2,2
 1007e84:	1940004c 	andi	r5,r3,1
 1007e88:	2800081e 	bne	r5,zero,1007eac <__lo0bits+0x90>
 1007e8c:	1806d07a 	srli	r3,r3,1
 1007e90:	1800051e 	bne	r3,zero,1007ea8 <__lo0bits+0x8c>
 1007e94:	00800804 	movi	r2,32
 1007e98:	f800283a 	ret
 1007e9c:	1806d43a 	srli	r3,r3,16
 1007ea0:	00800404 	movi	r2,16
 1007ea4:	003feb06 	br	1007e54 <__lo0bits+0x38>
 1007ea8:	10800044 	addi	r2,r2,1
 1007eac:	20c00015 	stw	r3,0(r4)
 1007eb0:	f800283a 	ret
 1007eb4:	0005883a 	mov	r2,zero
 1007eb8:	f800283a 	ret
 1007ebc:	1806d07a 	srli	r3,r3,1
 1007ec0:	00800044 	movi	r2,1
 1007ec4:	20c00015 	stw	r3,0(r4)
 1007ec8:	f800283a 	ret

01007ecc <__i2b>:
 1007ecc:	defffd04 	addi	sp,sp,-12
 1007ed0:	dc000015 	stw	r16,0(sp)
 1007ed4:	04000044 	movi	r16,1
 1007ed8:	dc400115 	stw	r17,4(sp)
 1007edc:	2823883a 	mov	r17,r5
 1007ee0:	800b883a 	mov	r5,r16
 1007ee4:	dfc00215 	stw	ra,8(sp)
 1007ee8:	1007a9c0 	call	1007a9c <_Balloc>
 1007eec:	14400515 	stw	r17,20(r2)
 1007ef0:	14000415 	stw	r16,16(r2)
 1007ef4:	dfc00217 	ldw	ra,8(sp)
 1007ef8:	dc400117 	ldw	r17,4(sp)
 1007efc:	dc000017 	ldw	r16,0(sp)
 1007f00:	dec00304 	addi	sp,sp,12
 1007f04:	f800283a 	ret

01007f08 <__multiply>:
 1007f08:	defff004 	addi	sp,sp,-64
 1007f0c:	dc800815 	stw	r18,32(sp)
 1007f10:	dc400715 	stw	r17,28(sp)
 1007f14:	34800417 	ldw	r18,16(r6)
 1007f18:	2c400417 	ldw	r17,16(r5)
 1007f1c:	ddc00d15 	stw	r23,52(sp)
 1007f20:	dc000615 	stw	r16,24(sp)
 1007f24:	dfc00f15 	stw	ra,60(sp)
 1007f28:	df000e15 	stw	fp,56(sp)
 1007f2c:	dd800c15 	stw	r22,48(sp)
 1007f30:	dd400b15 	stw	r21,44(sp)
 1007f34:	dd000a15 	stw	r20,40(sp)
 1007f38:	dcc00915 	stw	r19,36(sp)
 1007f3c:	2821883a 	mov	r16,r5
 1007f40:	302f883a 	mov	r23,r6
 1007f44:	8c80050e 	bge	r17,r18,1007f5c <__multiply+0x54>
 1007f48:	8807883a 	mov	r3,r17
 1007f4c:	3021883a 	mov	r16,r6
 1007f50:	9023883a 	mov	r17,r18
 1007f54:	282f883a 	mov	r23,r5
 1007f58:	1825883a 	mov	r18,r3
 1007f5c:	80800217 	ldw	r2,8(r16)
 1007f60:	8c87883a 	add	r3,r17,r18
 1007f64:	d8c00115 	stw	r3,4(sp)
 1007f68:	81400117 	ldw	r5,4(r16)
 1007f6c:	10c0010e 	bge	r2,r3,1007f74 <__multiply+0x6c>
 1007f70:	29400044 	addi	r5,r5,1
 1007f74:	1007a9c0 	call	1007a9c <_Balloc>
 1007f78:	d8c00117 	ldw	r3,4(sp)
 1007f7c:	d8800515 	stw	r2,20(sp)
 1007f80:	14c00504 	addi	r19,r2,20
 1007f84:	1d400144 	addi	r21,r3,5
 1007f88:	ad6b883a 	add	r21,r21,r21
 1007f8c:	ad6b883a 	add	r21,r21,r21
 1007f90:	156b883a 	add	r21,r2,r21
 1007f94:	dd400215 	stw	r21,8(sp)
 1007f98:	9805883a 	mov	r2,r19
 1007f9c:	9d40042e 	bgeu	r19,r21,1007fb0 <__multiply+0xa8>
 1007fa0:	d8c00217 	ldw	r3,8(sp)
 1007fa4:	10000015 	stw	zero,0(r2)
 1007fa8:	10800104 	addi	r2,r2,4
 1007fac:	10fffc36 	bltu	r2,r3,1007fa0 <__multiply+0x98>
 1007fb0:	94800144 	addi	r18,r18,5
 1007fb4:	94a5883a 	add	r18,r18,r18
 1007fb8:	94ad883a 	add	r22,r18,r18
 1007fbc:	8c400144 	addi	r17,r17,5
 1007fc0:	8c63883a 	add	r17,r17,r17
 1007fc4:	bdad883a 	add	r22,r23,r22
 1007fc8:	80c00504 	addi	r3,r16,20
 1007fcc:	8c63883a 	add	r17,r17,r17
 1007fd0:	bc800504 	addi	r18,r23,20
 1007fd4:	dd800315 	stw	r22,12(sp)
 1007fd8:	d8c00415 	stw	r3,16(sp)
 1007fdc:	dcc00015 	stw	r19,0(sp)
 1007fe0:	8463883a 	add	r17,r16,r17
 1007fe4:	9580412e 	bgeu	r18,r22,10080ec <__multiply+0x1e4>
 1007fe8:	90800017 	ldw	r2,0(r18)
 1007fec:	173fffcc 	andi	fp,r2,65535
 1007ff0:	e0001a26 	beq	fp,zero,100805c <__multiply+0x154>
 1007ff4:	dd000017 	ldw	r20,0(sp)
 1007ff8:	dd800417 	ldw	r22,16(sp)
 1007ffc:	002b883a 	mov	r21,zero
 1008000:	b4c00017 	ldw	r19,0(r22)
 1008004:	a4000017 	ldw	r16,0(r20)
 1008008:	e00b883a 	mov	r5,fp
 100800c:	993fffcc 	andi	r4,r19,65535
 1008010:	10013440 	call	1001344 <__mulsi3>
 1008014:	9808d43a 	srli	r4,r19,16
 1008018:	817fffcc 	andi	r5,r16,65535
 100801c:	1145883a 	add	r2,r2,r5
 1008020:	e00b883a 	mov	r5,fp
 1008024:	1567883a 	add	r19,r2,r21
 1008028:	8020d43a 	srli	r16,r16,16
 100802c:	10013440 	call	1001344 <__mulsi3>
 1008030:	9808d43a 	srli	r4,r19,16
 1008034:	1405883a 	add	r2,r2,r16
 1008038:	a4c0000d 	sth	r19,0(r20)
 100803c:	110f883a 	add	r7,r2,r4
 1008040:	a1c0008d 	sth	r7,2(r20)
 1008044:	b5800104 	addi	r22,r22,4
 1008048:	382ad43a 	srli	r21,r7,16
 100804c:	a5000104 	addi	r20,r20,4
 1008050:	b47feb36 	bltu	r22,r17,1008000 <__multiply+0xf8>
 1008054:	a5400015 	stw	r21,0(r20)
 1008058:	90800017 	ldw	r2,0(r18)
 100805c:	1038d43a 	srli	fp,r2,16
 1008060:	e0001c26 	beq	fp,zero,10080d4 <__multiply+0x1cc>
 1008064:	d8c00017 	ldw	r3,0(sp)
 1008068:	dd000417 	ldw	r20,16(sp)
 100806c:	002b883a 	mov	r21,zero
 1008070:	1d800017 	ldw	r22,0(r3)
 1008074:	182f883a 	mov	r23,r3
 1008078:	b021883a 	mov	r16,r22
 100807c:	a4c00017 	ldw	r19,0(r20)
 1008080:	8020d43a 	srli	r16,r16,16
 1008084:	e00b883a 	mov	r5,fp
 1008088:	993fffcc 	andi	r4,r19,65535
 100808c:	10013440 	call	1001344 <__mulsi3>
 1008090:	1405883a 	add	r2,r2,r16
 1008094:	9808d43a 	srli	r4,r19,16
 1008098:	156b883a 	add	r21,r2,r21
 100809c:	bdc00104 	addi	r23,r23,4
 10080a0:	bdbfff0d 	sth	r22,-4(r23)
 10080a4:	bd7fff8d 	sth	r21,-2(r23)
 10080a8:	bc000017 	ldw	r16,0(r23)
 10080ac:	e00b883a 	mov	r5,fp
 10080b0:	10013440 	call	1001344 <__mulsi3>
 10080b4:	a80ed43a 	srli	r7,r21,16
 10080b8:	813fffcc 	andi	r4,r16,65535
 10080bc:	2085883a 	add	r2,r4,r2
 10080c0:	11ed883a 	add	r22,r2,r7
 10080c4:	a5000104 	addi	r20,r20,4
 10080c8:	b02ad43a 	srli	r21,r22,16
 10080cc:	a47feb36 	bltu	r20,r17,100807c <__multiply+0x174>
 10080d0:	bd800015 	stw	r22,0(r23)
 10080d4:	d8c00017 	ldw	r3,0(sp)
 10080d8:	94800104 	addi	r18,r18,4
 10080dc:	18c00104 	addi	r3,r3,4
 10080e0:	d8c00015 	stw	r3,0(sp)
 10080e4:	d8c00317 	ldw	r3,12(sp)
 10080e8:	90ffbf36 	bltu	r18,r3,1007fe8 <__multiply+0xe0>
 10080ec:	d8c00117 	ldw	r3,4(sp)
 10080f0:	00c00c0e 	bge	zero,r3,1008124 <__multiply+0x21c>
 10080f4:	d8c00217 	ldw	r3,8(sp)
 10080f8:	18bfff17 	ldw	r2,-4(r3)
 10080fc:	1d7fff04 	addi	r21,r3,-4
 1008100:	10000326 	beq	r2,zero,1008110 <__multiply+0x208>
 1008104:	00000706 	br	1008124 <__multiply+0x21c>
 1008108:	a8800017 	ldw	r2,0(r21)
 100810c:	1000051e 	bne	r2,zero,1008124 <__multiply+0x21c>
 1008110:	d8c00117 	ldw	r3,4(sp)
 1008114:	ad7fff04 	addi	r21,r21,-4
 1008118:	18ffffc4 	addi	r3,r3,-1
 100811c:	d8c00115 	stw	r3,4(sp)
 1008120:	183ff91e 	bne	r3,zero,1008108 <__multiply+0x200>
 1008124:	d8800517 	ldw	r2,20(sp)
 1008128:	d8c00117 	ldw	r3,4(sp)
 100812c:	10c00415 	stw	r3,16(r2)
 1008130:	dfc00f17 	ldw	ra,60(sp)
 1008134:	df000e17 	ldw	fp,56(sp)
 1008138:	ddc00d17 	ldw	r23,52(sp)
 100813c:	dd800c17 	ldw	r22,48(sp)
 1008140:	dd400b17 	ldw	r21,44(sp)
 1008144:	dd000a17 	ldw	r20,40(sp)
 1008148:	dcc00917 	ldw	r19,36(sp)
 100814c:	dc800817 	ldw	r18,32(sp)
 1008150:	dc400717 	ldw	r17,28(sp)
 1008154:	dc000617 	ldw	r16,24(sp)
 1008158:	dec01004 	addi	sp,sp,64
 100815c:	f800283a 	ret

01008160 <__pow5mult>:
 1008160:	defffb04 	addi	sp,sp,-20
 1008164:	dcc00315 	stw	r19,12(sp)
 1008168:	dc800215 	stw	r18,8(sp)
 100816c:	dc000015 	stw	r16,0(sp)
 1008170:	dfc00415 	stw	ra,16(sp)
 1008174:	dc400115 	stw	r17,4(sp)
 1008178:	308000cc 	andi	r2,r6,3
 100817c:	3021883a 	mov	r16,r6
 1008180:	2027883a 	mov	r19,r4
 1008184:	2825883a 	mov	r18,r5
 1008188:	10002e1e 	bne	r2,zero,1008244 <__pow5mult+0xe4>
 100818c:	8021d0ba 	srai	r16,r16,2
 1008190:	80001a26 	beq	r16,zero,10081fc <__pow5mult+0x9c>
 1008194:	9c401217 	ldw	r17,72(r19)
 1008198:	8800061e 	bne	r17,zero,10081b4 <__pow5mult+0x54>
 100819c:	00003406 	br	1008270 <__pow5mult+0x110>
 10081a0:	8021d07a 	srai	r16,r16,1
 10081a4:	80001526 	beq	r16,zero,10081fc <__pow5mult+0x9c>
 10081a8:	88c00017 	ldw	r3,0(r17)
 10081ac:	18001b26 	beq	r3,zero,100821c <__pow5mult+0xbc>
 10081b0:	1823883a 	mov	r17,r3
 10081b4:	80c0004c 	andi	r3,r16,1
 10081b8:	183ff926 	beq	r3,zero,10081a0 <__pow5mult+0x40>
 10081bc:	900b883a 	mov	r5,r18
 10081c0:	880d883a 	mov	r6,r17
 10081c4:	9809883a 	mov	r4,r19
 10081c8:	1007f080 	call	1007f08 <__multiply>
 10081cc:	90001b26 	beq	r18,zero,100823c <__pow5mult+0xdc>
 10081d0:	91000117 	ldw	r4,4(r18)
 10081d4:	98c01317 	ldw	r3,76(r19)
 10081d8:	8021d07a 	srai	r16,r16,1
 10081dc:	2109883a 	add	r4,r4,r4
 10081e0:	2109883a 	add	r4,r4,r4
 10081e4:	1907883a 	add	r3,r3,r4
 10081e8:	19000017 	ldw	r4,0(r3)
 10081ec:	91000015 	stw	r4,0(r18)
 10081f0:	1c800015 	stw	r18,0(r3)
 10081f4:	1025883a 	mov	r18,r2
 10081f8:	803feb1e 	bne	r16,zero,10081a8 <__pow5mult+0x48>
 10081fc:	9005883a 	mov	r2,r18
 1008200:	dfc00417 	ldw	ra,16(sp)
 1008204:	dcc00317 	ldw	r19,12(sp)
 1008208:	dc800217 	ldw	r18,8(sp)
 100820c:	dc400117 	ldw	r17,4(sp)
 1008210:	dc000017 	ldw	r16,0(sp)
 1008214:	dec00504 	addi	sp,sp,20
 1008218:	f800283a 	ret
 100821c:	880b883a 	mov	r5,r17
 1008220:	880d883a 	mov	r6,r17
 1008224:	9809883a 	mov	r4,r19
 1008228:	1007f080 	call	1007f08 <__multiply>
 100822c:	88800015 	stw	r2,0(r17)
 1008230:	10000015 	stw	zero,0(r2)
 1008234:	1023883a 	mov	r17,r2
 1008238:	003fde06 	br	10081b4 <__pow5mult+0x54>
 100823c:	1025883a 	mov	r18,r2
 1008240:	003fd706 	br	10081a0 <__pow5mult+0x40>
 1008244:	10bfffc4 	addi	r2,r2,-1
 1008248:	1085883a 	add	r2,r2,r2
 100824c:	00c04074 	movhi	r3,257
 1008250:	18fed604 	addi	r3,r3,-1192
 1008254:	1085883a 	add	r2,r2,r2
 1008258:	1885883a 	add	r2,r3,r2
 100825c:	11800017 	ldw	r6,0(r2)
 1008260:	000f883a 	mov	r7,zero
 1008264:	1007b6c0 	call	1007b6c <__multadd>
 1008268:	1025883a 	mov	r18,r2
 100826c:	003fc706 	br	100818c <__pow5mult+0x2c>
 1008270:	9809883a 	mov	r4,r19
 1008274:	01409c44 	movi	r5,625
 1008278:	1007ecc0 	call	1007ecc <__i2b>
 100827c:	98801215 	stw	r2,72(r19)
 1008280:	1023883a 	mov	r17,r2
 1008284:	10000015 	stw	zero,0(r2)
 1008288:	003fca06 	br	10081b4 <__pow5mult+0x54>

0100828c <__lshift>:
 100828c:	defff904 	addi	sp,sp,-28
 1008290:	dd400515 	stw	r21,20(sp)
 1008294:	dc400115 	stw	r17,4(sp)
 1008298:	2d400417 	ldw	r21,16(r5)
 100829c:	3023d17a 	srai	r17,r6,5
 10082a0:	28800217 	ldw	r2,8(r5)
 10082a4:	dd000415 	stw	r20,16(sp)
 10082a8:	8d6b883a 	add	r21,r17,r21
 10082ac:	dcc00315 	stw	r19,12(sp)
 10082b0:	dc800215 	stw	r18,8(sp)
 10082b4:	dc000015 	stw	r16,0(sp)
 10082b8:	dfc00615 	stw	ra,24(sp)
 10082bc:	ac000044 	addi	r16,r21,1
 10082c0:	2825883a 	mov	r18,r5
 10082c4:	3029883a 	mov	r20,r6
 10082c8:	2027883a 	mov	r19,r4
 10082cc:	29400117 	ldw	r5,4(r5)
 10082d0:	1400030e 	bge	r2,r16,10082e0 <__lshift+0x54>
 10082d4:	1085883a 	add	r2,r2,r2
 10082d8:	29400044 	addi	r5,r5,1
 10082dc:	143ffd16 	blt	r2,r16,10082d4 <__lshift+0x48>
 10082e0:	9809883a 	mov	r4,r19
 10082e4:	1007a9c0 	call	1007a9c <_Balloc>
 10082e8:	10c00504 	addi	r3,r2,20
 10082ec:	0440090e 	bge	zero,r17,1008314 <__lshift+0x88>
 10082f0:	000f883a 	mov	r7,zero
 10082f4:	18000015 	stw	zero,0(r3)
 10082f8:	39c00044 	addi	r7,r7,1
 10082fc:	18c00104 	addi	r3,r3,4
 1008300:	3c7ffc1e 	bne	r7,r17,10082f4 <__lshift+0x68>
 1008304:	38c00144 	addi	r3,r7,5
 1008308:	18c7883a 	add	r3,r3,r3
 100830c:	18c7883a 	add	r3,r3,r3
 1008310:	10c7883a 	add	r3,r2,r3
 1008314:	92000417 	ldw	r8,16(r18)
 1008318:	a18007cc 	andi	r6,r20,31
 100831c:	91c00504 	addi	r7,r18,20
 1008320:	42000144 	addi	r8,r8,5
 1008324:	4211883a 	add	r8,r8,r8
 1008328:	4211883a 	add	r8,r8,r8
 100832c:	9211883a 	add	r8,r18,r8
 1008330:	30002226 	beq	r6,zero,10083bc <__lshift+0x130>
 1008334:	02800804 	movi	r10,32
 1008338:	5195c83a 	sub	r10,r10,r6
 100833c:	000b883a 	mov	r5,zero
 1008340:	3a400017 	ldw	r9,0(r7)
 1008344:	18c00104 	addi	r3,r3,4
 1008348:	39c00104 	addi	r7,r7,4
 100834c:	4992983a 	sll	r9,r9,r6
 1008350:	2a4ab03a 	or	r5,r5,r9
 1008354:	197fff15 	stw	r5,-4(r3)
 1008358:	397fff17 	ldw	r5,-4(r7)
 100835c:	2a8ad83a 	srl	r5,r5,r10
 1008360:	3a3ff736 	bltu	r7,r8,1008340 <__lshift+0xb4>
 1008364:	19400015 	stw	r5,0(r3)
 1008368:	28000126 	beq	r5,zero,1008370 <__lshift+0xe4>
 100836c:	ac000084 	addi	r16,r21,2
 1008370:	91000117 	ldw	r4,4(r18)
 1008374:	98c01317 	ldw	r3,76(r19)
 1008378:	843fffc4 	addi	r16,r16,-1
 100837c:	2109883a 	add	r4,r4,r4
 1008380:	2109883a 	add	r4,r4,r4
 1008384:	1907883a 	add	r3,r3,r4
 1008388:	19000017 	ldw	r4,0(r3)
 100838c:	14000415 	stw	r16,16(r2)
 1008390:	91000015 	stw	r4,0(r18)
 1008394:	1c800015 	stw	r18,0(r3)
 1008398:	dfc00617 	ldw	ra,24(sp)
 100839c:	dd400517 	ldw	r21,20(sp)
 10083a0:	dd000417 	ldw	r20,16(sp)
 10083a4:	dcc00317 	ldw	r19,12(sp)
 10083a8:	dc800217 	ldw	r18,8(sp)
 10083ac:	dc400117 	ldw	r17,4(sp)
 10083b0:	dc000017 	ldw	r16,0(sp)
 10083b4:	dec00704 	addi	sp,sp,28
 10083b8:	f800283a 	ret
 10083bc:	39400017 	ldw	r5,0(r7)
 10083c0:	18c00104 	addi	r3,r3,4
 10083c4:	39c00104 	addi	r7,r7,4
 10083c8:	197fff15 	stw	r5,-4(r3)
 10083cc:	3a3fe82e 	bgeu	r7,r8,1008370 <__lshift+0xe4>
 10083d0:	39400017 	ldw	r5,0(r7)
 10083d4:	18c00104 	addi	r3,r3,4
 10083d8:	39c00104 	addi	r7,r7,4
 10083dc:	197fff15 	stw	r5,-4(r3)
 10083e0:	3a3ff636 	bltu	r7,r8,10083bc <__lshift+0x130>
 10083e4:	003fe206 	br	1008370 <__lshift+0xe4>

010083e8 <__mcmp>:
 10083e8:	20800417 	ldw	r2,16(r4)
 10083ec:	28c00417 	ldw	r3,16(r5)
 10083f0:	10c5c83a 	sub	r2,r2,r3
 10083f4:	10000f1e 	bne	r2,zero,1008434 <__mcmp+0x4c>
 10083f8:	18c00144 	addi	r3,r3,5
 10083fc:	18c7883a 	add	r3,r3,r3
 1008400:	18c7883a 	add	r3,r3,r3
 1008404:	21c00504 	addi	r7,r4,20
 1008408:	28cb883a 	add	r5,r5,r3
 100840c:	20c9883a 	add	r4,r4,r3
 1008410:	213fff04 	addi	r4,r4,-4
 1008414:	297fff04 	addi	r5,r5,-4
 1008418:	21800017 	ldw	r6,0(r4)
 100841c:	28c00017 	ldw	r3,0(r5)
 1008420:	30c0021e 	bne	r6,r3,100842c <__mcmp+0x44>
 1008424:	393ffa36 	bltu	r7,r4,1008410 <__mcmp+0x28>
 1008428:	f800283a 	ret
 100842c:	30c00236 	bltu	r6,r3,1008438 <__mcmp+0x50>
 1008430:	00800044 	movi	r2,1
 1008434:	f800283a 	ret
 1008438:	00bfffc4 	movi	r2,-1
 100843c:	f800283a 	ret

01008440 <__mdiff>:
 1008440:	defffb04 	addi	sp,sp,-20
 1008444:	dc000015 	stw	r16,0(sp)
 1008448:	2821883a 	mov	r16,r5
 100844c:	dc800215 	stw	r18,8(sp)
 1008450:	300b883a 	mov	r5,r6
 1008454:	2025883a 	mov	r18,r4
 1008458:	8009883a 	mov	r4,r16
 100845c:	dc400115 	stw	r17,4(sp)
 1008460:	dfc00415 	stw	ra,16(sp)
 1008464:	dcc00315 	stw	r19,12(sp)
 1008468:	3023883a 	mov	r17,r6
 100846c:	10083e80 	call	10083e8 <__mcmp>
 1008470:	10005026 	beq	r2,zero,10085b4 <__mdiff+0x174>
 1008474:	10004a16 	blt	r2,zero,10085a0 <__mdiff+0x160>
 1008478:	0027883a 	mov	r19,zero
 100847c:	81400117 	ldw	r5,4(r16)
 1008480:	9009883a 	mov	r4,r18
 1008484:	1007a9c0 	call	1007a9c <_Balloc>
 1008488:	82400417 	ldw	r9,16(r16)
 100848c:	89800417 	ldw	r6,16(r17)
 1008490:	14c00315 	stw	r19,12(r2)
 1008494:	4b800144 	addi	r14,r9,5
 1008498:	31800144 	addi	r6,r6,5
 100849c:	739d883a 	add	r14,r14,r14
 10084a0:	318d883a 	add	r6,r6,r6
 10084a4:	739d883a 	add	r14,r14,r14
 10084a8:	318d883a 	add	r6,r6,r6
 10084ac:	81c00504 	addi	r7,r16,20
 10084b0:	839d883a 	add	r14,r16,r14
 10084b4:	8a000504 	addi	r8,r17,20
 10084b8:	898d883a 	add	r6,r17,r6
 10084bc:	10c00504 	addi	r3,r2,20
 10084c0:	0009883a 	mov	r4,zero
 10084c4:	3b000017 	ldw	r12,0(r7)
 10084c8:	42c00017 	ldw	r11,0(r8)
 10084cc:	42000104 	addi	r8,r8,4
 10084d0:	62bfffcc 	andi	r10,r12,65535
 10084d4:	5b7fffcc 	andi	r13,r11,65535
 10084d8:	5109883a 	add	r4,r10,r4
 10084dc:	2355c83a 	sub	r10,r4,r13
 10084e0:	5816d43a 	srli	r11,r11,16
 10084e4:	6008d43a 	srli	r4,r12,16
 10084e8:	501bd43a 	srai	r13,r10,16
 10084ec:	1a80000d 	sth	r10,0(r3)
 10084f0:	22c9c83a 	sub	r4,r4,r11
 10084f4:	2349883a 	add	r4,r4,r13
 10084f8:	1900008d 	sth	r4,2(r3)
 10084fc:	39c00104 	addi	r7,r7,4
 1008500:	2009d43a 	srai	r4,r4,16
 1008504:	18c00104 	addi	r3,r3,4
 1008508:	41bfee36 	bltu	r8,r6,10084c4 <__mdiff+0x84>
 100850c:	180b883a 	mov	r5,r3
 1008510:	3815883a 	mov	r10,r7
 1008514:	3b80132e 	bgeu	r7,r14,1008564 <__mdiff+0x124>
 1008518:	3a000017 	ldw	r8,0(r7)
 100851c:	18c00104 	addi	r3,r3,4
 1008520:	39c00104 	addi	r7,r7,4
 1008524:	41bfffcc 	andi	r6,r8,65535
 1008528:	310d883a 	add	r6,r6,r4
 100852c:	3009d43a 	srai	r4,r6,16
 1008530:	4010d43a 	srli	r8,r8,16
 1008534:	19bfff0d 	sth	r6,-4(r3)
 1008538:	2209883a 	add	r4,r4,r8
 100853c:	193fff8d 	sth	r4,-2(r3)
 1008540:	2009d43a 	srai	r4,r4,16
 1008544:	3bbff436 	bltu	r7,r14,1008518 <__mdiff+0xd8>
 1008548:	0286303a 	nor	r3,zero,r10
 100854c:	1b87883a 	add	r3,r3,r14
 1008550:	1806d0ba 	srli	r3,r3,2
 1008554:	18c00044 	addi	r3,r3,1
 1008558:	18c7883a 	add	r3,r3,r3
 100855c:	18c7883a 	add	r3,r3,r3
 1008560:	28c7883a 	add	r3,r5,r3
 1008564:	193fff17 	ldw	r4,-4(r3)
 1008568:	18ffff04 	addi	r3,r3,-4
 100856c:	2000041e 	bne	r4,zero,1008580 <__mdiff+0x140>
 1008570:	18ffff04 	addi	r3,r3,-4
 1008574:	19000017 	ldw	r4,0(r3)
 1008578:	4a7fffc4 	addi	r9,r9,-1
 100857c:	203ffc26 	beq	r4,zero,1008570 <__mdiff+0x130>
 1008580:	12400415 	stw	r9,16(r2)
 1008584:	dfc00417 	ldw	ra,16(sp)
 1008588:	dcc00317 	ldw	r19,12(sp)
 100858c:	dc800217 	ldw	r18,8(sp)
 1008590:	dc400117 	ldw	r17,4(sp)
 1008594:	dc000017 	ldw	r16,0(sp)
 1008598:	dec00504 	addi	sp,sp,20
 100859c:	f800283a 	ret
 10085a0:	8005883a 	mov	r2,r16
 10085a4:	04c00044 	movi	r19,1
 10085a8:	8821883a 	mov	r16,r17
 10085ac:	1023883a 	mov	r17,r2
 10085b0:	003fb206 	br	100847c <__mdiff+0x3c>
 10085b4:	9009883a 	mov	r4,r18
 10085b8:	000b883a 	mov	r5,zero
 10085bc:	1007a9c0 	call	1007a9c <_Balloc>
 10085c0:	00c00044 	movi	r3,1
 10085c4:	10c00415 	stw	r3,16(r2)
 10085c8:	10000515 	stw	zero,20(r2)
 10085cc:	dfc00417 	ldw	ra,16(sp)
 10085d0:	dcc00317 	ldw	r19,12(sp)
 10085d4:	dc800217 	ldw	r18,8(sp)
 10085d8:	dc400117 	ldw	r17,4(sp)
 10085dc:	dc000017 	ldw	r16,0(sp)
 10085e0:	dec00504 	addi	sp,sp,20
 10085e4:	f800283a 	ret

010085e8 <__ulp>:
 10085e8:	295ffc2c 	andhi	r5,r5,32752
 10085ec:	00bf3034 	movhi	r2,64704
 10085f0:	2887883a 	add	r3,r5,r2
 10085f4:	00c0020e 	bge	zero,r3,1008600 <__ulp+0x18>
 10085f8:	0005883a 	mov	r2,zero
 10085fc:	f800283a 	ret
 1008600:	00c7c83a 	sub	r3,zero,r3
 1008604:	1805d53a 	srai	r2,r3,20
 1008608:	00c004c4 	movi	r3,19
 100860c:	18800a0e 	bge	r3,r2,1008638 <__ulp+0x50>
 1008610:	01000c84 	movi	r4,50
 1008614:	0007883a 	mov	r3,zero
 1008618:	20800516 	blt	r4,r2,1008630 <__ulp+0x48>
 100861c:	01000cc4 	movi	r4,51
 1008620:	2085c83a 	sub	r2,r4,r2
 1008624:	01000044 	movi	r4,1
 1008628:	2084983a 	sll	r2,r4,r2
 100862c:	f800283a 	ret
 1008630:	00800044 	movi	r2,1
 1008634:	f800283a 	ret
 1008638:	00c00234 	movhi	r3,8
 100863c:	1887d83a 	sra	r3,r3,r2
 1008640:	0005883a 	mov	r2,zero
 1008644:	f800283a 	ret

01008648 <__b2d>:
 1008648:	defffa04 	addi	sp,sp,-24
 100864c:	dc000015 	stw	r16,0(sp)
 1008650:	24000417 	ldw	r16,16(r4)
 1008654:	dc400115 	stw	r17,4(sp)
 1008658:	dcc00315 	stw	r19,12(sp)
 100865c:	84000144 	addi	r16,r16,5
 1008660:	8421883a 	add	r16,r16,r16
 1008664:	8421883a 	add	r16,r16,r16
 1008668:	2421883a 	add	r16,r4,r16
 100866c:	847fff17 	ldw	r17,-4(r16)
 1008670:	24c00504 	addi	r19,r4,20
 1008674:	dd000415 	stw	r20,16(sp)
 1008678:	8809883a 	mov	r4,r17
 100867c:	dc800215 	stw	r18,8(sp)
 1008680:	2829883a 	mov	r20,r5
 1008684:	dfc00515 	stw	ra,20(sp)
 1008688:	1007db40 	call	1007db4 <__hi0bits>
 100868c:	00c00804 	movi	r3,32
 1008690:	1887c83a 	sub	r3,r3,r2
 1008694:	a0c00015 	stw	r3,0(r20)
 1008698:	00c00284 	movi	r3,10
 100869c:	84bfff04 	addi	r18,r16,-4
 10086a0:	18801216 	blt	r3,r2,10086ec <__b2d+0xa4>
 10086a4:	010002c4 	movi	r4,11
 10086a8:	2089c83a 	sub	r4,r4,r2
 10086ac:	8906d83a 	srl	r3,r17,r4
 10086b0:	18cffc34 	orhi	r3,r3,16368
 10086b4:	9c80322e 	bgeu	r19,r18,1008780 <__b2d+0x138>
 10086b8:	817ffe17 	ldw	r5,-8(r16)
 10086bc:	2908d83a 	srl	r4,r5,r4
 10086c0:	10800544 	addi	r2,r2,21
 10086c4:	88a2983a 	sll	r17,r17,r2
 10086c8:	2444b03a 	or	r2,r4,r17
 10086cc:	dfc00517 	ldw	ra,20(sp)
 10086d0:	dd000417 	ldw	r20,16(sp)
 10086d4:	dcc00317 	ldw	r19,12(sp)
 10086d8:	dc800217 	ldw	r18,8(sp)
 10086dc:	dc400117 	ldw	r17,4(sp)
 10086e0:	dc000017 	ldw	r16,0(sp)
 10086e4:	dec00604 	addi	sp,sp,24
 10086e8:	f800283a 	ret
 10086ec:	9c801636 	bltu	r19,r18,1008748 <__b2d+0x100>
 10086f0:	113ffd44 	addi	r4,r2,-11
 10086f4:	000b883a 	mov	r5,zero
 10086f8:	20001726 	beq	r4,zero,1008758 <__b2d+0x110>
 10086fc:	00c00ac4 	movi	r3,43
 1008700:	1885c83a 	sub	r2,r3,r2
 1008704:	8906983a 	sll	r3,r17,r4
 1008708:	288cd83a 	srl	r6,r5,r2
 100870c:	18cffc34 	orhi	r3,r3,16368
 1008710:	1986b03a 	or	r3,r3,r6
 1008714:	9c801c2e 	bgeu	r19,r18,1008788 <__b2d+0x140>
 1008718:	91bfff17 	ldw	r6,-4(r18)
 100871c:	3084d83a 	srl	r2,r6,r2
 1008720:	2908983a 	sll	r4,r5,r4
 1008724:	1104b03a 	or	r2,r2,r4
 1008728:	dfc00517 	ldw	ra,20(sp)
 100872c:	dd000417 	ldw	r20,16(sp)
 1008730:	dcc00317 	ldw	r19,12(sp)
 1008734:	dc800217 	ldw	r18,8(sp)
 1008738:	dc400117 	ldw	r17,4(sp)
 100873c:	dc000017 	ldw	r16,0(sp)
 1008740:	dec00604 	addi	sp,sp,24
 1008744:	f800283a 	ret
 1008748:	113ffd44 	addi	r4,r2,-11
 100874c:	84bffe04 	addi	r18,r16,-8
 1008750:	817ffe17 	ldw	r5,-8(r16)
 1008754:	203fe91e 	bne	r4,zero,10086fc <__b2d+0xb4>
 1008758:	88cffc34 	orhi	r3,r17,16368
 100875c:	2805883a 	mov	r2,r5
 1008760:	dfc00517 	ldw	ra,20(sp)
 1008764:	dd000417 	ldw	r20,16(sp)
 1008768:	dcc00317 	ldw	r19,12(sp)
 100876c:	dc800217 	ldw	r18,8(sp)
 1008770:	dc400117 	ldw	r17,4(sp)
 1008774:	dc000017 	ldw	r16,0(sp)
 1008778:	dec00604 	addi	sp,sp,24
 100877c:	f800283a 	ret
 1008780:	0009883a 	mov	r4,zero
 1008784:	003fce06 	br	10086c0 <__b2d+0x78>
 1008788:	0005883a 	mov	r2,zero
 100878c:	003fe406 	br	1008720 <__b2d+0xd8>

01008790 <__d2b>:
 1008790:	defff804 	addi	sp,sp,-32
 1008794:	dc400315 	stw	r17,12(sp)
 1008798:	3023883a 	mov	r17,r6
 100879c:	dc800415 	stw	r18,16(sp)
 10087a0:	8824907a 	slli	r18,r17,1
 10087a4:	dcc00515 	stw	r19,20(sp)
 10087a8:	2827883a 	mov	r19,r5
 10087ac:	9024d57a 	srli	r18,r18,21
 10087b0:	01400044 	movi	r5,1
 10087b4:	dd000615 	stw	r20,24(sp)
 10087b8:	dc000215 	stw	r16,8(sp)
 10087bc:	dfc00715 	stw	ra,28(sp)
 10087c0:	3829883a 	mov	r20,r7
 10087c4:	1007a9c0 	call	1007a9c <_Balloc>
 10087c8:	1021883a 	mov	r16,r2
 10087cc:	00800434 	movhi	r2,16
 10087d0:	10bfffc4 	addi	r2,r2,-1
 10087d4:	88a2703a 	and	r17,r17,r2
 10087d8:	90000126 	beq	r18,zero,10087e0 <__d2b+0x50>
 10087dc:	8c400434 	orhi	r17,r17,16
 10087e0:	dc400015 	stw	r17,0(sp)
 10087e4:	98002226 	beq	r19,zero,1008870 <__d2b+0xe0>
 10087e8:	d9000104 	addi	r4,sp,4
 10087ec:	dcc00115 	stw	r19,4(sp)
 10087f0:	1007e1c0 	call	1007e1c <__lo0bits>
 10087f4:	d8c00017 	ldw	r3,0(sp)
 10087f8:	10002d1e 	bne	r2,zero,10088b0 <__d2b+0x120>
 10087fc:	d9000117 	ldw	r4,4(sp)
 1008800:	81000515 	stw	r4,20(r16)
 1008804:	1823003a 	cmpeq	r17,r3,zero
 1008808:	01000084 	movi	r4,2
 100880c:	2463c83a 	sub	r17,r4,r17
 1008810:	80c00615 	stw	r3,24(r16)
 1008814:	84400415 	stw	r17,16(r16)
 1008818:	90001d1e 	bne	r18,zero,1008890 <__d2b+0x100>
 100881c:	88c00104 	addi	r3,r17,4
 1008820:	18c7883a 	add	r3,r3,r3
 1008824:	18c7883a 	add	r3,r3,r3
 1008828:	80c7883a 	add	r3,r16,r3
 100882c:	19000017 	ldw	r4,0(r3)
 1008830:	10bef384 	addi	r2,r2,-1074
 1008834:	a0800015 	stw	r2,0(r20)
 1008838:	1007db40 	call	1007db4 <__hi0bits>
 100883c:	8822917a 	slli	r17,r17,5
 1008840:	d8c00817 	ldw	r3,32(sp)
 1008844:	8885c83a 	sub	r2,r17,r2
 1008848:	18800015 	stw	r2,0(r3)
 100884c:	8005883a 	mov	r2,r16
 1008850:	dfc00717 	ldw	ra,28(sp)
 1008854:	dd000617 	ldw	r20,24(sp)
 1008858:	dcc00517 	ldw	r19,20(sp)
 100885c:	dc800417 	ldw	r18,16(sp)
 1008860:	dc400317 	ldw	r17,12(sp)
 1008864:	dc000217 	ldw	r16,8(sp)
 1008868:	dec00804 	addi	sp,sp,32
 100886c:	f800283a 	ret
 1008870:	d809883a 	mov	r4,sp
 1008874:	1007e1c0 	call	1007e1c <__lo0bits>
 1008878:	d8c00017 	ldw	r3,0(sp)
 100887c:	04400044 	movi	r17,1
 1008880:	84400415 	stw	r17,16(r16)
 1008884:	80c00515 	stw	r3,20(r16)
 1008888:	10800804 	addi	r2,r2,32
 100888c:	903fe326 	beq	r18,zero,100881c <__d2b+0x8c>
 1008890:	00c00d44 	movi	r3,53
 1008894:	94bef344 	addi	r18,r18,-1075
 1008898:	90a5883a 	add	r18,r18,r2
 100889c:	1885c83a 	sub	r2,r3,r2
 10088a0:	d8c00817 	ldw	r3,32(sp)
 10088a4:	a4800015 	stw	r18,0(r20)
 10088a8:	18800015 	stw	r2,0(r3)
 10088ac:	003fe706 	br	100884c <__d2b+0xbc>
 10088b0:	01000804 	movi	r4,32
 10088b4:	2089c83a 	sub	r4,r4,r2
 10088b8:	1908983a 	sll	r4,r3,r4
 10088bc:	d9400117 	ldw	r5,4(sp)
 10088c0:	1886d83a 	srl	r3,r3,r2
 10088c4:	2148b03a 	or	r4,r4,r5
 10088c8:	81000515 	stw	r4,20(r16)
 10088cc:	d8c00015 	stw	r3,0(sp)
 10088d0:	003fcc06 	br	1008804 <__d2b+0x74>

010088d4 <__ratio>:
 10088d4:	defff904 	addi	sp,sp,-28
 10088d8:	dc400315 	stw	r17,12(sp)
 10088dc:	2823883a 	mov	r17,r5
 10088e0:	d9400104 	addi	r5,sp,4
 10088e4:	dfc00615 	stw	ra,24(sp)
 10088e8:	dcc00515 	stw	r19,20(sp)
 10088ec:	dc800415 	stw	r18,16(sp)
 10088f0:	2027883a 	mov	r19,r4
 10088f4:	dc000215 	stw	r16,8(sp)
 10088f8:	10086480 	call	1008648 <__b2d>
 10088fc:	8809883a 	mov	r4,r17
 1008900:	d80b883a 	mov	r5,sp
 1008904:	1025883a 	mov	r18,r2
 1008908:	1821883a 	mov	r16,r3
 100890c:	10086480 	call	1008648 <__b2d>
 1008910:	99400417 	ldw	r5,16(r19)
 1008914:	89000417 	ldw	r4,16(r17)
 1008918:	d9800117 	ldw	r6,4(sp)
 100891c:	2909c83a 	sub	r4,r5,r4
 1008920:	d9400017 	ldw	r5,0(sp)
 1008924:	2008917a 	slli	r4,r4,5
 1008928:	314bc83a 	sub	r5,r6,r5
 100892c:	290b883a 	add	r5,r5,r4
 1008930:	01400e0e 	bge	zero,r5,100896c <__ratio+0x98>
 1008934:	280a953a 	slli	r5,r5,20
 1008938:	2c21883a 	add	r16,r5,r16
 100893c:	9009883a 	mov	r4,r18
 1008940:	800b883a 	mov	r5,r16
 1008944:	100d883a 	mov	r6,r2
 1008948:	180f883a 	mov	r7,r3
 100894c:	100a4900 	call	100a490 <__divdf3>
 1008950:	dfc00617 	ldw	ra,24(sp)
 1008954:	dcc00517 	ldw	r19,20(sp)
 1008958:	dc800417 	ldw	r18,16(sp)
 100895c:	dc400317 	ldw	r17,12(sp)
 1008960:	dc000217 	ldw	r16,8(sp)
 1008964:	dec00704 	addi	sp,sp,28
 1008968:	f800283a 	ret
 100896c:	280a953a 	slli	r5,r5,20
 1008970:	1947c83a 	sub	r3,r3,r5
 1008974:	003ff106 	br	100893c <__ratio+0x68>

01008978 <_mprec_log10>:
 1008978:	defffe04 	addi	sp,sp,-8
 100897c:	dc000015 	stw	r16,0(sp)
 1008980:	dfc00115 	stw	ra,4(sp)
 1008984:	008005c4 	movi	r2,23
 1008988:	2021883a 	mov	r16,r4
 100898c:	11000d0e 	bge	r2,r4,10089c4 <_mprec_log10+0x4c>
 1008990:	0005883a 	mov	r2,zero
 1008994:	00cffc34 	movhi	r3,16368
 1008998:	843fffc4 	addi	r16,r16,-1
 100899c:	1009883a 	mov	r4,r2
 10089a0:	180b883a 	mov	r5,r3
 10089a4:	000d883a 	mov	r6,zero
 10089a8:	01d00934 	movhi	r7,16420
 10089ac:	100a1ac0 	call	100a1ac <__muldf3>
 10089b0:	803ff91e 	bne	r16,zero,1008998 <_mprec_log10+0x20>
 10089b4:	dfc00117 	ldw	ra,4(sp)
 10089b8:	dc000017 	ldw	r16,0(sp)
 10089bc:	dec00204 	addi	sp,sp,8
 10089c0:	f800283a 	ret
 10089c4:	202090fa 	slli	r16,r4,3
 10089c8:	00804074 	movhi	r2,257
 10089cc:	10bea404 	addi	r2,r2,-1392
 10089d0:	1421883a 	add	r16,r2,r16
 10089d4:	80800017 	ldw	r2,0(r16)
 10089d8:	80c00117 	ldw	r3,4(r16)
 10089dc:	dfc00117 	ldw	ra,4(sp)
 10089e0:	dc000017 	ldw	r16,0(sp)
 10089e4:	dec00204 	addi	sp,sp,8
 10089e8:	f800283a 	ret

010089ec <__copybits>:
 10089ec:	297fffc4 	addi	r5,r5,-1
 10089f0:	31c00417 	ldw	r7,16(r6)
 10089f4:	2811d17a 	srai	r8,r5,5
 10089f8:	30800504 	addi	r2,r6,20
 10089fc:	39c00144 	addi	r7,r7,5
 1008a00:	42000044 	addi	r8,r8,1
 1008a04:	39cf883a 	add	r7,r7,r7
 1008a08:	4211883a 	add	r8,r8,r8
 1008a0c:	39cf883a 	add	r7,r7,r7
 1008a10:	4211883a 	add	r8,r8,r8
 1008a14:	31cf883a 	add	r7,r6,r7
 1008a18:	2211883a 	add	r8,r4,r8
 1008a1c:	11c00d2e 	bgeu	r2,r7,1008a54 <__copybits+0x68>
 1008a20:	2007883a 	mov	r3,r4
 1008a24:	11400017 	ldw	r5,0(r2)
 1008a28:	18c00104 	addi	r3,r3,4
 1008a2c:	10800104 	addi	r2,r2,4
 1008a30:	197fff15 	stw	r5,-4(r3)
 1008a34:	11fffb36 	bltu	r2,r7,1008a24 <__copybits+0x38>
 1008a38:	3985c83a 	sub	r2,r7,r6
 1008a3c:	10bffac4 	addi	r2,r2,-21
 1008a40:	1004d0ba 	srli	r2,r2,2
 1008a44:	10800044 	addi	r2,r2,1
 1008a48:	1085883a 	add	r2,r2,r2
 1008a4c:	1085883a 	add	r2,r2,r2
 1008a50:	2089883a 	add	r4,r4,r2
 1008a54:	2200032e 	bgeu	r4,r8,1008a64 <__copybits+0x78>
 1008a58:	20000015 	stw	zero,0(r4)
 1008a5c:	21000104 	addi	r4,r4,4
 1008a60:	223ffd36 	bltu	r4,r8,1008a58 <__copybits+0x6c>
 1008a64:	f800283a 	ret

01008a68 <__any_on>:
 1008a68:	21800417 	ldw	r6,16(r4)
 1008a6c:	2805d17a 	srai	r2,r5,5
 1008a70:	20c00504 	addi	r3,r4,20
 1008a74:	30800f0e 	bge	r6,r2,1008ab4 <__any_on+0x4c>
 1008a78:	3005883a 	mov	r2,r6
 1008a7c:	10800144 	addi	r2,r2,5
 1008a80:	1085883a 	add	r2,r2,r2
 1008a84:	1085883a 	add	r2,r2,r2
 1008a88:	2089883a 	add	r4,r4,r2
 1008a8c:	1900152e 	bgeu	r3,r4,1008ae4 <__any_on+0x7c>
 1008a90:	20bfff17 	ldw	r2,-4(r4)
 1008a94:	213fff04 	addi	r4,r4,-4
 1008a98:	1000041e 	bne	r2,zero,1008aac <__any_on+0x44>
 1008a9c:	1900112e 	bgeu	r3,r4,1008ae4 <__any_on+0x7c>
 1008aa0:	213fff04 	addi	r4,r4,-4
 1008aa4:	20800017 	ldw	r2,0(r4)
 1008aa8:	103ffc26 	beq	r2,zero,1008a9c <__any_on+0x34>
 1008aac:	00800044 	movi	r2,1
 1008ab0:	f800283a 	ret
 1008ab4:	11bff10e 	bge	r2,r6,1008a7c <__any_on+0x14>
 1008ab8:	294007cc 	andi	r5,r5,31
 1008abc:	283fef26 	beq	r5,zero,1008a7c <__any_on+0x14>
 1008ac0:	11800144 	addi	r6,r2,5
 1008ac4:	318d883a 	add	r6,r6,r6
 1008ac8:	318d883a 	add	r6,r6,r6
 1008acc:	218d883a 	add	r6,r4,r6
 1008ad0:	31800017 	ldw	r6,0(r6)
 1008ad4:	314ed83a 	srl	r7,r6,r5
 1008ad8:	394a983a 	sll	r5,r7,r5
 1008adc:	29bff31e 	bne	r5,r6,1008aac <__any_on+0x44>
 1008ae0:	003fe606 	br	1008a7c <__any_on+0x14>
 1008ae4:	0005883a 	mov	r2,zero
 1008ae8:	f800283a 	ret

01008aec <_putc_r>:
 1008aec:	defffc04 	addi	sp,sp,-16
 1008af0:	dc000215 	stw	r16,8(sp)
 1008af4:	dfc00315 	stw	ra,12(sp)
 1008af8:	2021883a 	mov	r16,r4
 1008afc:	20000226 	beq	r4,zero,1008b08 <_putc_r+0x1c>
 1008b00:	20800e17 	ldw	r2,56(r4)
 1008b04:	10001d26 	beq	r2,zero,1008b7c <_putc_r+0x90>
 1008b08:	30800217 	ldw	r2,8(r6)
 1008b0c:	10bfffc4 	addi	r2,r2,-1
 1008b10:	30800215 	stw	r2,8(r6)
 1008b14:	10000a16 	blt	r2,zero,1008b40 <_putc_r+0x54>
 1008b18:	30800017 	ldw	r2,0(r6)
 1008b1c:	11400005 	stb	r5,0(r2)
 1008b20:	30800017 	ldw	r2,0(r6)
 1008b24:	10c00044 	addi	r3,r2,1
 1008b28:	10800003 	ldbu	r2,0(r2)
 1008b2c:	30c00015 	stw	r3,0(r6)
 1008b30:	dfc00317 	ldw	ra,12(sp)
 1008b34:	dc000217 	ldw	r16,8(sp)
 1008b38:	dec00404 	addi	sp,sp,16
 1008b3c:	f800283a 	ret
 1008b40:	30c00617 	ldw	r3,24(r6)
 1008b44:	10c01316 	blt	r2,r3,1008b94 <_putc_r+0xa8>
 1008b48:	30800017 	ldw	r2,0(r6)
 1008b4c:	01000284 	movi	r4,10
 1008b50:	11400005 	stb	r5,0(r2)
 1008b54:	30c00017 	ldw	r3,0(r6)
 1008b58:	19400003 	ldbu	r5,0(r3)
 1008b5c:	29000d26 	beq	r5,r4,1008b94 <_putc_r+0xa8>
 1008b60:	18c00044 	addi	r3,r3,1
 1008b64:	2805883a 	mov	r2,r5
 1008b68:	30c00015 	stw	r3,0(r6)
 1008b6c:	dfc00317 	ldw	ra,12(sp)
 1008b70:	dc000217 	ldw	r16,8(sp)
 1008b74:	dec00404 	addi	sp,sp,16
 1008b78:	f800283a 	ret
 1008b7c:	d9400015 	stw	r5,0(sp)
 1008b80:	d9800115 	stw	r6,4(sp)
 1008b84:	10068600 	call	1006860 <__sinit>
 1008b88:	d9800117 	ldw	r6,4(sp)
 1008b8c:	d9400017 	ldw	r5,0(sp)
 1008b90:	003fdd06 	br	1008b08 <_putc_r+0x1c>
 1008b94:	8009883a 	mov	r4,r16
 1008b98:	dfc00317 	ldw	ra,12(sp)
 1008b9c:	dc000217 	ldw	r16,8(sp)
 1008ba0:	dec00404 	addi	sp,sp,16
 1008ba4:	10094081 	jmpi	1009408 <__swbuf_r>

01008ba8 <putc>:
 1008ba8:	defffc04 	addi	sp,sp,-16
 1008bac:	dc400115 	stw	r17,4(sp)
 1008bb0:	04404074 	movhi	r17,257
 1008bb4:	8c45e104 	addi	r17,r17,6020
 1008bb8:	88800017 	ldw	r2,0(r17)
 1008bbc:	dc800215 	stw	r18,8(sp)
 1008bc0:	dc000015 	stw	r16,0(sp)
 1008bc4:	dfc00315 	stw	ra,12(sp)
 1008bc8:	2025883a 	mov	r18,r4
 1008bcc:	2821883a 	mov	r16,r5
 1008bd0:	10000226 	beq	r2,zero,1008bdc <putc+0x34>
 1008bd4:	10c00e17 	ldw	r3,56(r2)
 1008bd8:	18002126 	beq	r3,zero,1008c60 <putc+0xb8>
 1008bdc:	80800217 	ldw	r2,8(r16)
 1008be0:	10bfffc4 	addi	r2,r2,-1
 1008be4:	80800215 	stw	r2,8(r16)
 1008be8:	10000c16 	blt	r2,zero,1008c1c <putc+0x74>
 1008bec:	80800017 	ldw	r2,0(r16)
 1008bf0:	14800005 	stb	r18,0(r2)
 1008bf4:	80800017 	ldw	r2,0(r16)
 1008bf8:	10c00044 	addi	r3,r2,1
 1008bfc:	10800003 	ldbu	r2,0(r2)
 1008c00:	80c00015 	stw	r3,0(r16)
 1008c04:	dfc00317 	ldw	ra,12(sp)
 1008c08:	dc800217 	ldw	r18,8(sp)
 1008c0c:	dc400117 	ldw	r17,4(sp)
 1008c10:	dc000017 	ldw	r16,0(sp)
 1008c14:	dec00404 	addi	sp,sp,16
 1008c18:	f800283a 	ret
 1008c1c:	80c00617 	ldw	r3,24(r16)
 1008c20:	10c01216 	blt	r2,r3,1008c6c <putc+0xc4>
 1008c24:	80800017 	ldw	r2,0(r16)
 1008c28:	01000284 	movi	r4,10
 1008c2c:	14800005 	stb	r18,0(r2)
 1008c30:	80c00017 	ldw	r3,0(r16)
 1008c34:	19400003 	ldbu	r5,0(r3)
 1008c38:	29001526 	beq	r5,r4,1008c90 <putc+0xe8>
 1008c3c:	18c00044 	addi	r3,r3,1
 1008c40:	2805883a 	mov	r2,r5
 1008c44:	80c00015 	stw	r3,0(r16)
 1008c48:	dfc00317 	ldw	ra,12(sp)
 1008c4c:	dc800217 	ldw	r18,8(sp)
 1008c50:	dc400117 	ldw	r17,4(sp)
 1008c54:	dc000017 	ldw	r16,0(sp)
 1008c58:	dec00404 	addi	sp,sp,16
 1008c5c:	f800283a 	ret
 1008c60:	1009883a 	mov	r4,r2
 1008c64:	10068600 	call	1006860 <__sinit>
 1008c68:	003fdc06 	br	1008bdc <putc+0x34>
 1008c6c:	89000017 	ldw	r4,0(r17)
 1008c70:	900b883a 	mov	r5,r18
 1008c74:	800d883a 	mov	r6,r16
 1008c78:	dfc00317 	ldw	ra,12(sp)
 1008c7c:	dc800217 	ldw	r18,8(sp)
 1008c80:	dc400117 	ldw	r17,4(sp)
 1008c84:	dc000017 	ldw	r16,0(sp)
 1008c88:	dec00404 	addi	sp,sp,16
 1008c8c:	10094081 	jmpi	1009408 <__swbuf_r>
 1008c90:	89000017 	ldw	r4,0(r17)
 1008c94:	003ff706 	br	1008c74 <putc+0xcc>

01008c98 <_read_r>:
 1008c98:	defffd04 	addi	sp,sp,-12
 1008c9c:	dc400115 	stw	r17,4(sp)
 1008ca0:	dc000015 	stw	r16,0(sp)
 1008ca4:	2023883a 	mov	r17,r4
 1008ca8:	04004074 	movhi	r16,257
 1008cac:	8405f604 	addi	r16,r16,6104
 1008cb0:	2809883a 	mov	r4,r5
 1008cb4:	300b883a 	mov	r5,r6
 1008cb8:	380d883a 	mov	r6,r7
 1008cbc:	dfc00215 	stw	ra,8(sp)
 1008cc0:	80000015 	stw	zero,0(r16)
 1008cc4:	100b9200 	call	100b920 <read>
 1008cc8:	00ffffc4 	movi	r3,-1
 1008ccc:	10c00526 	beq	r2,r3,1008ce4 <_read_r+0x4c>
 1008cd0:	dfc00217 	ldw	ra,8(sp)
 1008cd4:	dc400117 	ldw	r17,4(sp)
 1008cd8:	dc000017 	ldw	r16,0(sp)
 1008cdc:	dec00304 	addi	sp,sp,12
 1008ce0:	f800283a 	ret
 1008ce4:	80c00017 	ldw	r3,0(r16)
 1008ce8:	183ff926 	beq	r3,zero,1008cd0 <_read_r+0x38>
 1008cec:	88c00015 	stw	r3,0(r17)
 1008cf0:	dfc00217 	ldw	ra,8(sp)
 1008cf4:	dc400117 	ldw	r17,4(sp)
 1008cf8:	dc000017 	ldw	r16,0(sp)
 1008cfc:	dec00304 	addi	sp,sp,12
 1008d00:	f800283a 	ret

01008d04 <_realloc_r>:
 1008d04:	defff504 	addi	sp,sp,-44
 1008d08:	dd400615 	stw	r21,24(sp)
 1008d0c:	dc800315 	stw	r18,12(sp)
 1008d10:	dc000115 	stw	r16,4(sp)
 1008d14:	dfc00a15 	stw	ra,40(sp)
 1008d18:	df000915 	stw	fp,36(sp)
 1008d1c:	ddc00815 	stw	r23,32(sp)
 1008d20:	dd800715 	stw	r22,28(sp)
 1008d24:	dd000515 	stw	r20,20(sp)
 1008d28:	dcc00415 	stw	r19,16(sp)
 1008d2c:	dc400215 	stw	r17,8(sp)
 1008d30:	2821883a 	mov	r16,r5
 1008d34:	202b883a 	mov	r21,r4
 1008d38:	3025883a 	mov	r18,r6
 1008d3c:	28009626 	beq	r5,zero,1008f98 <_realloc_r+0x294>
 1008d40:	100b5f80 	call	100b5f8 <__malloc_lock>
 1008d44:	80bfff17 	ldw	r2,-4(r16)
 1008d48:	04ffff04 	movi	r19,-4
 1008d4c:	90c002c4 	addi	r3,r18,11
 1008d50:	01000584 	movi	r4,22
 1008d54:	85bffe04 	addi	r22,r16,-8
 1008d58:	14e6703a 	and	r19,r2,r19
 1008d5c:	20c0372e 	bgeu	r4,r3,1008e3c <_realloc_r+0x138>
 1008d60:	047ffe04 	movi	r17,-8
 1008d64:	1c62703a 	and	r17,r3,r17
 1008d68:	8807883a 	mov	r3,r17
 1008d6c:	88005a16 	blt	r17,zero,1008ed8 <_realloc_r+0x1d4>
 1008d70:	8c805936 	bltu	r17,r18,1008ed8 <_realloc_r+0x1d4>
 1008d74:	98c0340e 	bge	r19,r3,1008e48 <_realloc_r+0x144>
 1008d78:	07004074 	movhi	fp,257
 1008d7c:	e73ff404 	addi	fp,fp,-48
 1008d80:	e1400217 	ldw	r5,8(fp)
 1008d84:	b4c9883a 	add	r4,r22,r19
 1008d88:	29009026 	beq	r5,r4,1008fcc <_realloc_r+0x2c8>
 1008d8c:	21800117 	ldw	r6,4(r4)
 1008d90:	01ffff84 	movi	r7,-2
 1008d94:	31ce703a 	and	r7,r6,r7
 1008d98:	21cf883a 	add	r7,r4,r7
 1008d9c:	39c00117 	ldw	r7,4(r7)
 1008da0:	39c0004c 	andi	r7,r7,1
 1008da4:	38004326 	beq	r7,zero,1008eb4 <_realloc_r+0x1b0>
 1008da8:	000d883a 	mov	r6,zero
 1008dac:	0009883a 	mov	r4,zero
 1008db0:	1080004c 	andi	r2,r2,1
 1008db4:	10005a1e 	bne	r2,zero,1008f20 <_realloc_r+0x21c>
 1008db8:	85fffe17 	ldw	r23,-8(r16)
 1008dbc:	00bfff04 	movi	r2,-4
 1008dc0:	b5efc83a 	sub	r23,r22,r23
 1008dc4:	b9c00117 	ldw	r7,4(r23)
 1008dc8:	388e703a 	and	r7,r7,r2
 1008dcc:	3ccf883a 	add	r7,r7,r19
 1008dd0:	20005226 	beq	r4,zero,1008f1c <_realloc_r+0x218>
 1008dd4:	31e9883a 	add	r20,r6,r7
 1008dd8:	2140c726 	beq	r4,r5,10090f8 <_realloc_r+0x3f4>
 1008ddc:	a0c04f16 	blt	r20,r3,1008f1c <_realloc_r+0x218>
 1008de0:	20800317 	ldw	r2,12(r4)
 1008de4:	20c00217 	ldw	r3,8(r4)
 1008de8:	99bfff04 	addi	r6,r19,-4
 1008dec:	01000904 	movi	r4,36
 1008df0:	18800315 	stw	r2,12(r3)
 1008df4:	10c00215 	stw	r3,8(r2)
 1008df8:	b8c00217 	ldw	r3,8(r23)
 1008dfc:	b8800317 	ldw	r2,12(r23)
 1008e00:	bc800204 	addi	r18,r23,8
 1008e04:	18800315 	stw	r2,12(r3)
 1008e08:	10c00215 	stw	r3,8(r2)
 1008e0c:	2180ed36 	bltu	r4,r6,10091c4 <_realloc_r+0x4c0>
 1008e10:	008004c4 	movi	r2,19
 1008e14:	11809b2e 	bgeu	r2,r6,1009084 <_realloc_r+0x380>
 1008e18:	80800017 	ldw	r2,0(r16)
 1008e1c:	b8800215 	stw	r2,8(r23)
 1008e20:	80800117 	ldw	r2,4(r16)
 1008e24:	b8800315 	stw	r2,12(r23)
 1008e28:	008006c4 	movi	r2,27
 1008e2c:	1180f936 	bltu	r2,r6,1009214 <_realloc_r+0x510>
 1008e30:	b8800404 	addi	r2,r23,16
 1008e34:	80c00204 	addi	r3,r16,8
 1008e38:	00009406 	br	100908c <_realloc_r+0x388>
 1008e3c:	00c00404 	movi	r3,16
 1008e40:	1823883a 	mov	r17,r3
 1008e44:	003fca06 	br	1008d70 <_realloc_r+0x6c>
 1008e48:	9829883a 	mov	r20,r19
 1008e4c:	a447c83a 	sub	r3,r20,r17
 1008e50:	010003c4 	movi	r4,15
 1008e54:	1080004c 	andi	r2,r2,1
 1008e58:	20c02336 	bltu	r4,r3,1008ee8 <_realloc_r+0x1e4>
 1008e5c:	1504b03a 	or	r2,r2,r20
 1008e60:	b0800115 	stw	r2,4(r22)
 1008e64:	b52d883a 	add	r22,r22,r20
 1008e68:	b0800117 	ldw	r2,4(r22)
 1008e6c:	10800054 	ori	r2,r2,1
 1008e70:	b0800115 	stw	r2,4(r22)
 1008e74:	a809883a 	mov	r4,r21
 1008e78:	100b6180 	call	100b618 <__malloc_unlock>
 1008e7c:	8025883a 	mov	r18,r16
 1008e80:	9005883a 	mov	r2,r18
 1008e84:	dfc00a17 	ldw	ra,40(sp)
 1008e88:	df000917 	ldw	fp,36(sp)
 1008e8c:	ddc00817 	ldw	r23,32(sp)
 1008e90:	dd800717 	ldw	r22,28(sp)
 1008e94:	dd400617 	ldw	r21,24(sp)
 1008e98:	dd000517 	ldw	r20,20(sp)
 1008e9c:	dcc00417 	ldw	r19,16(sp)
 1008ea0:	dc800317 	ldw	r18,12(sp)
 1008ea4:	dc400217 	ldw	r17,8(sp)
 1008ea8:	dc000117 	ldw	r16,4(sp)
 1008eac:	dec00b04 	addi	sp,sp,44
 1008eb0:	f800283a 	ret
 1008eb4:	01ffff04 	movi	r7,-4
 1008eb8:	31cc703a 	and	r6,r6,r7
 1008ebc:	34e9883a 	add	r20,r6,r19
 1008ec0:	a0ffbb16 	blt	r20,r3,1008db0 <_realloc_r+0xac>
 1008ec4:	20c00317 	ldw	r3,12(r4)
 1008ec8:	21000217 	ldw	r4,8(r4)
 1008ecc:	20c00315 	stw	r3,12(r4)
 1008ed0:	19000215 	stw	r4,8(r3)
 1008ed4:	003fdd06 	br	1008e4c <_realloc_r+0x148>
 1008ed8:	00800304 	movi	r2,12
 1008edc:	a8800015 	stw	r2,0(r21)
 1008ee0:	0025883a 	mov	r18,zero
 1008ee4:	003fe606 	br	1008e80 <_realloc_r+0x17c>
 1008ee8:	1444b03a 	or	r2,r2,r17
 1008eec:	b0800115 	stw	r2,4(r22)
 1008ef0:	b44b883a 	add	r5,r22,r17
 1008ef4:	18800054 	ori	r2,r3,1
 1008ef8:	28800115 	stw	r2,4(r5)
 1008efc:	28c7883a 	add	r3,r5,r3
 1008f00:	18800117 	ldw	r2,4(r3)
 1008f04:	a809883a 	mov	r4,r21
 1008f08:	29400204 	addi	r5,r5,8
 1008f0c:	10800054 	ori	r2,r2,1
 1008f10:	18800115 	stw	r2,4(r3)
 1008f14:	1006c7c0 	call	1006c7c <_free_r>
 1008f18:	003fd606 	br	1008e74 <_realloc_r+0x170>
 1008f1c:	38c0330e 	bge	r7,r3,1008fec <_realloc_r+0x2e8>
 1008f20:	900b883a 	mov	r5,r18
 1008f24:	a809883a 	mov	r4,r21
 1008f28:	1001d480 	call	1001d48 <_malloc_r>
 1008f2c:	1025883a 	mov	r18,r2
 1008f30:	10001626 	beq	r2,zero,1008f8c <_realloc_r+0x288>
 1008f34:	80bfff17 	ldw	r2,-4(r16)
 1008f38:	00ffff84 	movi	r3,-2
 1008f3c:	913ffe04 	addi	r4,r18,-8
 1008f40:	10c6703a 	and	r3,r2,r3
 1008f44:	b0c7883a 	add	r3,r22,r3
 1008f48:	20c09926 	beq	r4,r3,10091b0 <_realloc_r+0x4ac>
 1008f4c:	99bfff04 	addi	r6,r19,-4
 1008f50:	00800904 	movi	r2,36
 1008f54:	11806436 	bltu	r2,r6,10090e8 <_realloc_r+0x3e4>
 1008f58:	00c004c4 	movi	r3,19
 1008f5c:	19804036 	bltu	r3,r6,1009060 <_realloc_r+0x35c>
 1008f60:	9005883a 	mov	r2,r18
 1008f64:	8007883a 	mov	r3,r16
 1008f68:	19000017 	ldw	r4,0(r3)
 1008f6c:	11000015 	stw	r4,0(r2)
 1008f70:	19000117 	ldw	r4,4(r3)
 1008f74:	11000115 	stw	r4,4(r2)
 1008f78:	18c00217 	ldw	r3,8(r3)
 1008f7c:	10c00215 	stw	r3,8(r2)
 1008f80:	a809883a 	mov	r4,r21
 1008f84:	800b883a 	mov	r5,r16
 1008f88:	1006c7c0 	call	1006c7c <_free_r>
 1008f8c:	a809883a 	mov	r4,r21
 1008f90:	100b6180 	call	100b618 <__malloc_unlock>
 1008f94:	003fba06 	br	1008e80 <_realloc_r+0x17c>
 1008f98:	300b883a 	mov	r5,r6
 1008f9c:	dfc00a17 	ldw	ra,40(sp)
 1008fa0:	df000917 	ldw	fp,36(sp)
 1008fa4:	ddc00817 	ldw	r23,32(sp)
 1008fa8:	dd800717 	ldw	r22,28(sp)
 1008fac:	dd400617 	ldw	r21,24(sp)
 1008fb0:	dd000517 	ldw	r20,20(sp)
 1008fb4:	dcc00417 	ldw	r19,16(sp)
 1008fb8:	dc800317 	ldw	r18,12(sp)
 1008fbc:	dc400217 	ldw	r17,8(sp)
 1008fc0:	dc000117 	ldw	r16,4(sp)
 1008fc4:	dec00b04 	addi	sp,sp,44
 1008fc8:	1001d481 	jmpi	1001d48 <_malloc_r>
 1008fcc:	29800117 	ldw	r6,4(r5)
 1008fd0:	013fff04 	movi	r4,-4
 1008fd4:	89c00404 	addi	r7,r17,16
 1008fd8:	310c703a 	and	r6,r6,r4
 1008fdc:	34c9883a 	add	r4,r6,r19
 1008fe0:	21c0340e 	bge	r4,r7,10090b4 <_realloc_r+0x3b0>
 1008fe4:	2809883a 	mov	r4,r5
 1008fe8:	003f7106 	br	1008db0 <_realloc_r+0xac>
 1008fec:	b8800317 	ldw	r2,12(r23)
 1008ff0:	b8c00217 	ldw	r3,8(r23)
 1008ff4:	99bfff04 	addi	r6,r19,-4
 1008ff8:	01000904 	movi	r4,36
 1008ffc:	18800315 	stw	r2,12(r3)
 1009000:	10c00215 	stw	r3,8(r2)
 1009004:	bc800204 	addi	r18,r23,8
 1009008:	21807836 	bltu	r4,r6,10091ec <_realloc_r+0x4e8>
 100900c:	008004c4 	movi	r2,19
 1009010:	1180732e 	bgeu	r2,r6,10091e0 <_realloc_r+0x4dc>
 1009014:	80800017 	ldw	r2,0(r16)
 1009018:	b8800215 	stw	r2,8(r23)
 100901c:	80800117 	ldw	r2,4(r16)
 1009020:	b8800315 	stw	r2,12(r23)
 1009024:	008006c4 	movi	r2,27
 1009028:	11808936 	bltu	r2,r6,1009250 <_realloc_r+0x54c>
 100902c:	b8800404 	addi	r2,r23,16
 1009030:	80c00204 	addi	r3,r16,8
 1009034:	19000017 	ldw	r4,0(r3)
 1009038:	9021883a 	mov	r16,r18
 100903c:	3829883a 	mov	r20,r7
 1009040:	11000015 	stw	r4,0(r2)
 1009044:	19000117 	ldw	r4,4(r3)
 1009048:	b82d883a 	mov	r22,r23
 100904c:	11000115 	stw	r4,4(r2)
 1009050:	18c00217 	ldw	r3,8(r3)
 1009054:	10c00215 	stw	r3,8(r2)
 1009058:	b8800117 	ldw	r2,4(r23)
 100905c:	003f7b06 	br	1008e4c <_realloc_r+0x148>
 1009060:	80c00017 	ldw	r3,0(r16)
 1009064:	90c00015 	stw	r3,0(r18)
 1009068:	80c00117 	ldw	r3,4(r16)
 100906c:	90c00115 	stw	r3,4(r18)
 1009070:	00c006c4 	movi	r3,27
 1009074:	19804636 	bltu	r3,r6,1009190 <_realloc_r+0x48c>
 1009078:	90800204 	addi	r2,r18,8
 100907c:	80c00204 	addi	r3,r16,8
 1009080:	003fb906 	br	1008f68 <_realloc_r+0x264>
 1009084:	9005883a 	mov	r2,r18
 1009088:	8007883a 	mov	r3,r16
 100908c:	19000017 	ldw	r4,0(r3)
 1009090:	9021883a 	mov	r16,r18
 1009094:	b82d883a 	mov	r22,r23
 1009098:	11000015 	stw	r4,0(r2)
 100909c:	19000117 	ldw	r4,4(r3)
 10090a0:	11000115 	stw	r4,4(r2)
 10090a4:	18c00217 	ldw	r3,8(r3)
 10090a8:	10c00215 	stw	r3,8(r2)
 10090ac:	b8800117 	ldw	r2,4(r23)
 10090b0:	003f6606 	br	1008e4c <_realloc_r+0x148>
 10090b4:	2445c83a 	sub	r2,r4,r17
 10090b8:	b46d883a 	add	r22,r22,r17
 10090bc:	10800054 	ori	r2,r2,1
 10090c0:	b0800115 	stw	r2,4(r22)
 10090c4:	80bfff17 	ldw	r2,-4(r16)
 10090c8:	a809883a 	mov	r4,r21
 10090cc:	e5800215 	stw	r22,8(fp)
 10090d0:	1080004c 	andi	r2,r2,1
 10090d4:	88a2b03a 	or	r17,r17,r2
 10090d8:	847fff15 	stw	r17,-4(r16)
 10090dc:	100b6180 	call	100b618 <__malloc_unlock>
 10090e0:	8025883a 	mov	r18,r16
 10090e4:	003f6606 	br	1008e80 <_realloc_r+0x17c>
 10090e8:	9009883a 	mov	r4,r18
 10090ec:	800b883a 	mov	r5,r16
 10090f0:	10078340 	call	1007834 <memmove>
 10090f4:	003fa206 	br	1008f80 <_realloc_r+0x27c>
 10090f8:	88800404 	addi	r2,r17,16
 10090fc:	a0bf8716 	blt	r20,r2,1008f1c <_realloc_r+0x218>
 1009100:	b8800317 	ldw	r2,12(r23)
 1009104:	b8c00217 	ldw	r3,8(r23)
 1009108:	99bfff04 	addi	r6,r19,-4
 100910c:	01000904 	movi	r4,36
 1009110:	18800315 	stw	r2,12(r3)
 1009114:	10c00215 	stw	r3,8(r2)
 1009118:	bc800204 	addi	r18,r23,8
 100911c:	21806536 	bltu	r4,r6,10092b4 <_realloc_r+0x5b0>
 1009120:	008004c4 	movi	r2,19
 1009124:	1180592e 	bgeu	r2,r6,100928c <_realloc_r+0x588>
 1009128:	80800017 	ldw	r2,0(r16)
 100912c:	b8800215 	stw	r2,8(r23)
 1009130:	80800117 	ldw	r2,4(r16)
 1009134:	b8800315 	stw	r2,12(r23)
 1009138:	008006c4 	movi	r2,27
 100913c:	11806136 	bltu	r2,r6,10092c4 <_realloc_r+0x5c0>
 1009140:	b8800404 	addi	r2,r23,16
 1009144:	80c00204 	addi	r3,r16,8
 1009148:	19000017 	ldw	r4,0(r3)
 100914c:	11000015 	stw	r4,0(r2)
 1009150:	19000117 	ldw	r4,4(r3)
 1009154:	11000115 	stw	r4,4(r2)
 1009158:	18c00217 	ldw	r3,8(r3)
 100915c:	10c00215 	stw	r3,8(r2)
 1009160:	a447c83a 	sub	r3,r20,r17
 1009164:	bc45883a 	add	r2,r23,r17
 1009168:	18c00054 	ori	r3,r3,1
 100916c:	10c00115 	stw	r3,4(r2)
 1009170:	b8c00117 	ldw	r3,4(r23)
 1009174:	e0800215 	stw	r2,8(fp)
 1009178:	a809883a 	mov	r4,r21
 100917c:	1880004c 	andi	r2,r3,1
 1009180:	88a2b03a 	or	r17,r17,r2
 1009184:	bc400115 	stw	r17,4(r23)
 1009188:	100b6180 	call	100b618 <__malloc_unlock>
 100918c:	003f3c06 	br	1008e80 <_realloc_r+0x17c>
 1009190:	80c00217 	ldw	r3,8(r16)
 1009194:	90c00215 	stw	r3,8(r18)
 1009198:	80c00317 	ldw	r3,12(r16)
 100919c:	90c00315 	stw	r3,12(r18)
 10091a0:	30802426 	beq	r6,r2,1009234 <_realloc_r+0x530>
 10091a4:	90800404 	addi	r2,r18,16
 10091a8:	80c00404 	addi	r3,r16,16
 10091ac:	003f6e06 	br	1008f68 <_realloc_r+0x264>
 10091b0:	953fff17 	ldw	r20,-4(r18)
 10091b4:	00ffff04 	movi	r3,-4
 10091b8:	a0e8703a 	and	r20,r20,r3
 10091bc:	a4e9883a 	add	r20,r20,r19
 10091c0:	003f2206 	br	1008e4c <_realloc_r+0x148>
 10091c4:	800b883a 	mov	r5,r16
 10091c8:	9009883a 	mov	r4,r18
 10091cc:	10078340 	call	1007834 <memmove>
 10091d0:	9021883a 	mov	r16,r18
 10091d4:	b8800117 	ldw	r2,4(r23)
 10091d8:	b82d883a 	mov	r22,r23
 10091dc:	003f1b06 	br	1008e4c <_realloc_r+0x148>
 10091e0:	9005883a 	mov	r2,r18
 10091e4:	8007883a 	mov	r3,r16
 10091e8:	003f9206 	br	1009034 <_realloc_r+0x330>
 10091ec:	800b883a 	mov	r5,r16
 10091f0:	9009883a 	mov	r4,r18
 10091f4:	d9c00015 	stw	r7,0(sp)
 10091f8:	10078340 	call	1007834 <memmove>
 10091fc:	d9c00017 	ldw	r7,0(sp)
 1009200:	9021883a 	mov	r16,r18
 1009204:	b8800117 	ldw	r2,4(r23)
 1009208:	3829883a 	mov	r20,r7
 100920c:	b82d883a 	mov	r22,r23
 1009210:	003f0e06 	br	1008e4c <_realloc_r+0x148>
 1009214:	80800217 	ldw	r2,8(r16)
 1009218:	b8800415 	stw	r2,16(r23)
 100921c:	80800317 	ldw	r2,12(r16)
 1009220:	b8800515 	stw	r2,20(r23)
 1009224:	31001226 	beq	r6,r4,1009270 <_realloc_r+0x56c>
 1009228:	b8800604 	addi	r2,r23,24
 100922c:	80c00404 	addi	r3,r16,16
 1009230:	003f9606 	br	100908c <_realloc_r+0x388>
 1009234:	81000417 	ldw	r4,16(r16)
 1009238:	90800604 	addi	r2,r18,24
 100923c:	80c00604 	addi	r3,r16,24
 1009240:	91000415 	stw	r4,16(r18)
 1009244:	81000517 	ldw	r4,20(r16)
 1009248:	91000515 	stw	r4,20(r18)
 100924c:	003f4606 	br	1008f68 <_realloc_r+0x264>
 1009250:	80800217 	ldw	r2,8(r16)
 1009254:	b8800415 	stw	r2,16(r23)
 1009258:	80800317 	ldw	r2,12(r16)
 100925c:	b8800515 	stw	r2,20(r23)
 1009260:	31000d26 	beq	r6,r4,1009298 <_realloc_r+0x594>
 1009264:	b8800604 	addi	r2,r23,24
 1009268:	80c00404 	addi	r3,r16,16
 100926c:	003f7106 	br	1009034 <_realloc_r+0x330>
 1009270:	81000417 	ldw	r4,16(r16)
 1009274:	b8800804 	addi	r2,r23,32
 1009278:	80c00604 	addi	r3,r16,24
 100927c:	b9000615 	stw	r4,24(r23)
 1009280:	81000517 	ldw	r4,20(r16)
 1009284:	b9000715 	stw	r4,28(r23)
 1009288:	003f8006 	br	100908c <_realloc_r+0x388>
 100928c:	9005883a 	mov	r2,r18
 1009290:	8007883a 	mov	r3,r16
 1009294:	003fac06 	br	1009148 <_realloc_r+0x444>
 1009298:	81000417 	ldw	r4,16(r16)
 100929c:	b8800804 	addi	r2,r23,32
 10092a0:	80c00604 	addi	r3,r16,24
 10092a4:	b9000615 	stw	r4,24(r23)
 10092a8:	81000517 	ldw	r4,20(r16)
 10092ac:	b9000715 	stw	r4,28(r23)
 10092b0:	003f6006 	br	1009034 <_realloc_r+0x330>
 10092b4:	9009883a 	mov	r4,r18
 10092b8:	800b883a 	mov	r5,r16
 10092bc:	10078340 	call	1007834 <memmove>
 10092c0:	003fa706 	br	1009160 <_realloc_r+0x45c>
 10092c4:	80800217 	ldw	r2,8(r16)
 10092c8:	b8800415 	stw	r2,16(r23)
 10092cc:	80800317 	ldw	r2,12(r16)
 10092d0:	b8800515 	stw	r2,20(r23)
 10092d4:	31000326 	beq	r6,r4,10092e4 <_realloc_r+0x5e0>
 10092d8:	b8800604 	addi	r2,r23,24
 10092dc:	80c00404 	addi	r3,r16,16
 10092e0:	003f9906 	br	1009148 <_realloc_r+0x444>
 10092e4:	81000417 	ldw	r4,16(r16)
 10092e8:	b8800804 	addi	r2,r23,32
 10092ec:	80c00604 	addi	r3,r16,24
 10092f0:	b9000615 	stw	r4,24(r23)
 10092f4:	81000517 	ldw	r4,20(r16)
 10092f8:	b9000715 	stw	r4,28(r23)
 10092fc:	003f9206 	br	1009148 <_realloc_r+0x444>

01009300 <__isinfd>:
 1009300:	0105c83a 	sub	r2,zero,r4
 1009304:	1108b03a 	or	r4,r2,r4
 1009308:	2004d7fa 	srli	r2,r4,31
 100930c:	00e00034 	movhi	r3,32768
 1009310:	18ffffc4 	addi	r3,r3,-1
 1009314:	28ca703a 	and	r5,r5,r3
 1009318:	1144b03a 	or	r2,r2,r5
 100931c:	00dffc34 	movhi	r3,32752
 1009320:	1885c83a 	sub	r2,r3,r2
 1009324:	0087c83a 	sub	r3,zero,r2
 1009328:	1884b03a 	or	r2,r3,r2
 100932c:	1005d7fa 	srai	r2,r2,31
 1009330:	10800044 	addi	r2,r2,1
 1009334:	f800283a 	ret

01009338 <__isnand>:
 1009338:	0105c83a 	sub	r2,zero,r4
 100933c:	1108b03a 	or	r4,r2,r4
 1009340:	2004d7fa 	srli	r2,r4,31
 1009344:	00e00034 	movhi	r3,32768
 1009348:	18ffffc4 	addi	r3,r3,-1
 100934c:	28ca703a 	and	r5,r5,r3
 1009350:	1144b03a 	or	r2,r2,r5
 1009354:	00dffc34 	movhi	r3,32752
 1009358:	1885c83a 	sub	r2,r3,r2
 100935c:	1004d7fa 	srli	r2,r2,31
 1009360:	f800283a 	ret

01009364 <strcmp>:
 1009364:	2904b03a 	or	r2,r5,r4
 1009368:	108000cc 	andi	r2,r2,3
 100936c:	1000171e 	bne	r2,zero,10093cc <strcmp+0x68>
 1009370:	20800017 	ldw	r2,0(r4)
 1009374:	28c00017 	ldw	r3,0(r5)
 1009378:	10c0141e 	bne	r2,r3,10093cc <strcmp+0x68>
 100937c:	027fbff4 	movhi	r9,65279
 1009380:	4a7fbfc4 	addi	r9,r9,-257
 1009384:	1247883a 	add	r3,r2,r9
 1009388:	0084303a 	nor	r2,zero,r2
 100938c:	1884703a 	and	r2,r3,r2
 1009390:	02202074 	movhi	r8,32897
 1009394:	42202004 	addi	r8,r8,-32640
 1009398:	1204703a 	and	r2,r2,r8
 100939c:	10000226 	beq	r2,zero,10093a8 <strcmp+0x44>
 10093a0:	00001706 	br	1009400 <strcmp+0x9c>
 10093a4:	3000161e 	bne	r6,zero,1009400 <strcmp+0x9c>
 10093a8:	21000104 	addi	r4,r4,4
 10093ac:	20800017 	ldw	r2,0(r4)
 10093b0:	29400104 	addi	r5,r5,4
 10093b4:	28c00017 	ldw	r3,0(r5)
 10093b8:	124f883a 	add	r7,r2,r9
 10093bc:	008c303a 	nor	r6,zero,r2
 10093c0:	398c703a 	and	r6,r7,r6
 10093c4:	320c703a 	and	r6,r6,r8
 10093c8:	10fff626 	beq	r2,r3,10093a4 <strcmp+0x40>
 10093cc:	20800007 	ldb	r2,0(r4)
 10093d0:	1000051e 	bne	r2,zero,10093e8 <strcmp+0x84>
 10093d4:	00000606 	br	10093f0 <strcmp+0x8c>
 10093d8:	21000044 	addi	r4,r4,1
 10093dc:	20800007 	ldb	r2,0(r4)
 10093e0:	29400044 	addi	r5,r5,1
 10093e4:	10000226 	beq	r2,zero,10093f0 <strcmp+0x8c>
 10093e8:	28c00007 	ldb	r3,0(r5)
 10093ec:	10fffa26 	beq	r2,r3,10093d8 <strcmp+0x74>
 10093f0:	20c00003 	ldbu	r3,0(r4)
 10093f4:	28800003 	ldbu	r2,0(r5)
 10093f8:	1885c83a 	sub	r2,r3,r2
 10093fc:	f800283a 	ret
 1009400:	0005883a 	mov	r2,zero
 1009404:	f800283a 	ret

01009408 <__swbuf_r>:
 1009408:	defffc04 	addi	sp,sp,-16
 100940c:	dc800215 	stw	r18,8(sp)
 1009410:	dc400115 	stw	r17,4(sp)
 1009414:	dc000015 	stw	r16,0(sp)
 1009418:	dfc00315 	stw	ra,12(sp)
 100941c:	2023883a 	mov	r17,r4
 1009420:	2825883a 	mov	r18,r5
 1009424:	3021883a 	mov	r16,r6
 1009428:	20000226 	beq	r4,zero,1009434 <__swbuf_r+0x2c>
 100942c:	20800e17 	ldw	r2,56(r4)
 1009430:	10003b26 	beq	r2,zero,1009520 <__swbuf_r+0x118>
 1009434:	8080030b 	ldhu	r2,12(r16)
 1009438:	80c00617 	ldw	r3,24(r16)
 100943c:	1080020c 	andi	r2,r2,8
 1009440:	10bfffcc 	andi	r2,r2,65535
 1009444:	10a0001c 	xori	r2,r2,32768
 1009448:	80c00215 	stw	r3,8(r16)
 100944c:	10a00004 	addi	r2,r2,-32768
 1009450:	10002226 	beq	r2,zero,10094dc <__swbuf_r+0xd4>
 1009454:	80800417 	ldw	r2,16(r16)
 1009458:	10002026 	beq	r2,zero,10094dc <__swbuf_r+0xd4>
 100945c:	80c00017 	ldw	r3,0(r16)
 1009460:	81000517 	ldw	r4,20(r16)
 1009464:	94803fcc 	andi	r18,r18,255
 1009468:	1885c83a 	sub	r2,r3,r2
 100946c:	1100250e 	bge	r2,r4,1009504 <__swbuf_r+0xfc>
 1009470:	10800044 	addi	r2,r2,1
 1009474:	81400217 	ldw	r5,8(r16)
 1009478:	19000044 	addi	r4,r3,1
 100947c:	297fffc4 	addi	r5,r5,-1
 1009480:	81400215 	stw	r5,8(r16)
 1009484:	1c800005 	stb	r18,0(r3)
 1009488:	80c00517 	ldw	r3,20(r16)
 100948c:	81000015 	stw	r4,0(r16)
 1009490:	18800c26 	beq	r3,r2,10094c4 <__swbuf_r+0xbc>
 1009494:	8080030b 	ldhu	r2,12(r16)
 1009498:	1080004c 	andi	r2,r2,1
 100949c:	10000226 	beq	r2,zero,10094a8 <__swbuf_r+0xa0>
 10094a0:	00800284 	movi	r2,10
 10094a4:	90800726 	beq	r18,r2,10094c4 <__swbuf_r+0xbc>
 10094a8:	9005883a 	mov	r2,r18
 10094ac:	dfc00317 	ldw	ra,12(sp)
 10094b0:	dc800217 	ldw	r18,8(sp)
 10094b4:	dc400117 	ldw	r17,4(sp)
 10094b8:	dc000017 	ldw	r16,0(sp)
 10094bc:	dec00404 	addi	sp,sp,16
 10094c0:	f800283a 	ret
 10094c4:	8809883a 	mov	r4,r17
 10094c8:	800b883a 	mov	r5,r16
 10094cc:	10065a40 	call	10065a4 <_fflush_r>
 10094d0:	103ff526 	beq	r2,zero,10094a8 <__swbuf_r+0xa0>
 10094d4:	04bfffc4 	movi	r18,-1
 10094d8:	003ff306 	br	10094a8 <__swbuf_r+0xa0>
 10094dc:	8809883a 	mov	r4,r17
 10094e0:	800b883a 	mov	r5,r16
 10094e4:	1004b740 	call	1004b74 <__swsetup_r>
 10094e8:	10000f1e 	bne	r2,zero,1009528 <__swbuf_r+0x120>
 10094ec:	80800417 	ldw	r2,16(r16)
 10094f0:	80c00017 	ldw	r3,0(r16)
 10094f4:	81000517 	ldw	r4,20(r16)
 10094f8:	94803fcc 	andi	r18,r18,255
 10094fc:	1885c83a 	sub	r2,r3,r2
 1009500:	113fdb16 	blt	r2,r4,1009470 <__swbuf_r+0x68>
 1009504:	8809883a 	mov	r4,r17
 1009508:	800b883a 	mov	r5,r16
 100950c:	10065a40 	call	10065a4 <_fflush_r>
 1009510:	103ff01e 	bne	r2,zero,10094d4 <__swbuf_r+0xcc>
 1009514:	80c00017 	ldw	r3,0(r16)
 1009518:	00800044 	movi	r2,1
 100951c:	003fd506 	br	1009474 <__swbuf_r+0x6c>
 1009520:	10068600 	call	1006860 <__sinit>
 1009524:	003fc306 	br	1009434 <__swbuf_r+0x2c>
 1009528:	8080030b 	ldhu	r2,12(r16)
 100952c:	04bfffc4 	movi	r18,-1
 1009530:	10801014 	ori	r2,r2,64
 1009534:	8080030d 	sth	r2,12(r16)
 1009538:	00800244 	movi	r2,9
 100953c:	88800015 	stw	r2,0(r17)
 1009540:	003fd906 	br	10094a8 <__swbuf_r+0xa0>

01009544 <__swbuf>:
 1009544:	00c04074 	movhi	r3,257
 1009548:	18c5e104 	addi	r3,r3,6020
 100954c:	2005883a 	mov	r2,r4
 1009550:	19000017 	ldw	r4,0(r3)
 1009554:	280d883a 	mov	r6,r5
 1009558:	100b883a 	mov	r5,r2
 100955c:	10094081 	jmpi	1009408 <__swbuf_r>

01009560 <_calloc_r>:
 1009560:	defffe04 	addi	sp,sp,-8
 1009564:	dc000015 	stw	r16,0(sp)
 1009568:	2021883a 	mov	r16,r4
 100956c:	3009883a 	mov	r4,r6
 1009570:	dfc00115 	stw	ra,4(sp)
 1009574:	10013440 	call	1001344 <__mulsi3>
 1009578:	8009883a 	mov	r4,r16
 100957c:	100b883a 	mov	r5,r2
 1009580:	1001d480 	call	1001d48 <_malloc_r>
 1009584:	1021883a 	mov	r16,r2
 1009588:	10000c26 	beq	r2,zero,10095bc <_calloc_r+0x5c>
 100958c:	11bfff17 	ldw	r6,-4(r2)
 1009590:	00ffff04 	movi	r3,-4
 1009594:	00800904 	movi	r2,36
 1009598:	30cc703a 	and	r6,r6,r3
 100959c:	30cd883a 	add	r6,r6,r3
 10095a0:	11801436 	bltu	r2,r6,10095f4 <_calloc_r+0x94>
 10095a4:	00c004c4 	movi	r3,19
 10095a8:	19800936 	bltu	r3,r6,10095d0 <_calloc_r+0x70>
 10095ac:	8005883a 	mov	r2,r16
 10095b0:	10000015 	stw	zero,0(r2)
 10095b4:	10000115 	stw	zero,4(r2)
 10095b8:	10000215 	stw	zero,8(r2)
 10095bc:	8005883a 	mov	r2,r16
 10095c0:	dfc00117 	ldw	ra,4(sp)
 10095c4:	dc000017 	ldw	r16,0(sp)
 10095c8:	dec00204 	addi	sp,sp,8
 10095cc:	f800283a 	ret
 10095d0:	80000015 	stw	zero,0(r16)
 10095d4:	80000115 	stw	zero,4(r16)
 10095d8:	00c006c4 	movi	r3,27
 10095dc:	19800d2e 	bgeu	r3,r6,1009614 <_calloc_r+0xb4>
 10095e0:	80000215 	stw	zero,8(r16)
 10095e4:	80000315 	stw	zero,12(r16)
 10095e8:	30800c26 	beq	r6,r2,100961c <_calloc_r+0xbc>
 10095ec:	80800404 	addi	r2,r16,16
 10095f0:	003fef06 	br	10095b0 <_calloc_r+0x50>
 10095f4:	8009883a 	mov	r4,r16
 10095f8:	000b883a 	mov	r5,zero
 10095fc:	10079c00 	call	10079c0 <memset>
 1009600:	8005883a 	mov	r2,r16
 1009604:	dfc00117 	ldw	ra,4(sp)
 1009608:	dc000017 	ldw	r16,0(sp)
 100960c:	dec00204 	addi	sp,sp,8
 1009610:	f800283a 	ret
 1009614:	80800204 	addi	r2,r16,8
 1009618:	003fe506 	br	10095b0 <_calloc_r+0x50>
 100961c:	80000415 	stw	zero,16(r16)
 1009620:	80000515 	stw	zero,20(r16)
 1009624:	80800604 	addi	r2,r16,24
 1009628:	003fe106 	br	10095b0 <_calloc_r+0x50>

0100962c <_fclose_r>:
 100962c:	defffc04 	addi	sp,sp,-16
 1009630:	dc400115 	stw	r17,4(sp)
 1009634:	dc000015 	stw	r16,0(sp)
 1009638:	dfc00315 	stw	ra,12(sp)
 100963c:	dc800215 	stw	r18,8(sp)
 1009640:	2821883a 	mov	r16,r5
 1009644:	2023883a 	mov	r17,r4
 1009648:	28003426 	beq	r5,zero,100971c <_fclose_r+0xf0>
 100964c:	1006a680 	call	1006a68 <__sfp_lock_acquire>
 1009650:	88000226 	beq	r17,zero,100965c <_fclose_r+0x30>
 1009654:	88800e17 	ldw	r2,56(r17)
 1009658:	10003826 	beq	r2,zero,100973c <_fclose_r+0x110>
 100965c:	8080030f 	ldh	r2,12(r16)
 1009660:	10002526 	beq	r2,zero,10096f8 <_fclose_r+0xcc>
 1009664:	8809883a 	mov	r4,r17
 1009668:	800b883a 	mov	r5,r16
 100966c:	10065a40 	call	10065a4 <_fflush_r>
 1009670:	1025883a 	mov	r18,r2
 1009674:	80800b17 	ldw	r2,44(r16)
 1009678:	10000426 	beq	r2,zero,100968c <_fclose_r+0x60>
 100967c:	81400717 	ldw	r5,28(r16)
 1009680:	8809883a 	mov	r4,r17
 1009684:	103ee83a 	callr	r2
 1009688:	10003516 	blt	r2,zero,1009760 <_fclose_r+0x134>
 100968c:	8080030b 	ldhu	r2,12(r16)
 1009690:	1080200c 	andi	r2,r2,128
 1009694:	10bfffcc 	andi	r2,r2,65535
 1009698:	10a0001c 	xori	r2,r2,32768
 100969c:	10a00004 	addi	r2,r2,-32768
 10096a0:	10002b1e 	bne	r2,zero,1009750 <_fclose_r+0x124>
 10096a4:	81400c17 	ldw	r5,48(r16)
 10096a8:	28000526 	beq	r5,zero,10096c0 <_fclose_r+0x94>
 10096ac:	80801004 	addi	r2,r16,64
 10096b0:	28800226 	beq	r5,r2,10096bc <_fclose_r+0x90>
 10096b4:	8809883a 	mov	r4,r17
 10096b8:	1006c7c0 	call	1006c7c <_free_r>
 10096bc:	80000c15 	stw	zero,48(r16)
 10096c0:	81401117 	ldw	r5,68(r16)
 10096c4:	28000326 	beq	r5,zero,10096d4 <_fclose_r+0xa8>
 10096c8:	8809883a 	mov	r4,r17
 10096cc:	1006c7c0 	call	1006c7c <_free_r>
 10096d0:	80001115 	stw	zero,68(r16)
 10096d4:	8000030d 	sth	zero,12(r16)
 10096d8:	1006a6c0 	call	1006a6c <__sfp_lock_release>
 10096dc:	9005883a 	mov	r2,r18
 10096e0:	dfc00317 	ldw	ra,12(sp)
 10096e4:	dc800217 	ldw	r18,8(sp)
 10096e8:	dc400117 	ldw	r17,4(sp)
 10096ec:	dc000017 	ldw	r16,0(sp)
 10096f0:	dec00404 	addi	sp,sp,16
 10096f4:	f800283a 	ret
 10096f8:	1006a6c0 	call	1006a6c <__sfp_lock_release>
 10096fc:	0025883a 	mov	r18,zero
 1009700:	9005883a 	mov	r2,r18
 1009704:	dfc00317 	ldw	ra,12(sp)
 1009708:	dc800217 	ldw	r18,8(sp)
 100970c:	dc400117 	ldw	r17,4(sp)
 1009710:	dc000017 	ldw	r16,0(sp)
 1009714:	dec00404 	addi	sp,sp,16
 1009718:	f800283a 	ret
 100971c:	0025883a 	mov	r18,zero
 1009720:	9005883a 	mov	r2,r18
 1009724:	dfc00317 	ldw	ra,12(sp)
 1009728:	dc800217 	ldw	r18,8(sp)
 100972c:	dc400117 	ldw	r17,4(sp)
 1009730:	dc000017 	ldw	r16,0(sp)
 1009734:	dec00404 	addi	sp,sp,16
 1009738:	f800283a 	ret
 100973c:	8809883a 	mov	r4,r17
 1009740:	10068600 	call	1006860 <__sinit>
 1009744:	8080030f 	ldh	r2,12(r16)
 1009748:	103fc61e 	bne	r2,zero,1009664 <_fclose_r+0x38>
 100974c:	003fea06 	br	10096f8 <_fclose_r+0xcc>
 1009750:	81400417 	ldw	r5,16(r16)
 1009754:	8809883a 	mov	r4,r17
 1009758:	1006c7c0 	call	1006c7c <_free_r>
 100975c:	003fd106 	br	10096a4 <_fclose_r+0x78>
 1009760:	04bfffc4 	movi	r18,-1
 1009764:	003fc906 	br	100968c <_fclose_r+0x60>

01009768 <fclose>:
 1009768:	00804074 	movhi	r2,257
 100976c:	1085e104 	addi	r2,r2,6020
 1009770:	200b883a 	mov	r5,r4
 1009774:	11000017 	ldw	r4,0(r2)
 1009778:	100962c1 	jmpi	100962c <_fclose_r>

0100977c <__umoddi3>:
 100977c:	defff304 	addi	sp,sp,-52
 1009780:	dd000715 	stw	r20,28(sp)
 1009784:	dcc00615 	stw	r19,24(sp)
 1009788:	dc800515 	stw	r18,20(sp)
 100978c:	dc400415 	stw	r17,16(sp)
 1009790:	dc000315 	stw	r16,12(sp)
 1009794:	dfc00c15 	stw	ra,48(sp)
 1009798:	df000b15 	stw	fp,44(sp)
 100979c:	ddc00a15 	stw	r23,40(sp)
 10097a0:	dd800915 	stw	r22,36(sp)
 10097a4:	dd400815 	stw	r21,32(sp)
 10097a8:	2025883a 	mov	r18,r4
 10097ac:	2823883a 	mov	r17,r5
 10097b0:	3021883a 	mov	r16,r6
 10097b4:	2027883a 	mov	r19,r4
 10097b8:	2829883a 	mov	r20,r5
 10097bc:	38003a1e 	bne	r7,zero,10098a8 <__umoddi3+0x12c>
 10097c0:	2980522e 	bgeu	r5,r6,100990c <__umoddi3+0x190>
 10097c4:	00bfffd4 	movui	r2,65535
 10097c8:	1180a436 	bltu	r2,r6,1009a5c <__umoddi3+0x2e0>
 10097cc:	00803fc4 	movi	r2,255
 10097d0:	11816036 	bltu	r2,r6,1009d54 <__umoddi3+0x5d8>
 10097d4:	0005883a 	mov	r2,zero
 10097d8:	0009883a 	mov	r4,zero
 10097dc:	3084d83a 	srl	r2,r6,r2
 10097e0:	00c04074 	movhi	r3,257
 10097e4:	18fe2104 	addi	r3,r3,-1916
 10097e8:	05400804 	movi	r21,32
 10097ec:	1885883a 	add	r2,r3,r2
 10097f0:	10800003 	ldbu	r2,0(r2)
 10097f4:	1109883a 	add	r4,r2,r4
 10097f8:	a92bc83a 	sub	r21,r21,r4
 10097fc:	a8010e26 	beq	r21,zero,1009c38 <__umoddi3+0x4bc>
 1009800:	8d62983a 	sll	r17,r17,r21
 1009804:	9108d83a 	srl	r4,r18,r4
 1009808:	3560983a 	sll	r16,r6,r21
 100980c:	9566983a 	sll	r19,r18,r21
 1009810:	8928b03a 	or	r20,r17,r4
 1009814:	8022d43a 	srli	r17,r16,16
 1009818:	a009883a 	mov	r4,r20
 100981c:	84bfffcc 	andi	r18,r16,65535
 1009820:	880b883a 	mov	r5,r17
 1009824:	100133c0 	call	100133c <__umodsi3>
 1009828:	a009883a 	mov	r4,r20
 100982c:	880b883a 	mov	r5,r17
 1009830:	102d883a 	mov	r22,r2
 1009834:	10013340 	call	1001334 <__udivsi3>
 1009838:	1009883a 	mov	r4,r2
 100983c:	900b883a 	mov	r5,r18
 1009840:	10013440 	call	1001344 <__mulsi3>
 1009844:	1009883a 	mov	r4,r2
 1009848:	b006943a 	slli	r3,r22,16
 100984c:	9804d43a 	srli	r2,r19,16
 1009850:	1886b03a 	or	r3,r3,r2
 1009854:	1900042e 	bgeu	r3,r4,1009868 <__umoddi3+0xec>
 1009858:	1c07883a 	add	r3,r3,r16
 100985c:	1c000236 	bltu	r3,r16,1009868 <__umoddi3+0xec>
 1009860:	1900012e 	bgeu	r3,r4,1009868 <__umoddi3+0xec>
 1009864:	1c07883a 	add	r3,r3,r16
 1009868:	1929c83a 	sub	r20,r3,r4
 100986c:	a009883a 	mov	r4,r20
 1009870:	880b883a 	mov	r5,r17
 1009874:	100133c0 	call	100133c <__umodsi3>
 1009878:	102d883a 	mov	r22,r2
 100987c:	a009883a 	mov	r4,r20
 1009880:	880b883a 	mov	r5,r17
 1009884:	b02c943a 	slli	r22,r22,16
 1009888:	10013340 	call	1001334 <__udivsi3>
 100988c:	1009883a 	mov	r4,r2
 1009890:	900b883a 	mov	r5,r18
 1009894:	9cffffcc 	andi	r19,r19,65535
 1009898:	10013440 	call	1001344 <__mulsi3>
 100989c:	b4e6b03a 	or	r19,r22,r19
 10098a0:	9880572e 	bgeu	r19,r2,1009a00 <__umoddi3+0x284>
 10098a4:	00005206 	br	10099f0 <__umoddi3+0x274>
 10098a8:	29c05936 	bltu	r5,r7,1009a10 <__umoddi3+0x294>
 10098ac:	00bfffd4 	movui	r2,65535
 10098b0:	11c0652e 	bgeu	r2,r7,1009a48 <__umoddi3+0x2cc>
 10098b4:	00804034 	movhi	r2,256
 10098b8:	10bfffc4 	addi	r2,r2,-1
 10098bc:	11c11936 	bltu	r2,r7,1009d24 <__umoddi3+0x5a8>
 10098c0:	00c00404 	movi	r3,16
 10098c4:	1827883a 	mov	r19,r3
 10098c8:	38c6d83a 	srl	r3,r7,r3
 10098cc:	01004074 	movhi	r4,257
 10098d0:	213e2104 	addi	r4,r4,-1916
 10098d4:	04000804 	movi	r16,32
 10098d8:	20c7883a 	add	r3,r4,r3
 10098dc:	18800003 	ldbu	r2,0(r3)
 10098e0:	14e7883a 	add	r19,r2,r19
 10098e4:	84e1c83a 	sub	r16,r16,r19
 10098e8:	8000671e 	bne	r16,zero,1009a88 <__umoddi3+0x30c>
 10098ec:	3c400136 	bltu	r7,r17,10098f4 <__umoddi3+0x178>
 10098f0:	91812536 	bltu	r18,r6,1009d88 <__umoddi3+0x60c>
 10098f4:	9185c83a 	sub	r2,r18,r6
 10098f8:	89e3c83a 	sub	r17,r17,r7
 10098fc:	90a5803a 	cmpltu	r18,r18,r2
 1009900:	8ca9c83a 	sub	r20,r17,r18
 1009904:	a007883a 	mov	r3,r20
 1009908:	00004306 	br	1009a18 <__umoddi3+0x29c>
 100990c:	3000041e 	bne	r6,zero,1009920 <__umoddi3+0x1a4>
 1009910:	01000044 	movi	r4,1
 1009914:	000b883a 	mov	r5,zero
 1009918:	10013340 	call	1001334 <__udivsi3>
 100991c:	1021883a 	mov	r16,r2
 1009920:	00bfffd4 	movui	r2,65535
 1009924:	1400532e 	bgeu	r2,r16,1009a74 <__umoddi3+0x2f8>
 1009928:	00804034 	movhi	r2,256
 100992c:	10bfffc4 	addi	r2,r2,-1
 1009930:	14010536 	bltu	r2,r16,1009d48 <__umoddi3+0x5cc>
 1009934:	00800404 	movi	r2,16
 1009938:	1007883a 	mov	r3,r2
 100993c:	8084d83a 	srl	r2,r16,r2
 1009940:	01004074 	movhi	r4,257
 1009944:	213e2104 	addi	r4,r4,-1916
 1009948:	05400804 	movi	r21,32
 100994c:	2085883a 	add	r2,r4,r2
 1009950:	10800003 	ldbu	r2,0(r2)
 1009954:	10c7883a 	add	r3,r2,r3
 1009958:	a8ebc83a 	sub	r21,r21,r3
 100995c:	a800b81e 	bne	r21,zero,1009c40 <__umoddi3+0x4c4>
 1009960:	8028d43a 	srli	r20,r16,16
 1009964:	8c23c83a 	sub	r17,r17,r16
 1009968:	85bfffcc 	andi	r22,r16,65535
 100996c:	8809883a 	mov	r4,r17
 1009970:	a00b883a 	mov	r5,r20
 1009974:	100133c0 	call	100133c <__umodsi3>
 1009978:	8809883a 	mov	r4,r17
 100997c:	a00b883a 	mov	r5,r20
 1009980:	1025883a 	mov	r18,r2
 1009984:	10013340 	call	1001334 <__udivsi3>
 1009988:	1009883a 	mov	r4,r2
 100998c:	b00b883a 	mov	r5,r22
 1009990:	10013440 	call	1001344 <__mulsi3>
 1009994:	1009883a 	mov	r4,r2
 1009998:	9006943a 	slli	r3,r18,16
 100999c:	9804d43a 	srli	r2,r19,16
 10099a0:	1886b03a 	or	r3,r3,r2
 10099a4:	1900032e 	bgeu	r3,r4,10099b4 <__umoddi3+0x238>
 10099a8:	1c07883a 	add	r3,r3,r16
 10099ac:	1c000136 	bltu	r3,r16,10099b4 <__umoddi3+0x238>
 10099b0:	1900f336 	bltu	r3,r4,1009d80 <__umoddi3+0x604>
 10099b4:	1923c83a 	sub	r17,r3,r4
 10099b8:	8809883a 	mov	r4,r17
 10099bc:	a00b883a 	mov	r5,r20
 10099c0:	100133c0 	call	100133c <__umodsi3>
 10099c4:	102f883a 	mov	r23,r2
 10099c8:	8809883a 	mov	r4,r17
 10099cc:	a00b883a 	mov	r5,r20
 10099d0:	b82e943a 	slli	r23,r23,16
 10099d4:	10013340 	call	1001334 <__udivsi3>
 10099d8:	1009883a 	mov	r4,r2
 10099dc:	b00b883a 	mov	r5,r22
 10099e0:	9cffffcc 	andi	r19,r19,65535
 10099e4:	10013440 	call	1001344 <__mulsi3>
 10099e8:	bce6b03a 	or	r19,r23,r19
 10099ec:	9880042e 	bgeu	r19,r2,1009a00 <__umoddi3+0x284>
 10099f0:	9c27883a 	add	r19,r19,r16
 10099f4:	9c000236 	bltu	r19,r16,1009a00 <__umoddi3+0x284>
 10099f8:	9880012e 	bgeu	r19,r2,1009a00 <__umoddi3+0x284>
 10099fc:	9c27883a 	add	r19,r19,r16
 1009a00:	9885c83a 	sub	r2,r19,r2
 1009a04:	1544d83a 	srl	r2,r2,r21
 1009a08:	0007883a 	mov	r3,zero
 1009a0c:	00000206 	br	1009a18 <__umoddi3+0x29c>
 1009a10:	2005883a 	mov	r2,r4
 1009a14:	2807883a 	mov	r3,r5
 1009a18:	dfc00c17 	ldw	ra,48(sp)
 1009a1c:	df000b17 	ldw	fp,44(sp)
 1009a20:	ddc00a17 	ldw	r23,40(sp)
 1009a24:	dd800917 	ldw	r22,36(sp)
 1009a28:	dd400817 	ldw	r21,32(sp)
 1009a2c:	dd000717 	ldw	r20,28(sp)
 1009a30:	dcc00617 	ldw	r19,24(sp)
 1009a34:	dc800517 	ldw	r18,20(sp)
 1009a38:	dc400417 	ldw	r17,16(sp)
 1009a3c:	dc000317 	ldw	r16,12(sp)
 1009a40:	dec00d04 	addi	sp,sp,52
 1009a44:	f800283a 	ret
 1009a48:	00803fc4 	movi	r2,255
 1009a4c:	11c0b236 	bltu	r2,r7,1009d18 <__umoddi3+0x59c>
 1009a50:	0007883a 	mov	r3,zero
 1009a54:	0027883a 	mov	r19,zero
 1009a58:	003f9b06 	br	10098c8 <__umoddi3+0x14c>
 1009a5c:	00804034 	movhi	r2,256
 1009a60:	10bfffc4 	addi	r2,r2,-1
 1009a64:	1180b236 	bltu	r2,r6,1009d30 <__umoddi3+0x5b4>
 1009a68:	00800404 	movi	r2,16
 1009a6c:	1009883a 	mov	r4,r2
 1009a70:	003f5a06 	br	10097dc <__umoddi3+0x60>
 1009a74:	00803fc4 	movi	r2,255
 1009a78:	1400b036 	bltu	r2,r16,1009d3c <__umoddi3+0x5c0>
 1009a7c:	0005883a 	mov	r2,zero
 1009a80:	0007883a 	mov	r3,zero
 1009a84:	003fad06 	br	100993c <__umoddi3+0x1c0>
 1009a88:	34c4d83a 	srl	r2,r6,r19
 1009a8c:	3c0e983a 	sll	r7,r7,r16
 1009a90:	8cf8d83a 	srl	fp,r17,r19
 1009a94:	8c22983a 	sll	r17,r17,r16
 1009a98:	38a8b03a 	or	r20,r7,r2
 1009a9c:	a02ad43a 	srli	r21,r20,16
 1009aa0:	94c4d83a 	srl	r2,r18,r19
 1009aa4:	e009883a 	mov	r4,fp
 1009aa8:	a80b883a 	mov	r5,r21
 1009aac:	342c983a 	sll	r22,r6,r16
 1009ab0:	88a2b03a 	or	r17,r17,r2
 1009ab4:	100133c0 	call	100133c <__umodsi3>
 1009ab8:	e009883a 	mov	r4,fp
 1009abc:	a80b883a 	mov	r5,r21
 1009ac0:	a5ffffcc 	andi	r23,r20,65535
 1009ac4:	d8800215 	stw	r2,8(sp)
 1009ac8:	10013340 	call	1001334 <__udivsi3>
 1009acc:	1009883a 	mov	r4,r2
 1009ad0:	b80b883a 	mov	r5,r23
 1009ad4:	1039883a 	mov	fp,r2
 1009ad8:	10013440 	call	1001344 <__mulsi3>
 1009adc:	d8c00217 	ldw	r3,8(sp)
 1009ae0:	1009883a 	mov	r4,r2
 1009ae4:	8804d43a 	srli	r2,r17,16
 1009ae8:	1806943a 	slli	r3,r3,16
 1009aec:	9424983a 	sll	r18,r18,r16
 1009af0:	1886b03a 	or	r3,r3,r2
 1009af4:	1900042e 	bgeu	r3,r4,1009b08 <__umoddi3+0x38c>
 1009af8:	1d07883a 	add	r3,r3,r20
 1009afc:	e0bfffc4 	addi	r2,fp,-1
 1009b00:	1d009b2e 	bgeu	r3,r20,1009d70 <__umoddi3+0x5f4>
 1009b04:	1039883a 	mov	fp,r2
 1009b08:	1907c83a 	sub	r3,r3,r4
 1009b0c:	1809883a 	mov	r4,r3
 1009b10:	a80b883a 	mov	r5,r21
 1009b14:	d8c00215 	stw	r3,8(sp)
 1009b18:	100133c0 	call	100133c <__umodsi3>
 1009b1c:	d8c00217 	ldw	r3,8(sp)
 1009b20:	a80b883a 	mov	r5,r21
 1009b24:	d8800015 	stw	r2,0(sp)
 1009b28:	1809883a 	mov	r4,r3
 1009b2c:	10013340 	call	1001334 <__udivsi3>
 1009b30:	1009883a 	mov	r4,r2
 1009b34:	b80b883a 	mov	r5,r23
 1009b38:	102b883a 	mov	r21,r2
 1009b3c:	10013440 	call	1001344 <__mulsi3>
 1009b40:	d9c00017 	ldw	r7,0(sp)
 1009b44:	8c7fffcc 	andi	r17,r17,65535
 1009b48:	380e943a 	slli	r7,r7,16
 1009b4c:	3c4eb03a 	or	r7,r7,r17
 1009b50:	3880042e 	bgeu	r7,r2,1009b64 <__umoddi3+0x3e8>
 1009b54:	3d0f883a 	add	r7,r7,r20
 1009b58:	a8ffffc4 	addi	r3,r21,-1
 1009b5c:	3d00802e 	bgeu	r7,r20,1009d60 <__umoddi3+0x5e4>
 1009b60:	182b883a 	mov	r21,r3
 1009b64:	e038943a 	slli	fp,fp,16
 1009b68:	b010d43a 	srli	r8,r22,16
 1009b6c:	b1bfffcc 	andi	r6,r22,65535
 1009b70:	af2ab03a 	or	r21,r21,fp
 1009b74:	a82ed43a 	srli	r23,r21,16
 1009b78:	ad7fffcc 	andi	r21,r21,65535
 1009b7c:	300b883a 	mov	r5,r6
 1009b80:	a809883a 	mov	r4,r21
 1009b84:	38a3c83a 	sub	r17,r7,r2
 1009b88:	d9800115 	stw	r6,4(sp)
 1009b8c:	da000015 	stw	r8,0(sp)
 1009b90:	10013440 	call	1001344 <__mulsi3>
 1009b94:	da000017 	ldw	r8,0(sp)
 1009b98:	a809883a 	mov	r4,r21
 1009b9c:	1039883a 	mov	fp,r2
 1009ba0:	400b883a 	mov	r5,r8
 1009ba4:	da000215 	stw	r8,8(sp)
 1009ba8:	10013440 	call	1001344 <__mulsi3>
 1009bac:	d9800117 	ldw	r6,4(sp)
 1009bb0:	b809883a 	mov	r4,r23
 1009bb4:	d8800015 	stw	r2,0(sp)
 1009bb8:	300b883a 	mov	r5,r6
 1009bbc:	10013440 	call	1001344 <__mulsi3>
 1009bc0:	d8c00217 	ldw	r3,8(sp)
 1009bc4:	b809883a 	mov	r4,r23
 1009bc8:	102b883a 	mov	r21,r2
 1009bcc:	180b883a 	mov	r5,r3
 1009bd0:	10013440 	call	1001344 <__mulsi3>
 1009bd4:	d9c00017 	ldw	r7,0(sp)
 1009bd8:	1007883a 	mov	r3,r2
 1009bdc:	e004d43a 	srli	r2,fp,16
 1009be0:	a9c9883a 	add	r4,r21,r7
 1009be4:	2089883a 	add	r4,r4,r2
 1009be8:	2540022e 	bgeu	r4,r21,1009bf4 <__umoddi3+0x478>
 1009bec:	00800074 	movhi	r2,1
 1009bf0:	1887883a 	add	r3,r3,r2
 1009bf4:	2004d43a 	srli	r2,r4,16
 1009bf8:	2008943a 	slli	r4,r4,16
 1009bfc:	e73fffcc 	andi	fp,fp,65535
 1009c00:	1887883a 	add	r3,r3,r2
 1009c04:	2709883a 	add	r4,r4,fp
 1009c08:	88c03d36 	bltu	r17,r3,1009d00 <__umoddi3+0x584>
 1009c0c:	88c06126 	beq	r17,r3,1009d94 <__umoddi3+0x618>
 1009c10:	88c7c83a 	sub	r3,r17,r3
 1009c14:	202d883a 	mov	r22,r4
 1009c18:	95adc83a 	sub	r22,r18,r22
 1009c1c:	95a5803a 	cmpltu	r18,r18,r22
 1009c20:	1c87c83a 	sub	r3,r3,r18
 1009c24:	1cc4983a 	sll	r2,r3,r19
 1009c28:	b42cd83a 	srl	r22,r22,r16
 1009c2c:	1c06d83a 	srl	r3,r3,r16
 1009c30:	1584b03a 	or	r2,r2,r22
 1009c34:	003f7806 	br	1009a18 <__umoddi3+0x29c>
 1009c38:	002b883a 	mov	r21,zero
 1009c3c:	003ef506 	br	1009814 <__umoddi3+0x98>
 1009c40:	8560983a 	sll	r16,r16,r21
 1009c44:	88e6d83a 	srl	r19,r17,r3
 1009c48:	90c6d83a 	srl	r3,r18,r3
 1009c4c:	8028d43a 	srli	r20,r16,16
 1009c50:	8d62983a 	sll	r17,r17,r21
 1009c54:	9809883a 	mov	r4,r19
 1009c58:	a00b883a 	mov	r5,r20
 1009c5c:	88eeb03a 	or	r23,r17,r3
 1009c60:	100133c0 	call	100133c <__umodsi3>
 1009c64:	9809883a 	mov	r4,r19
 1009c68:	a00b883a 	mov	r5,r20
 1009c6c:	1023883a 	mov	r17,r2
 1009c70:	85bfffcc 	andi	r22,r16,65535
 1009c74:	10013340 	call	1001334 <__udivsi3>
 1009c78:	1009883a 	mov	r4,r2
 1009c7c:	b00b883a 	mov	r5,r22
 1009c80:	10013440 	call	1001344 <__mulsi3>
 1009c84:	1007883a 	mov	r3,r2
 1009c88:	8808943a 	slli	r4,r17,16
 1009c8c:	b804d43a 	srli	r2,r23,16
 1009c90:	9566983a 	sll	r19,r18,r21
 1009c94:	2088b03a 	or	r4,r4,r2
 1009c98:	20c0042e 	bgeu	r4,r3,1009cac <__umoddi3+0x530>
 1009c9c:	2409883a 	add	r4,r4,r16
 1009ca0:	24000236 	bltu	r4,r16,1009cac <__umoddi3+0x530>
 1009ca4:	20c0012e 	bgeu	r4,r3,1009cac <__umoddi3+0x530>
 1009ca8:	2409883a 	add	r4,r4,r16
 1009cac:	20e5c83a 	sub	r18,r4,r3
 1009cb0:	9009883a 	mov	r4,r18
 1009cb4:	a00b883a 	mov	r5,r20
 1009cb8:	100133c0 	call	100133c <__umodsi3>
 1009cbc:	1023883a 	mov	r17,r2
 1009cc0:	9009883a 	mov	r4,r18
 1009cc4:	a00b883a 	mov	r5,r20
 1009cc8:	8822943a 	slli	r17,r17,16
 1009ccc:	10013340 	call	1001334 <__udivsi3>
 1009cd0:	1009883a 	mov	r4,r2
 1009cd4:	b00b883a 	mov	r5,r22
 1009cd8:	bdffffcc 	andi	r23,r23,65535
 1009cdc:	10013440 	call	1001344 <__mulsi3>
 1009ce0:	8de2b03a 	or	r17,r17,r23
 1009ce4:	8880042e 	bgeu	r17,r2,1009cf8 <__umoddi3+0x57c>
 1009ce8:	8c23883a 	add	r17,r17,r16
 1009cec:	8c000236 	bltu	r17,r16,1009cf8 <__umoddi3+0x57c>
 1009cf0:	8880012e 	bgeu	r17,r2,1009cf8 <__umoddi3+0x57c>
 1009cf4:	8c23883a 	add	r17,r17,r16
 1009cf8:	88a3c83a 	sub	r17,r17,r2
 1009cfc:	003f1b06 	br	100996c <__umoddi3+0x1f0>
 1009d00:	25adc83a 	sub	r22,r4,r22
 1009d04:	1d07c83a 	sub	r3,r3,r20
 1009d08:	2589803a 	cmpltu	r4,r4,r22
 1009d0c:	1907c83a 	sub	r3,r3,r4
 1009d10:	88c7c83a 	sub	r3,r17,r3
 1009d14:	003fc006 	br	1009c18 <__umoddi3+0x49c>
 1009d18:	00c00204 	movi	r3,8
 1009d1c:	1827883a 	mov	r19,r3
 1009d20:	003ee906 	br	10098c8 <__umoddi3+0x14c>
 1009d24:	00c00604 	movi	r3,24
 1009d28:	1827883a 	mov	r19,r3
 1009d2c:	003ee606 	br	10098c8 <__umoddi3+0x14c>
 1009d30:	00800604 	movi	r2,24
 1009d34:	1009883a 	mov	r4,r2
 1009d38:	003ea806 	br	10097dc <__umoddi3+0x60>
 1009d3c:	00800204 	movi	r2,8
 1009d40:	1007883a 	mov	r3,r2
 1009d44:	003efd06 	br	100993c <__umoddi3+0x1c0>
 1009d48:	00800604 	movi	r2,24
 1009d4c:	1007883a 	mov	r3,r2
 1009d50:	003efa06 	br	100993c <__umoddi3+0x1c0>
 1009d54:	00800204 	movi	r2,8
 1009d58:	1009883a 	mov	r4,r2
 1009d5c:	003e9f06 	br	10097dc <__umoddi3+0x60>
 1009d60:	38bf7f2e 	bgeu	r7,r2,1009b60 <__umoddi3+0x3e4>
 1009d64:	ad7fff84 	addi	r21,r21,-2
 1009d68:	3d0f883a 	add	r7,r7,r20
 1009d6c:	003f7d06 	br	1009b64 <__umoddi3+0x3e8>
 1009d70:	193f642e 	bgeu	r3,r4,1009b04 <__umoddi3+0x388>
 1009d74:	e73fff84 	addi	fp,fp,-2
 1009d78:	1d07883a 	add	r3,r3,r20
 1009d7c:	003f6206 	br	1009b08 <__umoddi3+0x38c>
 1009d80:	1c07883a 	add	r3,r3,r16
 1009d84:	003f0b06 	br	10099b4 <__umoddi3+0x238>
 1009d88:	9005883a 	mov	r2,r18
 1009d8c:	a007883a 	mov	r3,r20
 1009d90:	003f2106 	br	1009a18 <__umoddi3+0x29c>
 1009d94:	913fda36 	bltu	r18,r4,1009d00 <__umoddi3+0x584>
 1009d98:	202d883a 	mov	r22,r4
 1009d9c:	0007883a 	mov	r3,zero
 1009da0:	003f9d06 	br	1009c18 <__umoddi3+0x49c>

01009da4 <_fpadd_parts>:
 1009da4:	2005883a 	mov	r2,r4
 1009da8:	21000017 	ldw	r4,0(r4)
 1009dac:	01c00044 	movi	r7,1
 1009db0:	3900622e 	bgeu	r7,r4,1009f3c <_fpadd_parts+0x198>
 1009db4:	28c00017 	ldw	r3,0(r5)
 1009db8:	38c05f2e 	bgeu	r7,r3,1009f38 <_fpadd_parts+0x194>
 1009dbc:	01c00104 	movi	r7,4
 1009dc0:	21c0c626 	beq	r4,r7,100a0dc <_fpadd_parts+0x338>
 1009dc4:	19c05c26 	beq	r3,r7,1009f38 <_fpadd_parts+0x194>
 1009dc8:	01c00084 	movi	r7,2
 1009dcc:	19c06b26 	beq	r3,r7,1009f7c <_fpadd_parts+0x1d8>
 1009dd0:	21c05926 	beq	r4,r7,1009f38 <_fpadd_parts+0x194>
 1009dd4:	11c00217 	ldw	r7,8(r2)
 1009dd8:	2ac00217 	ldw	r11,8(r5)
 1009ddc:	13000317 	ldw	r12,12(r2)
 1009de0:	13400417 	ldw	r13,16(r2)
 1009de4:	3ac9c83a 	sub	r4,r7,r11
 1009de8:	2a000317 	ldw	r8,12(r5)
 1009dec:	2a400417 	ldw	r9,16(r5)
 1009df0:	2015883a 	mov	r10,r4
 1009df4:	20007516 	blt	r4,zero,1009fcc <_fpadd_parts+0x228>
 1009df8:	00c00fc4 	movi	r3,63
 1009dfc:	1a805016 	blt	r3,r10,1009f40 <_fpadd_parts+0x19c>
 1009e00:	0100870e 	bge	zero,r4,100a020 <_fpadd_parts+0x27c>
 1009e04:	50fff804 	addi	r3,r10,-32
 1009e08:	18009916 	blt	r3,zero,100a070 <_fpadd_parts+0x2cc>
 1009e0c:	48d6d83a 	srl	r11,r9,r3
 1009e10:	001d883a 	mov	r14,zero
 1009e14:	18009e16 	blt	r3,zero,100a090 <_fpadd_parts+0x2ec>
 1009e18:	01000044 	movi	r4,1
 1009e1c:	20c6983a 	sll	r3,r4,r3
 1009e20:	0015883a 	mov	r10,zero
 1009e24:	513fffc4 	addi	r4,r10,-1
 1009e28:	2295403a 	cmpgeu	r10,r4,r10
 1009e2c:	1a87c83a 	sub	r3,r3,r10
 1009e30:	1a52703a 	and	r9,r3,r9
 1009e34:	2210703a 	and	r8,r4,r8
 1009e38:	4250b03a 	or	r8,r8,r9
 1009e3c:	4010c03a 	cmpne	r8,r8,zero
 1009e40:	42d0b03a 	or	r8,r8,r11
 1009e44:	7013883a 	mov	r9,r14
 1009e48:	11000117 	ldw	r4,4(r2)
 1009e4c:	28800117 	ldw	r2,4(r5)
 1009e50:	20804126 	beq	r4,r2,1009f58 <_fpadd_parts+0x1b4>
 1009e54:	20006326 	beq	r4,zero,1009fe4 <_fpadd_parts+0x240>
 1009e58:	4305c83a 	sub	r2,r8,r12
 1009e5c:	4091803a 	cmpltu	r8,r8,r2
 1009e60:	4b47c83a 	sub	r3,r9,r13
 1009e64:	1a07c83a 	sub	r3,r3,r8
 1009e68:	18006316 	blt	r3,zero,1009ff8 <_fpadd_parts+0x254>
 1009e6c:	30000115 	stw	zero,4(r6)
 1009e70:	31c00215 	stw	r7,8(r6)
 1009e74:	30800315 	stw	r2,12(r6)
 1009e78:	30c00415 	stw	r3,16(r6)
 1009e7c:	11ffffc4 	addi	r7,r2,-1
 1009e80:	388b403a 	cmpgeu	r5,r7,r2
 1009e84:	194bc83a 	sub	r5,r3,r5
 1009e88:	01040034 	movhi	r4,4096
 1009e8c:	213fffc4 	addi	r4,r4,-1
 1009e90:	21401736 	bltu	r4,r5,1009ef0 <_fpadd_parts+0x14c>
 1009e94:	29008226 	beq	r5,r4,100a0a0 <_fpadd_parts+0x2fc>
 1009e98:	31400217 	ldw	r5,8(r6)
 1009e9c:	02840034 	movhi	r10,4096
 1009ea0:	52bfffc4 	addi	r10,r10,-1
 1009ea4:	033fff84 	movi	r12,-2
 1009ea8:	297fffc4 	addi	r5,r5,-1
 1009eac:	00000106 	br	1009eb4 <_fpadd_parts+0x110>
 1009eb0:	3a804a26 	beq	r7,r10,1009fdc <_fpadd_parts+0x238>
 1009eb4:	1089883a 	add	r4,r2,r2
 1009eb8:	2091803a 	cmpltu	r8,r4,r2
 1009ebc:	18c7883a 	add	r3,r3,r3
 1009ec0:	227fffc4 	addi	r9,r4,-1
 1009ec4:	40d1883a 	add	r8,r8,r3
 1009ec8:	490f403a 	cmpgeu	r7,r9,r4
 1009ecc:	41cfc83a 	sub	r7,r8,r7
 1009ed0:	2817883a 	mov	r11,r5
 1009ed4:	2005883a 	mov	r2,r4
 1009ed8:	4007883a 	mov	r3,r8
 1009edc:	297fffc4 	addi	r5,r5,-1
 1009ee0:	51fff32e 	bgeu	r10,r7,1009eb0 <_fpadd_parts+0x10c>
 1009ee4:	31000315 	stw	r4,12(r6)
 1009ee8:	32000415 	stw	r8,16(r6)
 1009eec:	32c00215 	stw	r11,8(r6)
 1009ef0:	010000c4 	movi	r4,3
 1009ef4:	31000015 	stw	r4,0(r6)
 1009ef8:	01080034 	movhi	r4,8192
 1009efc:	213fffc4 	addi	r4,r4,-1
 1009f00:	20c00b2e 	bgeu	r4,r3,1009f30 <_fpadd_parts+0x18c>
 1009f04:	180e97fa 	slli	r7,r3,31
 1009f08:	1008d07a 	srli	r4,r2,1
 1009f0c:	31400217 	ldw	r5,8(r6)
 1009f10:	1806d07a 	srli	r3,r3,1
 1009f14:	1080004c 	andi	r2,r2,1
 1009f18:	3908b03a 	or	r4,r7,r4
 1009f1c:	1108b03a 	or	r4,r2,r4
 1009f20:	29400044 	addi	r5,r5,1
 1009f24:	31000315 	stw	r4,12(r6)
 1009f28:	30c00415 	stw	r3,16(r6)
 1009f2c:	31400215 	stw	r5,8(r6)
 1009f30:	3005883a 	mov	r2,r6
 1009f34:	f800283a 	ret
 1009f38:	2805883a 	mov	r2,r5
 1009f3c:	f800283a 	ret
 1009f40:	59c01e0e 	bge	r11,r7,1009fbc <_fpadd_parts+0x218>
 1009f44:	11000117 	ldw	r4,4(r2)
 1009f48:	28800117 	ldw	r2,4(r5)
 1009f4c:	0011883a 	mov	r8,zero
 1009f50:	0013883a 	mov	r9,zero
 1009f54:	20bfbf1e 	bne	r4,r2,1009e54 <_fpadd_parts+0xb0>
 1009f58:	4305883a 	add	r2,r8,r12
 1009f5c:	1207803a 	cmpltu	r3,r2,r8
 1009f60:	4b53883a 	add	r9,r9,r13
 1009f64:	1a47883a 	add	r3,r3,r9
 1009f68:	31000115 	stw	r4,4(r6)
 1009f6c:	31c00215 	stw	r7,8(r6)
 1009f70:	30800315 	stw	r2,12(r6)
 1009f74:	30c00415 	stw	r3,16(r6)
 1009f78:	003fdd06 	br	1009ef0 <_fpadd_parts+0x14c>
 1009f7c:	20ffef1e 	bne	r4,r3,1009f3c <_fpadd_parts+0x198>
 1009f80:	31000015 	stw	r4,0(r6)
 1009f84:	10c00117 	ldw	r3,4(r2)
 1009f88:	30c00115 	stw	r3,4(r6)
 1009f8c:	10c00217 	ldw	r3,8(r2)
 1009f90:	11000117 	ldw	r4,4(r2)
 1009f94:	29400117 	ldw	r5,4(r5)
 1009f98:	30c00215 	stw	r3,8(r6)
 1009f9c:	10c00317 	ldw	r3,12(r2)
 1009fa0:	2908703a 	and	r4,r5,r4
 1009fa4:	30c00315 	stw	r3,12(r6)
 1009fa8:	10c00417 	ldw	r3,16(r2)
 1009fac:	31000115 	stw	r4,4(r6)
 1009fb0:	3005883a 	mov	r2,r6
 1009fb4:	30c00415 	stw	r3,16(r6)
 1009fb8:	f800283a 	ret
 1009fbc:	580f883a 	mov	r7,r11
 1009fc0:	0019883a 	mov	r12,zero
 1009fc4:	001b883a 	mov	r13,zero
 1009fc8:	003f9f06 	br	1009e48 <_fpadd_parts+0xa4>
 1009fcc:	0115c83a 	sub	r10,zero,r4
 1009fd0:	00c00fc4 	movi	r3,63
 1009fd4:	1abfda16 	blt	r3,r10,1009f40 <_fpadd_parts+0x19c>
 1009fd8:	003f8906 	br	1009e00 <_fpadd_parts+0x5c>
 1009fdc:	627fb52e 	bgeu	r12,r9,1009eb4 <_fpadd_parts+0x110>
 1009fe0:	003fc006 	br	1009ee4 <_fpadd_parts+0x140>
 1009fe4:	6205c83a 	sub	r2,r12,r8
 1009fe8:	6099803a 	cmpltu	r12,r12,r2
 1009fec:	6a47c83a 	sub	r3,r13,r9
 1009ff0:	1b07c83a 	sub	r3,r3,r12
 1009ff4:	183f9d0e 	bge	r3,zero,1009e6c <_fpadd_parts+0xc8>
 1009ff8:	0085c83a 	sub	r2,zero,r2
 1009ffc:	1008c03a 	cmpne	r4,r2,zero
 100a000:	00c7c83a 	sub	r3,zero,r3
 100a004:	1907c83a 	sub	r3,r3,r4
 100a008:	01000044 	movi	r4,1
 100a00c:	31000115 	stw	r4,4(r6)
 100a010:	31c00215 	stw	r7,8(r6)
 100a014:	30800315 	stw	r2,12(r6)
 100a018:	30c00415 	stw	r3,16(r6)
 100a01c:	003f9706 	br	1009e7c <_fpadd_parts+0xd8>
 100a020:	203f8926 	beq	r4,zero,1009e48 <_fpadd_parts+0xa4>
 100a024:	50fff804 	addi	r3,r10,-32
 100a028:	3a8f883a 	add	r7,r7,r10
 100a02c:	18002316 	blt	r3,zero,100a0bc <_fpadd_parts+0x318>
 100a030:	68d6d83a 	srl	r11,r13,r3
 100a034:	001d883a 	mov	r14,zero
 100a038:	18001c16 	blt	r3,zero,100a0ac <_fpadd_parts+0x308>
 100a03c:	01000044 	movi	r4,1
 100a040:	20c6983a 	sll	r3,r4,r3
 100a044:	0015883a 	mov	r10,zero
 100a048:	513fffc4 	addi	r4,r10,-1
 100a04c:	2295403a 	cmpgeu	r10,r4,r10
 100a050:	1a87c83a 	sub	r3,r3,r10
 100a054:	1b5a703a 	and	r13,r3,r13
 100a058:	2318703a 	and	r12,r4,r12
 100a05c:	6358b03a 	or	r12,r12,r13
 100a060:	6018c03a 	cmpne	r12,r12,zero
 100a064:	62d8b03a 	or	r12,r12,r11
 100a068:	701b883a 	mov	r13,r14
 100a06c:	003f7606 	br	1009e48 <_fpadd_parts+0xa4>
 100a070:	4808907a 	slli	r4,r9,1
 100a074:	02c007c4 	movi	r11,31
 100a078:	5a97c83a 	sub	r11,r11,r10
 100a07c:	22c8983a 	sll	r4,r4,r11
 100a080:	4296d83a 	srl	r11,r8,r10
 100a084:	4a9cd83a 	srl	r14,r9,r10
 100a088:	22d6b03a 	or	r11,r4,r11
 100a08c:	003f6106 	br	1009e14 <_fpadd_parts+0x70>
 100a090:	00c00044 	movi	r3,1
 100a094:	1a94983a 	sll	r10,r3,r10
 100a098:	0007883a 	mov	r3,zero
 100a09c:	003f6106 	br	1009e24 <_fpadd_parts+0x80>
 100a0a0:	013fff84 	movi	r4,-2
 100a0a4:	21ff7c2e 	bgeu	r4,r7,1009e98 <_fpadd_parts+0xf4>
 100a0a8:	003f9106 	br	1009ef0 <_fpadd_parts+0x14c>
 100a0ac:	00c00044 	movi	r3,1
 100a0b0:	1a94983a 	sll	r10,r3,r10
 100a0b4:	0007883a 	mov	r3,zero
 100a0b8:	003fe306 	br	100a048 <_fpadd_parts+0x2a4>
 100a0bc:	6816907a 	slli	r11,r13,1
 100a0c0:	010007c4 	movi	r4,31
 100a0c4:	2289c83a 	sub	r4,r4,r10
 100a0c8:	5908983a 	sll	r4,r11,r4
 100a0cc:	6296d83a 	srl	r11,r12,r10
 100a0d0:	6a9cd83a 	srl	r14,r13,r10
 100a0d4:	22d6b03a 	or	r11,r4,r11
 100a0d8:	003fd706 	br	100a038 <_fpadd_parts+0x294>
 100a0dc:	193f971e 	bne	r3,r4,1009f3c <_fpadd_parts+0x198>
 100a0e0:	11000117 	ldw	r4,4(r2)
 100a0e4:	28c00117 	ldw	r3,4(r5)
 100a0e8:	20ff9426 	beq	r4,r3,1009f3c <_fpadd_parts+0x198>
 100a0ec:	00804074 	movhi	r2,257
 100a0f0:	10bed904 	addi	r2,r2,-1180
 100a0f4:	f800283a 	ret

0100a0f8 <__adddf3>:
 100a0f8:	deffec04 	addi	sp,sp,-80
 100a0fc:	d9001115 	stw	r4,68(sp)
 100a100:	d9401215 	stw	r5,72(sp)
 100a104:	d9001104 	addi	r4,sp,68
 100a108:	d9400a04 	addi	r5,sp,40
 100a10c:	dfc01315 	stw	ra,76(sp)
 100a110:	d9c01015 	stw	r7,64(sp)
 100a114:	d9800f15 	stw	r6,60(sp)
 100a118:	100aec40 	call	100aec4 <__unpack_d>
 100a11c:	d9000f04 	addi	r4,sp,60
 100a120:	d9400504 	addi	r5,sp,20
 100a124:	100aec40 	call	100aec4 <__unpack_d>
 100a128:	d9000a04 	addi	r4,sp,40
 100a12c:	d9400504 	addi	r5,sp,20
 100a130:	d80d883a 	mov	r6,sp
 100a134:	1009da40 	call	1009da4 <_fpadd_parts>
 100a138:	1009883a 	mov	r4,r2
 100a13c:	100aca00 	call	100aca0 <__pack_d>
 100a140:	dfc01317 	ldw	ra,76(sp)
 100a144:	dec01404 	addi	sp,sp,80
 100a148:	f800283a 	ret

0100a14c <__subdf3>:
 100a14c:	deffec04 	addi	sp,sp,-80
 100a150:	d9001115 	stw	r4,68(sp)
 100a154:	d9401215 	stw	r5,72(sp)
 100a158:	d9001104 	addi	r4,sp,68
 100a15c:	d9400a04 	addi	r5,sp,40
 100a160:	dfc01315 	stw	ra,76(sp)
 100a164:	d9c01015 	stw	r7,64(sp)
 100a168:	d9800f15 	stw	r6,60(sp)
 100a16c:	100aec40 	call	100aec4 <__unpack_d>
 100a170:	d9000f04 	addi	r4,sp,60
 100a174:	d9400504 	addi	r5,sp,20
 100a178:	100aec40 	call	100aec4 <__unpack_d>
 100a17c:	d8800617 	ldw	r2,24(sp)
 100a180:	d9000a04 	addi	r4,sp,40
 100a184:	d9400504 	addi	r5,sp,20
 100a188:	d80d883a 	mov	r6,sp
 100a18c:	1080005c 	xori	r2,r2,1
 100a190:	d8800615 	stw	r2,24(sp)
 100a194:	1009da40 	call	1009da4 <_fpadd_parts>
 100a198:	1009883a 	mov	r4,r2
 100a19c:	100aca00 	call	100aca0 <__pack_d>
 100a1a0:	dfc01317 	ldw	ra,76(sp)
 100a1a4:	dec01404 	addi	sp,sp,80
 100a1a8:	f800283a 	ret

0100a1ac <__muldf3>:
 100a1ac:	deffe404 	addi	sp,sp,-112
 100a1b0:	d9001115 	stw	r4,68(sp)
 100a1b4:	d9401215 	stw	r5,72(sp)
 100a1b8:	d9001104 	addi	r4,sp,68
 100a1bc:	d9400a04 	addi	r5,sp,40
 100a1c0:	dfc01b15 	stw	ra,108(sp)
 100a1c4:	d9800f15 	stw	r6,60(sp)
 100a1c8:	d9c01015 	stw	r7,64(sp)
 100a1cc:	ddc01a15 	stw	r23,104(sp)
 100a1d0:	dd801915 	stw	r22,100(sp)
 100a1d4:	dd401815 	stw	r21,96(sp)
 100a1d8:	dd001715 	stw	r20,92(sp)
 100a1dc:	dcc01615 	stw	r19,88(sp)
 100a1e0:	dc801515 	stw	r18,84(sp)
 100a1e4:	dc401415 	stw	r17,80(sp)
 100a1e8:	dc001315 	stw	r16,76(sp)
 100a1ec:	100aec40 	call	100aec4 <__unpack_d>
 100a1f0:	d9000f04 	addi	r4,sp,60
 100a1f4:	d9400504 	addi	r5,sp,20
 100a1f8:	100aec40 	call	100aec4 <__unpack_d>
 100a1fc:	d8c00a17 	ldw	r3,40(sp)
 100a200:	00800044 	movi	r2,1
 100a204:	10c01136 	bltu	r2,r3,100a24c <__muldf3+0xa0>
 100a208:	d8c00b17 	ldw	r3,44(sp)
 100a20c:	d8800617 	ldw	r2,24(sp)
 100a210:	d9000a04 	addi	r4,sp,40
 100a214:	1884c03a 	cmpne	r2,r3,r2
 100a218:	d8800b15 	stw	r2,44(sp)
 100a21c:	100aca00 	call	100aca0 <__pack_d>
 100a220:	dfc01b17 	ldw	ra,108(sp)
 100a224:	ddc01a17 	ldw	r23,104(sp)
 100a228:	dd801917 	ldw	r22,100(sp)
 100a22c:	dd401817 	ldw	r21,96(sp)
 100a230:	dd001717 	ldw	r20,92(sp)
 100a234:	dcc01617 	ldw	r19,88(sp)
 100a238:	dc801517 	ldw	r18,84(sp)
 100a23c:	dc401417 	ldw	r17,80(sp)
 100a240:	dc001317 	ldw	r16,76(sp)
 100a244:	dec01c04 	addi	sp,sp,112
 100a248:	f800283a 	ret
 100a24c:	d9000517 	ldw	r4,20(sp)
 100a250:	11000636 	bltu	r2,r4,100a26c <__muldf3+0xc0>
 100a254:	d8800617 	ldw	r2,24(sp)
 100a258:	d8c00b17 	ldw	r3,44(sp)
 100a25c:	d9000504 	addi	r4,sp,20
 100a260:	1884c03a 	cmpne	r2,r3,r2
 100a264:	d8800615 	stw	r2,24(sp)
 100a268:	003fec06 	br	100a21c <__muldf3+0x70>
 100a26c:	00800104 	movi	r2,4
 100a270:	1880051e 	bne	r3,r2,100a288 <__muldf3+0xdc>
 100a274:	00800084 	movi	r2,2
 100a278:	20bfe31e 	bne	r4,r2,100a208 <__muldf3+0x5c>
 100a27c:	01004074 	movhi	r4,257
 100a280:	213ed904 	addi	r4,r4,-1180
 100a284:	003fe506 	br	100a21c <__muldf3+0x70>
 100a288:	2080031e 	bne	r4,r2,100a298 <__muldf3+0xec>
 100a28c:	00800084 	movi	r2,2
 100a290:	18bffa26 	beq	r3,r2,100a27c <__muldf3+0xd0>
 100a294:	003fef06 	br	100a254 <__muldf3+0xa8>
 100a298:	00800084 	movi	r2,2
 100a29c:	18bfda26 	beq	r3,r2,100a208 <__muldf3+0x5c>
 100a2a0:	20bfec26 	beq	r4,r2,100a254 <__muldf3+0xa8>
 100a2a4:	dc000d17 	ldw	r16,52(sp)
 100a2a8:	dd000817 	ldw	r20,32(sp)
 100a2ac:	dc800917 	ldw	r18,36(sp)
 100a2b0:	8009883a 	mov	r4,r16
 100a2b4:	000b883a 	mov	r5,zero
 100a2b8:	a00d883a 	mov	r6,r20
 100a2bc:	000f883a 	mov	r7,zero
 100a2c0:	100aae40 	call	100aae4 <__muldi3>
 100a2c4:	dc400e17 	ldw	r17,56(sp)
 100a2c8:	9009883a 	mov	r4,r18
 100a2cc:	800d883a 	mov	r6,r16
 100a2d0:	000b883a 	mov	r5,zero
 100a2d4:	000f883a 	mov	r7,zero
 100a2d8:	102f883a 	mov	r23,r2
 100a2dc:	1827883a 	mov	r19,r3
 100a2e0:	100aae40 	call	100aae4 <__muldi3>
 100a2e4:	900d883a 	mov	r6,r18
 100a2e8:	8809883a 	mov	r4,r17
 100a2ec:	000b883a 	mov	r5,zero
 100a2f0:	000f883a 	mov	r7,zero
 100a2f4:	102b883a 	mov	r21,r2
 100a2f8:	1821883a 	mov	r16,r3
 100a2fc:	100aae40 	call	100aae4 <__muldi3>
 100a300:	8809883a 	mov	r4,r17
 100a304:	000b883a 	mov	r5,zero
 100a308:	a00d883a 	mov	r6,r20
 100a30c:	000f883a 	mov	r7,zero
 100a310:	102d883a 	mov	r22,r2
 100a314:	1825883a 	mov	r18,r3
 100a318:	100aae40 	call	100aae4 <__muldi3>
 100a31c:	154b883a 	add	r5,r2,r21
 100a320:	2889803a 	cmpltu	r4,r5,r2
 100a324:	1c07883a 	add	r3,r3,r16
 100a328:	20c9883a 	add	r4,r4,r3
 100a32c:	24004b36 	bltu	r4,r16,100a45c <__muldf3+0x2b0>
 100a330:	8100011e 	bne	r16,r4,100a338 <__muldf3+0x18c>
 100a334:	2d404936 	bltu	r5,r21,100a45c <__muldf3+0x2b0>
 100a338:	0011883a 	mov	r8,zero
 100a33c:	0007883a 	mov	r3,zero
 100a340:	2ccb883a 	add	r5,r5,r19
 100a344:	b80d883a 	mov	r6,r23
 100a348:	2cc0012e 	bgeu	r5,r19,100a350 <__muldf3+0x1a4>
 100a34c:	02000044 	movi	r8,1
 100a350:	258f883a 	add	r7,r4,r22
 100a354:	3909803a 	cmpltu	r4,r7,r4
 100a358:	da400c17 	ldw	r9,48(sp)
 100a35c:	2489883a 	add	r4,r4,r18
 100a360:	d8800717 	ldw	r2,28(sp)
 100a364:	20c9883a 	add	r4,r4,r3
 100a368:	da800b17 	ldw	r10,44(sp)
 100a36c:	d8c00617 	ldw	r3,24(sp)
 100a370:	3a11883a 	add	r8,r7,r8
 100a374:	4885883a 	add	r2,r9,r2
 100a378:	50c6c03a 	cmpne	r3,r10,r3
 100a37c:	41cf803a 	cmpltu	r7,r8,r7
 100a380:	12400104 	addi	r9,r2,4
 100a384:	d8c00115 	stw	r3,4(sp)
 100a388:	3909883a 	add	r4,r7,r4
 100a38c:	da400215 	stw	r9,8(sp)
 100a390:	03480034 	movhi	r13,8192
 100a394:	6b7fffc4 	addi	r13,r13,-1
 100a398:	4007883a 	mov	r3,r8
 100a39c:	6900102e 	bgeu	r13,r4,100a3e0 <__muldf3+0x234>
 100a3a0:	10800144 	addi	r2,r2,5
 100a3a4:	180ed07a 	srli	r7,r3,1
 100a3a8:	18c0004c 	andi	r3,r3,1
 100a3ac:	201097fa 	slli	r8,r4,31
 100a3b0:	281697fa 	slli	r11,r5,31
 100a3b4:	2008d07a 	srli	r4,r4,1
 100a3b8:	3014d07a 	srli	r10,r6,1
 100a3bc:	2812d07a 	srli	r9,r5,1
 100a3c0:	1019883a 	mov	r12,r2
 100a3c4:	18000226 	beq	r3,zero,100a3d0 <__muldf3+0x224>
 100a3c8:	5a8cb03a 	or	r6,r11,r10
 100a3cc:	49600034 	orhi	r5,r9,32768
 100a3d0:	41c6b03a 	or	r3,r8,r7
 100a3d4:	10800044 	addi	r2,r2,1
 100a3d8:	693ff236 	bltu	r13,r4,100a3a4 <__muldf3+0x1f8>
 100a3dc:	db000215 	stw	r12,8(sp)
 100a3e0:	03440034 	movhi	r13,4096
 100a3e4:	6b7fffc4 	addi	r13,r13,-1
 100a3e8:	69001336 	bltu	r13,r4,100a438 <__muldf3+0x28c>
 100a3ec:	d8800217 	ldw	r2,8(sp)
 100a3f0:	10bfffc4 	addi	r2,r2,-1
 100a3f4:	18d3883a 	add	r9,r3,r3
 100a3f8:	48c7803a 	cmpltu	r3,r9,r3
 100a3fc:	2109883a 	add	r4,r4,r4
 100a400:	190f883a 	add	r7,r3,r4
 100a404:	3191883a 	add	r8,r6,r6
 100a408:	4197803a 	cmpltu	r11,r8,r6
 100a40c:	2955883a 	add	r10,r5,r5
 100a410:	1019883a 	mov	r12,r2
 100a414:	4807883a 	mov	r3,r9
 100a418:	3809883a 	mov	r4,r7
 100a41c:	2800010e 	bge	r5,zero,100a424 <__muldf3+0x278>
 100a420:	48c00054 	ori	r3,r9,1
 100a424:	400d883a 	mov	r6,r8
 100a428:	5a8b883a 	add	r5,r11,r10
 100a42c:	10bfffc4 	addi	r2,r2,-1
 100a430:	69fff02e 	bgeu	r13,r7,100a3f4 <__muldf3+0x248>
 100a434:	db000215 	stw	r12,8(sp)
 100a438:	18803fcc 	andi	r2,r3,255
 100a43c:	01c02004 	movi	r7,128
 100a440:	11c00926 	beq	r2,r7,100a468 <__muldf3+0x2bc>
 100a444:	008000c4 	movi	r2,3
 100a448:	d9000415 	stw	r4,16(sp)
 100a44c:	d8c00315 	stw	r3,12(sp)
 100a450:	d8800015 	stw	r2,0(sp)
 100a454:	d809883a 	mov	r4,sp
 100a458:	003f7006 	br	100a21c <__muldf3+0x70>
 100a45c:	0011883a 	mov	r8,zero
 100a460:	00c00044 	movi	r3,1
 100a464:	003fb606 	br	100a340 <__muldf3+0x194>
 100a468:	19c0400c 	andi	r7,r3,256
 100a46c:	383ff51e 	bne	r7,zero,100a444 <__muldf3+0x298>
 100a470:	314ab03a 	or	r5,r6,r5
 100a474:	283ff326 	beq	r5,zero,100a444 <__muldf3+0x298>
 100a478:	1885883a 	add	r2,r3,r2
 100a47c:	10cb803a 	cmpltu	r5,r2,r3
 100a480:	00ffc004 	movi	r3,-256
 100a484:	10c6703a 	and	r3,r2,r3
 100a488:	2909883a 	add	r4,r5,r4
 100a48c:	003fed06 	br	100a444 <__muldf3+0x298>

0100a490 <__divdf3>:
 100a490:	defff104 	addi	sp,sp,-60
 100a494:	d9000c15 	stw	r4,48(sp)
 100a498:	d9400d15 	stw	r5,52(sp)
 100a49c:	d9000c04 	addi	r4,sp,48
 100a4a0:	d9400504 	addi	r5,sp,20
 100a4a4:	dfc00e15 	stw	ra,56(sp)
 100a4a8:	d9800a15 	stw	r6,40(sp)
 100a4ac:	d9c00b15 	stw	r7,44(sp)
 100a4b0:	100aec40 	call	100aec4 <__unpack_d>
 100a4b4:	d9000a04 	addi	r4,sp,40
 100a4b8:	d80b883a 	mov	r5,sp
 100a4bc:	100aec40 	call	100aec4 <__unpack_d>
 100a4c0:	d8c00517 	ldw	r3,20(sp)
 100a4c4:	00800044 	movi	r2,1
 100a4c8:	10c00536 	bltu	r2,r3,100a4e0 <__divdf3+0x50>
 100a4cc:	d9000504 	addi	r4,sp,20
 100a4d0:	100aca00 	call	100aca0 <__pack_d>
 100a4d4:	dfc00e17 	ldw	ra,56(sp)
 100a4d8:	dec00f04 	addi	sp,sp,60
 100a4dc:	f800283a 	ret
 100a4e0:	d9000017 	ldw	r4,0(sp)
 100a4e4:	11000536 	bltu	r2,r4,100a4fc <__divdf3+0x6c>
 100a4e8:	d809883a 	mov	r4,sp
 100a4ec:	100aca00 	call	100aca0 <__pack_d>
 100a4f0:	dfc00e17 	ldw	ra,56(sp)
 100a4f4:	dec00f04 	addi	sp,sp,60
 100a4f8:	f800283a 	ret
 100a4fc:	d9800617 	ldw	r6,24(sp)
 100a500:	d9400117 	ldw	r5,4(sp)
 100a504:	00800104 	movi	r2,4
 100a508:	314af03a 	xor	r5,r6,r5
 100a50c:	d9400615 	stw	r5,24(sp)
 100a510:	18800226 	beq	r3,r2,100a51c <__divdf3+0x8c>
 100a514:	01400084 	movi	r5,2
 100a518:	1940041e 	bne	r3,r5,100a52c <__divdf3+0x9c>
 100a51c:	193feb1e 	bne	r3,r4,100a4cc <__divdf3+0x3c>
 100a520:	01004074 	movhi	r4,257
 100a524:	213ed904 	addi	r4,r4,-1180
 100a528:	003fe906 	br	100a4d0 <__divdf3+0x40>
 100a52c:	20803326 	beq	r4,r2,100a5fc <__divdf3+0x16c>
 100a530:	21403726 	beq	r4,r5,100a610 <__divdf3+0x180>
 100a534:	d8800217 	ldw	r2,8(sp)
 100a538:	d9000717 	ldw	r4,28(sp)
 100a53c:	d8c00917 	ldw	r3,36(sp)
 100a540:	da000417 	ldw	r8,16(sp)
 100a544:	2089c83a 	sub	r4,r4,r2
 100a548:	d9000715 	stw	r4,28(sp)
 100a54c:	d8800817 	ldw	r2,32(sp)
 100a550:	dbc00317 	ldw	r15,12(sp)
 100a554:	1a000236 	bltu	r3,r8,100a560 <__divdf3+0xd0>
 100a558:	40c0081e 	bne	r8,r3,100a57c <__divdf3+0xec>
 100a55c:	13c0072e 	bgeu	r2,r15,100a57c <__divdf3+0xec>
 100a560:	108b883a 	add	r5,r2,r2
 100a564:	288d803a 	cmpltu	r6,r5,r2
 100a568:	18c7883a 	add	r3,r3,r3
 100a56c:	213fffc4 	addi	r4,r4,-1
 100a570:	2805883a 	mov	r2,r5
 100a574:	30c7883a 	add	r3,r6,r3
 100a578:	d9000715 	stw	r4,28(sp)
 100a57c:	01400f44 	movi	r5,61
 100a580:	000f883a 	mov	r7,zero
 100a584:	01040034 	movhi	r4,4096
 100a588:	0019883a 	mov	r12,zero
 100a58c:	001b883a 	mov	r13,zero
 100a590:	201697fa 	slli	r11,r4,31
 100a594:	3814d07a 	srli	r10,r7,1
 100a598:	297fffc4 	addi	r5,r5,-1
 100a59c:	1a000936 	bltu	r3,r8,100a5c4 <__divdf3+0x134>
 100a5a0:	13cdc83a 	sub	r6,r2,r15
 100a5a4:	1193803a 	cmpltu	r9,r2,r6
 100a5a8:	1a1dc83a 	sub	r14,r3,r8
 100a5ac:	40c0011e 	bne	r8,r3,100a5b4 <__divdf3+0x124>
 100a5b0:	13c00436 	bltu	r2,r15,100a5c4 <__divdf3+0x134>
 100a5b4:	3005883a 	mov	r2,r6
 100a5b8:	7247c83a 	sub	r3,r14,r9
 100a5bc:	61d8b03a 	or	r12,r12,r7
 100a5c0:	691ab03a 	or	r13,r13,r4
 100a5c4:	108d883a 	add	r6,r2,r2
 100a5c8:	3093803a 	cmpltu	r9,r6,r2
 100a5cc:	18c7883a 	add	r3,r3,r3
 100a5d0:	5a8eb03a 	or	r7,r11,r10
 100a5d4:	2008d07a 	srli	r4,r4,1
 100a5d8:	3005883a 	mov	r2,r6
 100a5dc:	48c7883a 	add	r3,r9,r3
 100a5e0:	283feb1e 	bne	r5,zero,100a590 <__divdf3+0x100>
 100a5e4:	61003fcc 	andi	r4,r12,255
 100a5e8:	01402004 	movi	r5,128
 100a5ec:	21400b26 	beq	r4,r5,100a61c <__divdf3+0x18c>
 100a5f0:	db000815 	stw	r12,32(sp)
 100a5f4:	db400915 	stw	r13,36(sp)
 100a5f8:	003fb406 	br	100a4cc <__divdf3+0x3c>
 100a5fc:	d8000815 	stw	zero,32(sp)
 100a600:	d8000915 	stw	zero,36(sp)
 100a604:	d8000715 	stw	zero,28(sp)
 100a608:	d9000504 	addi	r4,sp,20
 100a60c:	003fb006 	br	100a4d0 <__divdf3+0x40>
 100a610:	d8800515 	stw	r2,20(sp)
 100a614:	d9000504 	addi	r4,sp,20
 100a618:	003fad06 	br	100a4d0 <__divdf3+0x40>
 100a61c:	6140400c 	andi	r5,r12,256
 100a620:	283ff31e 	bne	r5,zero,100a5f0 <__divdf3+0x160>
 100a624:	30c4b03a 	or	r2,r6,r3
 100a628:	103ff126 	beq	r2,zero,100a5f0 <__divdf3+0x160>
 100a62c:	6109883a 	add	r4,r12,r4
 100a630:	2305803a 	cmpltu	r2,r4,r12
 100a634:	033fc004 	movi	r12,-256
 100a638:	2318703a 	and	r12,r4,r12
 100a63c:	135b883a 	add	r13,r2,r13
 100a640:	003feb06 	br	100a5f0 <__divdf3+0x160>

0100a644 <__eqdf2>:
 100a644:	defff104 	addi	sp,sp,-60
 100a648:	d9000c15 	stw	r4,48(sp)
 100a64c:	d9400d15 	stw	r5,52(sp)
 100a650:	d9000c04 	addi	r4,sp,48
 100a654:	d9400504 	addi	r5,sp,20
 100a658:	dfc00e15 	stw	ra,56(sp)
 100a65c:	d9800a15 	stw	r6,40(sp)
 100a660:	d9c00b15 	stw	r7,44(sp)
 100a664:	100aec40 	call	100aec4 <__unpack_d>
 100a668:	d9000a04 	addi	r4,sp,40
 100a66c:	d80b883a 	mov	r5,sp
 100a670:	100aec40 	call	100aec4 <__unpack_d>
 100a674:	d8c00517 	ldw	r3,20(sp)
 100a678:	00800044 	movi	r2,1
 100a67c:	10c0052e 	bgeu	r2,r3,100a694 <__eqdf2+0x50>
 100a680:	d8c00017 	ldw	r3,0(sp)
 100a684:	10c0032e 	bgeu	r2,r3,100a694 <__eqdf2+0x50>
 100a688:	d9000504 	addi	r4,sp,20
 100a68c:	d80b883a 	mov	r5,sp
 100a690:	100afc80 	call	100afc8 <__fpcmp_parts_d>
 100a694:	dfc00e17 	ldw	ra,56(sp)
 100a698:	dec00f04 	addi	sp,sp,60
 100a69c:	f800283a 	ret

0100a6a0 <__nedf2>:
 100a6a0:	defff104 	addi	sp,sp,-60
 100a6a4:	d9000c15 	stw	r4,48(sp)
 100a6a8:	d9400d15 	stw	r5,52(sp)
 100a6ac:	d9000c04 	addi	r4,sp,48
 100a6b0:	d9400504 	addi	r5,sp,20
 100a6b4:	dfc00e15 	stw	ra,56(sp)
 100a6b8:	d9800a15 	stw	r6,40(sp)
 100a6bc:	d9c00b15 	stw	r7,44(sp)
 100a6c0:	100aec40 	call	100aec4 <__unpack_d>
 100a6c4:	d9000a04 	addi	r4,sp,40
 100a6c8:	d80b883a 	mov	r5,sp
 100a6cc:	100aec40 	call	100aec4 <__unpack_d>
 100a6d0:	d8c00517 	ldw	r3,20(sp)
 100a6d4:	00800044 	movi	r2,1
 100a6d8:	10c0052e 	bgeu	r2,r3,100a6f0 <__nedf2+0x50>
 100a6dc:	d8c00017 	ldw	r3,0(sp)
 100a6e0:	10c0032e 	bgeu	r2,r3,100a6f0 <__nedf2+0x50>
 100a6e4:	d9000504 	addi	r4,sp,20
 100a6e8:	d80b883a 	mov	r5,sp
 100a6ec:	100afc80 	call	100afc8 <__fpcmp_parts_d>
 100a6f0:	dfc00e17 	ldw	ra,56(sp)
 100a6f4:	dec00f04 	addi	sp,sp,60
 100a6f8:	f800283a 	ret

0100a6fc <__gtdf2>:
 100a6fc:	defff104 	addi	sp,sp,-60
 100a700:	d9000c15 	stw	r4,48(sp)
 100a704:	d9400d15 	stw	r5,52(sp)
 100a708:	d9000c04 	addi	r4,sp,48
 100a70c:	d9400504 	addi	r5,sp,20
 100a710:	dfc00e15 	stw	ra,56(sp)
 100a714:	d9800a15 	stw	r6,40(sp)
 100a718:	d9c00b15 	stw	r7,44(sp)
 100a71c:	100aec40 	call	100aec4 <__unpack_d>
 100a720:	d9000a04 	addi	r4,sp,40
 100a724:	d80b883a 	mov	r5,sp
 100a728:	100aec40 	call	100aec4 <__unpack_d>
 100a72c:	d8c00517 	ldw	r3,20(sp)
 100a730:	00800044 	movi	r2,1
 100a734:	10c0082e 	bgeu	r2,r3,100a758 <__gtdf2+0x5c>
 100a738:	d8c00017 	ldw	r3,0(sp)
 100a73c:	10c0062e 	bgeu	r2,r3,100a758 <__gtdf2+0x5c>
 100a740:	d9000504 	addi	r4,sp,20
 100a744:	d80b883a 	mov	r5,sp
 100a748:	100afc80 	call	100afc8 <__fpcmp_parts_d>
 100a74c:	dfc00e17 	ldw	ra,56(sp)
 100a750:	dec00f04 	addi	sp,sp,60
 100a754:	f800283a 	ret
 100a758:	00bfffc4 	movi	r2,-1
 100a75c:	003ffb06 	br	100a74c <__gtdf2+0x50>

0100a760 <__gedf2>:
 100a760:	defff104 	addi	sp,sp,-60
 100a764:	d9000c15 	stw	r4,48(sp)
 100a768:	d9400d15 	stw	r5,52(sp)
 100a76c:	d9000c04 	addi	r4,sp,48
 100a770:	d9400504 	addi	r5,sp,20
 100a774:	dfc00e15 	stw	ra,56(sp)
 100a778:	d9800a15 	stw	r6,40(sp)
 100a77c:	d9c00b15 	stw	r7,44(sp)
 100a780:	100aec40 	call	100aec4 <__unpack_d>
 100a784:	d9000a04 	addi	r4,sp,40
 100a788:	d80b883a 	mov	r5,sp
 100a78c:	100aec40 	call	100aec4 <__unpack_d>
 100a790:	d8c00517 	ldw	r3,20(sp)
 100a794:	00800044 	movi	r2,1
 100a798:	10c0082e 	bgeu	r2,r3,100a7bc <__gedf2+0x5c>
 100a79c:	d8c00017 	ldw	r3,0(sp)
 100a7a0:	10c0062e 	bgeu	r2,r3,100a7bc <__gedf2+0x5c>
 100a7a4:	d9000504 	addi	r4,sp,20
 100a7a8:	d80b883a 	mov	r5,sp
 100a7ac:	100afc80 	call	100afc8 <__fpcmp_parts_d>
 100a7b0:	dfc00e17 	ldw	ra,56(sp)
 100a7b4:	dec00f04 	addi	sp,sp,60
 100a7b8:	f800283a 	ret
 100a7bc:	00bfffc4 	movi	r2,-1
 100a7c0:	003ffb06 	br	100a7b0 <__gedf2+0x50>

0100a7c4 <__ltdf2>:
 100a7c4:	defff104 	addi	sp,sp,-60
 100a7c8:	d9000c15 	stw	r4,48(sp)
 100a7cc:	d9400d15 	stw	r5,52(sp)
 100a7d0:	d9000c04 	addi	r4,sp,48
 100a7d4:	d9400504 	addi	r5,sp,20
 100a7d8:	dfc00e15 	stw	ra,56(sp)
 100a7dc:	d9800a15 	stw	r6,40(sp)
 100a7e0:	d9c00b15 	stw	r7,44(sp)
 100a7e4:	100aec40 	call	100aec4 <__unpack_d>
 100a7e8:	d9000a04 	addi	r4,sp,40
 100a7ec:	d80b883a 	mov	r5,sp
 100a7f0:	100aec40 	call	100aec4 <__unpack_d>
 100a7f4:	d8c00517 	ldw	r3,20(sp)
 100a7f8:	00800044 	movi	r2,1
 100a7fc:	10c0052e 	bgeu	r2,r3,100a814 <__ltdf2+0x50>
 100a800:	d8c00017 	ldw	r3,0(sp)
 100a804:	10c0032e 	bgeu	r2,r3,100a814 <__ltdf2+0x50>
 100a808:	d9000504 	addi	r4,sp,20
 100a80c:	d80b883a 	mov	r5,sp
 100a810:	100afc80 	call	100afc8 <__fpcmp_parts_d>
 100a814:	dfc00e17 	ldw	ra,56(sp)
 100a818:	dec00f04 	addi	sp,sp,60
 100a81c:	f800283a 	ret

0100a820 <__floatsidf>:
 100a820:	2004d7fa 	srli	r2,r4,31
 100a824:	defff904 	addi	sp,sp,-28
 100a828:	00c000c4 	movi	r3,3
 100a82c:	dfc00615 	stw	ra,24(sp)
 100a830:	dc000515 	stw	r16,20(sp)
 100a834:	d8c00015 	stw	r3,0(sp)
 100a838:	d8800115 	stw	r2,4(sp)
 100a83c:	2000081e 	bne	r4,zero,100a860 <__floatsidf+0x40>
 100a840:	00800084 	movi	r2,2
 100a844:	d8800015 	stw	r2,0(sp)
 100a848:	d809883a 	mov	r4,sp
 100a84c:	100aca00 	call	100aca0 <__pack_d>
 100a850:	dfc00617 	ldw	ra,24(sp)
 100a854:	dc000517 	ldw	r16,20(sp)
 100a858:	dec00704 	addi	sp,sp,28
 100a85c:	f800283a 	ret
 100a860:	00c00f04 	movi	r3,60
 100a864:	d8c00215 	stw	r3,8(sp)
 100a868:	10000f1e 	bne	r2,zero,100a8a8 <__floatsidf+0x88>
 100a86c:	2021883a 	mov	r16,r4
 100a870:	8009883a 	mov	r4,r16
 100a874:	100abf40 	call	100abf4 <__clzsi2>
 100a878:	11000744 	addi	r4,r2,29
 100a87c:	0100110e 	bge	zero,r4,100a8c4 <__floatsidf+0xa4>
 100a880:	10ffff44 	addi	r3,r2,-3
 100a884:	18001216 	blt	r3,zero,100a8d0 <__floatsidf+0xb0>
 100a888:	80c6983a 	sll	r3,r16,r3
 100a88c:	0009883a 	mov	r4,zero
 100a890:	014007c4 	movi	r5,31
 100a894:	2885c83a 	sub	r2,r5,r2
 100a898:	d9000315 	stw	r4,12(sp)
 100a89c:	d8c00415 	stw	r3,16(sp)
 100a8a0:	d8800215 	stw	r2,8(sp)
 100a8a4:	003fe806 	br	100a848 <__floatsidf+0x28>
 100a8a8:	00a00034 	movhi	r2,32768
 100a8ac:	20800e26 	beq	r4,r2,100a8e8 <__floatsidf+0xc8>
 100a8b0:	0121c83a 	sub	r16,zero,r4
 100a8b4:	8009883a 	mov	r4,r16
 100a8b8:	100abf40 	call	100abf4 <__clzsi2>
 100a8bc:	11000744 	addi	r4,r2,29
 100a8c0:	013fef16 	blt	zero,r4,100a880 <__floatsidf+0x60>
 100a8c4:	dc000315 	stw	r16,12(sp)
 100a8c8:	d8000415 	stw	zero,16(sp)
 100a8cc:	003fde06 	br	100a848 <__floatsidf+0x28>
 100a8d0:	800ad07a 	srli	r5,r16,1
 100a8d4:	00c007c4 	movi	r3,31
 100a8d8:	1907c83a 	sub	r3,r3,r4
 100a8dc:	28c6d83a 	srl	r3,r5,r3
 100a8e0:	8108983a 	sll	r4,r16,r4
 100a8e4:	003fea06 	br	100a890 <__floatsidf+0x70>
 100a8e8:	0005883a 	mov	r2,zero
 100a8ec:	00f07834 	movhi	r3,49632
 100a8f0:	003fd706 	br	100a850 <__floatsidf+0x30>

0100a8f4 <__fixdfsi>:
 100a8f4:	defff804 	addi	sp,sp,-32
 100a8f8:	d9000515 	stw	r4,20(sp)
 100a8fc:	d9400615 	stw	r5,24(sp)
 100a900:	d9000504 	addi	r4,sp,20
 100a904:	d80b883a 	mov	r5,sp
 100a908:	dfc00715 	stw	ra,28(sp)
 100a90c:	100aec40 	call	100aec4 <__unpack_d>
 100a910:	d8800017 	ldw	r2,0(sp)
 100a914:	00c00084 	movi	r3,2
 100a918:	10c01c26 	beq	r2,r3,100a98c <__fixdfsi+0x98>
 100a91c:	00c00044 	movi	r3,1
 100a920:	18801a2e 	bgeu	r3,r2,100a98c <__fixdfsi+0x98>
 100a924:	00c00104 	movi	r3,4
 100a928:	10c01126 	beq	r2,r3,100a970 <__fixdfsi+0x7c>
 100a92c:	d8800217 	ldw	r2,8(sp)
 100a930:	10001616 	blt	r2,zero,100a98c <__fixdfsi+0x98>
 100a934:	00c00784 	movi	r3,30
 100a938:	18800d16 	blt	r3,r2,100a970 <__fixdfsi+0x7c>
 100a93c:	00c00f04 	movi	r3,60
 100a940:	1885c83a 	sub	r2,r3,r2
 100a944:	10fff804 	addi	r3,r2,-32
 100a948:	d9400317 	ldw	r5,12(sp)
 100a94c:	d9000417 	ldw	r4,16(sp)
 100a950:	18001616 	blt	r3,zero,100a9ac <__fixdfsi+0xb8>
 100a954:	20c4d83a 	srl	r2,r4,r3
 100a958:	d8c00117 	ldw	r3,4(sp)
 100a95c:	18000126 	beq	r3,zero,100a964 <__fixdfsi+0x70>
 100a960:	0085c83a 	sub	r2,zero,r2
 100a964:	dfc00717 	ldw	ra,28(sp)
 100a968:	dec00804 	addi	sp,sp,32
 100a96c:	f800283a 	ret
 100a970:	d8800117 	ldw	r2,4(sp)
 100a974:	1000091e 	bne	r2,zero,100a99c <__fixdfsi+0xa8>
 100a978:	00a00034 	movhi	r2,32768
 100a97c:	10bfffc4 	addi	r2,r2,-1
 100a980:	dfc00717 	ldw	ra,28(sp)
 100a984:	dec00804 	addi	sp,sp,32
 100a988:	f800283a 	ret
 100a98c:	0005883a 	mov	r2,zero
 100a990:	dfc00717 	ldw	ra,28(sp)
 100a994:	dec00804 	addi	sp,sp,32
 100a998:	f800283a 	ret
 100a99c:	00a00034 	movhi	r2,32768
 100a9a0:	dfc00717 	ldw	ra,28(sp)
 100a9a4:	dec00804 	addi	sp,sp,32
 100a9a8:	f800283a 	ret
 100a9ac:	2008907a 	slli	r4,r4,1
 100a9b0:	018007c4 	movi	r6,31
 100a9b4:	308dc83a 	sub	r6,r6,r2
 100a9b8:	2188983a 	sll	r4,r4,r6
 100a9bc:	2884d83a 	srl	r2,r5,r2
 100a9c0:	2084b03a 	or	r2,r4,r2
 100a9c4:	003fe406 	br	100a958 <__fixdfsi+0x64>

0100a9c8 <__floatunsidf>:
 100a9c8:	defff904 	addi	sp,sp,-28
 100a9cc:	dc000515 	stw	r16,20(sp)
 100a9d0:	dfc00615 	stw	ra,24(sp)
 100a9d4:	d8000115 	stw	zero,4(sp)
 100a9d8:	2021883a 	mov	r16,r4
 100a9dc:	20001726 	beq	r4,zero,100aa3c <__floatunsidf+0x74>
 100a9e0:	008000c4 	movi	r2,3
 100a9e4:	d8800015 	stw	r2,0(sp)
 100a9e8:	00800f04 	movi	r2,60
 100a9ec:	d8800215 	stw	r2,8(sp)
 100a9f0:	100abf40 	call	100abf4 <__clzsi2>
 100a9f4:	10c00744 	addi	r3,r2,29
 100a9f8:	18001816 	blt	r3,zero,100aa5c <__floatunsidf+0x94>
 100a9fc:	18002d26 	beq	r3,zero,100aab4 <__floatunsidf+0xec>
 100aa00:	113fff44 	addi	r4,r2,-3
 100aa04:	20002e16 	blt	r4,zero,100aac0 <__floatunsidf+0xf8>
 100aa08:	8108983a 	sll	r4,r16,r4
 100aa0c:	0021883a 	mov	r16,zero
 100aa10:	014007c4 	movi	r5,31
 100aa14:	2885c83a 	sub	r2,r5,r2
 100aa18:	dc000315 	stw	r16,12(sp)
 100aa1c:	d9000415 	stw	r4,16(sp)
 100aa20:	d8800215 	stw	r2,8(sp)
 100aa24:	d809883a 	mov	r4,sp
 100aa28:	100aca00 	call	100aca0 <__pack_d>
 100aa2c:	dfc00617 	ldw	ra,24(sp)
 100aa30:	dc000517 	ldw	r16,20(sp)
 100aa34:	dec00704 	addi	sp,sp,28
 100aa38:	f800283a 	ret
 100aa3c:	00800084 	movi	r2,2
 100aa40:	d809883a 	mov	r4,sp
 100aa44:	d8800015 	stw	r2,0(sp)
 100aa48:	100aca00 	call	100aca0 <__pack_d>
 100aa4c:	dfc00617 	ldw	ra,24(sp)
 100aa50:	dc000517 	ldw	r16,20(sp)
 100aa54:	dec00704 	addi	sp,sp,28
 100aa58:	f800283a 	ret
 100aa5c:	00c7c83a 	sub	r3,zero,r3
 100aa60:	193ff804 	addi	r4,r3,-32
 100aa64:	20001c16 	blt	r4,zero,100aad8 <__floatunsidf+0x110>
 100aa68:	000b883a 	mov	r5,zero
 100aa6c:	2009d7fa 	srai	r4,r4,31
 100aa70:	80c6d83a 	srl	r3,r16,r3
 100aa74:	297fffc4 	addi	r5,r5,-1
 100aa78:	2c20703a 	and	r16,r5,r16
 100aa7c:	8020c03a 	cmpne	r16,r16,zero
 100aa80:	1906703a 	and	r3,r3,r4
 100aa84:	010007c4 	movi	r4,31
 100aa88:	80c6b03a 	or	r3,r16,r3
 100aa8c:	2085c83a 	sub	r2,r4,r2
 100aa90:	d809883a 	mov	r4,sp
 100aa94:	d8c00315 	stw	r3,12(sp)
 100aa98:	d8000415 	stw	zero,16(sp)
 100aa9c:	d8800215 	stw	r2,8(sp)
 100aaa0:	100aca00 	call	100aca0 <__pack_d>
 100aaa4:	dfc00617 	ldw	ra,24(sp)
 100aaa8:	dc000517 	ldw	r16,20(sp)
 100aaac:	dec00704 	addi	sp,sp,28
 100aab0:	f800283a 	ret
 100aab4:	dc000315 	stw	r16,12(sp)
 100aab8:	d8000415 	stw	zero,16(sp)
 100aabc:	003fd906 	br	100aa24 <__floatunsidf+0x5c>
 100aac0:	800ad07a 	srli	r5,r16,1
 100aac4:	010007c4 	movi	r4,31
 100aac8:	20c9c83a 	sub	r4,r4,r3
 100aacc:	2908d83a 	srl	r4,r5,r4
 100aad0:	80e0983a 	sll	r16,r16,r3
 100aad4:	003fce06 	br	100aa10 <__floatunsidf+0x48>
 100aad8:	01400044 	movi	r5,1
 100aadc:	28ca983a 	sll	r5,r5,r3
 100aae0:	003fe206 	br	100aa6c <__floatunsidf+0xa4>

0100aae4 <__muldi3>:
 100aae4:	defff604 	addi	sp,sp,-40
 100aae8:	dd400515 	stw	r21,20(sp)
 100aaec:	dd000415 	stw	r20,16(sp)
 100aaf0:	257fffcc 	andi	r21,r4,65535
 100aaf4:	353fffcc 	andi	r20,r6,65535
 100aaf8:	dcc00315 	stw	r19,12(sp)
 100aafc:	3026d43a 	srli	r19,r6,16
 100ab00:	dd800615 	stw	r22,24(sp)
 100ab04:	dc800215 	stw	r18,8(sp)
 100ab08:	dc400115 	stw	r17,4(sp)
 100ab0c:	2024d43a 	srli	r18,r4,16
 100ab10:	2023883a 	mov	r17,r4
 100ab14:	282d883a 	mov	r22,r5
 100ab18:	a009883a 	mov	r4,r20
 100ab1c:	a80b883a 	mov	r5,r21
 100ab20:	dfc00915 	stw	ra,36(sp)
 100ab24:	df000815 	stw	fp,32(sp)
 100ab28:	ddc00715 	stw	r23,28(sp)
 100ab2c:	3839883a 	mov	fp,r7
 100ab30:	dc000015 	stw	r16,0(sp)
 100ab34:	3021883a 	mov	r16,r6
 100ab38:	10013440 	call	1001344 <__mulsi3>
 100ab3c:	a80b883a 	mov	r5,r21
 100ab40:	9809883a 	mov	r4,r19
 100ab44:	102f883a 	mov	r23,r2
 100ab48:	10013440 	call	1001344 <__mulsi3>
 100ab4c:	a009883a 	mov	r4,r20
 100ab50:	900b883a 	mov	r5,r18
 100ab54:	102b883a 	mov	r21,r2
 100ab58:	10013440 	call	1001344 <__mulsi3>
 100ab5c:	9809883a 	mov	r4,r19
 100ab60:	900b883a 	mov	r5,r18
 100ab64:	1029883a 	mov	r20,r2
 100ab68:	10013440 	call	1001344 <__mulsi3>
 100ab6c:	1007883a 	mov	r3,r2
 100ab70:	b804d43a 	srli	r2,r23,16
 100ab74:	a549883a 	add	r4,r20,r21
 100ab78:	2089883a 	add	r4,r4,r2
 100ab7c:	2500022e 	bgeu	r4,r20,100ab88 <__muldi3+0xa4>
 100ab80:	00800074 	movhi	r2,1
 100ab84:	1887883a 	add	r3,r3,r2
 100ab88:	200cd43a 	srli	r6,r4,16
 100ab8c:	2004943a 	slli	r2,r4,16
 100ab90:	e00b883a 	mov	r5,fp
 100ab94:	8809883a 	mov	r4,r17
 100ab98:	bdffffcc 	andi	r23,r23,65535
 100ab9c:	19a3883a 	add	r17,r3,r6
 100aba0:	15ef883a 	add	r23,r2,r23
 100aba4:	10013440 	call	1001344 <__mulsi3>
 100aba8:	8009883a 	mov	r4,r16
 100abac:	b00b883a 	mov	r5,r22
 100abb0:	1025883a 	mov	r18,r2
 100abb4:	10013440 	call	1001344 <__mulsi3>
 100abb8:	9085883a 	add	r2,r18,r2
 100abbc:	1447883a 	add	r3,r2,r17
 100abc0:	b805883a 	mov	r2,r23
 100abc4:	dfc00917 	ldw	ra,36(sp)
 100abc8:	df000817 	ldw	fp,32(sp)
 100abcc:	ddc00717 	ldw	r23,28(sp)
 100abd0:	dd800617 	ldw	r22,24(sp)
 100abd4:	dd400517 	ldw	r21,20(sp)
 100abd8:	dd000417 	ldw	r20,16(sp)
 100abdc:	dcc00317 	ldw	r19,12(sp)
 100abe0:	dc800217 	ldw	r18,8(sp)
 100abe4:	dc400117 	ldw	r17,4(sp)
 100abe8:	dc000017 	ldw	r16,0(sp)
 100abec:	dec00a04 	addi	sp,sp,40
 100abf0:	f800283a 	ret

0100abf4 <__clzsi2>:
 100abf4:	00bfffd4 	movui	r2,65535
 100abf8:	11000b36 	bltu	r2,r4,100ac28 <__clzsi2+0x34>
 100abfc:	00803fc4 	movi	r2,255
 100ac00:	11001e2e 	bgeu	r2,r4,100ac7c <__clzsi2+0x88>
 100ac04:	00c00204 	movi	r3,8
 100ac08:	20c8d83a 	srl	r4,r4,r3
 100ac0c:	00c04074 	movhi	r3,257
 100ac10:	18fe2104 	addi	r3,r3,-1916
 100ac14:	00800604 	movi	r2,24
 100ac18:	1909883a 	add	r4,r3,r4
 100ac1c:	20c00003 	ldbu	r3,0(r4)
 100ac20:	10c5c83a 	sub	r2,r2,r3
 100ac24:	f800283a 	ret
 100ac28:	00804034 	movhi	r2,256
 100ac2c:	10bfffc4 	addi	r2,r2,-1
 100ac30:	11000936 	bltu	r2,r4,100ac58 <__clzsi2+0x64>
 100ac34:	00800404 	movi	r2,16
 100ac38:	1007883a 	mov	r3,r2
 100ac3c:	20c8d83a 	srl	r4,r4,r3
 100ac40:	00c04074 	movhi	r3,257
 100ac44:	18fe2104 	addi	r3,r3,-1916
 100ac48:	1909883a 	add	r4,r3,r4
 100ac4c:	20c00003 	ldbu	r3,0(r4)
 100ac50:	10c5c83a 	sub	r2,r2,r3
 100ac54:	f800283a 	ret
 100ac58:	00c00604 	movi	r3,24
 100ac5c:	20c8d83a 	srl	r4,r4,r3
 100ac60:	00c04074 	movhi	r3,257
 100ac64:	18fe2104 	addi	r3,r3,-1916
 100ac68:	00800204 	movi	r2,8
 100ac6c:	1909883a 	add	r4,r3,r4
 100ac70:	20c00003 	ldbu	r3,0(r4)
 100ac74:	10c5c83a 	sub	r2,r2,r3
 100ac78:	f800283a 	ret
 100ac7c:	0007883a 	mov	r3,zero
 100ac80:	20c8d83a 	srl	r4,r4,r3
 100ac84:	00c04074 	movhi	r3,257
 100ac88:	18fe2104 	addi	r3,r3,-1916
 100ac8c:	00800804 	movi	r2,32
 100ac90:	1909883a 	add	r4,r3,r4
 100ac94:	20c00003 	ldbu	r3,0(r4)
 100ac98:	10c5c83a 	sub	r2,r2,r3
 100ac9c:	f800283a 	ret

0100aca0 <__pack_d>:
 100aca0:	20800017 	ldw	r2,0(r4)
 100aca4:	defff804 	addi	sp,sp,-32
 100aca8:	dcc00315 	stw	r19,12(sp)
 100acac:	dc800215 	stw	r18,8(sp)
 100acb0:	dfc00715 	stw	ra,28(sp)
 100acb4:	dd800615 	stw	r22,24(sp)
 100acb8:	dd400515 	stw	r21,20(sp)
 100acbc:	dd000415 	stw	r20,16(sp)
 100acc0:	dc400115 	stw	r17,4(sp)
 100acc4:	dc000015 	stw	r16,0(sp)
 100acc8:	04800044 	movi	r18,1
 100accc:	24400317 	ldw	r17,12(r4)
 100acd0:	24000417 	ldw	r16,16(r4)
 100acd4:	24c00117 	ldw	r19,4(r4)
 100acd8:	9080422e 	bgeu	r18,r2,100ade4 <__pack_d+0x144>
 100acdc:	00c00104 	movi	r3,4
 100ace0:	10c03c26 	beq	r2,r3,100add4 <__pack_d+0x134>
 100ace4:	00c00084 	movi	r3,2
 100ace8:	10c01926 	beq	r2,r3,100ad50 <__pack_d+0xb0>
 100acec:	8c04b03a 	or	r2,r17,r16
 100acf0:	10001726 	beq	r2,zero,100ad50 <__pack_d+0xb0>
 100acf4:	21000217 	ldw	r4,8(r4)
 100acf8:	00bf0084 	movi	r2,-1022
 100acfc:	20804016 	blt	r4,r2,100ae00 <__pack_d+0x160>
 100ad00:	0080ffc4 	movi	r2,1023
 100ad04:	11003316 	blt	r2,r4,100add4 <__pack_d+0x134>
 100ad08:	88803fcc 	andi	r2,r17,255
 100ad0c:	00c02004 	movi	r3,128
 100ad10:	10c02926 	beq	r2,r3,100adb8 <__pack_d+0x118>
 100ad14:	88801fc4 	addi	r2,r17,127
 100ad18:	1463803a 	cmpltu	r17,r2,r17
 100ad1c:	8c21883a 	add	r16,r17,r16
 100ad20:	1023883a 	mov	r17,r2
 100ad24:	00880034 	movhi	r2,8192
 100ad28:	10bfffc4 	addi	r2,r2,-1
 100ad2c:	14001c36 	bltu	r2,r16,100ada0 <__pack_d+0x100>
 100ad30:	2100ffc4 	addi	r4,r4,1023
 100ad34:	8006963a 	slli	r3,r16,24
 100ad38:	8804d23a 	srli	r2,r17,8
 100ad3c:	8020913a 	slli	r16,r16,4
 100ad40:	2101ffcc 	andi	r4,r4,2047
 100ad44:	1884b03a 	or	r2,r3,r2
 100ad48:	8020d33a 	srli	r16,r16,12
 100ad4c:	00000306 	br	100ad5c <__pack_d+0xbc>
 100ad50:	0009883a 	mov	r4,zero
 100ad54:	0005883a 	mov	r2,zero
 100ad58:	0021883a 	mov	r16,zero
 100ad5c:	2008953a 	slli	r4,r4,20
 100ad60:	982697fa 	slli	r19,r19,31
 100ad64:	00c00434 	movhi	r3,16
 100ad68:	18ffffc4 	addi	r3,r3,-1
 100ad6c:	80e0703a 	and	r16,r16,r3
 100ad70:	8106b03a 	or	r3,r16,r4
 100ad74:	1cc6b03a 	or	r3,r3,r19
 100ad78:	dfc00717 	ldw	ra,28(sp)
 100ad7c:	dd800617 	ldw	r22,24(sp)
 100ad80:	dd400517 	ldw	r21,20(sp)
 100ad84:	dd000417 	ldw	r20,16(sp)
 100ad88:	dcc00317 	ldw	r19,12(sp)
 100ad8c:	dc800217 	ldw	r18,8(sp)
 100ad90:	dc400117 	ldw	r17,4(sp)
 100ad94:	dc000017 	ldw	r16,0(sp)
 100ad98:	dec00804 	addi	sp,sp,32
 100ad9c:	f800283a 	ret
 100ada0:	800697fa 	slli	r3,r16,31
 100ada4:	8804d07a 	srli	r2,r17,1
 100ada8:	21010004 	addi	r4,r4,1024
 100adac:	8020d07a 	srli	r16,r16,1
 100adb0:	18a2b03a 	or	r17,r3,r2
 100adb4:	003fdf06 	br	100ad34 <__pack_d+0x94>
 100adb8:	88c0400c 	andi	r3,r17,256
 100adbc:	183fd926 	beq	r3,zero,100ad24 <__pack_d+0x84>
 100adc0:	8885883a 	add	r2,r17,r2
 100adc4:	1463803a 	cmpltu	r17,r2,r17
 100adc8:	8c21883a 	add	r16,r17,r16
 100adcc:	1023883a 	mov	r17,r2
 100add0:	003fd406 	br	100ad24 <__pack_d+0x84>
 100add4:	0101ffc4 	movi	r4,2047
 100add8:	0005883a 	mov	r2,zero
 100addc:	0021883a 	mov	r16,zero
 100ade0:	003fde06 	br	100ad5c <__pack_d+0xbc>
 100ade4:	84000234 	orhi	r16,r16,8
 100ade8:	00c00434 	movhi	r3,16
 100adec:	18ffffc4 	addi	r3,r3,-1
 100adf0:	8805883a 	mov	r2,r17
 100adf4:	80e0703a 	and	r16,r16,r3
 100adf8:	0101ffc4 	movi	r4,2047
 100adfc:	003fd706 	br	100ad5c <__pack_d+0xbc>
 100ae00:	1129c83a 	sub	r20,r2,r4
 100ae04:	00800e04 	movi	r2,56
 100ae08:	15002716 	blt	r2,r20,100aea8 <__pack_d+0x208>
 100ae0c:	800b883a 	mov	r5,r16
 100ae10:	a00d883a 	mov	r6,r20
 100ae14:	8809883a 	mov	r4,r17
 100ae18:	100b0980 	call	100b098 <__lshrdi3>
 100ae1c:	9009883a 	mov	r4,r18
 100ae20:	000b883a 	mov	r5,zero
 100ae24:	a00d883a 	mov	r6,r20
 100ae28:	102d883a 	mov	r22,r2
 100ae2c:	182b883a 	mov	r21,r3
 100ae30:	100b0dc0 	call	100b0dc <__ashldi3>
 100ae34:	1009003a 	cmpeq	r4,r2,zero
 100ae38:	1907c83a 	sub	r3,r3,r4
 100ae3c:	10bfffc4 	addi	r2,r2,-1
 100ae40:	1c20703a 	and	r16,r3,r16
 100ae44:	1444703a 	and	r2,r2,r17
 100ae48:	1404b03a 	or	r2,r2,r16
 100ae4c:	1004c03a 	cmpne	r2,r2,zero
 100ae50:	1584b03a 	or	r2,r2,r22
 100ae54:	11003fcc 	andi	r4,r2,255
 100ae58:	01402004 	movi	r5,128
 100ae5c:	a807883a 	mov	r3,r21
 100ae60:	2140131e 	bne	r4,r5,100aeb0 <__pack_d+0x210>
 100ae64:	1140400c 	andi	r5,r2,256
 100ae68:	28000426 	beq	r5,zero,100ae7c <__pack_d+0x1dc>
 100ae6c:	1109883a 	add	r4,r2,r4
 100ae70:	2085803a 	cmpltu	r2,r4,r2
 100ae74:	1547883a 	add	r3,r2,r21
 100ae78:	2005883a 	mov	r2,r4
 100ae7c:	1808963a 	slli	r4,r3,24
 100ae80:	1004d23a 	srli	r2,r2,8
 100ae84:	1820913a 	slli	r16,r3,4
 100ae88:	01440034 	movhi	r5,4096
 100ae8c:	297fffc4 	addi	r5,r5,-1
 100ae90:	2084b03a 	or	r2,r4,r2
 100ae94:	8020d33a 	srli	r16,r16,12
 100ae98:	01000044 	movi	r4,1
 100ae9c:	28ffaf36 	bltu	r5,r3,100ad5c <__pack_d+0xbc>
 100aea0:	0009883a 	mov	r4,zero
 100aea4:	003fad06 	br	100ad5c <__pack_d+0xbc>
 100aea8:	0005883a 	mov	r2,zero
 100aeac:	0007883a 	mov	r3,zero
 100aeb0:	11001fc4 	addi	r4,r2,127
 100aeb4:	2085803a 	cmpltu	r2,r4,r2
 100aeb8:	10c7883a 	add	r3,r2,r3
 100aebc:	2005883a 	mov	r2,r4
 100aec0:	003fee06 	br	100ae7c <__pack_d+0x1dc>

0100aec4 <__unpack_d>:
 100aec4:	21800117 	ldw	r6,4(r4)
 100aec8:	20c00017 	ldw	r3,0(r4)
 100aecc:	3004d7fa 	srli	r2,r6,31
 100aed0:	3008d53a 	srli	r4,r6,20
 100aed4:	28800115 	stw	r2,4(r5)
 100aed8:	2101ffcc 	andi	r4,r4,2047
 100aedc:	00800434 	movhi	r2,16
 100aee0:	10bfffc4 	addi	r2,r2,-1
 100aee4:	3084703a 	and	r2,r6,r2
 100aee8:	20001a1e 	bne	r4,zero,100af54 <__unpack_d+0x90>
 100aeec:	1888b03a 	or	r4,r3,r2
 100aef0:	20002626 	beq	r4,zero,100af8c <__unpack_d+0xc8>
 100aef4:	1808d63a 	srli	r4,r3,24
 100aef8:	1004923a 	slli	r2,r2,8
 100aefc:	01bf0084 	movi	r6,-1022
 100af00:	29800215 	stw	r6,8(r5)
 100af04:	2084b03a 	or	r2,r4,r2
 100af08:	010000c4 	movi	r4,3
 100af0c:	29000015 	stw	r4,0(r5)
 100af10:	02040034 	movhi	r8,4096
 100af14:	423fffc4 	addi	r8,r8,-1
 100af18:	1806923a 	slli	r3,r3,8
 100af1c:	40801836 	bltu	r8,r2,100af80 <__unpack_d+0xbc>
 100af20:	013f0044 	movi	r4,-1023
 100af24:	18cd883a 	add	r6,r3,r3
 100af28:	30c7803a 	cmpltu	r3,r6,r3
 100af2c:	1085883a 	add	r2,r2,r2
 100af30:	1885883a 	add	r2,r3,r2
 100af34:	200f883a 	mov	r7,r4
 100af38:	3007883a 	mov	r3,r6
 100af3c:	213fffc4 	addi	r4,r4,-1
 100af40:	40bff82e 	bgeu	r8,r2,100af24 <__unpack_d+0x60>
 100af44:	29c00215 	stw	r7,8(r5)
 100af48:	28c00315 	stw	r3,12(r5)
 100af4c:	28800415 	stw	r2,16(r5)
 100af50:	f800283a 	ret
 100af54:	01c1ffc4 	movi	r7,2047
 100af58:	21c00f26 	beq	r4,r7,100af98 <__unpack_d+0xd4>
 100af5c:	180cd63a 	srli	r6,r3,24
 100af60:	1004923a 	slli	r2,r2,8
 100af64:	213f0044 	addi	r4,r4,-1023
 100af68:	1806923a 	slli	r3,r3,8
 100af6c:	3084b03a 	or	r2,r6,r2
 100af70:	29000215 	stw	r4,8(r5)
 100af74:	010000c4 	movi	r4,3
 100af78:	10840034 	orhi	r2,r2,4096
 100af7c:	29000015 	stw	r4,0(r5)
 100af80:	28c00315 	stw	r3,12(r5)
 100af84:	28800415 	stw	r2,16(r5)
 100af88:	f800283a 	ret
 100af8c:	00800084 	movi	r2,2
 100af90:	28800015 	stw	r2,0(r5)
 100af94:	f800283a 	ret
 100af98:	1888b03a 	or	r4,r3,r2
 100af9c:	20000526 	beq	r4,zero,100afb4 <__unpack_d+0xf0>
 100afa0:	3180022c 	andhi	r6,r6,8
 100afa4:	30000626 	beq	r6,zero,100afc0 <__unpack_d+0xfc>
 100afa8:	01000044 	movi	r4,1
 100afac:	29000015 	stw	r4,0(r5)
 100afb0:	003ff306 	br	100af80 <__unpack_d+0xbc>
 100afb4:	00800104 	movi	r2,4
 100afb8:	28800015 	stw	r2,0(r5)
 100afbc:	f800283a 	ret
 100afc0:	28000015 	stw	zero,0(r5)
 100afc4:	003fee06 	br	100af80 <__unpack_d+0xbc>

0100afc8 <__fpcmp_parts_d>:
 100afc8:	20c00017 	ldw	r3,0(r4)
 100afcc:	00800044 	movi	r2,1
 100afd0:	10c0142e 	bgeu	r2,r3,100b024 <__fpcmp_parts_d+0x5c>
 100afd4:	29800017 	ldw	r6,0(r5)
 100afd8:	1180122e 	bgeu	r2,r6,100b024 <__fpcmp_parts_d+0x5c>
 100afdc:	01c00104 	movi	r7,4
 100afe0:	19c02826 	beq	r3,r7,100b084 <__fpcmp_parts_d+0xbc>
 100afe4:	31c00926 	beq	r6,r7,100b00c <__fpcmp_parts_d+0x44>
 100afe8:	01c00084 	movi	r7,2
 100afec:	19c00626 	beq	r3,r7,100b008 <__fpcmp_parts_d+0x40>
 100aff0:	31c00a26 	beq	r6,r7,100b01c <__fpcmp_parts_d+0x54>
 100aff4:	20c00117 	ldw	r3,4(r4)
 100aff8:	29800117 	ldw	r6,4(r5)
 100affc:	19800b26 	beq	r3,r6,100b02c <__fpcmp_parts_d+0x64>
 100b000:	1800041e 	bne	r3,zero,100b014 <__fpcmp_parts_d+0x4c>
 100b004:	f800283a 	ret
 100b008:	30c01a26 	beq	r6,r3,100b074 <__fpcmp_parts_d+0xac>
 100b00c:	28800117 	ldw	r2,4(r5)
 100b010:	1000041e 	bne	r2,zero,100b024 <__fpcmp_parts_d+0x5c>
 100b014:	00bfffc4 	movi	r2,-1
 100b018:	f800283a 	ret
 100b01c:	20800117 	ldw	r2,4(r4)
 100b020:	103ffc1e 	bne	r2,zero,100b014 <__fpcmp_parts_d+0x4c>
 100b024:	00800044 	movi	r2,1
 100b028:	f800283a 	ret
 100b02c:	21c00217 	ldw	r7,8(r4)
 100b030:	29800217 	ldw	r6,8(r5)
 100b034:	31c0020e 	bge	r6,r7,100b040 <__fpcmp_parts_d+0x78>
 100b038:	183ff61e 	bne	r3,zero,100b014 <__fpcmp_parts_d+0x4c>
 100b03c:	f800283a 	ret
 100b040:	39800a16 	blt	r7,r6,100b06c <__fpcmp_parts_d+0xa4>
 100b044:	20800417 	ldw	r2,16(r4)
 100b048:	29800417 	ldw	r6,16(r5)
 100b04c:	21c00317 	ldw	r7,12(r4)
 100b050:	29000317 	ldw	r4,12(r5)
 100b054:	30800936 	bltu	r6,r2,100b07c <__fpcmp_parts_d+0xb4>
 100b058:	1180011e 	bne	r2,r6,100b060 <__fpcmp_parts_d+0x98>
 100b05c:	21c00736 	bltu	r4,r7,100b07c <__fpcmp_parts_d+0xb4>
 100b060:	11800236 	bltu	r2,r6,100b06c <__fpcmp_parts_d+0xa4>
 100b064:	3080031e 	bne	r6,r2,100b074 <__fpcmp_parts_d+0xac>
 100b068:	3900022e 	bgeu	r7,r4,100b074 <__fpcmp_parts_d+0xac>
 100b06c:	183fe926 	beq	r3,zero,100b014 <__fpcmp_parts_d+0x4c>
 100b070:	003fec06 	br	100b024 <__fpcmp_parts_d+0x5c>
 100b074:	0005883a 	mov	r2,zero
 100b078:	f800283a 	ret
 100b07c:	183fe926 	beq	r3,zero,100b024 <__fpcmp_parts_d+0x5c>
 100b080:	003fe406 	br	100b014 <__fpcmp_parts_d+0x4c>
 100b084:	30ffe51e 	bne	r6,r3,100b01c <__fpcmp_parts_d+0x54>
 100b088:	28c00117 	ldw	r3,4(r5)
 100b08c:	20800117 	ldw	r2,4(r4)
 100b090:	1885c83a 	sub	r2,r3,r2
 100b094:	f800283a 	ret

0100b098 <__lshrdi3>:
 100b098:	2005883a 	mov	r2,r4
 100b09c:	2807883a 	mov	r3,r5
 100b0a0:	30000826 	beq	r6,zero,100b0c4 <__lshrdi3+0x2c>
 100b0a4:	01000804 	movi	r4,32
 100b0a8:	2189c83a 	sub	r4,r4,r6
 100b0ac:	0100060e 	bge	zero,r4,100b0c8 <__lshrdi3+0x30>
 100b0b0:	1184d83a 	srl	r2,r2,r6
 100b0b4:	2908983a 	sll	r4,r5,r4
 100b0b8:	298cd83a 	srl	r6,r5,r6
 100b0bc:	2084b03a 	or	r2,r4,r2
 100b0c0:	3007883a 	mov	r3,r6
 100b0c4:	f800283a 	ret
 100b0c8:	0105c83a 	sub	r2,zero,r4
 100b0cc:	000d883a 	mov	r6,zero
 100b0d0:	2884d83a 	srl	r2,r5,r2
 100b0d4:	3007883a 	mov	r3,r6
 100b0d8:	003ffa06 	br	100b0c4 <__lshrdi3+0x2c>

0100b0dc <__ashldi3>:
 100b0dc:	2005883a 	mov	r2,r4
 100b0e0:	2807883a 	mov	r3,r5
 100b0e4:	30000826 	beq	r6,zero,100b108 <__ashldi3+0x2c>
 100b0e8:	01000804 	movi	r4,32
 100b0ec:	2189c83a 	sub	r4,r4,r6
 100b0f0:	0100060e 	bge	zero,r4,100b10c <__ashldi3+0x30>
 100b0f4:	1108d83a 	srl	r4,r2,r4
 100b0f8:	2986983a 	sll	r3,r5,r6
 100b0fc:	118c983a 	sll	r6,r2,r6
 100b100:	20c6b03a 	or	r3,r4,r3
 100b104:	3005883a 	mov	r2,r6
 100b108:	f800283a 	ret
 100b10c:	0107c83a 	sub	r3,zero,r4
 100b110:	000d883a 	mov	r6,zero
 100b114:	10c6983a 	sll	r3,r2,r3
 100b118:	3005883a 	mov	r2,r6
 100b11c:	003ffa06 	br	100b108 <__ashldi3+0x2c>

0100b120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b120:	defffe04 	addi	sp,sp,-8
 100b124:	dfc00115 	stw	ra,4(sp)
 100b128:	df000015 	stw	fp,0(sp)
 100b12c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b130:	00804074 	movhi	r2,257
 100b134:	1085ea04 	addi	r2,r2,6056
 100b138:	10800017 	ldw	r2,0(r2)
 100b13c:	10000526 	beq	r2,zero,100b154 <alt_get_errno+0x34>
 100b140:	00804074 	movhi	r2,257
 100b144:	1085ea04 	addi	r2,r2,6056
 100b148:	10800017 	ldw	r2,0(r2)
 100b14c:	103ee83a 	callr	r2
 100b150:	00000206 	br	100b15c <alt_get_errno+0x3c>
 100b154:	00804074 	movhi	r2,257
 100b158:	1085f604 	addi	r2,r2,6104
}
 100b15c:	e037883a 	mov	sp,fp
 100b160:	dfc00117 	ldw	ra,4(sp)
 100b164:	df000017 	ldw	fp,0(sp)
 100b168:	dec00204 	addi	sp,sp,8
 100b16c:	f800283a 	ret

0100b170 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100b170:	defffb04 	addi	sp,sp,-20
 100b174:	dfc00415 	stw	ra,16(sp)
 100b178:	df000315 	stw	fp,12(sp)
 100b17c:	df000304 	addi	fp,sp,12
 100b180:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100b184:	e0bfff17 	ldw	r2,-4(fp)
 100b188:	10000716 	blt	r2,zero,100b1a8 <close+0x38>
 100b18c:	e13fff17 	ldw	r4,-4(fp)
 100b190:	01400304 	movi	r5,12
 100b194:	10013440 	call	1001344 <__mulsi3>
 100b198:	00c04074 	movhi	r3,257
 100b19c:	18c10304 	addi	r3,r3,1036
 100b1a0:	10c5883a 	add	r2,r2,r3
 100b1a4:	00000106 	br	100b1ac <close+0x3c>
 100b1a8:	0005883a 	mov	r2,zero
 100b1ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100b1b0:	e0bffd17 	ldw	r2,-12(fp)
 100b1b4:	10001826 	beq	r2,zero,100b218 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100b1b8:	e0bffd17 	ldw	r2,-12(fp)
 100b1bc:	10800017 	ldw	r2,0(r2)
 100b1c0:	10800417 	ldw	r2,16(r2)
 100b1c4:	10000626 	beq	r2,zero,100b1e0 <close+0x70>
 100b1c8:	e0bffd17 	ldw	r2,-12(fp)
 100b1cc:	10800017 	ldw	r2,0(r2)
 100b1d0:	10800417 	ldw	r2,16(r2)
 100b1d4:	e13ffd17 	ldw	r4,-12(fp)
 100b1d8:	103ee83a 	callr	r2
 100b1dc:	00000106 	br	100b1e4 <close+0x74>
 100b1e0:	0005883a 	mov	r2,zero
 100b1e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100b1e8:	e13fff17 	ldw	r4,-4(fp)
 100b1ec:	100ba140 	call	100ba14 <alt_release_fd>
    if (rval < 0)
 100b1f0:	e0bffe17 	ldw	r2,-8(fp)
 100b1f4:	1000060e 	bge	r2,zero,100b210 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 100b1f8:	100b1200 	call	100b120 <alt_get_errno>
 100b1fc:	e0fffe17 	ldw	r3,-8(fp)
 100b200:	00c7c83a 	sub	r3,zero,r3
 100b204:	10c00015 	stw	r3,0(r2)
      return -1;
 100b208:	00bfffc4 	movi	r2,-1
 100b20c:	00000606 	br	100b228 <close+0xb8>
    }
    return 0;
 100b210:	0005883a 	mov	r2,zero
 100b214:	00000406 	br	100b228 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b218:	100b1200 	call	100b120 <alt_get_errno>
 100b21c:	00c01444 	movi	r3,81
 100b220:	10c00015 	stw	r3,0(r2)
    return -1;
 100b224:	00bfffc4 	movi	r2,-1
  }
}
 100b228:	e037883a 	mov	sp,fp
 100b22c:	dfc00117 	ldw	ra,4(sp)
 100b230:	df000017 	ldw	fp,0(sp)
 100b234:	dec00204 	addi	sp,sp,8
 100b238:	f800283a 	ret

0100b23c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100b23c:	defffc04 	addi	sp,sp,-16
 100b240:	df000315 	stw	fp,12(sp)
 100b244:	df000304 	addi	fp,sp,12
 100b248:	e13ffd15 	stw	r4,-12(fp)
 100b24c:	e17ffe15 	stw	r5,-8(fp)
 100b250:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100b254:	e0bfff17 	ldw	r2,-4(fp)
}
 100b258:	e037883a 	mov	sp,fp
 100b25c:	df000017 	ldw	fp,0(sp)
 100b260:	dec00104 	addi	sp,sp,4
 100b264:	f800283a 	ret

0100b268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b268:	defffe04 	addi	sp,sp,-8
 100b26c:	dfc00115 	stw	ra,4(sp)
 100b270:	df000015 	stw	fp,0(sp)
 100b274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b278:	00804074 	movhi	r2,257
 100b27c:	1085ea04 	addi	r2,r2,6056
 100b280:	10800017 	ldw	r2,0(r2)
 100b284:	10000526 	beq	r2,zero,100b29c <alt_get_errno+0x34>
 100b288:	00804074 	movhi	r2,257
 100b28c:	1085ea04 	addi	r2,r2,6056
 100b290:	10800017 	ldw	r2,0(r2)
 100b294:	103ee83a 	callr	r2
 100b298:	00000206 	br	100b2a4 <alt_get_errno+0x3c>
 100b29c:	00804074 	movhi	r2,257
 100b2a0:	1085f604 	addi	r2,r2,6104
}
 100b2a4:	e037883a 	mov	sp,fp
 100b2a8:	dfc00117 	ldw	ra,4(sp)
 100b2ac:	df000017 	ldw	fp,0(sp)
 100b2b0:	dec00204 	addi	sp,sp,8
 100b2b4:	f800283a 	ret

0100b2b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100b2b8:	defffb04 	addi	sp,sp,-20
 100b2bc:	dfc00415 	stw	ra,16(sp)
 100b2c0:	df000315 	stw	fp,12(sp)
 100b2c4:	df000304 	addi	fp,sp,12
 100b2c8:	e13ffe15 	stw	r4,-8(fp)
 100b2cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b2d0:	e0bffe17 	ldw	r2,-8(fp)
 100b2d4:	10000716 	blt	r2,zero,100b2f4 <fstat+0x3c>
 100b2d8:	e13ffe17 	ldw	r4,-8(fp)
 100b2dc:	01400304 	movi	r5,12
 100b2e0:	10013440 	call	1001344 <__mulsi3>
 100b2e4:	00c04074 	movhi	r3,257
 100b2e8:	18c10304 	addi	r3,r3,1036
 100b2ec:	10c5883a 	add	r2,r2,r3
 100b2f0:	00000106 	br	100b2f8 <fstat+0x40>
 100b2f4:	0005883a 	mov	r2,zero
 100b2f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100b2fc:	e0bffd17 	ldw	r2,-12(fp)
 100b300:	10001026 	beq	r2,zero,100b344 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100b304:	e0bffd17 	ldw	r2,-12(fp)
 100b308:	10800017 	ldw	r2,0(r2)
 100b30c:	10800817 	ldw	r2,32(r2)
 100b310:	10000726 	beq	r2,zero,100b330 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 100b314:	e0bffd17 	ldw	r2,-12(fp)
 100b318:	10800017 	ldw	r2,0(r2)
 100b31c:	10800817 	ldw	r2,32(r2)
 100b320:	e13ffd17 	ldw	r4,-12(fp)
 100b324:	e17fff17 	ldw	r5,-4(fp)
 100b328:	103ee83a 	callr	r2
 100b32c:	00000906 	br	100b354 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100b330:	e0bfff17 	ldw	r2,-4(fp)
 100b334:	00c80004 	movi	r3,8192
 100b338:	10c00115 	stw	r3,4(r2)
      return 0;
 100b33c:	0005883a 	mov	r2,zero
 100b340:	00000406 	br	100b354 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b344:	100b2680 	call	100b268 <alt_get_errno>
 100b348:	00c01444 	movi	r3,81
 100b34c:	10c00015 	stw	r3,0(r2)
    return -1;
 100b350:	00bfffc4 	movi	r2,-1
  }
}
 100b354:	e037883a 	mov	sp,fp
 100b358:	dfc00117 	ldw	ra,4(sp)
 100b35c:	df000017 	ldw	fp,0(sp)
 100b360:	dec00204 	addi	sp,sp,8
 100b364:	f800283a 	ret

0100b368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b368:	defffe04 	addi	sp,sp,-8
 100b36c:	dfc00115 	stw	ra,4(sp)
 100b370:	df000015 	stw	fp,0(sp)
 100b374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b378:	00804074 	movhi	r2,257
 100b37c:	1085ea04 	addi	r2,r2,6056
 100b380:	10800017 	ldw	r2,0(r2)
 100b384:	10000526 	beq	r2,zero,100b39c <alt_get_errno+0x34>
 100b388:	00804074 	movhi	r2,257
 100b38c:	1085ea04 	addi	r2,r2,6056
 100b390:	10800017 	ldw	r2,0(r2)
 100b394:	103ee83a 	callr	r2
 100b398:	00000206 	br	100b3a4 <alt_get_errno+0x3c>
 100b39c:	00804074 	movhi	r2,257
 100b3a0:	1085f604 	addi	r2,r2,6104
}
 100b3a4:	e037883a 	mov	sp,fp
 100b3a8:	dfc00117 	ldw	ra,4(sp)
 100b3ac:	df000017 	ldw	fp,0(sp)
 100b3b0:	dec00204 	addi	sp,sp,8
 100b3b4:	f800283a 	ret

0100b3b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100b3b8:	deffed04 	addi	sp,sp,-76
 100b3bc:	dfc01215 	stw	ra,72(sp)
 100b3c0:	df001115 	stw	fp,68(sp)
 100b3c4:	df001104 	addi	fp,sp,68
 100b3c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b3cc:	e0bfff17 	ldw	r2,-4(fp)
 100b3d0:	10000716 	blt	r2,zero,100b3f0 <isatty+0x38>
 100b3d4:	e13fff17 	ldw	r4,-4(fp)
 100b3d8:	01400304 	movi	r5,12
 100b3dc:	10013440 	call	1001344 <__mulsi3>
 100b3e0:	00c04074 	movhi	r3,257
 100b3e4:	18c10304 	addi	r3,r3,1036
 100b3e8:	10c5883a 	add	r2,r2,r3
 100b3ec:	00000106 	br	100b3f4 <isatty+0x3c>
 100b3f0:	0005883a 	mov	r2,zero
 100b3f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100b3f8:	e0bfef17 	ldw	r2,-68(fp)
 100b3fc:	10000e26 	beq	r2,zero,100b438 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100b400:	e0bfef17 	ldw	r2,-68(fp)
 100b404:	10800017 	ldw	r2,0(r2)
 100b408:	10800817 	ldw	r2,32(r2)
 100b40c:	1000021e 	bne	r2,zero,100b418 <isatty+0x60>
    {
      return 1;
 100b410:	00800044 	movi	r2,1
 100b414:	00000c06 	br	100b448 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100b418:	e0bff004 	addi	r2,fp,-64
 100b41c:	e13fff17 	ldw	r4,-4(fp)
 100b420:	100b883a 	mov	r5,r2
 100b424:	100b2b80 	call	100b2b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100b428:	e0bff117 	ldw	r2,-60(fp)
 100b42c:	10880020 	cmpeqi	r2,r2,8192
 100b430:	10803fcc 	andi	r2,r2,255
 100b434:	00000406 	br	100b448 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b438:	100b3680 	call	100b368 <alt_get_errno>
 100b43c:	00c01444 	movi	r3,81
 100b440:	10c00015 	stw	r3,0(r2)
    return 0;
 100b444:	0005883a 	mov	r2,zero
  }
}
 100b448:	e037883a 	mov	sp,fp
 100b44c:	dfc00117 	ldw	ra,4(sp)
 100b450:	df000017 	ldw	fp,0(sp)
 100b454:	dec00204 	addi	sp,sp,8
 100b458:	f800283a 	ret

0100b45c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b45c:	defffe04 	addi	sp,sp,-8
 100b460:	dfc00115 	stw	ra,4(sp)
 100b464:	df000015 	stw	fp,0(sp)
 100b468:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b46c:	00804074 	movhi	r2,257
 100b470:	1085ea04 	addi	r2,r2,6056
 100b474:	10800017 	ldw	r2,0(r2)
 100b478:	10000526 	beq	r2,zero,100b490 <alt_get_errno+0x34>
 100b47c:	00804074 	movhi	r2,257
 100b480:	1085ea04 	addi	r2,r2,6056
 100b484:	10800017 	ldw	r2,0(r2)
 100b488:	103ee83a 	callr	r2
 100b48c:	00000206 	br	100b498 <alt_get_errno+0x3c>
 100b490:	00804074 	movhi	r2,257
 100b494:	1085f604 	addi	r2,r2,6104
}
 100b498:	e037883a 	mov	sp,fp
 100b49c:	dfc00117 	ldw	ra,4(sp)
 100b4a0:	df000017 	ldw	fp,0(sp)
 100b4a4:	dec00204 	addi	sp,sp,8
 100b4a8:	f800283a 	ret

0100b4ac <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100b4ac:	defff904 	addi	sp,sp,-28
 100b4b0:	dfc00615 	stw	ra,24(sp)
 100b4b4:	df000515 	stw	fp,20(sp)
 100b4b8:	df000504 	addi	fp,sp,20
 100b4bc:	e13ffd15 	stw	r4,-12(fp)
 100b4c0:	e17ffe15 	stw	r5,-8(fp)
 100b4c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100b4c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b4cc:	e0bffd17 	ldw	r2,-12(fp)
 100b4d0:	10000716 	blt	r2,zero,100b4f0 <lseek+0x44>
 100b4d4:	e13ffd17 	ldw	r4,-12(fp)
 100b4d8:	01400304 	movi	r5,12
 100b4dc:	10013440 	call	1001344 <__mulsi3>
 100b4e0:	00c04074 	movhi	r3,257
 100b4e4:	18c10304 	addi	r3,r3,1036
 100b4e8:	10c5883a 	add	r2,r2,r3
 100b4ec:	00000106 	br	100b4f4 <lseek+0x48>
 100b4f0:	0005883a 	mov	r2,zero
 100b4f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100b4f8:	e0bffc17 	ldw	r2,-16(fp)
 100b4fc:	10001026 	beq	r2,zero,100b540 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100b500:	e0bffc17 	ldw	r2,-16(fp)
 100b504:	10800017 	ldw	r2,0(r2)
 100b508:	10800717 	ldw	r2,28(r2)
 100b50c:	10000926 	beq	r2,zero,100b534 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100b510:	e0bffc17 	ldw	r2,-16(fp)
 100b514:	10800017 	ldw	r2,0(r2)
 100b518:	10800717 	ldw	r2,28(r2)
 100b51c:	e13ffc17 	ldw	r4,-16(fp)
 100b520:	e17ffe17 	ldw	r5,-8(fp)
 100b524:	e1bfff17 	ldw	r6,-4(fp)
 100b528:	103ee83a 	callr	r2
 100b52c:	e0bffb15 	stw	r2,-20(fp)
 100b530:	00000506 	br	100b548 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100b534:	00bfde84 	movi	r2,-134
 100b538:	e0bffb15 	stw	r2,-20(fp)
 100b53c:	00000206 	br	100b548 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 100b540:	00bfebc4 	movi	r2,-81
 100b544:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100b548:	e0bffb17 	ldw	r2,-20(fp)
 100b54c:	1000060e 	bge	r2,zero,100b568 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 100b550:	100b45c0 	call	100b45c <alt_get_errno>
 100b554:	e0fffb17 	ldw	r3,-20(fp)
 100b558:	00c7c83a 	sub	r3,zero,r3
 100b55c:	10c00015 	stw	r3,0(r2)
    rc = -1;
 100b560:	00bfffc4 	movi	r2,-1
 100b564:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100b568:	e0bffb17 	ldw	r2,-20(fp)
}
 100b56c:	e037883a 	mov	sp,fp
 100b570:	dfc00117 	ldw	ra,4(sp)
 100b574:	df000017 	ldw	fp,0(sp)
 100b578:	dec00204 	addi	sp,sp,8
 100b57c:	f800283a 	ret

0100b580 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100b580:	defffd04 	addi	sp,sp,-12
 100b584:	dfc00215 	stw	ra,8(sp)
 100b588:	df000115 	stw	fp,4(sp)
 100b58c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100b590:	0009883a 	mov	r4,zero
 100b594:	100bcec0 	call	100bcec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100b598:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100b59c:	100bd200 	call	100bd20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100b5a0:	01004074 	movhi	r4,257
 100b5a4:	213ee104 	addi	r4,r4,-1148
 100b5a8:	01404074 	movhi	r5,257
 100b5ac:	297ee104 	addi	r5,r5,-1148
 100b5b0:	01804074 	movhi	r6,257
 100b5b4:	31bee104 	addi	r6,r6,-1148
 100b5b8:	100ef440 	call	100ef44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100b5bc:	100e7b40 	call	100e7b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100b5c0:	01004074 	movhi	r4,257
 100b5c4:	213a0404 	addi	r4,r4,-6128
 100b5c8:	100f3800 	call	100f380 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100b5cc:	d1201f17 	ldw	r4,-32644(gp)
 100b5d0:	d0e02017 	ldw	r3,-32640(gp)
 100b5d4:	d0a02117 	ldw	r2,-32636(gp)
 100b5d8:	180b883a 	mov	r5,r3
 100b5dc:	100d883a 	mov	r6,r2
 100b5e0:	1000b880 	call	1000b88 <main>
 100b5e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100b5e8:	01000044 	movi	r4,1
 100b5ec:	100b1700 	call	100b170 <close>
  exit (result);
 100b5f0:	e13fff17 	ldw	r4,-4(fp)
 100b5f4:	100f3940 	call	100f394 <exit>

0100b5f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100b5f8:	defffe04 	addi	sp,sp,-8
 100b5fc:	df000115 	stw	fp,4(sp)
 100b600:	df000104 	addi	fp,sp,4
 100b604:	e13fff15 	stw	r4,-4(fp)
}
 100b608:	e037883a 	mov	sp,fp
 100b60c:	df000017 	ldw	fp,0(sp)
 100b610:	dec00104 	addi	sp,sp,4
 100b614:	f800283a 	ret

0100b618 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100b618:	defffe04 	addi	sp,sp,-8
 100b61c:	df000115 	stw	fp,4(sp)
 100b620:	df000104 	addi	fp,sp,4
 100b624:	e13fff15 	stw	r4,-4(fp)
}
 100b628:	e037883a 	mov	sp,fp
 100b62c:	df000017 	ldw	fp,0(sp)
 100b630:	dec00104 	addi	sp,sp,4
 100b634:	f800283a 	ret

0100b638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b638:	defffe04 	addi	sp,sp,-8
 100b63c:	dfc00115 	stw	ra,4(sp)
 100b640:	df000015 	stw	fp,0(sp)
 100b644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b648:	00804074 	movhi	r2,257
 100b64c:	1085ea04 	addi	r2,r2,6056
 100b650:	10800017 	ldw	r2,0(r2)
 100b654:	10000526 	beq	r2,zero,100b66c <alt_get_errno+0x34>
 100b658:	00804074 	movhi	r2,257
 100b65c:	1085ea04 	addi	r2,r2,6056
 100b660:	10800017 	ldw	r2,0(r2)
 100b664:	103ee83a 	callr	r2
 100b668:	00000206 	br	100b674 <alt_get_errno+0x3c>
 100b66c:	00804074 	movhi	r2,257
 100b670:	1085f604 	addi	r2,r2,6104
}
 100b674:	e037883a 	mov	sp,fp
 100b678:	dfc00117 	ldw	ra,4(sp)
 100b67c:	df000017 	ldw	fp,0(sp)
 100b680:	dec00204 	addi	sp,sp,8
 100b684:	f800283a 	ret

0100b688 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100b688:	defffb04 	addi	sp,sp,-20
 100b68c:	dfc00415 	stw	ra,16(sp)
 100b690:	df000315 	stw	fp,12(sp)
 100b694:	dc000215 	stw	r16,8(sp)
 100b698:	df000204 	addi	fp,sp,8
 100b69c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100b6a0:	e0bfff17 	ldw	r2,-4(fp)
 100b6a4:	10800217 	ldw	r2,8(r2)
 100b6a8:	10d00034 	orhi	r3,r2,16384
 100b6ac:	e0bfff17 	ldw	r2,-4(fp)
 100b6b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100b6b4:	e03ffe15 	stw	zero,-8(fp)
 100b6b8:	00002206 	br	100b744 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100b6bc:	04004074 	movhi	r16,257
 100b6c0:	84010304 	addi	r16,r16,1036
 100b6c4:	e0bffe17 	ldw	r2,-8(fp)
 100b6c8:	1009883a 	mov	r4,r2
 100b6cc:	01400304 	movi	r5,12
 100b6d0:	10013440 	call	1001344 <__mulsi3>
 100b6d4:	8085883a 	add	r2,r16,r2
 100b6d8:	10c00017 	ldw	r3,0(r2)
 100b6dc:	e0bfff17 	ldw	r2,-4(fp)
 100b6e0:	10800017 	ldw	r2,0(r2)
 100b6e4:	1880141e 	bne	r3,r2,100b738 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100b6e8:	04004074 	movhi	r16,257
 100b6ec:	84010304 	addi	r16,r16,1036
 100b6f0:	e0bffe17 	ldw	r2,-8(fp)
 100b6f4:	1009883a 	mov	r4,r2
 100b6f8:	01400304 	movi	r5,12
 100b6fc:	10013440 	call	1001344 <__mulsi3>
 100b700:	8085883a 	add	r2,r16,r2
 100b704:	10800204 	addi	r2,r2,8
 100b708:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100b70c:	10000a0e 	bge	r2,zero,100b738 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 100b710:	e13ffe17 	ldw	r4,-8(fp)
 100b714:	01400304 	movi	r5,12
 100b718:	10013440 	call	1001344 <__mulsi3>
 100b71c:	00c04074 	movhi	r3,257
 100b720:	18c10304 	addi	r3,r3,1036
 100b724:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 100b728:	e0bfff17 	ldw	r2,-4(fp)
 100b72c:	18800226 	beq	r3,r2,100b738 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100b730:	00bffcc4 	movi	r2,-13
 100b734:	00000a06 	br	100b760 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100b738:	e0bffe17 	ldw	r2,-8(fp)
 100b73c:	10800044 	addi	r2,r2,1
 100b740:	e0bffe15 	stw	r2,-8(fp)
 100b744:	00804074 	movhi	r2,257
 100b748:	1085e904 	addi	r2,r2,6052
 100b74c:	10800017 	ldw	r2,0(r2)
 100b750:	1007883a 	mov	r3,r2
 100b754:	e0bffe17 	ldw	r2,-8(fp)
 100b758:	18bfd82e 	bgeu	r3,r2,100b6bc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100b75c:	0005883a 	mov	r2,zero
}
 100b760:	e037883a 	mov	sp,fp
 100b764:	dfc00217 	ldw	ra,8(sp)
 100b768:	df000117 	ldw	fp,4(sp)
 100b76c:	dc000017 	ldw	r16,0(sp)
 100b770:	dec00304 	addi	sp,sp,12
 100b774:	f800283a 	ret

0100b778 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100b778:	defff604 	addi	sp,sp,-40
 100b77c:	dfc00915 	stw	ra,36(sp)
 100b780:	df000815 	stw	fp,32(sp)
 100b784:	df000804 	addi	fp,sp,32
 100b788:	e13ffd15 	stw	r4,-12(fp)
 100b78c:	e17ffe15 	stw	r5,-8(fp)
 100b790:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100b794:	00bfffc4 	movi	r2,-1
 100b798:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 100b79c:	00bffb44 	movi	r2,-19
 100b7a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 100b7a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100b7a8:	e13ffd17 	ldw	r4,-12(fp)
 100b7ac:	01404074 	movhi	r5,257
 100b7b0:	2945e704 	addi	r5,r5,6044
 100b7b4:	100e86c0 	call	100e86c <alt_find_dev>
 100b7b8:	e0bff815 	stw	r2,-32(fp)
 100b7bc:	e0bff817 	ldw	r2,-32(fp)
 100b7c0:	1000051e 	bne	r2,zero,100b7d8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100b7c4:	e13ffd17 	ldw	r4,-12(fp)
 100b7c8:	100e8fc0 	call	100e8fc <alt_find_file>
 100b7cc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 100b7d0:	00800044 	movi	r2,1
 100b7d4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100b7d8:	e0bff817 	ldw	r2,-32(fp)
 100b7dc:	10002a26 	beq	r2,zero,100b888 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100b7e0:	e13ff817 	ldw	r4,-32(fp)
 100b7e4:	100eac80 	call	100eac8 <alt_get_fd>
 100b7e8:	e0bff915 	stw	r2,-28(fp)
 100b7ec:	e0bff917 	ldw	r2,-28(fp)
 100b7f0:	1000030e 	bge	r2,zero,100b800 <open+0x88>
    {
      status = index;
 100b7f4:	e0bff917 	ldw	r2,-28(fp)
 100b7f8:	e0bffa15 	stw	r2,-24(fp)
 100b7fc:	00002406 	br	100b890 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 100b800:	e13ff917 	ldw	r4,-28(fp)
 100b804:	01400304 	movi	r5,12
 100b808:	10013440 	call	1001344 <__mulsi3>
 100b80c:	00c04074 	movhi	r3,257
 100b810:	18c10304 	addi	r3,r3,1036
 100b814:	10c5883a 	add	r2,r2,r3
 100b818:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100b81c:	e0fffe17 	ldw	r3,-8(fp)
 100b820:	00900034 	movhi	r2,16384
 100b824:	10bfffc4 	addi	r2,r2,-1
 100b828:	1886703a 	and	r3,r3,r2
 100b82c:	e0bffc17 	ldw	r2,-16(fp)
 100b830:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100b834:	e0bffb17 	ldw	r2,-20(fp)
 100b838:	1000051e 	bne	r2,zero,100b850 <open+0xd8>
 100b83c:	e13ffc17 	ldw	r4,-16(fp)
 100b840:	100b6880 	call	100b688 <alt_file_locked>
 100b844:	e0bffa15 	stw	r2,-24(fp)
 100b848:	e0bffa17 	ldw	r2,-24(fp)
 100b84c:	10001016 	blt	r2,zero,100b890 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100b850:	e0bff817 	ldw	r2,-32(fp)
 100b854:	10800317 	ldw	r2,12(r2)
 100b858:	10000826 	beq	r2,zero,100b87c <open+0x104>
 100b85c:	e0bff817 	ldw	r2,-32(fp)
 100b860:	10800317 	ldw	r2,12(r2)
 100b864:	e13ffc17 	ldw	r4,-16(fp)
 100b868:	e17ffd17 	ldw	r5,-12(fp)
 100b86c:	e1bffe17 	ldw	r6,-8(fp)
 100b870:	e1ffff17 	ldw	r7,-4(fp)
 100b874:	103ee83a 	callr	r2
 100b878:	00000106 	br	100b880 <open+0x108>
 100b87c:	0005883a 	mov	r2,zero
 100b880:	e0bffa15 	stw	r2,-24(fp)
 100b884:	00000206 	br	100b890 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100b888:	00bffb44 	movi	r2,-19
 100b88c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100b890:	e0bffa17 	ldw	r2,-24(fp)
 100b894:	1000080e 	bge	r2,zero,100b8b8 <open+0x140>
  {
    alt_release_fd (index);  
 100b898:	e13ff917 	ldw	r4,-28(fp)
 100b89c:	100ba140 	call	100ba14 <alt_release_fd>
    ALT_ERRNO = -status;
 100b8a0:	100b6380 	call	100b638 <alt_get_errno>
 100b8a4:	e0fffa17 	ldw	r3,-24(fp)
 100b8a8:	00c7c83a 	sub	r3,zero,r3
 100b8ac:	10c00015 	stw	r3,0(r2)
    return -1;
 100b8b0:	00bfffc4 	movi	r2,-1
 100b8b4:	00000106 	br	100b8bc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 100b8b8:	e0bff917 	ldw	r2,-28(fp)
}
 100b8bc:	e037883a 	mov	sp,fp
 100b8c0:	dfc00117 	ldw	ra,4(sp)
 100b8c4:	df000017 	ldw	fp,0(sp)
 100b8c8:	dec00204 	addi	sp,sp,8
 100b8cc:	f800283a 	ret

0100b8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b8d0:	defffe04 	addi	sp,sp,-8
 100b8d4:	dfc00115 	stw	ra,4(sp)
 100b8d8:	df000015 	stw	fp,0(sp)
 100b8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100b8e0:	00804074 	movhi	r2,257
 100b8e4:	1085ea04 	addi	r2,r2,6056
 100b8e8:	10800017 	ldw	r2,0(r2)
 100b8ec:	10000526 	beq	r2,zero,100b904 <alt_get_errno+0x34>
 100b8f0:	00804074 	movhi	r2,257
 100b8f4:	1085ea04 	addi	r2,r2,6056
 100b8f8:	10800017 	ldw	r2,0(r2)
 100b8fc:	103ee83a 	callr	r2
 100b900:	00000206 	br	100b90c <alt_get_errno+0x3c>
 100b904:	00804074 	movhi	r2,257
 100b908:	1085f604 	addi	r2,r2,6104
}
 100b90c:	e037883a 	mov	sp,fp
 100b910:	dfc00117 	ldw	ra,4(sp)
 100b914:	df000017 	ldw	fp,0(sp)
 100b918:	dec00204 	addi	sp,sp,8
 100b91c:	f800283a 	ret

0100b920 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100b920:	defff904 	addi	sp,sp,-28
 100b924:	dfc00615 	stw	ra,24(sp)
 100b928:	df000515 	stw	fp,20(sp)
 100b92c:	df000504 	addi	fp,sp,20
 100b930:	e13ffd15 	stw	r4,-12(fp)
 100b934:	e17ffe15 	stw	r5,-8(fp)
 100b938:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b93c:	e0bffd17 	ldw	r2,-12(fp)
 100b940:	10000716 	blt	r2,zero,100b960 <read+0x40>
 100b944:	e13ffd17 	ldw	r4,-12(fp)
 100b948:	01400304 	movi	r5,12
 100b94c:	10013440 	call	1001344 <__mulsi3>
 100b950:	00c04074 	movhi	r3,257
 100b954:	18c10304 	addi	r3,r3,1036
 100b958:	10c5883a 	add	r2,r2,r3
 100b95c:	00000106 	br	100b964 <read+0x44>
 100b960:	0005883a 	mov	r2,zero
 100b964:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100b968:	e0bffb17 	ldw	r2,-20(fp)
 100b96c:	10002026 	beq	r2,zero,100b9f0 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100b970:	e0bffb17 	ldw	r2,-20(fp)
 100b974:	10800217 	ldw	r2,8(r2)
 100b978:	108000cc 	andi	r2,r2,3
 100b97c:	10800060 	cmpeqi	r2,r2,1
 100b980:	1000171e 	bne	r2,zero,100b9e0 <read+0xc0>
        (fd->dev->read))
 100b984:	e0bffb17 	ldw	r2,-20(fp)
 100b988:	10800017 	ldw	r2,0(r2)
 100b98c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100b990:	10001326 	beq	r2,zero,100b9e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100b994:	e0bffb17 	ldw	r2,-20(fp)
 100b998:	10800017 	ldw	r2,0(r2)
 100b99c:	10c00517 	ldw	r3,20(r2)
 100b9a0:	e0bfff17 	ldw	r2,-4(fp)
 100b9a4:	e13ffb17 	ldw	r4,-20(fp)
 100b9a8:	e17ffe17 	ldw	r5,-8(fp)
 100b9ac:	100d883a 	mov	r6,r2
 100b9b0:	183ee83a 	callr	r3
 100b9b4:	e0bffc15 	stw	r2,-16(fp)
 100b9b8:	e0bffc17 	ldw	r2,-16(fp)
 100b9bc:	1000060e 	bge	r2,zero,100b9d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 100b9c0:	100b8d00 	call	100b8d0 <alt_get_errno>
 100b9c4:	e0fffc17 	ldw	r3,-16(fp)
 100b9c8:	00c7c83a 	sub	r3,zero,r3
 100b9cc:	10c00015 	stw	r3,0(r2)
          return -1;
 100b9d0:	00bfffc4 	movi	r2,-1
 100b9d4:	00000a06 	br	100ba00 <read+0xe0>
        }
        return rval;
 100b9d8:	e0bffc17 	ldw	r2,-16(fp)
 100b9dc:	00000806 	br	100ba00 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100b9e0:	100b8d00 	call	100b8d0 <alt_get_errno>
 100b9e4:	00c00344 	movi	r3,13
 100b9e8:	10c00015 	stw	r3,0(r2)
 100b9ec:	00000306 	br	100b9fc <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100b9f0:	100b8d00 	call	100b8d0 <alt_get_errno>
 100b9f4:	00c01444 	movi	r3,81
 100b9f8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 100b9fc:	00bfffc4 	movi	r2,-1
}
 100ba00:	e037883a 	mov	sp,fp
 100ba04:	dfc00117 	ldw	ra,4(sp)
 100ba08:	df000017 	ldw	fp,0(sp)
 100ba0c:	dec00204 	addi	sp,sp,8
 100ba10:	f800283a 	ret

0100ba14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100ba14:	defffc04 	addi	sp,sp,-16
 100ba18:	dfc00315 	stw	ra,12(sp)
 100ba1c:	df000215 	stw	fp,8(sp)
 100ba20:	dc000115 	stw	r16,4(sp)
 100ba24:	df000104 	addi	fp,sp,4
 100ba28:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100ba2c:	e0bfff17 	ldw	r2,-4(fp)
 100ba30:	108000d0 	cmplti	r2,r2,3
 100ba34:	1000111e 	bne	r2,zero,100ba7c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 100ba38:	04004074 	movhi	r16,257
 100ba3c:	84010304 	addi	r16,r16,1036
 100ba40:	e0bfff17 	ldw	r2,-4(fp)
 100ba44:	1009883a 	mov	r4,r2
 100ba48:	01400304 	movi	r5,12
 100ba4c:	10013440 	call	1001344 <__mulsi3>
 100ba50:	8085883a 	add	r2,r16,r2
 100ba54:	10800204 	addi	r2,r2,8
 100ba58:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100ba5c:	04004074 	movhi	r16,257
 100ba60:	84010304 	addi	r16,r16,1036
 100ba64:	e0bfff17 	ldw	r2,-4(fp)
 100ba68:	1009883a 	mov	r4,r2
 100ba6c:	01400304 	movi	r5,12
 100ba70:	10013440 	call	1001344 <__mulsi3>
 100ba74:	8085883a 	add	r2,r16,r2
 100ba78:	10000015 	stw	zero,0(r2)
  }
}
 100ba7c:	e037883a 	mov	sp,fp
 100ba80:	dfc00217 	ldw	ra,8(sp)
 100ba84:	df000117 	ldw	fp,4(sp)
 100ba88:	dc000017 	ldw	r16,0(sp)
 100ba8c:	dec00304 	addi	sp,sp,12
 100ba90:	f800283a 	ret

0100ba94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100ba94:	defff904 	addi	sp,sp,-28
 100ba98:	df000615 	stw	fp,24(sp)
 100ba9c:	df000604 	addi	fp,sp,24
 100baa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100baa4:	0005303a 	rdctl	r2,status
 100baa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100baac:	e0fffc17 	ldw	r3,-16(fp)
 100bab0:	00bfff84 	movi	r2,-2
 100bab4:	1884703a 	and	r2,r3,r2
 100bab8:	1001703a 	wrctl	status,r2
  
  return context;
 100babc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100bac0:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100bac4:	d0a00d17 	ldw	r2,-32716(gp)
 100bac8:	10c000c4 	addi	r3,r2,3
 100bacc:	00bfff04 	movi	r2,-4
 100bad0:	1884703a 	and	r2,r3,r2
 100bad4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100bad8:	d0e00d17 	ldw	r3,-32716(gp)
 100badc:	e0bfff17 	ldw	r2,-4(fp)
 100bae0:	1885883a 	add	r2,r3,r2
 100bae4:	00c08034 	movhi	r3,512
 100bae8:	18c00004 	addi	r3,r3,0
 100baec:	1880062e 	bgeu	r3,r2,100bb08 <sbrk+0x74>
 100baf0:	e0bffa17 	ldw	r2,-24(fp)
 100baf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100baf8:	e0bffd17 	ldw	r2,-12(fp)
 100bafc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100bb00:	00bfffc4 	movi	r2,-1
 100bb04:	00000b06 	br	100bb34 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100bb08:	d0a00d17 	ldw	r2,-32716(gp)
 100bb0c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 100bb10:	d0e00d17 	ldw	r3,-32716(gp)
 100bb14:	e0bfff17 	ldw	r2,-4(fp)
 100bb18:	1885883a 	add	r2,r3,r2
 100bb1c:	d0a00d15 	stw	r2,-32716(gp)
 100bb20:	e0bffa17 	ldw	r2,-24(fp)
 100bb24:	e0bffe15 	stw	r2,-8(fp)
 100bb28:	e0bffe17 	ldw	r2,-8(fp)
 100bb2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100bb30:	e0bffb17 	ldw	r2,-20(fp)
} 
 100bb34:	e037883a 	mov	sp,fp
 100bb38:	df000017 	ldw	fp,0(sp)
 100bb3c:	dec00104 	addi	sp,sp,4
 100bb40:	f800283a 	ret

0100bb44 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100bb44:	defffd04 	addi	sp,sp,-12
 100bb48:	dfc00215 	stw	ra,8(sp)
 100bb4c:	df000115 	stw	fp,4(sp)
 100bb50:	df000104 	addi	fp,sp,4
 100bb54:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100bb58:	e13fff17 	ldw	r4,-4(fp)
 100bb5c:	100e5700 	call	100e570 <alt_busy_sleep>
}
 100bb60:	e037883a 	mov	sp,fp
 100bb64:	dfc00117 	ldw	ra,4(sp)
 100bb68:	df000017 	ldw	fp,0(sp)
 100bb6c:	dec00204 	addi	sp,sp,8
 100bb70:	f800283a 	ret

0100bb74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bb74:	defffe04 	addi	sp,sp,-8
 100bb78:	dfc00115 	stw	ra,4(sp)
 100bb7c:	df000015 	stw	fp,0(sp)
 100bb80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100bb84:	00804074 	movhi	r2,257
 100bb88:	1085ea04 	addi	r2,r2,6056
 100bb8c:	10800017 	ldw	r2,0(r2)
 100bb90:	10000526 	beq	r2,zero,100bba8 <alt_get_errno+0x34>
 100bb94:	00804074 	movhi	r2,257
 100bb98:	1085ea04 	addi	r2,r2,6056
 100bb9c:	10800017 	ldw	r2,0(r2)
 100bba0:	103ee83a 	callr	r2
 100bba4:	00000206 	br	100bbb0 <alt_get_errno+0x3c>
 100bba8:	00804074 	movhi	r2,257
 100bbac:	1085f604 	addi	r2,r2,6104
}
 100bbb0:	e037883a 	mov	sp,fp
 100bbb4:	dfc00117 	ldw	ra,4(sp)
 100bbb8:	df000017 	ldw	fp,0(sp)
 100bbbc:	dec00204 	addi	sp,sp,8
 100bbc0:	f800283a 	ret

0100bbc4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100bbc4:	defff904 	addi	sp,sp,-28
 100bbc8:	dfc00615 	stw	ra,24(sp)
 100bbcc:	df000515 	stw	fp,20(sp)
 100bbd0:	df000504 	addi	fp,sp,20
 100bbd4:	e13ffd15 	stw	r4,-12(fp)
 100bbd8:	e17ffe15 	stw	r5,-8(fp)
 100bbdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bbe0:	e0bffd17 	ldw	r2,-12(fp)
 100bbe4:	10000716 	blt	r2,zero,100bc04 <write+0x40>
 100bbe8:	e13ffd17 	ldw	r4,-12(fp)
 100bbec:	01400304 	movi	r5,12
 100bbf0:	10013440 	call	1001344 <__mulsi3>
 100bbf4:	00c04074 	movhi	r3,257
 100bbf8:	18c10304 	addi	r3,r3,1036
 100bbfc:	10c5883a 	add	r2,r2,r3
 100bc00:	00000106 	br	100bc08 <write+0x44>
 100bc04:	0005883a 	mov	r2,zero
 100bc08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100bc0c:	e0bffb17 	ldw	r2,-20(fp)
 100bc10:	10001f26 	beq	r2,zero,100bc90 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100bc14:	e0bffb17 	ldw	r2,-20(fp)
 100bc18:	10800217 	ldw	r2,8(r2)
 100bc1c:	108000cc 	andi	r2,r2,3
 100bc20:	10001726 	beq	r2,zero,100bc80 <write+0xbc>
 100bc24:	e0bffb17 	ldw	r2,-20(fp)
 100bc28:	10800017 	ldw	r2,0(r2)
 100bc2c:	10800617 	ldw	r2,24(r2)
 100bc30:	10001326 	beq	r2,zero,100bc80 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100bc34:	e0bffb17 	ldw	r2,-20(fp)
 100bc38:	10800017 	ldw	r2,0(r2)
 100bc3c:	10c00617 	ldw	r3,24(r2)
 100bc40:	e0bfff17 	ldw	r2,-4(fp)
 100bc44:	e13ffb17 	ldw	r4,-20(fp)
 100bc48:	e17ffe17 	ldw	r5,-8(fp)
 100bc4c:	100d883a 	mov	r6,r2
 100bc50:	183ee83a 	callr	r3
 100bc54:	e0bffc15 	stw	r2,-16(fp)
 100bc58:	e0bffc17 	ldw	r2,-16(fp)
 100bc5c:	1000060e 	bge	r2,zero,100bc78 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 100bc60:	100bb740 	call	100bb74 <alt_get_errno>
 100bc64:	e0fffc17 	ldw	r3,-16(fp)
 100bc68:	00c7c83a 	sub	r3,zero,r3
 100bc6c:	10c00015 	stw	r3,0(r2)
        return -1;
 100bc70:	00bfffc4 	movi	r2,-1
 100bc74:	00000a06 	br	100bca0 <write+0xdc>
      }
      return rval;
 100bc78:	e0bffc17 	ldw	r2,-16(fp)
 100bc7c:	00000806 	br	100bca0 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100bc80:	100bb740 	call	100bb74 <alt_get_errno>
 100bc84:	00c00344 	movi	r3,13
 100bc88:	10c00015 	stw	r3,0(r2)
 100bc8c:	00000306 	br	100bc9c <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100bc90:	100bb740 	call	100bb74 <alt_get_errno>
 100bc94:	00c01444 	movi	r3,81
 100bc98:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 100bc9c:	00bfffc4 	movi	r2,-1
}
 100bca0:	e037883a 	mov	sp,fp
 100bca4:	dfc00117 	ldw	ra,4(sp)
 100bca8:	df000017 	ldw	fp,0(sp)
 100bcac:	dec00204 	addi	sp,sp,8
 100bcb0:	f800283a 	ret

0100bcb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100bcb4:	defffd04 	addi	sp,sp,-12
 100bcb8:	dfc00215 	stw	ra,8(sp)
 100bcbc:	df000115 	stw	fp,4(sp)
 100bcc0:	df000104 	addi	fp,sp,4
 100bcc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100bcc8:	e13fff17 	ldw	r4,-4(fp)
 100bccc:	01404074 	movhi	r5,257
 100bcd0:	2945e704 	addi	r5,r5,6044
 100bcd4:	100e7140 	call	100e714 <alt_dev_llist_insert>
}
 100bcd8:	e037883a 	mov	sp,fp
 100bcdc:	dfc00117 	ldw	ra,4(sp)
 100bce0:	df000017 	ldw	fp,0(sp)
 100bce4:	dec00204 	addi	sp,sp,8
 100bce8:	f800283a 	ret

0100bcec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100bcec:	defffd04 	addi	sp,sp,-12
 100bcf0:	dfc00215 	stw	ra,8(sp)
 100bcf4:	df000115 	stw	fp,4(sp)
 100bcf8:	df000104 	addi	fp,sp,4
 100bcfc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100bd00:	100f1580 	call	100f158 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100bd04:	00800044 	movi	r2,1
 100bd08:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100bd0c:	e037883a 	mov	sp,fp
 100bd10:	dfc00117 	ldw	ra,4(sp)
 100bd14:	df000017 	ldw	fp,0(sp)
 100bd18:	dec00204 	addi	sp,sp,8
 100bd1c:	f800283a 	ret

0100bd20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100bd20:	defffe04 	addi	sp,sp,-8
 100bd24:	dfc00115 	stw	ra,4(sp)
 100bd28:	df000015 	stw	fp,0(sp)
 100bd2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100bd30:	01008034 	movhi	r4,512
 100bd34:	21081004 	addi	r4,r4,8256
 100bd38:	000b883a 	mov	r5,zero
 100bd3c:	01800084 	movi	r6,2
 100bd40:	01c0fa04 	movi	r7,1000
 100bd44:	100d2100 	call	100d210 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( WDT, WDT);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 100bd48:	01004074 	movhi	r4,257
 100bd4c:	21016304 	addi	r4,r4,1420
 100bd50:	100bde00 	call	100bde0 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 100bd54:	01004074 	movhi	r4,257
 100bd58:	21019f04 	addi	r4,r4,1660
 100bd5c:	000b883a 	mov	r5,zero
 100bd60:	000d883a 	mov	r6,zero
 100bd64:	100c89c0 	call	100c89c <altera_avalon_jtag_uart_init>
 100bd68:	01004074 	movhi	r4,257
 100bd6c:	21019504 	addi	r4,r4,1620
 100bd70:	100bcb40 	call	100bcb4 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 100bd74:	01004074 	movhi	r4,257
 100bd78:	2105b704 	addi	r4,r4,5852
 100bd7c:	000b883a 	mov	r5,zero
 100bd80:	01800044 	movi	r6,1
 100bd84:	100d6180 	call	100d618 <altera_avalon_uart_init>
 100bd88:	01004074 	movhi	r4,257
 100bd8c:	2105ad04 	addi	r4,r4,5812
 100bd90:	100bcb40 	call	100bcb4 <alt_dev_reg>
}
 100bd94:	e037883a 	mov	sp,fp
 100bd98:	dfc00117 	ldw	ra,4(sp)
 100bd9c:	df000017 	ldw	fp,0(sp)
 100bda0:	dec00204 	addi	sp,sp,8
 100bda4:	f800283a 	ret

0100bda8 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 100bda8:	defffd04 	addi	sp,sp,-12
 100bdac:	dfc00215 	stw	ra,8(sp)
 100bdb0:	df000115 	stw	fp,4(sp)
 100bdb4:	df000104 	addi	fp,sp,4
 100bdb8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 100bdbc:	e13fff17 	ldw	r4,-4(fp)
 100bdc0:	01404074 	movhi	r5,257
 100bdc4:	2945ec04 	addi	r5,r5,6064
 100bdc8:	100e7140 	call	100e714 <alt_dev_llist_insert>
}
 100bdcc:	e037883a 	mov	sp,fp
 100bdd0:	dfc00117 	ldw	ra,4(sp)
 100bdd4:	df000017 	ldw	fp,0(sp)
 100bdd8:	dec00204 	addi	sp,sp,8
 100bddc:	f800283a 	ret

0100bde0 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 100bde0:	defffc04 	addi	sp,sp,-16
 100bde4:	dfc00315 	stw	ra,12(sp)
 100bde8:	df000215 	stw	fp,8(sp)
 100bdec:	df000204 	addi	fp,sp,8
 100bdf0:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 100bdf4:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 100bdf8:	e13fff17 	ldw	r4,-4(fp)
 100bdfc:	100be340 	call	100be34 <alt_epcs_flash_query>
 100be00:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 100be04:	e0bffe17 	ldw	r2,-8(fp)
 100be08:	1000041e 	bne	r2,zero,100be1c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 100be0c:	e0bfff17 	ldw	r2,-4(fp)
 100be10:	1009883a 	mov	r4,r2
 100be14:	100bda80 	call	100bda8 <alt_flash_device_register>
 100be18:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 100be1c:	e0bffe17 	ldw	r2,-8(fp)
}
 100be20:	e037883a 	mov	sp,fp
 100be24:	dfc00117 	ldw	ra,4(sp)
 100be28:	df000017 	ldw	fp,0(sp)
 100be2c:	dec00204 	addi	sp,sp,8
 100be30:	f800283a 	ret

0100be34 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 100be34:	defffc04 	addi	sp,sp,-16
 100be38:	dfc00315 	stw	ra,12(sp)
 100be3c:	df000215 	stw	fp,8(sp)
 100be40:	df000204 	addi	fp,sp,8
 100be44:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 100be48:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 100be4c:	e0bfff17 	ldw	r2,-4(fp)
 100be50:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 100be54:	e0bfff17 	ldw	r2,-4(fp)
 100be58:	10802d17 	ldw	r2,180(r2)
 100be5c:	1009883a 	mov	r4,r2
 100be60:	100e2980 	call	100e298 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 100be64:	10c03fcc 	andi	r3,r2,255
 100be68:	e0bfff17 	ldw	r2,-4(fp)
 100be6c:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 100be70:	e0bfff17 	ldw	r2,-4(fp)
 100be74:	10802f17 	ldw	r2,188(r2)
 100be78:	10800598 	cmpnei	r2,r2,22
 100be7c:	10000a1e 	bne	r2,zero,100bea8 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 100be80:	e0bfff17 	ldw	r2,-4(fp)
 100be84:	00c02034 	movhi	r3,128
 100be88:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 100be8c:	e0bfff17 	ldw	r2,-4(fp)
 100be90:	00c02004 	movi	r3,128
 100be94:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 100be98:	e0bfff17 	ldw	r2,-4(fp)
 100be9c:	00c00074 	movhi	r3,1
 100bea0:	10c01015 	stw	r3,64(r2)
 100bea4:	00007306 	br	100c074 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 100bea8:	e0bfff17 	ldw	r2,-4(fp)
 100beac:	10802f17 	ldw	r2,188(r2)
 100beb0:	10800518 	cmpnei	r2,r2,20
 100beb4:	10000a1e 	bne	r2,zero,100bee0 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 100beb8:	e0bfff17 	ldw	r2,-4(fp)
 100bebc:	00c00834 	movhi	r3,32
 100bec0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 100bec4:	e0bfff17 	ldw	r2,-4(fp)
 100bec8:	00c00804 	movi	r3,32
 100becc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 100bed0:	e0bfff17 	ldw	r2,-4(fp)
 100bed4:	00c00074 	movhi	r3,1
 100bed8:	10c01015 	stw	r3,64(r2)
 100bedc:	00006506 	br	100c074 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 100bee0:	e0bfff17 	ldw	r2,-4(fp)
 100bee4:	10802f17 	ldw	r2,188(r2)
 100bee8:	108004d8 	cmpnei	r2,r2,19
 100beec:	10000a1e 	bne	r2,zero,100bf18 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 100bef0:	e0bfff17 	ldw	r2,-4(fp)
 100bef4:	00c00434 	movhi	r3,16
 100bef8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 100befc:	e0bfff17 	ldw	r2,-4(fp)
 100bf00:	00c00404 	movi	r3,16
 100bf04:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 100bf08:	e0bfff17 	ldw	r2,-4(fp)
 100bf0c:	00c00074 	movhi	r3,1
 100bf10:	10c01015 	stw	r3,64(r2)
 100bf14:	00005706 	br	100c074 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 100bf18:	e0bfff17 	ldw	r2,-4(fp)
 100bf1c:	10802f17 	ldw	r2,188(r2)
 100bf20:	10800498 	cmpnei	r2,r2,18
 100bf24:	10000a1e 	bne	r2,zero,100bf50 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 100bf28:	e0bfff17 	ldw	r2,-4(fp)
 100bf2c:	00c00234 	movhi	r3,8
 100bf30:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 100bf34:	e0bfff17 	ldw	r2,-4(fp)
 100bf38:	00c00204 	movi	r3,8
 100bf3c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 100bf40:	e0bfff17 	ldw	r2,-4(fp)
 100bf44:	00c00074 	movhi	r3,1
 100bf48:	10c01015 	stw	r3,64(r2)
 100bf4c:	00004906 	br	100c074 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 100bf50:	e0bfff17 	ldw	r2,-4(fp)
 100bf54:	10802f17 	ldw	r2,188(r2)
 100bf58:	10800418 	cmpnei	r2,r2,16
 100bf5c:	10000a1e 	bne	r2,zero,100bf88 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 100bf60:	e0bfff17 	ldw	r2,-4(fp)
 100bf64:	00c000b4 	movhi	r3,2
 100bf68:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 100bf6c:	e0bfff17 	ldw	r2,-4(fp)
 100bf70:	00c00104 	movi	r3,4
 100bf74:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 100bf78:	e0bfff17 	ldw	r2,-4(fp)
 100bf7c:	00e00014 	movui	r3,32768
 100bf80:	10c01015 	stw	r3,64(r2)
 100bf84:	00003b06 	br	100c074 <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 100bf88:	e0bfff17 	ldw	r2,-4(fp)
 100bf8c:	10802d17 	ldw	r2,180(r2)
 100bf90:	1009883a 	mov	r4,r2
 100bf94:	100e3000 	call	100e300 <epcs_read_device_id>
 100bf98:	e0ffff17 	ldw	r3,-4(fp)
 100bf9c:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 100bfa0:	e0bfff17 	ldw	r2,-4(fp)
 100bfa4:	10c02f17 	ldw	r3,188(r2)
 100bfa8:	00804034 	movhi	r2,256
 100bfac:	10bfffc4 	addi	r2,r2,-1
 100bfb0:	1886703a 	and	r3,r3,r2
 100bfb4:	00800874 	movhi	r2,33
 100bfb8:	10ae8604 	addi	r2,r2,-17896
 100bfbc:	18800a1e 	bne	r3,r2,100bfe8 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 100bfc0:	e0bfff17 	ldw	r2,-4(fp)
 100bfc4:	00c04034 	movhi	r3,256
 100bfc8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 100bfcc:	e0bfff17 	ldw	r2,-4(fp)
 100bfd0:	00c04004 	movi	r3,256
 100bfd4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 100bfd8:	e0bfff17 	ldw	r2,-4(fp)
 100bfdc:	00c00074 	movhi	r3,1
 100bfe0:	10c01015 	stw	r3,64(r2)
 100bfe4:	00002306 	br	100c074 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 100bfe8:	e0bfff17 	ldw	r2,-4(fp)
 100bfec:	10802f17 	ldw	r2,188(r2)
 100bff0:	10803fcc 	andi	r2,r2,255
 100bff4:	10800618 	cmpnei	r2,r2,24
 100bff8:	10000a1e 	bne	r2,zero,100c024 <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 100bffc:	e0bfff17 	ldw	r2,-4(fp)
 100c000:	00c04034 	movhi	r3,256
 100c004:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 100c008:	e0bfff17 	ldw	r2,-4(fp)
 100c00c:	00c01004 	movi	r3,64
 100c010:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 100c014:	e0bfff17 	ldw	r2,-4(fp)
 100c018:	00c00134 	movhi	r3,4
 100c01c:	10c01015 	stw	r3,64(r2)
 100c020:	00001406 	br	100c074 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 100c024:	e0bfff17 	ldw	r2,-4(fp)
 100c028:	10802f17 	ldw	r2,188(r2)
 100c02c:	10803fcc 	andi	r2,r2,255
 100c030:	10800658 	cmpnei	r2,r2,25
 100c034:	10000d1e 	bne	r2,zero,100c06c <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 100c038:	e0bfff17 	ldw	r2,-4(fp)
 100c03c:	00c08034 	movhi	r3,512
 100c040:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 100c044:	e0bfff17 	ldw	r2,-4(fp)
 100c048:	00c08004 	movi	r3,512
 100c04c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 100c050:	e0bfff17 	ldw	r2,-4(fp)
 100c054:	00c00074 	movhi	r3,1
 100c058:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 100c05c:	e0bfff17 	ldw	r2,-4(fp)
 100c060:	00c00044 	movi	r3,1
 100c064:	10c03115 	stw	r3,196(r2)
 100c068:	00000206 	br	100c074 <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 100c06c:	00bffb44 	movi	r2,-19
 100c070:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 100c074:	e0bfff17 	ldw	r2,-4(fp)
 100c078:	10800e17 	ldw	r2,56(r2)
 100c07c:	1007883a 	mov	r3,r2
 100c080:	e0bfff17 	ldw	r2,-4(fp)
 100c084:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 100c088:	e0bfff17 	ldw	r2,-4(fp)
 100c08c:	00c00044 	movi	r3,1
 100c090:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 100c094:	e0bfff17 	ldw	r2,-4(fp)
 100c098:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 100c09c:	e0bfff17 	ldw	r2,-4(fp)
 100c0a0:	00c04004 	movi	r3,256
 100c0a4:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 100c0a8:	e0bffe17 	ldw	r2,-8(fp)
}
 100c0ac:	e037883a 	mov	sp,fp
 100c0b0:	dfc00117 	ldw	ra,4(sp)
 100c0b4:	df000017 	ldw	fp,0(sp)
 100c0b8:	dec00204 	addi	sp,sp,8
 100c0bc:	f800283a 	ret

0100c0c0 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 100c0c0:	deffee04 	addi	sp,sp,-72
 100c0c4:	dfc01115 	stw	ra,68(sp)
 100c0c8:	df001015 	stw	fp,64(sp)
 100c0cc:	df001004 	addi	fp,sp,64
 100c0d0:	e13ffc15 	stw	r4,-16(fp)
 100c0d4:	e17ffd15 	stw	r5,-12(fp)
 100c0d8:	e1bffe15 	stw	r6,-8(fp)
 100c0dc:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 100c0e0:	00800804 	movi	r2,32
 100c0e4:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 100c0e8:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 100c0ec:	00002606 	br	100c188 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 100c0f0:	e0bff117 	ldw	r2,-60(fp)
 100c0f4:	e0ffff17 	ldw	r3,-4(fp)
 100c0f8:	1880012e 	bgeu	r3,r2,100c100 <alt_epcs_flash_memcmp+0x40>
 100c0fc:	1805883a 	mov	r2,r3
 100c100:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 100c104:	e0fffe17 	ldw	r3,-8(fp)
 100c108:	e0bff017 	ldw	r2,-64(fp)
 100c10c:	1887883a 	add	r3,r3,r2
 100c110:	e0bff404 	addi	r2,fp,-48
 100c114:	e13ffc17 	ldw	r4,-16(fp)
 100c118:	180b883a 	mov	r5,r3
 100c11c:	100d883a 	mov	r6,r2
 100c120:	e1fff217 	ldw	r7,-56(fp)
 100c124:	100c6a00 	call	100c6a0 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 100c128:	1000020e 	bge	r2,zero,100c134 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 100c12c:	00bfffc4 	movi	r2,-1
 100c130:	00001806 	br	100c194 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 100c134:	e0bff017 	ldw	r2,-64(fp)
 100c138:	e0fffd17 	ldw	r3,-12(fp)
 100c13c:	1889883a 	add	r4,r3,r2
 100c140:	e0bff217 	ldw	r2,-56(fp)
 100c144:	e0fff404 	addi	r3,fp,-48
 100c148:	180b883a 	mov	r5,r3
 100c14c:	100d883a 	mov	r6,r2
 100c150:	100f3cc0 	call	100f3cc <memcmp>
 100c154:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 100c158:	e0bff317 	ldw	r2,-52(fp)
 100c15c:	10000226 	beq	r2,zero,100c168 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 100c160:	e0bff317 	ldw	r2,-52(fp)
 100c164:	00000b06 	br	100c194 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 100c168:	e0bff217 	ldw	r2,-56(fp)
 100c16c:	e0ffff17 	ldw	r3,-4(fp)
 100c170:	1885c83a 	sub	r2,r3,r2
 100c174:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 100c178:	e0fff017 	ldw	r3,-64(fp)
 100c17c:	e0bff217 	ldw	r2,-56(fp)
 100c180:	1885883a 	add	r2,r3,r2
 100c184:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 100c188:	e0bfff17 	ldw	r2,-4(fp)
 100c18c:	103fd81e 	bne	r2,zero,100c0f0 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 100c190:	0005883a 	mov	r2,zero
}
 100c194:	e037883a 	mov	sp,fp
 100c198:	dfc00117 	ldw	ra,4(sp)
 100c19c:	df000017 	ldw	fp,0(sp)
 100c1a0:	dec00204 	addi	sp,sp,8
 100c1a4:	f800283a 	ret

0100c1a8 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 100c1a8:	defff404 	addi	sp,sp,-48
 100c1ac:	dfc00b15 	stw	ra,44(sp)
 100c1b0:	df000a15 	stw	fp,40(sp)
 100c1b4:	df000a04 	addi	fp,sp,40
 100c1b8:	e13ffc15 	stw	r4,-16(fp)
 100c1bc:	e17ffd15 	stw	r5,-12(fp)
 100c1c0:	e1bffe15 	stw	r6,-8(fp)
 100c1c4:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 100c1c8:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 100c1cc:	e03ff815 	stw	zero,-32(fp)
 100c1d0:	00008306 	br	100c3e0 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 100c1d4:	e0fffc17 	ldw	r3,-16(fp)
 100c1d8:	e0bff817 	ldw	r2,-32(fp)
 100c1dc:	1004913a 	slli	r2,r2,4
 100c1e0:	1885883a 	add	r2,r3,r2
 100c1e4:	10800d04 	addi	r2,r2,52
 100c1e8:	10800017 	ldw	r2,0(r2)
 100c1ec:	e0fffd17 	ldw	r3,-12(fp)
 100c1f0:	18807816 	blt	r3,r2,100c3d4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 100c1f4:	e0fffc17 	ldw	r3,-16(fp)
 100c1f8:	e0bff817 	ldw	r2,-32(fp)
 100c1fc:	1004913a 	slli	r2,r2,4
 100c200:	1885883a 	add	r2,r3,r2
 100c204:	10800d04 	addi	r2,r2,52
 100c208:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 100c20c:	e13ffc17 	ldw	r4,-16(fp)
 100c210:	e0bff817 	ldw	r2,-32(fp)
 100c214:	1004913a 	slli	r2,r2,4
 100c218:	2085883a 	add	r2,r4,r2
 100c21c:	10800e04 	addi	r2,r2,56
 100c220:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 100c224:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 100c228:	e0fffd17 	ldw	r3,-12(fp)
 100c22c:	1880690e 	bge	r3,r2,100c3d4 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 100c230:	e0fffc17 	ldw	r3,-16(fp)
 100c234:	e0bff817 	ldw	r2,-32(fp)
 100c238:	1004913a 	slli	r2,r2,4
 100c23c:	1885883a 	add	r2,r3,r2
 100c240:	10800d04 	addi	r2,r2,52
 100c244:	10800017 	ldw	r2,0(r2)
 100c248:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 100c24c:	e03ff915 	stw	zero,-28(fp)
 100c250:	00005806 	br	100c3b4 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 100c254:	e0fffd17 	ldw	r3,-12(fp)
 100c258:	e0bffa17 	ldw	r2,-24(fp)
 100c25c:	18804916 	blt	r3,r2,100c384 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 100c260:	e0fffc17 	ldw	r3,-16(fp)
 100c264:	e0bff817 	ldw	r2,-32(fp)
 100c268:	10800104 	addi	r2,r2,4
 100c26c:	1004913a 	slli	r2,r2,4
 100c270:	1885883a 	add	r2,r3,r2
 100c274:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 100c278:	e0bffa17 	ldw	r2,-24(fp)
 100c27c:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 100c280:	e0fffd17 	ldw	r3,-12(fp)
 100c284:	18803f0e 	bge	r3,r2,100c384 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 100c288:	e0fffc17 	ldw	r3,-16(fp)
 100c28c:	e0bff817 	ldw	r2,-32(fp)
 100c290:	10800104 	addi	r2,r2,4
 100c294:	1004913a 	slli	r2,r2,4
 100c298:	1885883a 	add	r2,r3,r2
 100c29c:	10c00017 	ldw	r3,0(r2)
 100c2a0:	e0bffa17 	ldw	r2,-24(fp)
 100c2a4:	1887883a 	add	r3,r3,r2
 100c2a8:	e0bffd17 	ldw	r2,-12(fp)
 100c2ac:	1885c83a 	sub	r2,r3,r2
 100c2b0:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 100c2b4:	e0fffb17 	ldw	r3,-20(fp)
 100c2b8:	e0bfff17 	ldw	r2,-4(fp)
 100c2bc:	1880010e 	bge	r3,r2,100c2c4 <alt_epcs_flash_write+0x11c>
 100c2c0:	1805883a 	mov	r2,r3
 100c2c4:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 100c2c8:	e0bffb17 	ldw	r2,-20(fp)
 100c2cc:	e13ffc17 	ldw	r4,-16(fp)
 100c2d0:	e17ffe17 	ldw	r5,-8(fp)
 100c2d4:	e1bffd17 	ldw	r6,-12(fp)
 100c2d8:	100f883a 	mov	r7,r2
 100c2dc:	100c0c00 	call	100c0c0 <alt_epcs_flash_memcmp>
 100c2e0:	10001226 	beq	r2,zero,100c32c <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 100c2e4:	e0bffc17 	ldw	r2,-16(fp)
 100c2e8:	10800817 	ldw	r2,32(r2)
 100c2ec:	e13ffc17 	ldw	r4,-16(fp)
 100c2f0:	e17ffa17 	ldw	r5,-24(fp)
 100c2f4:	103ee83a 	callr	r2
 100c2f8:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 100c2fc:	e0bff717 	ldw	r2,-36(fp)
 100c300:	10000a1e 	bne	r2,zero,100c32c <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 100c304:	e0bffc17 	ldw	r2,-16(fp)
 100c308:	10800917 	ldw	r2,36(r2)
 100c30c:	e0fffb17 	ldw	r3,-20(fp)
 100c310:	d8c00015 	stw	r3,0(sp)
 100c314:	e13ffc17 	ldw	r4,-16(fp)
 100c318:	e17ffa17 	ldw	r5,-24(fp)
 100c31c:	e1bffd17 	ldw	r6,-12(fp)
 100c320:	e1fffe17 	ldw	r7,-8(fp)
 100c324:	103ee83a 	callr	r2
 100c328:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 100c32c:	e0ffff17 	ldw	r3,-4(fp)
 100c330:	e0bffb17 	ldw	r2,-20(fp)
 100c334:	18802e26 	beq	r3,r2,100c3f0 <alt_epcs_flash_write+0x248>
 100c338:	e0bff717 	ldw	r2,-36(fp)
 100c33c:	10002c1e 	bne	r2,zero,100c3f0 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 100c340:	e0ffff17 	ldw	r3,-4(fp)
 100c344:	e0bffb17 	ldw	r2,-20(fp)
 100c348:	1885c83a 	sub	r2,r3,r2
 100c34c:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 100c350:	e0fffc17 	ldw	r3,-16(fp)
 100c354:	e0bff817 	ldw	r2,-32(fp)
 100c358:	10800104 	addi	r2,r2,4
 100c35c:	1004913a 	slli	r2,r2,4
 100c360:	1885883a 	add	r2,r3,r2
 100c364:	10c00017 	ldw	r3,0(r2)
 100c368:	e0bffa17 	ldw	r2,-24(fp)
 100c36c:	1885883a 	add	r2,r3,r2
 100c370:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 100c374:	e0bffb17 	ldw	r2,-20(fp)
 100c378:	e0fffe17 	ldw	r3,-8(fp)
 100c37c:	1885883a 	add	r2,r3,r2
 100c380:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 100c384:	e0fffc17 	ldw	r3,-16(fp)
 100c388:	e0bff817 	ldw	r2,-32(fp)
 100c38c:	10800104 	addi	r2,r2,4
 100c390:	1004913a 	slli	r2,r2,4
 100c394:	1885883a 	add	r2,r3,r2
 100c398:	10800017 	ldw	r2,0(r2)
 100c39c:	e0fffa17 	ldw	r3,-24(fp)
 100c3a0:	1885883a 	add	r2,r3,r2
 100c3a4:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 100c3a8:	e0bff917 	ldw	r2,-28(fp)
 100c3ac:	10800044 	addi	r2,r2,1
 100c3b0:	e0bff915 	stw	r2,-28(fp)
 100c3b4:	e0fffc17 	ldw	r3,-16(fp)
 100c3b8:	e0bff817 	ldw	r2,-32(fp)
 100c3bc:	1004913a 	slli	r2,r2,4
 100c3c0:	1885883a 	add	r2,r3,r2
 100c3c4:	10800f04 	addi	r2,r2,60
 100c3c8:	10800017 	ldw	r2,0(r2)
 100c3cc:	e0fff917 	ldw	r3,-28(fp)
 100c3d0:	18bfa016 	blt	r3,r2,100c254 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 100c3d4:	e0bff817 	ldw	r2,-32(fp)
 100c3d8:	10800044 	addi	r2,r2,1
 100c3dc:	e0bff815 	stw	r2,-32(fp)
 100c3e0:	e0bffc17 	ldw	r2,-16(fp)
 100c3e4:	10800c17 	ldw	r2,48(r2)
 100c3e8:	e0fff817 	ldw	r3,-32(fp)
 100c3ec:	18bf7916 	blt	r3,r2,100c1d4 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 100c3f0:	e0bff717 	ldw	r2,-36(fp)
}
 100c3f4:	e037883a 	mov	sp,fp
 100c3f8:	dfc00117 	ldw	ra,4(sp)
 100c3fc:	df000017 	ldw	fp,0(sp)
 100c400:	dec00204 	addi	sp,sp,8
 100c404:	f800283a 	ret

0100c408 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 100c408:	defffa04 	addi	sp,sp,-24
 100c40c:	df000515 	stw	fp,20(sp)
 100c410:	df000504 	addi	fp,sp,20
 100c414:	e13ffd15 	stw	r4,-12(fp)
 100c418:	e17ffe15 	stw	r5,-8(fp)
 100c41c:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 100c420:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 100c424:	e0bffd17 	ldw	r2,-12(fp)
 100c428:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 100c42c:	e0bffc17 	ldw	r2,-16(fp)
 100c430:	10c00c17 	ldw	r3,48(r2)
 100c434:	e0bfff17 	ldw	r2,-4(fp)
 100c438:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 100c43c:	e0bffc17 	ldw	r2,-16(fp)
 100c440:	10800c17 	ldw	r2,48(r2)
 100c444:	1000031e 	bne	r2,zero,100c454 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 100c448:	00bffec4 	movi	r2,-5
 100c44c:	e0bffb15 	stw	r2,-20(fp)
 100c450:	00000b06 	br	100c480 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 100c454:	e0bffc17 	ldw	r2,-16(fp)
 100c458:	10800c17 	ldw	r2,48(r2)
 100c45c:	10800250 	cmplti	r2,r2,9
 100c460:	1000031e 	bne	r2,zero,100c470 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 100c464:	00bffd04 	movi	r2,-12
 100c468:	e0bffb15 	stw	r2,-20(fp)
 100c46c:	00000406 	br	100c480 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 100c470:	e0bffc17 	ldw	r2,-16(fp)
 100c474:	10c00d04 	addi	r3,r2,52
 100c478:	e0bffe17 	ldw	r2,-8(fp)
 100c47c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 100c480:	e0bffb17 	ldw	r2,-20(fp)
}
 100c484:	e037883a 	mov	sp,fp
 100c488:	df000017 	ldw	fp,0(sp)
 100c48c:	dec00104 	addi	sp,sp,4
 100c490:	f800283a 	ret

0100c494 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 100c494:	defff904 	addi	sp,sp,-28
 100c498:	df000615 	stw	fp,24(sp)
 100c49c:	df000604 	addi	fp,sp,24
 100c4a0:	e13ffe15 	stw	r4,-8(fp)
 100c4a4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 100c4a8:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 100c4ac:	e0bffe17 	ldw	r2,-8(fp)
 100c4b0:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 100c4b4:	e0bffb17 	ldw	r2,-20(fp)
 100c4b8:	10800c17 	ldw	r2,48(r2)
 100c4bc:	10bfffc4 	addi	r2,r2,-1
 100c4c0:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 100c4c4:	e0fffb17 	ldw	r3,-20(fp)
 100c4c8:	e0bffc17 	ldw	r2,-16(fp)
 100c4cc:	1004913a 	slli	r2,r2,4
 100c4d0:	1885883a 	add	r2,r3,r2
 100c4d4:	10800d04 	addi	r2,r2,52
 100c4d8:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 100c4dc:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 100c4e0:	e13ffb17 	ldw	r4,-20(fp)
 100c4e4:	e0bffc17 	ldw	r2,-16(fp)
 100c4e8:	1004913a 	slli	r2,r2,4
 100c4ec:	2085883a 	add	r2,r4,r2
 100c4f0:	10800e04 	addi	r2,r2,56
 100c4f4:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 100c4f8:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 100c4fc:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 100c500:	e0bfff17 	ldw	r2,-4(fp)
 100c504:	e0fffd17 	ldw	r3,-12(fp)
 100c508:	1880022e 	bgeu	r3,r2,100c514 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 100c50c:	00bffec4 	movi	r2,-5
 100c510:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 100c514:	e0bffa17 	ldw	r2,-24(fp)
}
 100c518:	e037883a 	mov	sp,fp
 100c51c:	df000017 	ldw	fp,0(sp)
 100c520:	dec00104 	addi	sp,sp,4
 100c524:	f800283a 	ret

0100c528 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 100c528:	defffa04 	addi	sp,sp,-24
 100c52c:	dfc00515 	stw	ra,20(sp)
 100c530:	df000415 	stw	fp,16(sp)
 100c534:	df000404 	addi	fp,sp,16
 100c538:	e13ffe15 	stw	r4,-8(fp)
 100c53c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 100c540:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 100c544:	e0bffe17 	ldw	r2,-8(fp)
 100c548:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 100c54c:	e13ffe17 	ldw	r4,-8(fp)
 100c550:	e17fff17 	ldw	r5,-4(fp)
 100c554:	100c4940 	call	100c494 <alt_epcs_test_address>
 100c558:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 100c55c:	e0bffc17 	ldw	r2,-16(fp)
 100c560:	10000816 	blt	r2,zero,100c584 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 100c564:	e0bffd17 	ldw	r2,-12(fp)
 100c568:	11002d17 	ldw	r4,180(r2)
 100c56c:	e0ffff17 	ldw	r3,-4(fp)
 100c570:	e0bffd17 	ldw	r2,-12(fp)
 100c574:	10803117 	ldw	r2,196(r2)
 100c578:	180b883a 	mov	r5,r3
 100c57c:	100d883a 	mov	r6,r2
 100c580:	100ded80 	call	100ded8 <epcs_sector_erase>
  }
  return ret_code;
 100c584:	e0bffc17 	ldw	r2,-16(fp)
}
 100c588:	e037883a 	mov	sp,fp
 100c58c:	dfc00117 	ldw	ra,4(sp)
 100c590:	df000017 	ldw	fp,0(sp)
 100c594:	dec00204 	addi	sp,sp,8
 100c598:	f800283a 	ret

0100c59c <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 100c59c:	defff404 	addi	sp,sp,-48
 100c5a0:	dfc00b15 	stw	ra,44(sp)
 100c5a4:	df000a15 	stw	fp,40(sp)
 100c5a8:	df000a04 	addi	fp,sp,40
 100c5ac:	e13ffc15 	stw	r4,-16(fp)
 100c5b0:	e17ffd15 	stw	r5,-12(fp)
 100c5b4:	e1bffe15 	stw	r6,-8(fp)
 100c5b8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 100c5bc:	e0bffc17 	ldw	r2,-16(fp)
 100c5c0:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 100c5c4:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 100c5c8:	e13ffc17 	ldw	r4,-16(fp)
 100c5cc:	e17ffe17 	ldw	r5,-8(fp)
 100c5d0:	100c4940 	call	100c494 <alt_epcs_test_address>
 100c5d4:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 100c5d8:	e0bff917 	ldw	r2,-28(fp)
 100c5dc:	10002a16 	blt	r2,zero,100c688 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 100c5e0:	00002706 	br	100c680 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 100c5e4:	e0bff817 	ldw	r2,-32(fp)
 100c5e8:	10c03017 	ldw	r3,192(r2)
 100c5ec:	e0bffe17 	ldw	r2,-8(fp)
 100c5f0:	1887883a 	add	r3,r3,r2
 100c5f4:	e0bff817 	ldw	r2,-32(fp)
 100c5f8:	10803017 	ldw	r2,192(r2)
 100c5fc:	0085c83a 	sub	r2,zero,r2
 100c600:	1884703a 	and	r2,r3,r2
 100c604:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 100c608:	e0fffa17 	ldw	r3,-24(fp)
 100c60c:	e0bffe17 	ldw	r2,-8(fp)
 100c610:	1885c83a 	sub	r2,r3,r2
 100c614:	e0c00217 	ldw	r3,8(fp)
 100c618:	1880010e 	bge	r3,r2,100c620 <alt_epcs_flash_write_block+0x84>
 100c61c:	1805883a 	mov	r2,r3
 100c620:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 100c624:	e0bff817 	ldw	r2,-32(fp)
 100c628:	10c02d17 	ldw	r3,180(r2)
 100c62c:	e0bff717 	ldw	r2,-36(fp)
 100c630:	e13fff17 	ldw	r4,-4(fp)
 100c634:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 100c638:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 100c63c:	21003117 	ldw	r4,196(r4)
 100c640:	d9000015 	stw	r4,0(sp)
 100c644:	1809883a 	mov	r4,r3
 100c648:	e17ffe17 	ldw	r5,-8(fp)
 100c64c:	100d883a 	mov	r6,r2
 100c650:	e1fffb17 	ldw	r7,-20(fp)
 100c654:	100e17c0 	call	100e17c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 100c658:	e0c00217 	ldw	r3,8(fp)
 100c65c:	e0bffb17 	ldw	r2,-20(fp)
 100c660:	1885c83a 	sub	r2,r3,r2
 100c664:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 100c668:	e0fff717 	ldw	r3,-36(fp)
 100c66c:	e0bffb17 	ldw	r2,-20(fp)
 100c670:	1885883a 	add	r2,r3,r2
 100c674:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 100c678:	e0bffa17 	ldw	r2,-24(fp)
 100c67c:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 100c680:	e0800217 	ldw	r2,8(fp)
 100c684:	103fd71e 	bne	r2,zero,100c5e4 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 100c688:	e0bff917 	ldw	r2,-28(fp)
}
 100c68c:	e037883a 	mov	sp,fp
 100c690:	dfc00117 	ldw	ra,4(sp)
 100c694:	df000017 	ldw	fp,0(sp)
 100c698:	dec00204 	addi	sp,sp,8
 100c69c:	f800283a 	ret

0100c6a0 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 100c6a0:	defff704 	addi	sp,sp,-36
 100c6a4:	dfc00815 	stw	ra,32(sp)
 100c6a8:	df000715 	stw	fp,28(sp)
 100c6ac:	df000704 	addi	fp,sp,28
 100c6b0:	e13ffc15 	stw	r4,-16(fp)
 100c6b4:	e17ffd15 	stw	r5,-12(fp)
 100c6b8:	e1bffe15 	stw	r6,-8(fp)
 100c6bc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 100c6c0:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 100c6c4:	e0bffc17 	ldw	r2,-16(fp)
 100c6c8:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 100c6cc:	e13ffc17 	ldw	r4,-16(fp)
 100c6d0:	e17ffd17 	ldw	r5,-12(fp)
 100c6d4:	100c4940 	call	100c494 <alt_epcs_test_address>
 100c6d8:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 100c6dc:	e0bffa17 	ldw	r2,-24(fp)
 100c6e0:	10000f16 	blt	r2,zero,100c720 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 100c6e4:	e0bffb17 	ldw	r2,-20(fp)
 100c6e8:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 100c6ec:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 100c6f0:	18c03117 	ldw	r3,196(r3)
 100c6f4:	d8c00015 	stw	r3,0(sp)
 100c6f8:	1009883a 	mov	r4,r2
 100c6fc:	e17ffd17 	ldw	r5,-12(fp)
 100c700:	e1bffe17 	ldw	r6,-8(fp)
 100c704:	e1ffff17 	ldw	r7,-4(fp)
 100c708:	100dfd00 	call	100dfd0 <epcs_read_buffer>
 100c70c:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 100c710:	e0fffa17 	ldw	r3,-24(fp)
 100c714:	e0bfff17 	ldw	r2,-4(fp)
 100c718:	1880011e 	bne	r3,r2,100c720 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 100c71c:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 100c720:	e0bffa17 	ldw	r2,-24(fp)
}
 100c724:	e037883a 	mov	sp,fp
 100c728:	dfc00117 	ldw	ra,4(sp)
 100c72c:	df000017 	ldw	fp,0(sp)
 100c730:	dec00204 	addi	sp,sp,8
 100c734:	f800283a 	ret

0100c738 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100c738:	defffa04 	addi	sp,sp,-24
 100c73c:	dfc00515 	stw	ra,20(sp)
 100c740:	df000415 	stw	fp,16(sp)
 100c744:	df000404 	addi	fp,sp,16
 100c748:	e13ffd15 	stw	r4,-12(fp)
 100c74c:	e17ffe15 	stw	r5,-8(fp)
 100c750:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c754:	e0bffd17 	ldw	r2,-12(fp)
 100c758:	10800017 	ldw	r2,0(r2)
 100c75c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100c760:	e0bffc17 	ldw	r2,-16(fp)
 100c764:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 100c768:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100c76c:	10800217 	ldw	r2,8(r2)
 100c770:	1809883a 	mov	r4,r3
 100c774:	e17ffe17 	ldw	r5,-8(fp)
 100c778:	e1bfff17 	ldw	r6,-4(fp)
 100c77c:	100f883a 	mov	r7,r2
 100c780:	100cd600 	call	100cd60 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100c784:	e037883a 	mov	sp,fp
 100c788:	dfc00117 	ldw	ra,4(sp)
 100c78c:	df000017 	ldw	fp,0(sp)
 100c790:	dec00204 	addi	sp,sp,8
 100c794:	f800283a 	ret

0100c798 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100c798:	defffa04 	addi	sp,sp,-24
 100c79c:	dfc00515 	stw	ra,20(sp)
 100c7a0:	df000415 	stw	fp,16(sp)
 100c7a4:	df000404 	addi	fp,sp,16
 100c7a8:	e13ffd15 	stw	r4,-12(fp)
 100c7ac:	e17ffe15 	stw	r5,-8(fp)
 100c7b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c7b4:	e0bffd17 	ldw	r2,-12(fp)
 100c7b8:	10800017 	ldw	r2,0(r2)
 100c7bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100c7c0:	e0bffc17 	ldw	r2,-16(fp)
 100c7c4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 100c7c8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100c7cc:	10800217 	ldw	r2,8(r2)
 100c7d0:	1809883a 	mov	r4,r3
 100c7d4:	e17ffe17 	ldw	r5,-8(fp)
 100c7d8:	e1bfff17 	ldw	r6,-4(fp)
 100c7dc:	100f883a 	mov	r7,r2
 100c7e0:	100cf780 	call	100cf78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100c7e4:	e037883a 	mov	sp,fp
 100c7e8:	dfc00117 	ldw	ra,4(sp)
 100c7ec:	df000017 	ldw	fp,0(sp)
 100c7f0:	dec00204 	addi	sp,sp,8
 100c7f4:	f800283a 	ret

0100c7f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100c7f8:	defffc04 	addi	sp,sp,-16
 100c7fc:	dfc00315 	stw	ra,12(sp)
 100c800:	df000215 	stw	fp,8(sp)
 100c804:	df000204 	addi	fp,sp,8
 100c808:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100c80c:	e0bfff17 	ldw	r2,-4(fp)
 100c810:	10800017 	ldw	r2,0(r2)
 100c814:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100c818:	e0bffe17 	ldw	r2,-8(fp)
 100c81c:	10c00a04 	addi	r3,r2,40
 100c820:	e0bfff17 	ldw	r2,-4(fp)
 100c824:	10800217 	ldw	r2,8(r2)
 100c828:	1809883a 	mov	r4,r3
 100c82c:	100b883a 	mov	r5,r2
 100c830:	100cc040 	call	100cc04 <altera_avalon_jtag_uart_close>
}
 100c834:	e037883a 	mov	sp,fp
 100c838:	dfc00117 	ldw	ra,4(sp)
 100c83c:	df000017 	ldw	fp,0(sp)
 100c840:	dec00204 	addi	sp,sp,8
 100c844:	f800283a 	ret

0100c848 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100c848:	defffa04 	addi	sp,sp,-24
 100c84c:	dfc00515 	stw	ra,20(sp)
 100c850:	df000415 	stw	fp,16(sp)
 100c854:	df000404 	addi	fp,sp,16
 100c858:	e13ffd15 	stw	r4,-12(fp)
 100c85c:	e17ffe15 	stw	r5,-8(fp)
 100c860:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100c864:	e0bffd17 	ldw	r2,-12(fp)
 100c868:	10800017 	ldw	r2,0(r2)
 100c86c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100c870:	e0bffc17 	ldw	r2,-16(fp)
 100c874:	10800a04 	addi	r2,r2,40
 100c878:	1009883a 	mov	r4,r2
 100c87c:	e17ffe17 	ldw	r5,-8(fp)
 100c880:	e1bfff17 	ldw	r6,-4(fp)
 100c884:	100cc6c0 	call	100cc6c <altera_avalon_jtag_uart_ioctl>
}
 100c888:	e037883a 	mov	sp,fp
 100c88c:	dfc00117 	ldw	ra,4(sp)
 100c890:	df000017 	ldw	fp,0(sp)
 100c894:	dec00204 	addi	sp,sp,8
 100c898:	f800283a 	ret

0100c89c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100c89c:	defffa04 	addi	sp,sp,-24
 100c8a0:	dfc00515 	stw	ra,20(sp)
 100c8a4:	df000415 	stw	fp,16(sp)
 100c8a8:	df000404 	addi	fp,sp,16
 100c8ac:	e13ffd15 	stw	r4,-12(fp)
 100c8b0:	e17ffe15 	stw	r5,-8(fp)
 100c8b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100c8b8:	e0bffd17 	ldw	r2,-12(fp)
 100c8bc:	00c00044 	movi	r3,1
 100c8c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100c8c4:	e0bffd17 	ldw	r2,-12(fp)
 100c8c8:	10800017 	ldw	r2,0(r2)
 100c8cc:	10800104 	addi	r2,r2,4
 100c8d0:	e0fffd17 	ldw	r3,-12(fp)
 100c8d4:	18c00817 	ldw	r3,32(r3)
 100c8d8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100c8dc:	e0fffe17 	ldw	r3,-8(fp)
 100c8e0:	e0bfff17 	ldw	r2,-4(fp)
 100c8e4:	d8000015 	stw	zero,0(sp)
 100c8e8:	1809883a 	mov	r4,r3
 100c8ec:	100b883a 	mov	r5,r2
 100c8f0:	01804074 	movhi	r6,257
 100c8f4:	31b25704 	addi	r6,r6,-13988
 100c8f8:	e1fffd17 	ldw	r7,-12(fp)
 100c8fc:	100eb9c0 	call	100eb9c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100c900:	e0bffd17 	ldw	r2,-12(fp)
 100c904:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100c908:	e0bffd17 	ldw	r2,-12(fp)
 100c90c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100c910:	00804074 	movhi	r2,257
 100c914:	10860304 	addi	r2,r2,6156
 100c918:	10800017 	ldw	r2,0(r2)
 100c91c:	1809883a 	mov	r4,r3
 100c920:	100b883a 	mov	r5,r2
 100c924:	01804074 	movhi	r6,257
 100c928:	31b2d804 	addi	r6,r6,-13472
 100c92c:	e1fffd17 	ldw	r7,-12(fp)
 100c930:	100e4300 	call	100e430 <alt_alarm_start>
 100c934:	1000040e 	bge	r2,zero,100c948 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100c938:	e0bffd17 	ldw	r2,-12(fp)
 100c93c:	00e00034 	movhi	r3,32768
 100c940:	18ffffc4 	addi	r3,r3,-1
 100c944:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100c948:	e037883a 	mov	sp,fp
 100c94c:	dfc00117 	ldw	ra,4(sp)
 100c950:	df000017 	ldw	fp,0(sp)
 100c954:	dec00204 	addi	sp,sp,8
 100c958:	f800283a 	ret

0100c95c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100c95c:	defff804 	addi	sp,sp,-32
 100c960:	df000715 	stw	fp,28(sp)
 100c964:	df000704 	addi	fp,sp,28
 100c968:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100c96c:	e0bfff17 	ldw	r2,-4(fp)
 100c970:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100c974:	e0bffb17 	ldw	r2,-20(fp)
 100c978:	10800017 	ldw	r2,0(r2)
 100c97c:	e0bffc15 	stw	r2,-16(fp)
 100c980:	00000106 	br	100c988 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 100c984:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100c988:	e0bffc17 	ldw	r2,-16(fp)
 100c98c:	10800104 	addi	r2,r2,4
 100c990:	10800037 	ldwio	r2,0(r2)
 100c994:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100c998:	e0bffd17 	ldw	r2,-12(fp)
 100c99c:	1080c00c 	andi	r2,r2,768
 100c9a0:	10006a26 	beq	r2,zero,100cb4c <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100c9a4:	e0bffd17 	ldw	r2,-12(fp)
 100c9a8:	1080400c 	andi	r2,r2,256
 100c9ac:	10003326 	beq	r2,zero,100ca7c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100c9b0:	00800074 	movhi	r2,1
 100c9b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100c9b8:	e0bffb17 	ldw	r2,-20(fp)
 100c9bc:	10800a17 	ldw	r2,40(r2)
 100c9c0:	10800044 	addi	r2,r2,1
 100c9c4:	1081ffcc 	andi	r2,r2,2047
 100c9c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100c9cc:	e0bffb17 	ldw	r2,-20(fp)
 100c9d0:	10c00b17 	ldw	r3,44(r2)
 100c9d4:	e0bffe17 	ldw	r2,-8(fp)
 100c9d8:	18801426 	beq	r3,r2,100ca2c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100c9dc:	e0bffc17 	ldw	r2,-16(fp)
 100c9e0:	10800037 	ldwio	r2,0(r2)
 100c9e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100c9e8:	e0bff917 	ldw	r2,-28(fp)
 100c9ec:	10a0000c 	andi	r2,r2,32768
 100c9f0:	10001026 	beq	r2,zero,100ca34 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100c9f4:	e0bffb17 	ldw	r2,-20(fp)
 100c9f8:	10800a17 	ldw	r2,40(r2)
 100c9fc:	e0fff917 	ldw	r3,-28(fp)
 100ca00:	e13ffb17 	ldw	r4,-20(fp)
 100ca04:	2085883a 	add	r2,r4,r2
 100ca08:	10800e04 	addi	r2,r2,56
 100ca0c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ca10:	e0bffb17 	ldw	r2,-20(fp)
 100ca14:	10800a17 	ldw	r2,40(r2)
 100ca18:	10800044 	addi	r2,r2,1
 100ca1c:	10c1ffcc 	andi	r3,r2,2047
 100ca20:	e0bffb17 	ldw	r2,-20(fp)
 100ca24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100ca28:	003fe306 	br	100c9b8 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100ca2c:	0001883a 	nop
 100ca30:	00000106 	br	100ca38 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100ca34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100ca38:	e0bff917 	ldw	r2,-28(fp)
 100ca3c:	10bfffec 	andhi	r2,r2,65535
 100ca40:	10000e26 	beq	r2,zero,100ca7c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ca44:	e0bffb17 	ldw	r2,-20(fp)
 100ca48:	10c00817 	ldw	r3,32(r2)
 100ca4c:	00bfff84 	movi	r2,-2
 100ca50:	1886703a 	and	r3,r3,r2
 100ca54:	e0bffb17 	ldw	r2,-20(fp)
 100ca58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100ca5c:	e0bffc17 	ldw	r2,-16(fp)
 100ca60:	10800104 	addi	r2,r2,4
 100ca64:	e0fffb17 	ldw	r3,-20(fp)
 100ca68:	18c00817 	ldw	r3,32(r3)
 100ca6c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ca70:	e0bffc17 	ldw	r2,-16(fp)
 100ca74:	10800104 	addi	r2,r2,4
 100ca78:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100ca7c:	e0bffd17 	ldw	r2,-12(fp)
 100ca80:	1080800c 	andi	r2,r2,512
 100ca84:	103fbf26 	beq	r2,zero,100c984 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100ca88:	e0bffd17 	ldw	r2,-12(fp)
 100ca8c:	1004d43a 	srli	r2,r2,16
 100ca90:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ca94:	00001406 	br	100cae8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100ca98:	e0bffc17 	ldw	r2,-16(fp)
 100ca9c:	e0fffb17 	ldw	r3,-20(fp)
 100caa0:	18c00d17 	ldw	r3,52(r3)
 100caa4:	e13ffb17 	ldw	r4,-20(fp)
 100caa8:	20c7883a 	add	r3,r4,r3
 100caac:	18c20e04 	addi	r3,r3,2104
 100cab0:	18c00003 	ldbu	r3,0(r3)
 100cab4:	18c03fcc 	andi	r3,r3,255
 100cab8:	18c0201c 	xori	r3,r3,128
 100cabc:	18ffe004 	addi	r3,r3,-128
 100cac0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100cac4:	e0bffb17 	ldw	r2,-20(fp)
 100cac8:	10800d17 	ldw	r2,52(r2)
 100cacc:	10800044 	addi	r2,r2,1
 100cad0:	10c1ffcc 	andi	r3,r2,2047
 100cad4:	e0bffb17 	ldw	r2,-20(fp)
 100cad8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100cadc:	e0bffa17 	ldw	r2,-24(fp)
 100cae0:	10bfffc4 	addi	r2,r2,-1
 100cae4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100cae8:	e0bffa17 	ldw	r2,-24(fp)
 100caec:	10000526 	beq	r2,zero,100cb04 <altera_avalon_jtag_uart_irq+0x1a8>
 100caf0:	e0bffb17 	ldw	r2,-20(fp)
 100caf4:	10c00d17 	ldw	r3,52(r2)
 100caf8:	e0bffb17 	ldw	r2,-20(fp)
 100cafc:	10800c17 	ldw	r2,48(r2)
 100cb00:	18bfe51e 	bne	r3,r2,100ca98 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100cb04:	e0bffa17 	ldw	r2,-24(fp)
 100cb08:	103f9e26 	beq	r2,zero,100c984 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100cb0c:	e0bffb17 	ldw	r2,-20(fp)
 100cb10:	10c00817 	ldw	r3,32(r2)
 100cb14:	00bfff44 	movi	r2,-3
 100cb18:	1886703a 	and	r3,r3,r2
 100cb1c:	e0bffb17 	ldw	r2,-20(fp)
 100cb20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100cb24:	e0bffb17 	ldw	r2,-20(fp)
 100cb28:	10800017 	ldw	r2,0(r2)
 100cb2c:	10800104 	addi	r2,r2,4
 100cb30:	e0fffb17 	ldw	r3,-20(fp)
 100cb34:	18c00817 	ldw	r3,32(r3)
 100cb38:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100cb3c:	e0bffc17 	ldw	r2,-16(fp)
 100cb40:	10800104 	addi	r2,r2,4
 100cb44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100cb48:	003f8e06 	br	100c984 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 100cb4c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 100cb50:	e037883a 	mov	sp,fp
 100cb54:	df000017 	ldw	fp,0(sp)
 100cb58:	dec00104 	addi	sp,sp,4
 100cb5c:	f800283a 	ret

0100cb60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100cb60:	defffc04 	addi	sp,sp,-16
 100cb64:	df000315 	stw	fp,12(sp)
 100cb68:	df000304 	addi	fp,sp,12
 100cb6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100cb70:	e0bfff17 	ldw	r2,-4(fp)
 100cb74:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100cb78:	e0bffd17 	ldw	r2,-12(fp)
 100cb7c:	10800017 	ldw	r2,0(r2)
 100cb80:	10800104 	addi	r2,r2,4
 100cb84:	10800037 	ldwio	r2,0(r2)
 100cb88:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100cb8c:	e0bffe17 	ldw	r2,-8(fp)
 100cb90:	1081000c 	andi	r2,r2,1024
 100cb94:	10000a26 	beq	r2,zero,100cbc0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100cb98:	e0bffd17 	ldw	r2,-12(fp)
 100cb9c:	10800017 	ldw	r2,0(r2)
 100cba0:	10800104 	addi	r2,r2,4
 100cba4:	e0fffd17 	ldw	r3,-12(fp)
 100cba8:	18c00817 	ldw	r3,32(r3)
 100cbac:	18c10014 	ori	r3,r3,1024
 100cbb0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100cbb4:	e0bffd17 	ldw	r2,-12(fp)
 100cbb8:	10000915 	stw	zero,36(r2)
 100cbbc:	00000a06 	br	100cbe8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100cbc0:	e0bffd17 	ldw	r2,-12(fp)
 100cbc4:	10800917 	ldw	r2,36(r2)
 100cbc8:	00e00034 	movhi	r3,32768
 100cbcc:	18ffff04 	addi	r3,r3,-4
 100cbd0:	18800536 	bltu	r3,r2,100cbe8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 100cbd4:	e0bffd17 	ldw	r2,-12(fp)
 100cbd8:	10800917 	ldw	r2,36(r2)
 100cbdc:	10c00044 	addi	r3,r2,1
 100cbe0:	e0bffd17 	ldw	r2,-12(fp)
 100cbe4:	10c00915 	stw	r3,36(r2)
 100cbe8:	00804074 	movhi	r2,257
 100cbec:	10860304 	addi	r2,r2,6156
 100cbf0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100cbf4:	e037883a 	mov	sp,fp
 100cbf8:	df000017 	ldw	fp,0(sp)
 100cbfc:	dec00104 	addi	sp,sp,4
 100cc00:	f800283a 	ret

0100cc04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100cc04:	defffd04 	addi	sp,sp,-12
 100cc08:	df000215 	stw	fp,8(sp)
 100cc0c:	df000204 	addi	fp,sp,8
 100cc10:	e13ffe15 	stw	r4,-8(fp)
 100cc14:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100cc18:	00000506 	br	100cc30 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100cc1c:	e0bfff17 	ldw	r2,-4(fp)
 100cc20:	1090000c 	andi	r2,r2,16384
 100cc24:	10000226 	beq	r2,zero,100cc30 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100cc28:	00bffd44 	movi	r2,-11
 100cc2c:	00000b06 	br	100cc5c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100cc30:	e0bffe17 	ldw	r2,-8(fp)
 100cc34:	10c00d17 	ldw	r3,52(r2)
 100cc38:	e0bffe17 	ldw	r2,-8(fp)
 100cc3c:	10800c17 	ldw	r2,48(r2)
 100cc40:	18800526 	beq	r3,r2,100cc58 <altera_avalon_jtag_uart_close+0x54>
 100cc44:	e0bffe17 	ldw	r2,-8(fp)
 100cc48:	10c00917 	ldw	r3,36(r2)
 100cc4c:	e0bffe17 	ldw	r2,-8(fp)
 100cc50:	10800117 	ldw	r2,4(r2)
 100cc54:	18bff136 	bltu	r3,r2,100cc1c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100cc58:	0005883a 	mov	r2,zero
}
 100cc5c:	e037883a 	mov	sp,fp
 100cc60:	df000017 	ldw	fp,0(sp)
 100cc64:	dec00104 	addi	sp,sp,4
 100cc68:	f800283a 	ret

0100cc6c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100cc6c:	defffa04 	addi	sp,sp,-24
 100cc70:	df000515 	stw	fp,20(sp)
 100cc74:	df000504 	addi	fp,sp,20
 100cc78:	e13ffd15 	stw	r4,-12(fp)
 100cc7c:	e17ffe15 	stw	r5,-8(fp)
 100cc80:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 100cc84:	00bff9c4 	movi	r2,-25
 100cc88:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 100cc8c:	e0bffe17 	ldw	r2,-8(fp)
 100cc90:	10da8060 	cmpeqi	r3,r2,27137
 100cc94:	1800031e 	bne	r3,zero,100cca4 <altera_avalon_jtag_uart_ioctl+0x38>
 100cc98:	109a80a0 	cmpeqi	r2,r2,27138
 100cc9c:	1000181e 	bne	r2,zero,100cd00 <altera_avalon_jtag_uart_ioctl+0x94>
 100cca0:	00002606 	br	100cd3c <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100cca4:	e0bffd17 	ldw	r2,-12(fp)
 100cca8:	10c00117 	ldw	r3,4(r2)
 100ccac:	00a00034 	movhi	r2,32768
 100ccb0:	10bfffc4 	addi	r2,r2,-1
 100ccb4:	18802226 	beq	r3,r2,100cd40 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 100ccb8:	e0bfff17 	ldw	r2,-4(fp)
 100ccbc:	10800017 	ldw	r2,0(r2)
 100ccc0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100ccc4:	e0bffc17 	ldw	r2,-16(fp)
 100ccc8:	10800090 	cmplti	r2,r2,2
 100cccc:	1000061e 	bne	r2,zero,100cce8 <altera_avalon_jtag_uart_ioctl+0x7c>
 100ccd0:	e0fffc17 	ldw	r3,-16(fp)
 100ccd4:	00a00034 	movhi	r2,32768
 100ccd8:	10bfffc4 	addi	r2,r2,-1
 100ccdc:	18800226 	beq	r3,r2,100cce8 <altera_avalon_jtag_uart_ioctl+0x7c>
 100cce0:	e0bffc17 	ldw	r2,-16(fp)
 100cce4:	00000206 	br	100ccf0 <altera_avalon_jtag_uart_ioctl+0x84>
 100cce8:	00a00034 	movhi	r2,32768
 100ccec:	10bfff84 	addi	r2,r2,-2
 100ccf0:	e0fffd17 	ldw	r3,-12(fp)
 100ccf4:	18800115 	stw	r2,4(r3)
      rc = 0;
 100ccf8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100ccfc:	00001006 	br	100cd40 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100cd00:	e0bffd17 	ldw	r2,-12(fp)
 100cd04:	10c00117 	ldw	r3,4(r2)
 100cd08:	00a00034 	movhi	r2,32768
 100cd0c:	10bfffc4 	addi	r2,r2,-1
 100cd10:	18800d26 	beq	r3,r2,100cd48 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100cd14:	e0bffd17 	ldw	r2,-12(fp)
 100cd18:	10c00917 	ldw	r3,36(r2)
 100cd1c:	e0bffd17 	ldw	r2,-12(fp)
 100cd20:	10800117 	ldw	r2,4(r2)
 100cd24:	1885803a 	cmpltu	r2,r3,r2
 100cd28:	10c03fcc 	andi	r3,r2,255
 100cd2c:	e0bfff17 	ldw	r2,-4(fp)
 100cd30:	10c00015 	stw	r3,0(r2)
      rc = 0;
 100cd34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 100cd38:	00000306 	br	100cd48 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 100cd3c:	00000306 	br	100cd4c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 100cd40:	0001883a 	nop
 100cd44:	00000106 	br	100cd4c <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 100cd48:	0001883a 	nop

  default:
    break;
  }

  return rc;
 100cd4c:	e0bffb17 	ldw	r2,-20(fp)
}
 100cd50:	e037883a 	mov	sp,fp
 100cd54:	df000017 	ldw	fp,0(sp)
 100cd58:	dec00104 	addi	sp,sp,4
 100cd5c:	f800283a 	ret

0100cd60 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100cd60:	defff304 	addi	sp,sp,-52
 100cd64:	dfc00c15 	stw	ra,48(sp)
 100cd68:	df000b15 	stw	fp,44(sp)
 100cd6c:	df000b04 	addi	fp,sp,44
 100cd70:	e13ffc15 	stw	r4,-16(fp)
 100cd74:	e17ffd15 	stw	r5,-12(fp)
 100cd78:	e1bffe15 	stw	r6,-8(fp)
 100cd7c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 100cd80:	e0bffd17 	ldw	r2,-12(fp)
 100cd84:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100cd88:	00004706 	br	100cea8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100cd8c:	e0bffc17 	ldw	r2,-16(fp)
 100cd90:	10800a17 	ldw	r2,40(r2)
 100cd94:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100cd98:	e0bffc17 	ldw	r2,-16(fp)
 100cd9c:	10800b17 	ldw	r2,44(r2)
 100cda0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 100cda4:	e0fff717 	ldw	r3,-36(fp)
 100cda8:	e0bff817 	ldw	r2,-32(fp)
 100cdac:	18800536 	bltu	r3,r2,100cdc4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100cdb0:	e0fff717 	ldw	r3,-36(fp)
 100cdb4:	e0bff817 	ldw	r2,-32(fp)
 100cdb8:	1885c83a 	sub	r2,r3,r2
 100cdbc:	e0bff615 	stw	r2,-40(fp)
 100cdc0:	00000406 	br	100cdd4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100cdc4:	00c20004 	movi	r3,2048
 100cdc8:	e0bff817 	ldw	r2,-32(fp)
 100cdcc:	1885c83a 	sub	r2,r3,r2
 100cdd0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100cdd4:	e0bff617 	ldw	r2,-40(fp)
 100cdd8:	10001e26 	beq	r2,zero,100ce54 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 100cddc:	e0fffe17 	ldw	r3,-8(fp)
 100cde0:	e0bff617 	ldw	r2,-40(fp)
 100cde4:	1880022e 	bgeu	r3,r2,100cdf0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 100cde8:	e0bffe17 	ldw	r2,-8(fp)
 100cdec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100cdf0:	e0bff817 	ldw	r2,-32(fp)
 100cdf4:	10800e04 	addi	r2,r2,56
 100cdf8:	e0fffc17 	ldw	r3,-16(fp)
 100cdfc:	1885883a 	add	r2,r3,r2
 100ce00:	e13ff517 	ldw	r4,-44(fp)
 100ce04:	100b883a 	mov	r5,r2
 100ce08:	e1bff617 	ldw	r6,-40(fp)
 100ce0c:	10024cc0 	call	10024cc <memcpy>
      ptr   += n;
 100ce10:	e0fff517 	ldw	r3,-44(fp)
 100ce14:	e0bff617 	ldw	r2,-40(fp)
 100ce18:	1885883a 	add	r2,r3,r2
 100ce1c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 100ce20:	e0fffe17 	ldw	r3,-8(fp)
 100ce24:	e0bff617 	ldw	r2,-40(fp)
 100ce28:	1885c83a 	sub	r2,r3,r2
 100ce2c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ce30:	e0fff817 	ldw	r3,-32(fp)
 100ce34:	e0bff617 	ldw	r2,-40(fp)
 100ce38:	1885883a 	add	r2,r3,r2
 100ce3c:	10c1ffcc 	andi	r3,r2,2047
 100ce40:	e0bffc17 	ldw	r2,-16(fp)
 100ce44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100ce48:	e0bffe17 	ldw	r2,-8(fp)
 100ce4c:	00bfcf16 	blt	zero,r2,100cd8c <altera_avalon_jtag_uart_read+0x2c>
 100ce50:	00000106 	br	100ce58 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 100ce54:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 100ce58:	e0fff517 	ldw	r3,-44(fp)
 100ce5c:	e0bffd17 	ldw	r2,-12(fp)
 100ce60:	1880141e 	bne	r3,r2,100ceb4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100ce64:	e0bfff17 	ldw	r2,-4(fp)
 100ce68:	1090000c 	andi	r2,r2,16384
 100ce6c:	1000131e 	bne	r2,zero,100cebc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100ce70:	0001883a 	nop
 100ce74:	e0bffc17 	ldw	r2,-16(fp)
 100ce78:	10c00a17 	ldw	r3,40(r2)
 100ce7c:	e0bff717 	ldw	r2,-36(fp)
 100ce80:	1880051e 	bne	r3,r2,100ce98 <altera_avalon_jtag_uart_read+0x138>
 100ce84:	e0bffc17 	ldw	r2,-16(fp)
 100ce88:	10c00917 	ldw	r3,36(r2)
 100ce8c:	e0bffc17 	ldw	r2,-16(fp)
 100ce90:	10800117 	ldw	r2,4(r2)
 100ce94:	18bff736 	bltu	r3,r2,100ce74 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100ce98:	e0bffc17 	ldw	r2,-16(fp)
 100ce9c:	10c00a17 	ldw	r3,40(r2)
 100cea0:	e0bff717 	ldw	r2,-36(fp)
 100cea4:	18800726 	beq	r3,r2,100cec4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100cea8:	e0bffe17 	ldw	r2,-8(fp)
 100ceac:	00bfb716 	blt	zero,r2,100cd8c <altera_avalon_jtag_uart_read+0x2c>
 100ceb0:	00000506 	br	100cec8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 100ceb4:	0001883a 	nop
 100ceb8:	00000306 	br	100cec8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 100cebc:	0001883a 	nop
 100cec0:	00000106 	br	100cec8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 100cec4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100cec8:	e0fff517 	ldw	r3,-44(fp)
 100cecc:	e0bffd17 	ldw	r2,-12(fp)
 100ced0:	18801726 	beq	r3,r2,100cf30 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ced4:	0005303a 	rdctl	r2,status
 100ced8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cedc:	e0fffa17 	ldw	r3,-24(fp)
 100cee0:	00bfff84 	movi	r2,-2
 100cee4:	1884703a 	and	r2,r3,r2
 100cee8:	1001703a 	wrctl	status,r2
  
  return context;
 100ceec:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100cef0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100cef4:	e0bffc17 	ldw	r2,-16(fp)
 100cef8:	10800817 	ldw	r2,32(r2)
 100cefc:	10c00054 	ori	r3,r2,1
 100cf00:	e0bffc17 	ldw	r2,-16(fp)
 100cf04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100cf08:	e0bffc17 	ldw	r2,-16(fp)
 100cf0c:	10800017 	ldw	r2,0(r2)
 100cf10:	10800104 	addi	r2,r2,4
 100cf14:	e0fffc17 	ldw	r3,-16(fp)
 100cf18:	18c00817 	ldw	r3,32(r3)
 100cf1c:	10c00035 	stwio	r3,0(r2)
 100cf20:	e0bff917 	ldw	r2,-28(fp)
 100cf24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cf28:	e0bffb17 	ldw	r2,-20(fp)
 100cf2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100cf30:	e0fff517 	ldw	r3,-44(fp)
 100cf34:	e0bffd17 	ldw	r2,-12(fp)
 100cf38:	18800426 	beq	r3,r2,100cf4c <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 100cf3c:	e0fff517 	ldw	r3,-44(fp)
 100cf40:	e0bffd17 	ldw	r2,-12(fp)
 100cf44:	1885c83a 	sub	r2,r3,r2
 100cf48:	00000606 	br	100cf64 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 100cf4c:	e0bfff17 	ldw	r2,-4(fp)
 100cf50:	1090000c 	andi	r2,r2,16384
 100cf54:	10000226 	beq	r2,zero,100cf60 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 100cf58:	00bffd44 	movi	r2,-11
 100cf5c:	00000106 	br	100cf64 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 100cf60:	00bffec4 	movi	r2,-5
}
 100cf64:	e037883a 	mov	sp,fp
 100cf68:	dfc00117 	ldw	ra,4(sp)
 100cf6c:	df000017 	ldw	fp,0(sp)
 100cf70:	dec00204 	addi	sp,sp,8
 100cf74:	f800283a 	ret

0100cf78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100cf78:	defff304 	addi	sp,sp,-52
 100cf7c:	dfc00c15 	stw	ra,48(sp)
 100cf80:	df000b15 	stw	fp,44(sp)
 100cf84:	df000b04 	addi	fp,sp,44
 100cf88:	e13ffc15 	stw	r4,-16(fp)
 100cf8c:	e17ffd15 	stw	r5,-12(fp)
 100cf90:	e1bffe15 	stw	r6,-8(fp)
 100cf94:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100cf98:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100cf9c:	e0bffd17 	ldw	r2,-12(fp)
 100cfa0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100cfa4:	00003706 	br	100d084 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100cfa8:	e0bffc17 	ldw	r2,-16(fp)
 100cfac:	10800c17 	ldw	r2,48(r2)
 100cfb0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 100cfb4:	e0bffc17 	ldw	r2,-16(fp)
 100cfb8:	10800d17 	ldw	r2,52(r2)
 100cfbc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 100cfc0:	e0fff817 	ldw	r3,-32(fp)
 100cfc4:	e0bff517 	ldw	r2,-44(fp)
 100cfc8:	1880062e 	bgeu	r3,r2,100cfe4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100cfcc:	e0fff517 	ldw	r3,-44(fp)
 100cfd0:	e0bff817 	ldw	r2,-32(fp)
 100cfd4:	1885c83a 	sub	r2,r3,r2
 100cfd8:	10bfffc4 	addi	r2,r2,-1
 100cfdc:	e0bff615 	stw	r2,-40(fp)
 100cfe0:	00000b06 	br	100d010 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 100cfe4:	e0bff517 	ldw	r2,-44(fp)
 100cfe8:	10000526 	beq	r2,zero,100d000 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100cfec:	00c20004 	movi	r3,2048
 100cff0:	e0bff817 	ldw	r2,-32(fp)
 100cff4:	1885c83a 	sub	r2,r3,r2
 100cff8:	e0bff615 	stw	r2,-40(fp)
 100cffc:	00000406 	br	100d010 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100d000:	00c1ffc4 	movi	r3,2047
 100d004:	e0bff817 	ldw	r2,-32(fp)
 100d008:	1885c83a 	sub	r2,r3,r2
 100d00c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 100d010:	e0bff617 	ldw	r2,-40(fp)
 100d014:	10001e26 	beq	r2,zero,100d090 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 100d018:	e0fffe17 	ldw	r3,-8(fp)
 100d01c:	e0bff617 	ldw	r2,-40(fp)
 100d020:	1880022e 	bgeu	r3,r2,100d02c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 100d024:	e0bffe17 	ldw	r2,-8(fp)
 100d028:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100d02c:	e0bff817 	ldw	r2,-32(fp)
 100d030:	10820e04 	addi	r2,r2,2104
 100d034:	e0fffc17 	ldw	r3,-16(fp)
 100d038:	1885883a 	add	r2,r3,r2
 100d03c:	1009883a 	mov	r4,r2
 100d040:	e17ffd17 	ldw	r5,-12(fp)
 100d044:	e1bff617 	ldw	r6,-40(fp)
 100d048:	10024cc0 	call	10024cc <memcpy>
      ptr   += n;
 100d04c:	e0fffd17 	ldw	r3,-12(fp)
 100d050:	e0bff617 	ldw	r2,-40(fp)
 100d054:	1885883a 	add	r2,r3,r2
 100d058:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 100d05c:	e0fffe17 	ldw	r3,-8(fp)
 100d060:	e0bff617 	ldw	r2,-40(fp)
 100d064:	1885c83a 	sub	r2,r3,r2
 100d068:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100d06c:	e0fff817 	ldw	r3,-32(fp)
 100d070:	e0bff617 	ldw	r2,-40(fp)
 100d074:	1885883a 	add	r2,r3,r2
 100d078:	10c1ffcc 	andi	r3,r2,2047
 100d07c:	e0bffc17 	ldw	r2,-16(fp)
 100d080:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100d084:	e0bffe17 	ldw	r2,-8(fp)
 100d088:	00bfc716 	blt	zero,r2,100cfa8 <altera_avalon_jtag_uart_write+0x30>
 100d08c:	00000106 	br	100d094 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 100d090:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d094:	0005303a 	rdctl	r2,status
 100d098:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d09c:	e0fffa17 	ldw	r3,-24(fp)
 100d0a0:	00bfff84 	movi	r2,-2
 100d0a4:	1884703a 	and	r2,r3,r2
 100d0a8:	1001703a 	wrctl	status,r2
  
  return context;
 100d0ac:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100d0b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100d0b4:	e0bffc17 	ldw	r2,-16(fp)
 100d0b8:	10800817 	ldw	r2,32(r2)
 100d0bc:	10c00094 	ori	r3,r2,2
 100d0c0:	e0bffc17 	ldw	r2,-16(fp)
 100d0c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100d0c8:	e0bffc17 	ldw	r2,-16(fp)
 100d0cc:	10800017 	ldw	r2,0(r2)
 100d0d0:	10800104 	addi	r2,r2,4
 100d0d4:	e0fffc17 	ldw	r3,-16(fp)
 100d0d8:	18c00817 	ldw	r3,32(r3)
 100d0dc:	10c00035 	stwio	r3,0(r2)
 100d0e0:	e0bff917 	ldw	r2,-28(fp)
 100d0e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d0e8:	e0bffb17 	ldw	r2,-20(fp)
 100d0ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100d0f0:	e0bffe17 	ldw	r2,-8(fp)
 100d0f4:	0080110e 	bge	zero,r2,100d13c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100d0f8:	e0bfff17 	ldw	r2,-4(fp)
 100d0fc:	1090000c 	andi	r2,r2,16384
 100d100:	1000111e 	bne	r2,zero,100d148 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100d104:	0001883a 	nop
 100d108:	e0bffc17 	ldw	r2,-16(fp)
 100d10c:	10c00d17 	ldw	r3,52(r2)
 100d110:	e0bff517 	ldw	r2,-44(fp)
 100d114:	1880051e 	bne	r3,r2,100d12c <altera_avalon_jtag_uart_write+0x1b4>
 100d118:	e0bffc17 	ldw	r2,-16(fp)
 100d11c:	10c00917 	ldw	r3,36(r2)
 100d120:	e0bffc17 	ldw	r2,-16(fp)
 100d124:	10800117 	ldw	r2,4(r2)
 100d128:	18bff736 	bltu	r3,r2,100d108 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100d12c:	e0bffc17 	ldw	r2,-16(fp)
 100d130:	10c00d17 	ldw	r3,52(r2)
 100d134:	e0bff517 	ldw	r2,-44(fp)
 100d138:	18800526 	beq	r3,r2,100d150 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100d13c:	e0bffe17 	ldw	r2,-8(fp)
 100d140:	00bfd016 	blt	zero,r2,100d084 <altera_avalon_jtag_uart_write+0x10c>
 100d144:	00000306 	br	100d154 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 100d148:	0001883a 	nop
 100d14c:	00000106 	br	100d154 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 100d150:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100d154:	e0fffd17 	ldw	r3,-12(fp)
 100d158:	e0bff717 	ldw	r2,-36(fp)
 100d15c:	18800426 	beq	r3,r2,100d170 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 100d160:	e0fffd17 	ldw	r3,-12(fp)
 100d164:	e0bff717 	ldw	r2,-36(fp)
 100d168:	1885c83a 	sub	r2,r3,r2
 100d16c:	00000606 	br	100d188 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 100d170:	e0bfff17 	ldw	r2,-4(fp)
 100d174:	1090000c 	andi	r2,r2,16384
 100d178:	10000226 	beq	r2,zero,100d184 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 100d17c:	00bffd44 	movi	r2,-11
 100d180:	00000106 	br	100d188 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100d184:	00bffec4 	movi	r2,-5
}
 100d188:	e037883a 	mov	sp,fp
 100d18c:	dfc00117 	ldw	ra,4(sp)
 100d190:	df000017 	ldw	fp,0(sp)
 100d194:	dec00204 	addi	sp,sp,8
 100d198:	f800283a 	ret

0100d19c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100d19c:	defffa04 	addi	sp,sp,-24
 100d1a0:	dfc00515 	stw	ra,20(sp)
 100d1a4:	df000415 	stw	fp,16(sp)
 100d1a8:	df000404 	addi	fp,sp,16
 100d1ac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100d1b0:	0007883a 	mov	r3,zero
 100d1b4:	e0bfff17 	ldw	r2,-4(fp)
 100d1b8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100d1bc:	e0bfff17 	ldw	r2,-4(fp)
 100d1c0:	10800104 	addi	r2,r2,4
 100d1c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d1c8:	0005303a 	rdctl	r2,status
 100d1cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d1d0:	e0fffd17 	ldw	r3,-12(fp)
 100d1d4:	00bfff84 	movi	r2,-2
 100d1d8:	1884703a 	and	r2,r3,r2
 100d1dc:	1001703a 	wrctl	status,r2
  
  return context;
 100d1e0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100d1e4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 100d1e8:	100f0540 	call	100f054 <alt_tick>
 100d1ec:	e0bffc17 	ldw	r2,-16(fp)
 100d1f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d1f4:	e0bffe17 	ldw	r2,-8(fp)
 100d1f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100d1fc:	e037883a 	mov	sp,fp
 100d200:	dfc00117 	ldw	ra,4(sp)
 100d204:	df000017 	ldw	fp,0(sp)
 100d208:	dec00204 	addi	sp,sp,8
 100d20c:	f800283a 	ret

0100d210 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100d210:	defff804 	addi	sp,sp,-32
 100d214:	dfc00715 	stw	ra,28(sp)
 100d218:	df000615 	stw	fp,24(sp)
 100d21c:	df000604 	addi	fp,sp,24
 100d220:	e13ffc15 	stw	r4,-16(fp)
 100d224:	e17ffd15 	stw	r5,-12(fp)
 100d228:	e1bffe15 	stw	r6,-8(fp)
 100d22c:	e1ffff15 	stw	r7,-4(fp)
 100d230:	e0bfff17 	ldw	r2,-4(fp)
 100d234:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100d238:	00804074 	movhi	r2,257
 100d23c:	10860304 	addi	r2,r2,6156
 100d240:	10800017 	ldw	r2,0(r2)
 100d244:	1000041e 	bne	r2,zero,100d258 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 100d248:	00804074 	movhi	r2,257
 100d24c:	10860304 	addi	r2,r2,6156
 100d250:	e0fffb17 	ldw	r3,-20(fp)
 100d254:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100d258:	e0bffc17 	ldw	r2,-16(fp)
 100d25c:	10800104 	addi	r2,r2,4
 100d260:	00c001c4 	movi	r3,7
 100d264:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100d268:	d8000015 	stw	zero,0(sp)
 100d26c:	e13ffd17 	ldw	r4,-12(fp)
 100d270:	e17ffe17 	ldw	r5,-8(fp)
 100d274:	01804074 	movhi	r6,257
 100d278:	31b46704 	addi	r6,r6,-11876
 100d27c:	e1fffc17 	ldw	r7,-16(fp)
 100d280:	100eb9c0 	call	100eb9c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100d284:	e037883a 	mov	sp,fp
 100d288:	dfc00117 	ldw	ra,4(sp)
 100d28c:	df000017 	ldw	fp,0(sp)
 100d290:	dec00204 	addi	sp,sp,8
 100d294:	f800283a 	ret

0100d298 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 100d298:	defffe04 	addi	sp,sp,-8
 100d29c:	df000115 	stw	fp,4(sp)
 100d2a0:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 100d2a4:	00804074 	movhi	r2,257
 100d2a8:	10860004 	addi	r2,r2,6144
 100d2ac:	10800017 	ldw	r2,0(r2)
 100d2b0:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 100d2b4:	00804074 	movhi	r2,257
 100d2b8:	10860104 	addi	r2,r2,6148
 100d2bc:	10800017 	ldw	r2,0(r2)
 100d2c0:	1000021e 	bne	r2,zero,100d2cc <alt_timestamp_start+0x34>
  {
    return -1;
 100d2c4:	00bfffc4 	movi	r2,-1
 100d2c8:	00001906 	br	100d330 <alt_timestamp_start+0x98>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 100d2cc:	e0bfff17 	ldw	r2,-4(fp)
 100d2d0:	10800104 	addi	r2,r2,4
 100d2d4:	00c00204 	movi	r3,8
 100d2d8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
 100d2dc:	e0bfff17 	ldw	r2,-4(fp)
 100d2e0:	10800204 	addi	r2,r2,8
 100d2e4:	00ffffd4 	movui	r3,65535
 100d2e8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
 100d2ec:	e0bfff17 	ldw	r2,-4(fp)
 100d2f0:	10800304 	addi	r2,r2,12
 100d2f4:	00ffffd4 	movui	r3,65535
 100d2f8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
 100d2fc:	e0bfff17 	ldw	r2,-4(fp)
 100d300:	10800404 	addi	r2,r2,16
 100d304:	00ffffd4 	movui	r3,65535
 100d308:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
 100d30c:	e0bfff17 	ldw	r2,-4(fp)
 100d310:	10800504 	addi	r2,r2,20
 100d314:	00ffffd4 	movui	r3,65535
 100d318:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
 100d31c:	e0bfff17 	ldw	r2,-4(fp)
 100d320:	10800104 	addi	r2,r2,4
 100d324:	00c00104 	movi	r3,4
 100d328:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
 100d32c:	0005883a 	mov	r2,zero
}
 100d330:	e037883a 	mov	sp,fp
 100d334:	df000017 	ldw	fp,0(sp)
 100d338:	dec00104 	addi	sp,sp,4
 100d33c:	f800283a 	ret

0100d340 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 100d340:	deffec04 	addi	sp,sp,-80
 100d344:	df001315 	stw	fp,76(sp)
 100d348:	ddc01215 	stw	r23,72(sp)
 100d34c:	dd801115 	stw	r22,68(sp)
 100d350:	dd401015 	stw	r21,64(sp)
 100d354:	dd000f15 	stw	r20,60(sp)
 100d358:	dcc00e15 	stw	r19,56(sp)
 100d35c:	dc800d15 	stw	r18,52(sp)
 100d360:	dc400c15 	stw	r17,48(sp)
 100d364:	dc000b15 	stw	r16,44(sp)
 100d368:	df000b04 	addi	fp,sp,44

  void* base = altera_avalon_timer_ts_base;
 100d36c:	00804074 	movhi	r2,257
 100d370:	10860004 	addi	r2,r2,6144
 100d374:	10800017 	ldw	r2,0(r2)
 100d378:	e0bff515 	stw	r2,-44(fp)

  if (!altera_avalon_timer_ts_freq)
 100d37c:	00804074 	movhi	r2,257
 100d380:	10860104 	addi	r2,r2,6148
 100d384:	10800017 	ldw	r2,0(r2)
 100d388:	1000031e 	bne	r2,zero,100d398 <alt_timestamp+0x58>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
 100d38c:	017fffc4 	movi	r5,-1
 100d390:	01bfffc4 	movi	r6,-1
 100d394:	00004206 	br	100d4a0 <alt_timestamp+0x160>
    }
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
 100d398:	e0bff517 	ldw	r2,-44(fp)
 100d39c:	15c00604 	addi	r23,r2,24
 100d3a0:	0005883a 	mov	r2,zero
 100d3a4:	b8800035 	stwio	r2,0(r23)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
 100d3a8:	e0bff517 	ldw	r2,-44(fp)
 100d3ac:	10800604 	addi	r2,r2,24
 100d3b0:	10800037 	ldwio	r2,0(r2)
 100d3b4:	e0bffe15 	stw	r2,-8(fp)
 100d3b8:	0005883a 	mov	r2,zero
 100d3bc:	e0bfff15 	stw	r2,-4(fp)
 100d3c0:	e0fffe17 	ldw	r3,-8(fp)
 100d3c4:	18bfffcc 	andi	r2,r3,65535
 100d3c8:	e0bff615 	stw	r2,-40(fp)
 100d3cc:	e0ffff17 	ldw	r3,-4(fp)
 100d3d0:	1804703a 	and	r2,r3,zero
 100d3d4:	e0bff715 	stw	r2,-36(fp)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
 100d3d8:	e0bff517 	ldw	r2,-44(fp)
 100d3dc:	10800704 	addi	r2,r2,28
 100d3e0:	10800037 	ldwio	r2,0(r2)
 100d3e4:	102b883a 	mov	r21,r2
 100d3e8:	002d883a 	mov	r22,zero
 100d3ec:	a8bfffcc 	andi	r2,r21,65535
 100d3f0:	e0bff815 	stw	r2,-32(fp)
 100d3f4:	b004703a 	and	r2,r22,zero
 100d3f8:	e0bff915 	stw	r2,-28(fp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
 100d3fc:	e0bff517 	ldw	r2,-44(fp)
 100d400:	10800804 	addi	r2,r2,32
 100d404:	10800037 	ldwio	r2,0(r2)
 100d408:	1027883a 	mov	r19,r2
 100d40c:	0029883a 	mov	r20,zero
 100d410:	98bfffcc 	andi	r2,r19,65535
 100d414:	e0bffa15 	stw	r2,-24(fp)
 100d418:	a004703a 	and	r2,r20,zero
 100d41c:	e0bffb15 	stw	r2,-20(fp)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
 100d420:	e0bff517 	ldw	r2,-44(fp)
 100d424:	10800904 	addi	r2,r2,36
 100d428:	10800037 	ldwio	r2,0(r2)
 100d42c:	1023883a 	mov	r17,r2
 100d430:	0025883a 	mov	r18,zero
 100d434:	88bfffcc 	andi	r2,r17,65535
 100d438:	e0bffc15 	stw	r2,-16(fp)
 100d43c:	9004703a 	and	r2,r18,zero
 100d440:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
 100d444:	e0bffc17 	ldw	r2,-16(fp)
 100d448:	1020943a 	slli	r16,r2,16
 100d44c:	001f883a 	mov	r15,zero
 100d450:	e0bffa17 	ldw	r2,-24(fp)
 100d454:	1008983a 	sll	r4,r2,zero
 100d458:	0007883a 	mov	r3,zero
 100d45c:	78dab03a 	or	r13,r15,r3
 100d460:	811cb03a 	or	r14,r16,r4
 100d464:	e0bff817 	ldw	r2,-32(fp)
 100d468:	1004d43a 	srli	r2,r2,16
 100d46c:	e0fff917 	ldw	r3,-28(fp)
 100d470:	1810943a 	slli	r8,r3,16
 100d474:	1210b03a 	or	r8,r2,r8
 100d478:	e0bff817 	ldw	r2,-32(fp)
 100d47c:	100e943a 	slli	r7,r2,16
 100d480:	69d6b03a 	or	r11,r13,r7
 100d484:	7218b03a 	or	r12,r14,r8
 100d488:	e0bff617 	ldw	r2,-40(fp)
 100d48c:	12d2b03a 	or	r9,r2,r11
 100d490:	e0bff717 	ldw	r2,-36(fp)
 100d494:	1314b03a 	or	r10,r2,r12
 100d498:	024a303a 	nor	r5,zero,r9
 100d49c:	028c303a 	nor	r6,zero,r10
 100d4a0:	2807883a 	mov	r3,r5
 100d4a4:	3009883a 	mov	r4,r6
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    }  
  }
}
 100d4a8:	1805883a 	mov	r2,r3
 100d4ac:	2007883a 	mov	r3,r4
 100d4b0:	e037883a 	mov	sp,fp
 100d4b4:	df000817 	ldw	fp,32(sp)
 100d4b8:	ddc00717 	ldw	r23,28(sp)
 100d4bc:	dd800617 	ldw	r22,24(sp)
 100d4c0:	dd400517 	ldw	r21,20(sp)
 100d4c4:	dd000417 	ldw	r20,16(sp)
 100d4c8:	dcc00317 	ldw	r19,12(sp)
 100d4cc:	dc800217 	ldw	r18,8(sp)
 100d4d0:	dc400117 	ldw	r17,4(sp)
 100d4d4:	dc000017 	ldw	r16,0(sp)
 100d4d8:	dec00904 	addi	sp,sp,36
 100d4dc:	f800283a 	ret

0100d4e0 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 100d4e0:	deffff04 	addi	sp,sp,-4
 100d4e4:	df000015 	stw	fp,0(sp)
 100d4e8:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 100d4ec:	00804074 	movhi	r2,257
 100d4f0:	10860104 	addi	r2,r2,6148
 100d4f4:	10800017 	ldw	r2,0(r2)
}
 100d4f8:	e037883a 	mov	sp,fp
 100d4fc:	df000017 	ldw	fp,0(sp)
 100d500:	dec00104 	addi	sp,sp,4
 100d504:	f800283a 	ret

0100d508 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100d508:	defffa04 	addi	sp,sp,-24
 100d50c:	dfc00515 	stw	ra,20(sp)
 100d510:	df000415 	stw	fp,16(sp)
 100d514:	df000404 	addi	fp,sp,16
 100d518:	e13ffd15 	stw	r4,-12(fp)
 100d51c:	e17ffe15 	stw	r5,-8(fp)
 100d520:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 100d524:	e0bffd17 	ldw	r2,-12(fp)
 100d528:	10800017 	ldw	r2,0(r2)
 100d52c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 100d530:	e0bffc17 	ldw	r2,-16(fp)
 100d534:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 100d538:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 100d53c:	10800217 	ldw	r2,8(r2)
 100d540:	1809883a 	mov	r4,r3
 100d544:	e17ffe17 	ldw	r5,-8(fp)
 100d548:	e1bfff17 	ldw	r6,-4(fp)
 100d54c:	100f883a 	mov	r7,r2
 100d550:	100da100 	call	100da10 <altera_avalon_uart_read>
      fd->fd_flags);
}
 100d554:	e037883a 	mov	sp,fp
 100d558:	dfc00117 	ldw	ra,4(sp)
 100d55c:	df000017 	ldw	fp,0(sp)
 100d560:	dec00204 	addi	sp,sp,8
 100d564:	f800283a 	ret

0100d568 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100d568:	defffa04 	addi	sp,sp,-24
 100d56c:	dfc00515 	stw	ra,20(sp)
 100d570:	df000415 	stw	fp,16(sp)
 100d574:	df000404 	addi	fp,sp,16
 100d578:	e13ffd15 	stw	r4,-12(fp)
 100d57c:	e17ffe15 	stw	r5,-8(fp)
 100d580:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 100d584:	e0bffd17 	ldw	r2,-12(fp)
 100d588:	10800017 	ldw	r2,0(r2)
 100d58c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 100d590:	e0bffc17 	ldw	r2,-16(fp)
 100d594:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 100d598:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 100d59c:	10800217 	ldw	r2,8(r2)
 100d5a0:	1809883a 	mov	r4,r3
 100d5a4:	e17ffe17 	ldw	r5,-8(fp)
 100d5a8:	e1bfff17 	ldw	r6,-4(fp)
 100d5ac:	100f883a 	mov	r7,r2
 100d5b0:	100dc640 	call	100dc64 <altera_avalon_uart_write>
      fd->fd_flags);
}
 100d5b4:	e037883a 	mov	sp,fp
 100d5b8:	dfc00117 	ldw	ra,4(sp)
 100d5bc:	df000017 	ldw	fp,0(sp)
 100d5c0:	dec00204 	addi	sp,sp,8
 100d5c4:	f800283a 	ret

0100d5c8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 100d5c8:	defffc04 	addi	sp,sp,-16
 100d5cc:	dfc00315 	stw	ra,12(sp)
 100d5d0:	df000215 	stw	fp,8(sp)
 100d5d4:	df000204 	addi	fp,sp,8
 100d5d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 100d5dc:	e0bfff17 	ldw	r2,-4(fp)
 100d5e0:	10800017 	ldw	r2,0(r2)
 100d5e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 100d5e8:	e0bffe17 	ldw	r2,-8(fp)
 100d5ec:	10c00a04 	addi	r3,r2,40
 100d5f0:	e0bfff17 	ldw	r2,-4(fp)
 100d5f4:	10800217 	ldw	r2,8(r2)
 100d5f8:	1809883a 	mov	r4,r3
 100d5fc:	100b883a 	mov	r5,r2
 100d600:	100d96c0 	call	100d96c <altera_avalon_uart_close>
}
 100d604:	e037883a 	mov	sp,fp
 100d608:	dfc00117 	ldw	ra,4(sp)
 100d60c:	df000017 	ldw	fp,0(sp)
 100d610:	dec00204 	addi	sp,sp,8
 100d614:	f800283a 	ret

0100d618 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 100d618:	defff804 	addi	sp,sp,-32
 100d61c:	dfc00715 	stw	ra,28(sp)
 100d620:	df000615 	stw	fp,24(sp)
 100d624:	df000604 	addi	fp,sp,24
 100d628:	e13ffd15 	stw	r4,-12(fp)
 100d62c:	e17ffe15 	stw	r5,-8(fp)
 100d630:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 100d634:	e0bffd17 	ldw	r2,-12(fp)
 100d638:	10800017 	ldw	r2,0(r2)
 100d63c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 100d640:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 100d644:	1000041e 	bne	r2,zero,100d658 <altera_avalon_uart_init+0x40>
 100d648:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 100d64c:	1000021e 	bne	r2,zero,100d658 <altera_avalon_uart_init+0x40>
 100d650:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 100d654:	10000226 	beq	r2,zero,100d660 <altera_avalon_uart_init+0x48>
 100d658:	00800044 	movi	r2,1
 100d65c:	00000106 	br	100d664 <altera_avalon_uart_init+0x4c>
 100d660:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 100d664:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 100d668:	e0bffc17 	ldw	r2,-16(fp)
 100d66c:	10000f1e 	bne	r2,zero,100d6ac <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 100d670:	e0bffd17 	ldw	r2,-12(fp)
 100d674:	00c32004 	movi	r3,3200
 100d678:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 100d67c:	e0bffb17 	ldw	r2,-20(fp)
 100d680:	10800304 	addi	r2,r2,12
 100d684:	e0fffd17 	ldw	r3,-12(fp)
 100d688:	18c00117 	ldw	r3,4(r3)
 100d68c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 100d690:	d8000015 	stw	zero,0(sp)
 100d694:	e13ffe17 	ldw	r4,-8(fp)
 100d698:	e17fff17 	ldw	r5,-4(fp)
 100d69c:	01804074 	movhi	r6,257
 100d6a0:	31b5b004 	addi	r6,r6,-10560
 100d6a4:	e1fffd17 	ldw	r7,-12(fp)
 100d6a8:	100eb9c0 	call	100eb9c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 100d6ac:	e037883a 	mov	sp,fp
 100d6b0:	dfc00117 	ldw	ra,4(sp)
 100d6b4:	df000017 	ldw	fp,0(sp)
 100d6b8:	dec00204 	addi	sp,sp,8
 100d6bc:	f800283a 	ret

0100d6c0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 100d6c0:	defffa04 	addi	sp,sp,-24
 100d6c4:	dfc00515 	stw	ra,20(sp)
 100d6c8:	df000415 	stw	fp,16(sp)
 100d6cc:	df000404 	addi	fp,sp,16
 100d6d0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 100d6d4:	e0bfff17 	ldw	r2,-4(fp)
 100d6d8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 100d6dc:	e0bffc17 	ldw	r2,-16(fp)
 100d6e0:	10800017 	ldw	r2,0(r2)
 100d6e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 100d6e8:	e0bffd17 	ldw	r2,-12(fp)
 100d6ec:	10800204 	addi	r2,r2,8
 100d6f0:	10800037 	ldwio	r2,0(r2)
 100d6f4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 100d6f8:	e0bffd17 	ldw	r2,-12(fp)
 100d6fc:	10800204 	addi	r2,r2,8
 100d700:	0007883a 	mov	r3,zero
 100d704:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 100d708:	e0bffd17 	ldw	r2,-12(fp)
 100d70c:	10800204 	addi	r2,r2,8
 100d710:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 100d714:	e0bffe17 	ldw	r2,-8(fp)
 100d718:	1080200c 	andi	r2,r2,128
 100d71c:	10000326 	beq	r2,zero,100d72c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 100d720:	e13ffc17 	ldw	r4,-16(fp)
 100d724:	e17ffe17 	ldw	r5,-8(fp)
 100d728:	100d7580 	call	100d758 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 100d72c:	e0bffe17 	ldw	r2,-8(fp)
 100d730:	1081100c 	andi	r2,r2,1088
 100d734:	10000326 	beq	r2,zero,100d744 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 100d738:	e13ffc17 	ldw	r4,-16(fp)
 100d73c:	e17ffe17 	ldw	r5,-8(fp)
 100d740:	100d8300 	call	100d830 <altera_avalon_uart_txirq>
  }
  

}
 100d744:	e037883a 	mov	sp,fp
 100d748:	dfc00117 	ldw	ra,4(sp)
 100d74c:	df000017 	ldw	fp,0(sp)
 100d750:	dec00204 	addi	sp,sp,8
 100d754:	f800283a 	ret

0100d758 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 100d758:	defffc04 	addi	sp,sp,-16
 100d75c:	df000315 	stw	fp,12(sp)
 100d760:	df000304 	addi	fp,sp,12
 100d764:	e13ffe15 	stw	r4,-8(fp)
 100d768:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 100d76c:	e0bfff17 	ldw	r2,-4(fp)
 100d770:	108000cc 	andi	r2,r2,3
 100d774:	1000291e 	bne	r2,zero,100d81c <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 100d778:	e0bffe17 	ldw	r2,-8(fp)
 100d77c:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 100d780:	e0bffe17 	ldw	r2,-8(fp)
 100d784:	10800317 	ldw	r2,12(r2)
 100d788:	10800044 	addi	r2,r2,1
 100d78c:	10800fcc 	andi	r2,r2,63
 100d790:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 100d794:	e0bffe17 	ldw	r2,-8(fp)
 100d798:	10800317 	ldw	r2,12(r2)
 100d79c:	e0fffe17 	ldw	r3,-8(fp)
 100d7a0:	18c00017 	ldw	r3,0(r3)
 100d7a4:	18c00037 	ldwio	r3,0(r3)
 100d7a8:	e13ffe17 	ldw	r4,-8(fp)
 100d7ac:	2085883a 	add	r2,r4,r2
 100d7b0:	10800704 	addi	r2,r2,28
 100d7b4:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 100d7b8:	e0bffe17 	ldw	r2,-8(fp)
 100d7bc:	e0fffd17 	ldw	r3,-12(fp)
 100d7c0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 100d7c4:	e0bffe17 	ldw	r2,-8(fp)
 100d7c8:	10800317 	ldw	r2,12(r2)
 100d7cc:	10800044 	addi	r2,r2,1
 100d7d0:	10800fcc 	andi	r2,r2,63
 100d7d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 100d7d8:	e0bffe17 	ldw	r2,-8(fp)
 100d7dc:	10c00217 	ldw	r3,8(r2)
 100d7e0:	e0bffd17 	ldw	r2,-12(fp)
 100d7e4:	18800e1e 	bne	r3,r2,100d820 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 100d7e8:	e0bffe17 	ldw	r2,-8(fp)
 100d7ec:	10c00117 	ldw	r3,4(r2)
 100d7f0:	00bfdfc4 	movi	r2,-129
 100d7f4:	1886703a 	and	r3,r3,r2
 100d7f8:	e0bffe17 	ldw	r2,-8(fp)
 100d7fc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 100d800:	e0bffe17 	ldw	r2,-8(fp)
 100d804:	10800017 	ldw	r2,0(r2)
 100d808:	10800304 	addi	r2,r2,12
 100d80c:	e0fffe17 	ldw	r3,-8(fp)
 100d810:	18c00117 	ldw	r3,4(r3)
 100d814:	10c00035 	stwio	r3,0(r2)
 100d818:	00000106 	br	100d820 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 100d81c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 100d820:	e037883a 	mov	sp,fp
 100d824:	df000017 	ldw	fp,0(sp)
 100d828:	dec00104 	addi	sp,sp,4
 100d82c:	f800283a 	ret

0100d830 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 100d830:	defffd04 	addi	sp,sp,-12
 100d834:	df000215 	stw	fp,8(sp)
 100d838:	df000204 	addi	fp,sp,8
 100d83c:	e13ffe15 	stw	r4,-8(fp)
 100d840:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 100d844:	e0bffe17 	ldw	r2,-8(fp)
 100d848:	10c00417 	ldw	r3,16(r2)
 100d84c:	e0bffe17 	ldw	r2,-8(fp)
 100d850:	10800517 	ldw	r2,20(r2)
 100d854:	18803026 	beq	r3,r2,100d918 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 100d858:	e0bffe17 	ldw	r2,-8(fp)
 100d85c:	10800617 	ldw	r2,24(r2)
 100d860:	1080008c 	andi	r2,r2,2
 100d864:	10000326 	beq	r2,zero,100d874 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 100d868:	e0bfff17 	ldw	r2,-4(fp)
 100d86c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 100d870:	10001b26 	beq	r2,zero,100d8e0 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 100d874:	e0bffe17 	ldw	r2,-8(fp)
 100d878:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 100d87c:	e0bffe17 	ldw	r2,-8(fp)
 100d880:	10800017 	ldw	r2,0(r2)
 100d884:	10800104 	addi	r2,r2,4
 100d888:	e0fffe17 	ldw	r3,-8(fp)
 100d88c:	18c00417 	ldw	r3,16(r3)
 100d890:	e13ffe17 	ldw	r4,-8(fp)
 100d894:	20c7883a 	add	r3,r4,r3
 100d898:	18c01704 	addi	r3,r3,92
 100d89c:	18c00003 	ldbu	r3,0(r3)
 100d8a0:	18c03fcc 	andi	r3,r3,255
 100d8a4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 100d8a8:	e0bffe17 	ldw	r2,-8(fp)
 100d8ac:	10800417 	ldw	r2,16(r2)
 100d8b0:	10800044 	addi	r2,r2,1
 100d8b4:	e0fffe17 	ldw	r3,-8(fp)
 100d8b8:	18800415 	stw	r2,16(r3)
 100d8bc:	10c00fcc 	andi	r3,r2,63
 100d8c0:	e0bffe17 	ldw	r2,-8(fp)
 100d8c4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 100d8c8:	e0bffe17 	ldw	r2,-8(fp)
 100d8cc:	10800117 	ldw	r2,4(r2)
 100d8d0:	10c01014 	ori	r3,r2,64
 100d8d4:	e0bffe17 	ldw	r2,-8(fp)
 100d8d8:	10c00115 	stw	r3,4(r2)
 100d8dc:	00000e06 	br	100d918 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 100d8e0:	e0bffe17 	ldw	r2,-8(fp)
 100d8e4:	10800017 	ldw	r2,0(r2)
 100d8e8:	10800204 	addi	r2,r2,8
 100d8ec:	10800037 	ldwio	r2,0(r2)
 100d8f0:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 100d8f4:	e0bfff17 	ldw	r2,-4(fp)
 100d8f8:	1082000c 	andi	r2,r2,2048
 100d8fc:	1000061e 	bne	r2,zero,100d918 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 100d900:	e0bffe17 	ldw	r2,-8(fp)
 100d904:	10c00117 	ldw	r3,4(r2)
 100d908:	00bfefc4 	movi	r2,-65
 100d90c:	1886703a 	and	r3,r3,r2
 100d910:	e0bffe17 	ldw	r2,-8(fp)
 100d914:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 100d918:	e0bffe17 	ldw	r2,-8(fp)
 100d91c:	10c00417 	ldw	r3,16(r2)
 100d920:	e0bffe17 	ldw	r2,-8(fp)
 100d924:	10800517 	ldw	r2,20(r2)
 100d928:	1880061e 	bne	r3,r2,100d944 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 100d92c:	e0bffe17 	ldw	r2,-8(fp)
 100d930:	10c00117 	ldw	r3,4(r2)
 100d934:	00beefc4 	movi	r2,-1089
 100d938:	1886703a 	and	r3,r3,r2
 100d93c:	e0bffe17 	ldw	r2,-8(fp)
 100d940:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100d944:	e0bffe17 	ldw	r2,-8(fp)
 100d948:	10800017 	ldw	r2,0(r2)
 100d94c:	10800304 	addi	r2,r2,12
 100d950:	e0fffe17 	ldw	r3,-8(fp)
 100d954:	18c00117 	ldw	r3,4(r3)
 100d958:	10c00035 	stwio	r3,0(r2)
}
 100d95c:	e037883a 	mov	sp,fp
 100d960:	df000017 	ldw	fp,0(sp)
 100d964:	dec00104 	addi	sp,sp,4
 100d968:	f800283a 	ret

0100d96c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 100d96c:	defffd04 	addi	sp,sp,-12
 100d970:	df000215 	stw	fp,8(sp)
 100d974:	df000204 	addi	fp,sp,8
 100d978:	e13ffe15 	stw	r4,-8(fp)
 100d97c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 100d980:	00000506 	br	100d998 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 100d984:	e0bfff17 	ldw	r2,-4(fp)
 100d988:	1090000c 	andi	r2,r2,16384
 100d98c:	10000226 	beq	r2,zero,100d998 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 100d990:	00bffd44 	movi	r2,-11
 100d994:	00000606 	br	100d9b0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 100d998:	e0bffe17 	ldw	r2,-8(fp)
 100d99c:	10c00417 	ldw	r3,16(r2)
 100d9a0:	e0bffe17 	ldw	r2,-8(fp)
 100d9a4:	10800517 	ldw	r2,20(r2)
 100d9a8:	18bff61e 	bne	r3,r2,100d984 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100d9ac:	0005883a 	mov	r2,zero
}
 100d9b0:	e037883a 	mov	sp,fp
 100d9b4:	df000017 	ldw	fp,0(sp)
 100d9b8:	dec00104 	addi	sp,sp,4
 100d9bc:	f800283a 	ret

0100d9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100d9c0:	defffe04 	addi	sp,sp,-8
 100d9c4:	dfc00115 	stw	ra,4(sp)
 100d9c8:	df000015 	stw	fp,0(sp)
 100d9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100d9d0:	00804074 	movhi	r2,257
 100d9d4:	1085ea04 	addi	r2,r2,6056
 100d9d8:	10800017 	ldw	r2,0(r2)
 100d9dc:	10000526 	beq	r2,zero,100d9f4 <alt_get_errno+0x34>
 100d9e0:	00804074 	movhi	r2,257
 100d9e4:	1085ea04 	addi	r2,r2,6056
 100d9e8:	10800017 	ldw	r2,0(r2)
 100d9ec:	103ee83a 	callr	r2
 100d9f0:	00000206 	br	100d9fc <alt_get_errno+0x3c>
 100d9f4:	00804074 	movhi	r2,257
 100d9f8:	1085f604 	addi	r2,r2,6104
}
 100d9fc:	e037883a 	mov	sp,fp
 100da00:	dfc00117 	ldw	ra,4(sp)
 100da04:	df000017 	ldw	fp,0(sp)
 100da08:	dec00204 	addi	sp,sp,8
 100da0c:	f800283a 	ret

0100da10 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 100da10:	defff104 	addi	sp,sp,-60
 100da14:	dfc00e15 	stw	ra,56(sp)
 100da18:	df000d15 	stw	fp,52(sp)
 100da1c:	df000d04 	addi	fp,sp,52
 100da20:	e13ffc15 	stw	r4,-16(fp)
 100da24:	e17ffd15 	stw	r5,-12(fp)
 100da28:	e1bffe15 	stw	r6,-8(fp)
 100da2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 100da30:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 100da34:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 100da38:	e0bfff17 	ldw	r2,-4(fp)
 100da3c:	1090000c 	andi	r2,r2,16384
 100da40:	1005003a 	cmpeq	r2,r2,zero
 100da44:	10803fcc 	andi	r2,r2,255
 100da48:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 100da4c:	e0bffc17 	ldw	r2,-16(fp)
 100da50:	10800217 	ldw	r2,8(r2)
 100da54:	10800044 	addi	r2,r2,1
 100da58:	10800fcc 	andi	r2,r2,63
 100da5c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100da60:	00001906 	br	100dac8 <altera_avalon_uart_read+0xb8>
    {
      count++;
 100da64:	e0bff417 	ldw	r2,-48(fp)
 100da68:	10800044 	addi	r2,r2,1
 100da6c:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 100da70:	e0bffc17 	ldw	r2,-16(fp)
 100da74:	10800217 	ldw	r2,8(r2)
 100da78:	e0fffc17 	ldw	r3,-16(fp)
 100da7c:	1885883a 	add	r2,r3,r2
 100da80:	10800704 	addi	r2,r2,28
 100da84:	10800003 	ldbu	r2,0(r2)
 100da88:	1007883a 	mov	r3,r2
 100da8c:	e0bffd17 	ldw	r2,-12(fp)
 100da90:	10c00005 	stb	r3,0(r2)
 100da94:	e0bffd17 	ldw	r2,-12(fp)
 100da98:	10800044 	addi	r2,r2,1
 100da9c:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 100daa0:	e0bffc17 	ldw	r2,-16(fp)
 100daa4:	10800217 	ldw	r2,8(r2)
 100daa8:	10c00044 	addi	r3,r2,1
 100daac:	e0bffc17 	ldw	r2,-16(fp)
 100dab0:	10c00215 	stw	r3,8(r2)
 100dab4:	e0bffc17 	ldw	r2,-16(fp)
 100dab8:	10800217 	ldw	r2,8(r2)
 100dabc:	10c00fcc 	andi	r3,r2,63
 100dac0:	e0bffc17 	ldw	r2,-16(fp)
 100dac4:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 100dac8:	e0fff417 	ldw	r3,-48(fp)
 100dacc:	e0bffe17 	ldw	r2,-8(fp)
 100dad0:	1880050e 	bge	r3,r2,100dae8 <altera_avalon_uart_read+0xd8>
 100dad4:	e0bffc17 	ldw	r2,-16(fp)
 100dad8:	10c00217 	ldw	r3,8(r2)
 100dadc:	e0bffc17 	ldw	r2,-16(fp)
 100dae0:	10800317 	ldw	r2,12(r2)
 100dae4:	18bfdf1e 	bne	r3,r2,100da64 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 100dae8:	e0bff417 	ldw	r2,-48(fp)
 100daec:	1000241e 	bne	r2,zero,100db80 <altera_avalon_uart_read+0x170>
 100daf0:	e0bffc17 	ldw	r2,-16(fp)
 100daf4:	10c00217 	ldw	r3,8(r2)
 100daf8:	e0bffc17 	ldw	r2,-16(fp)
 100dafc:	10800317 	ldw	r2,12(r2)
 100db00:	18801f1e 	bne	r3,r2,100db80 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 100db04:	e0bff517 	ldw	r2,-44(fp)
 100db08:	1000061e 	bne	r2,zero,100db24 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 100db0c:	100d9c00 	call	100d9c0 <alt_get_errno>
 100db10:	00c002c4 	movi	r3,11
 100db14:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 100db18:	00800044 	movi	r2,1
 100db1c:	e0bff305 	stb	r2,-52(fp)
        break;
 100db20:	00001b06 	br	100db90 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100db24:	0005303a 	rdctl	r2,status
 100db28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100db2c:	e0fff817 	ldw	r3,-32(fp)
 100db30:	00bfff84 	movi	r2,-2
 100db34:	1884703a 	and	r2,r3,r2
 100db38:	1001703a 	wrctl	status,r2
  
  return context;
 100db3c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 100db40:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 100db44:	e0bffc17 	ldw	r2,-16(fp)
 100db48:	10800117 	ldw	r2,4(r2)
 100db4c:	10c02014 	ori	r3,r2,128
 100db50:	e0bffc17 	ldw	r2,-16(fp)
 100db54:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100db58:	e0bffc17 	ldw	r2,-16(fp)
 100db5c:	10800017 	ldw	r2,0(r2)
 100db60:	10800304 	addi	r2,r2,12
 100db64:	e0fffc17 	ldw	r3,-16(fp)
 100db68:	18c00117 	ldw	r3,4(r3)
 100db6c:	10c00035 	stwio	r3,0(r2)
 100db70:	e0bff717 	ldw	r2,-36(fp)
 100db74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100db78:	e0bff917 	ldw	r2,-28(fp)
 100db7c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 100db80:	e0bff417 	ldw	r2,-48(fp)
 100db84:	1000021e 	bne	r2,zero,100db90 <altera_avalon_uart_read+0x180>
 100db88:	e0bffe17 	ldw	r2,-8(fp)
 100db8c:	103fce1e 	bne	r2,zero,100dac8 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100db90:	0005303a 	rdctl	r2,status
 100db94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100db98:	e0fffa17 	ldw	r3,-24(fp)
 100db9c:	00bfff84 	movi	r2,-2
 100dba0:	1884703a 	and	r2,r3,r2
 100dba4:	1001703a 	wrctl	status,r2
  
  return context;
 100dba8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 100dbac:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 100dbb0:	e0bffc17 	ldw	r2,-16(fp)
 100dbb4:	10800117 	ldw	r2,4(r2)
 100dbb8:	10c02014 	ori	r3,r2,128
 100dbbc:	e0bffc17 	ldw	r2,-16(fp)
 100dbc0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100dbc4:	e0bffc17 	ldw	r2,-16(fp)
 100dbc8:	10800017 	ldw	r2,0(r2)
 100dbcc:	10800304 	addi	r2,r2,12
 100dbd0:	e0fffc17 	ldw	r3,-16(fp)
 100dbd4:	18c00117 	ldw	r3,4(r3)
 100dbd8:	10c00035 	stwio	r3,0(r2)
 100dbdc:	e0bff717 	ldw	r2,-36(fp)
 100dbe0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dbe4:	e0bffb17 	ldw	r2,-20(fp)
 100dbe8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 100dbec:	e0bff303 	ldbu	r2,-52(fp)
 100dbf0:	10000226 	beq	r2,zero,100dbfc <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 100dbf4:	00bffd44 	movi	r2,-11
 100dbf8:	00000106 	br	100dc00 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 100dbfc:	e0bff417 	ldw	r2,-48(fp)
  }
}
 100dc00:	e037883a 	mov	sp,fp
 100dc04:	dfc00117 	ldw	ra,4(sp)
 100dc08:	df000017 	ldw	fp,0(sp)
 100dc0c:	dec00204 	addi	sp,sp,8
 100dc10:	f800283a 	ret

0100dc14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100dc14:	defffe04 	addi	sp,sp,-8
 100dc18:	dfc00115 	stw	ra,4(sp)
 100dc1c:	df000015 	stw	fp,0(sp)
 100dc20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100dc24:	00804074 	movhi	r2,257
 100dc28:	1085ea04 	addi	r2,r2,6056
 100dc2c:	10800017 	ldw	r2,0(r2)
 100dc30:	10000526 	beq	r2,zero,100dc48 <alt_get_errno+0x34>
 100dc34:	00804074 	movhi	r2,257
 100dc38:	1085ea04 	addi	r2,r2,6056
 100dc3c:	10800017 	ldw	r2,0(r2)
 100dc40:	103ee83a 	callr	r2
 100dc44:	00000206 	br	100dc50 <alt_get_errno+0x3c>
 100dc48:	00804074 	movhi	r2,257
 100dc4c:	1085f604 	addi	r2,r2,6104
}
 100dc50:	e037883a 	mov	sp,fp
 100dc54:	dfc00117 	ldw	ra,4(sp)
 100dc58:	df000017 	ldw	fp,0(sp)
 100dc5c:	dec00204 	addi	sp,sp,8
 100dc60:	f800283a 	ret

0100dc64 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 100dc64:	defff204 	addi	sp,sp,-56
 100dc68:	dfc00d15 	stw	ra,52(sp)
 100dc6c:	df000c15 	stw	fp,48(sp)
 100dc70:	df000c04 	addi	fp,sp,48
 100dc74:	e13ffc15 	stw	r4,-16(fp)
 100dc78:	e17ffd15 	stw	r5,-12(fp)
 100dc7c:	e1bffe15 	stw	r6,-8(fp)
 100dc80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 100dc84:	e0bffe17 	ldw	r2,-8(fp)
 100dc88:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 100dc8c:	e0bfff17 	ldw	r2,-4(fp)
 100dc90:	1090000c 	andi	r2,r2,16384
 100dc94:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 100dc98:	00003b06 	br	100dd88 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 100dc9c:	e0bffc17 	ldw	r2,-16(fp)
 100dca0:	10800517 	ldw	r2,20(r2)
 100dca4:	10800044 	addi	r2,r2,1
 100dca8:	10800fcc 	andi	r2,r2,63
 100dcac:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 100dcb0:	e0bffc17 	ldw	r2,-16(fp)
 100dcb4:	10c00417 	ldw	r3,16(r2)
 100dcb8:	e0bff617 	ldw	r2,-40(fp)
 100dcbc:	1880211e 	bne	r3,r2,100dd44 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 100dcc0:	e0bff517 	ldw	r2,-44(fp)
 100dcc4:	10000426 	beq	r2,zero,100dcd8 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 100dcc8:	100dc140 	call	100dc14 <alt_get_errno>
 100dccc:	00c002c4 	movi	r3,11
 100dcd0:	10c00015 	stw	r3,0(r2)
        break;
 100dcd4:	00002e06 	br	100dd90 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dcd8:	0005303a 	rdctl	r2,status
 100dcdc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dce0:	e0fff817 	ldw	r3,-32(fp)
 100dce4:	00bfff84 	movi	r2,-2
 100dce8:	1884703a 	and	r2,r3,r2
 100dcec:	1001703a 	wrctl	status,r2
  
  return context;
 100dcf0:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 100dcf4:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 100dcf8:	e0bffc17 	ldw	r2,-16(fp)
 100dcfc:	10800117 	ldw	r2,4(r2)
 100dd00:	10c11014 	ori	r3,r2,1088
 100dd04:	e0bffc17 	ldw	r2,-16(fp)
 100dd08:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100dd0c:	e0bffc17 	ldw	r2,-16(fp)
 100dd10:	10800017 	ldw	r2,0(r2)
 100dd14:	10800304 	addi	r2,r2,12
 100dd18:	e0fffc17 	ldw	r3,-16(fp)
 100dd1c:	18c00117 	ldw	r3,4(r3)
 100dd20:	10c00035 	stwio	r3,0(r2)
 100dd24:	e0bff717 	ldw	r2,-36(fp)
 100dd28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dd2c:	e0bff917 	ldw	r2,-28(fp)
 100dd30:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 100dd34:	e0bffc17 	ldw	r2,-16(fp)
 100dd38:	10c00417 	ldw	r3,16(r2)
 100dd3c:	e0bff617 	ldw	r2,-40(fp)
 100dd40:	18bffc26 	beq	r3,r2,100dd34 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 100dd44:	e0bff417 	ldw	r2,-48(fp)
 100dd48:	10bfffc4 	addi	r2,r2,-1
 100dd4c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 100dd50:	e0bffc17 	ldw	r2,-16(fp)
 100dd54:	10800517 	ldw	r2,20(r2)
 100dd58:	e0fffd17 	ldw	r3,-12(fp)
 100dd5c:	18c00003 	ldbu	r3,0(r3)
 100dd60:	e13ffc17 	ldw	r4,-16(fp)
 100dd64:	2085883a 	add	r2,r4,r2
 100dd68:	10801704 	addi	r2,r2,92
 100dd6c:	10c00005 	stb	r3,0(r2)
 100dd70:	e0bffd17 	ldw	r2,-12(fp)
 100dd74:	10800044 	addi	r2,r2,1
 100dd78:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 100dd7c:	e0bffc17 	ldw	r2,-16(fp)
 100dd80:	e0fff617 	ldw	r3,-40(fp)
 100dd84:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 100dd88:	e0bff417 	ldw	r2,-48(fp)
 100dd8c:	103fc31e 	bne	r2,zero,100dc9c <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dd90:	0005303a 	rdctl	r2,status
 100dd94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dd98:	e0fffa17 	ldw	r3,-24(fp)
 100dd9c:	00bfff84 	movi	r2,-2
 100dda0:	1884703a 	and	r2,r3,r2
 100dda4:	1001703a 	wrctl	status,r2
  
  return context;
 100dda8:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 100ddac:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 100ddb0:	e0bffc17 	ldw	r2,-16(fp)
 100ddb4:	10800117 	ldw	r2,4(r2)
 100ddb8:	10c11014 	ori	r3,r2,1088
 100ddbc:	e0bffc17 	ldw	r2,-16(fp)
 100ddc0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 100ddc4:	e0bffc17 	ldw	r2,-16(fp)
 100ddc8:	10800017 	ldw	r2,0(r2)
 100ddcc:	10800304 	addi	r2,r2,12
 100ddd0:	e0fffc17 	ldw	r3,-16(fp)
 100ddd4:	18c00117 	ldw	r3,4(r3)
 100ddd8:	10c00035 	stwio	r3,0(r2)
 100dddc:	e0bff717 	ldw	r2,-36(fp)
 100dde0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dde4:	e0bffb17 	ldw	r2,-20(fp)
 100dde8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 100ddec:	e0fffe17 	ldw	r3,-8(fp)
 100ddf0:	e0bff417 	ldw	r2,-48(fp)
 100ddf4:	1885c83a 	sub	r2,r3,r2
}
 100ddf8:	e037883a 	mov	sp,fp
 100ddfc:	dfc00117 	ldw	ra,4(sp)
 100de00:	df000017 	ldw	fp,0(sp)
 100de04:	dec00204 	addi	sp,sp,8
 100de08:	f800283a 	ret

0100de0c <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 100de0c:	defff904 	addi	sp,sp,-28
 100de10:	dfc00615 	stw	ra,24(sp)
 100de14:	df000515 	stw	fp,20(sp)
 100de18:	df000504 	addi	fp,sp,20
 100de1c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 100de20:	00800144 	movi	r2,5
 100de24:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 100de28:	00800044 	movi	r2,1
 100de2c:	d8800015 	stw	r2,0(sp)
 100de30:	e0bffe44 	addi	r2,fp,-7
 100de34:	d8800115 	stw	r2,4(sp)
 100de38:	d8000215 	stw	zero,8(sp)
 100de3c:	e13fff17 	ldw	r4,-4(fp)
 100de40:	000b883a 	mov	r5,zero
 100de44:	01800044 	movi	r6,1
 100de48:	e1fffe04 	addi	r7,fp,-8
 100de4c:	100f1780 	call	100f178 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 100de50:	e0bffe43 	ldbu	r2,-7(fp)
}
 100de54:	e037883a 	mov	sp,fp
 100de58:	dfc00117 	ldw	ra,4(sp)
 100de5c:	df000017 	ldw	fp,0(sp)
 100de60:	dec00204 	addi	sp,sp,8
 100de64:	f800283a 	ret

0100de68 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 100de68:	defffd04 	addi	sp,sp,-12
 100de6c:	dfc00215 	stw	ra,8(sp)
 100de70:	df000115 	stw	fp,4(sp)
 100de74:	df000104 	addi	fp,sp,4
 100de78:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 100de7c:	e13fff17 	ldw	r4,-4(fp)
 100de80:	100de0c0 	call	100de0c <epcs_read_status_register>
 100de84:	10803fcc 	andi	r2,r2,255
 100de88:	1080004c 	andi	r2,r2,1
}
 100de8c:	e037883a 	mov	sp,fp
 100de90:	dfc00117 	ldw	ra,4(sp)
 100de94:	df000017 	ldw	fp,0(sp)
 100de98:	dec00204 	addi	sp,sp,8
 100de9c:	f800283a 	ret

0100dea0 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 100dea0:	defffd04 	addi	sp,sp,-12
 100dea4:	dfc00215 	stw	ra,8(sp)
 100dea8:	df000115 	stw	fp,4(sp)
 100deac:	df000104 	addi	fp,sp,4
 100deb0:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 100deb4:	0001883a 	nop
 100deb8:	e13fff17 	ldw	r4,-4(fp)
 100debc:	100de680 	call	100de68 <epcs_test_wip>
 100dec0:	103ffd1e 	bne	r2,zero,100deb8 <epcs_await_wip_released+0x18>
  {
  }
}
 100dec4:	e037883a 	mov	sp,fp
 100dec8:	dfc00117 	ldw	ra,4(sp)
 100decc:	df000017 	ldw	fp,0(sp)
 100ded0:	dec00204 	addi	sp,sp,8
 100ded4:	f800283a 	ret

0100ded8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 100ded8:	defff604 	addi	sp,sp,-40
 100dedc:	dfc00915 	stw	ra,36(sp)
 100dee0:	df000815 	stw	fp,32(sp)
 100dee4:	df000804 	addi	fp,sp,32
 100dee8:	e13ffd15 	stw	r4,-12(fp)
 100deec:	e17ffe15 	stw	r5,-8(fp)
 100def0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 100def4:	e0bfff17 	ldw	r2,-4(fp)
 100def8:	10001226 	beq	r2,zero,100df44 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 100defc:	00bff604 	movi	r2,-40
 100df00:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 100df04:	e0bffe17 	ldw	r2,-8(fp)
 100df08:	1004d63a 	srli	r2,r2,24
 100df0c:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 100df10:	e0bffe17 	ldw	r2,-8(fp)
 100df14:	1004d43a 	srli	r2,r2,16
 100df18:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 100df1c:	e0bffe17 	ldw	r2,-8(fp)
 100df20:	1004d23a 	srli	r2,r2,8
 100df24:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 100df28:	e0bffe17 	ldw	r2,-8(fp)
 100df2c:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 100df30:	00800144 	movi	r2,5
 100df34:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 100df38:	e13ffd17 	ldw	r4,-12(fp)
 100df3c:	100e3800 	call	100e380 <epcs_enter_4_bytes_mode>
 100df40:	00000c06 	br	100df74 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 100df44:	00bff604 	movi	r2,-40
 100df48:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 100df4c:	e0bffe17 	ldw	r2,-8(fp)
 100df50:	1004d43a 	srli	r2,r2,16
 100df54:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 100df58:	e0bffe17 	ldw	r2,-8(fp)
 100df5c:	1004d23a 	srli	r2,r2,8
 100df60:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 100df64:	e0bffe17 	ldw	r2,-8(fp)
 100df68:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 100df6c:	00800104 	movi	r2,4
 100df70:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 100df74:	e13ffd17 	ldw	r4,-12(fp)
 100df78:	100e0c40 	call	100e0c4 <epcs_write_enable>

  alt_avalon_spi_command(
 100df7c:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 100df80:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 100df84:	d8000015 	stw	zero,0(sp)
 100df88:	d8000115 	stw	zero,4(sp)
 100df8c:	d8000215 	stw	zero,8(sp)
 100df90:	e13ffd17 	ldw	r4,-12(fp)
 100df94:	000b883a 	mov	r5,zero
 100df98:	180d883a 	mov	r6,r3
 100df9c:	100f883a 	mov	r7,r2
 100dfa0:	100f1780 	call	100f178 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 100dfa4:	e13ffd17 	ldw	r4,-12(fp)
 100dfa8:	100dea00 	call	100dea0 <epcs_await_wip_released>

  if(four_bytes_mode)
 100dfac:	e0bfff17 	ldw	r2,-4(fp)
 100dfb0:	10000226 	beq	r2,zero,100dfbc <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 100dfb4:	e13ffd17 	ldw	r4,-12(fp)
 100dfb8:	100e3d80 	call	100e3d8 <epcs_exit_4_bytes_mode>
  }
}
 100dfbc:	e037883a 	mov	sp,fp
 100dfc0:	dfc00117 	ldw	ra,4(sp)
 100dfc4:	df000017 	ldw	fp,0(sp)
 100dfc8:	dec00204 	addi	sp,sp,8
 100dfcc:	f800283a 	ret

0100dfd0 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 100dfd0:	defff404 	addi	sp,sp,-48
 100dfd4:	dfc00b15 	stw	ra,44(sp)
 100dfd8:	df000a15 	stw	fp,40(sp)
 100dfdc:	df000a04 	addi	fp,sp,40
 100dfe0:	e13ffc15 	stw	r4,-16(fp)
 100dfe4:	e17ffd15 	stw	r5,-12(fp)
 100dfe8:	e1bffe15 	stw	r6,-8(fp)
 100dfec:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 100dff0:	008000c4 	movi	r2,3
 100dff4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 100dff8:	e0800217 	ldw	r2,8(fp)
 100dffc:	10001026 	beq	r2,zero,100e040 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 100e000:	e0bffd17 	ldw	r2,-12(fp)
 100e004:	1004d63a 	srli	r2,r2,24
 100e008:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 100e00c:	e0bffd17 	ldw	r2,-12(fp)
 100e010:	1005d43a 	srai	r2,r2,16
 100e014:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 100e018:	e0bffd17 	ldw	r2,-12(fp)
 100e01c:	1005d23a 	srai	r2,r2,8
 100e020:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 100e024:	e0bffd17 	ldw	r2,-12(fp)
 100e028:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 100e02c:	00800144 	movi	r2,5
 100e030:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 100e034:	e13ffc17 	ldw	r4,-16(fp)
 100e038:	100e3800 	call	100e380 <epcs_enter_4_bytes_mode>
 100e03c:	00000a06 	br	100e068 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 100e040:	e0bffd17 	ldw	r2,-12(fp)
 100e044:	1005d43a 	srai	r2,r2,16
 100e048:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 100e04c:	e0bffd17 	ldw	r2,-12(fp)
 100e050:	1005d23a 	srai	r2,r2,8
 100e054:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 100e058:	e0bffd17 	ldw	r2,-12(fp)
 100e05c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 100e060:	00800104 	movi	r2,4
 100e064:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 100e068:	e13ffc17 	ldw	r4,-16(fp)
 100e06c:	100dea00 	call	100dea0 <epcs_await_wip_released>

  alt_avalon_spi_command(
 100e070:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 100e074:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 100e078:	d8c00015 	stw	r3,0(sp)
 100e07c:	e0fffe17 	ldw	r3,-8(fp)
 100e080:	d8c00115 	stw	r3,4(sp)
 100e084:	d8000215 	stw	zero,8(sp)
 100e088:	e13ffc17 	ldw	r4,-16(fp)
 100e08c:	000b883a 	mov	r5,zero
 100e090:	e1bff917 	ldw	r6,-28(fp)
 100e094:	100f883a 	mov	r7,r2
 100e098:	100f1780 	call	100f178 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 100e09c:	e0800217 	ldw	r2,8(fp)
 100e0a0:	10000226 	beq	r2,zero,100e0ac <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 100e0a4:	e13ffc17 	ldw	r4,-16(fp)
 100e0a8:	100e3d80 	call	100e3d8 <epcs_exit_4_bytes_mode>
  }

  return length;
 100e0ac:	e0bfff17 	ldw	r2,-4(fp)
}
 100e0b0:	e037883a 	mov	sp,fp
 100e0b4:	dfc00117 	ldw	ra,4(sp)
 100e0b8:	df000017 	ldw	fp,0(sp)
 100e0bc:	dec00204 	addi	sp,sp,8
 100e0c0:	f800283a 	ret

0100e0c4 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 100e0c4:	defff904 	addi	sp,sp,-28
 100e0c8:	dfc00615 	stw	ra,24(sp)
 100e0cc:	df000515 	stw	fp,20(sp)
 100e0d0:	df000504 	addi	fp,sp,20
 100e0d4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 100e0d8:	00800184 	movi	r2,6
 100e0dc:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 100e0e0:	d8000015 	stw	zero,0(sp)
 100e0e4:	d8000115 	stw	zero,4(sp)
 100e0e8:	d8000215 	stw	zero,8(sp)
 100e0ec:	e13fff17 	ldw	r4,-4(fp)
 100e0f0:	000b883a 	mov	r5,zero
 100e0f4:	01800044 	movi	r6,1
 100e0f8:	e1fffe04 	addi	r7,fp,-8
 100e0fc:	100f1780 	call	100f178 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 100e100:	e037883a 	mov	sp,fp
 100e104:	dfc00117 	ldw	ra,4(sp)
 100e108:	df000017 	ldw	fp,0(sp)
 100e10c:	dec00204 	addi	sp,sp,8
 100e110:	f800283a 	ret

0100e114 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 100e114:	defff804 	addi	sp,sp,-32
 100e118:	dfc00715 	stw	ra,28(sp)
 100e11c:	df000615 	stw	fp,24(sp)
 100e120:	df000604 	addi	fp,sp,24
 100e124:	e13ffe15 	stw	r4,-8(fp)
 100e128:	2805883a 	mov	r2,r5
 100e12c:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 100e130:	00800044 	movi	r2,1
 100e134:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 100e138:	e0bfff03 	ldbu	r2,-4(fp)
 100e13c:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 100e140:	d8000015 	stw	zero,0(sp)
 100e144:	d8000115 	stw	zero,4(sp)
 100e148:	d8000215 	stw	zero,8(sp)
 100e14c:	e13ffe17 	ldw	r4,-8(fp)
 100e150:	000b883a 	mov	r5,zero
 100e154:	01800084 	movi	r6,2
 100e158:	e1fffd04 	addi	r7,fp,-12
 100e15c:	100f1780 	call	100f178 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 100e160:	e13ffe17 	ldw	r4,-8(fp)
 100e164:	100dea00 	call	100dea0 <epcs_await_wip_released>
}
 100e168:	e037883a 	mov	sp,fp
 100e16c:	dfc00117 	ldw	ra,4(sp)
 100e170:	df000017 	ldw	fp,0(sp)
 100e174:	dec00204 	addi	sp,sp,8
 100e178:	f800283a 	ret

0100e17c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 100e17c:	defff404 	addi	sp,sp,-48
 100e180:	dfc00b15 	stw	ra,44(sp)
 100e184:	df000a15 	stw	fp,40(sp)
 100e188:	df000a04 	addi	fp,sp,40
 100e18c:	e13ffc15 	stw	r4,-16(fp)
 100e190:	e17ffd15 	stw	r5,-12(fp)
 100e194:	e1bffe15 	stw	r6,-8(fp)
 100e198:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 100e19c:	00800084 	movi	r2,2
 100e1a0:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 100e1a4:	e0800217 	ldw	r2,8(fp)
 100e1a8:	10001026 	beq	r2,zero,100e1ec <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 100e1ac:	e0bffd17 	ldw	r2,-12(fp)
 100e1b0:	1004d63a 	srli	r2,r2,24
 100e1b4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 100e1b8:	e0bffd17 	ldw	r2,-12(fp)
 100e1bc:	1005d43a 	srai	r2,r2,16
 100e1c0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 100e1c4:	e0bffd17 	ldw	r2,-12(fp)
 100e1c8:	1005d23a 	srai	r2,r2,8
 100e1cc:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 100e1d0:	e0bffd17 	ldw	r2,-12(fp)
 100e1d4:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 100e1d8:	00800144 	movi	r2,5
 100e1dc:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 100e1e0:	e13ffc17 	ldw	r4,-16(fp)
 100e1e4:	100e3800 	call	100e380 <epcs_enter_4_bytes_mode>
 100e1e8:	00000a06 	br	100e214 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 100e1ec:	e0bffd17 	ldw	r2,-12(fp)
 100e1f0:	1005d43a 	srai	r2,r2,16
 100e1f4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 100e1f8:	e0bffd17 	ldw	r2,-12(fp)
 100e1fc:	1005d23a 	srai	r2,r2,8
 100e200:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 100e204:	e0bffd17 	ldw	r2,-12(fp)
 100e208:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 100e20c:	00800104 	movi	r2,4
 100e210:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 100e214:	e13ffc17 	ldw	r4,-16(fp)
 100e218:	100e0c40 	call	100e0c4 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 100e21c:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 100e220:	d8000015 	stw	zero,0(sp)
 100e224:	d8000115 	stw	zero,4(sp)
 100e228:	00c00044 	movi	r3,1
 100e22c:	d8c00215 	stw	r3,8(sp)
 100e230:	e13ffc17 	ldw	r4,-16(fp)
 100e234:	000b883a 	mov	r5,zero
 100e238:	e1bff917 	ldw	r6,-28(fp)
 100e23c:	100f883a 	mov	r7,r2
 100e240:	100f1780 	call	100f178 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 100e244:	e0bfff17 	ldw	r2,-4(fp)
 100e248:	d8000015 	stw	zero,0(sp)
 100e24c:	d8000115 	stw	zero,4(sp)
 100e250:	d8000215 	stw	zero,8(sp)
 100e254:	e13ffc17 	ldw	r4,-16(fp)
 100e258:	000b883a 	mov	r5,zero
 100e25c:	100d883a 	mov	r6,r2
 100e260:	e1fffe17 	ldw	r7,-8(fp)
 100e264:	100f1780 	call	100f178 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 100e268:	e13ffc17 	ldw	r4,-16(fp)
 100e26c:	100dea00 	call	100dea0 <epcs_await_wip_released>

  if(four_bytes_mode)
 100e270:	e0800217 	ldw	r2,8(fp)
 100e274:	10000226 	beq	r2,zero,100e280 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 100e278:	e13ffc17 	ldw	r4,-16(fp)
 100e27c:	100e3d80 	call	100e3d8 <epcs_exit_4_bytes_mode>
  }

  return length;
 100e280:	e0bfff17 	ldw	r2,-4(fp)
}
 100e284:	e037883a 	mov	sp,fp
 100e288:	dfc00117 	ldw	ra,4(sp)
 100e28c:	df000017 	ldw	fp,0(sp)
 100e290:	dec00204 	addi	sp,sp,8
 100e294:	f800283a 	ret

0100e298 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 100e298:	defff804 	addi	sp,sp,-32
 100e29c:	dfc00715 	stw	ra,28(sp)
 100e2a0:	df000615 	stw	fp,24(sp)
 100e2a4:	df000604 	addi	fp,sp,24
 100e2a8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 100e2ac:	00bfeac4 	movi	r2,-85
 100e2b0:	e0bffd05 	stb	r2,-12(fp)
 100e2b4:	e03ffd45 	stb	zero,-11(fp)
 100e2b8:	e03ffd85 	stb	zero,-10(fp)
 100e2bc:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 100e2c0:	00800044 	movi	r2,1
 100e2c4:	d8800015 	stw	r2,0(sp)
 100e2c8:	e0bffe04 	addi	r2,fp,-8
 100e2cc:	d8800115 	stw	r2,4(sp)
 100e2d0:	d8000215 	stw	zero,8(sp)
 100e2d4:	e13fff17 	ldw	r4,-4(fp)
 100e2d8:	000b883a 	mov	r5,zero
 100e2dc:	01800104 	movi	r6,4
 100e2e0:	e1fffd04 	addi	r7,fp,-12
 100e2e4:	100f1780 	call	100f178 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 100e2e8:	e0bffe03 	ldbu	r2,-8(fp)
}
 100e2ec:	e037883a 	mov	sp,fp
 100e2f0:	dfc00117 	ldw	ra,4(sp)
 100e2f4:	df000017 	ldw	fp,0(sp)
 100e2f8:	dec00204 	addi	sp,sp,8
 100e2fc:	f800283a 	ret

0100e300 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 100e300:	defff904 	addi	sp,sp,-28
 100e304:	dfc00615 	stw	ra,24(sp)
 100e308:	df000515 	stw	fp,20(sp)
 100e30c:	df000504 	addi	fp,sp,20
 100e310:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 100e314:	00bfe7c4 	movi	r2,-97
 100e318:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 100e31c:	008000c4 	movi	r2,3
 100e320:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 100e324:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 100e328:	d8800115 	stw	r2,4(sp)
 100e32c:	d8000215 	stw	zero,8(sp)
 100e330:	e13fff17 	ldw	r4,-4(fp)
 100e334:	000b883a 	mov	r5,zero
 100e338:	01800044 	movi	r6,1
 100e33c:	e1fffe04 	addi	r7,fp,-8
 100e340:	100f1780 	call	100f178 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 100e344:	e0bffe43 	ldbu	r2,-7(fp)
 100e348:	10803fcc 	andi	r2,r2,255
 100e34c:	1006943a 	slli	r3,r2,16
 100e350:	e0bffe83 	ldbu	r2,-6(fp)
 100e354:	10803fcc 	andi	r2,r2,255
 100e358:	1004923a 	slli	r2,r2,8
 100e35c:	1886b03a 	or	r3,r3,r2
 100e360:	e0bffec3 	ldbu	r2,-5(fp)
 100e364:	10803fcc 	andi	r2,r2,255
 100e368:	1884b03a 	or	r2,r3,r2
}
 100e36c:	e037883a 	mov	sp,fp
 100e370:	dfc00117 	ldw	ra,4(sp)
 100e374:	df000017 	ldw	fp,0(sp)
 100e378:	dec00204 	addi	sp,sp,8
 100e37c:	f800283a 	ret

0100e380 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 100e380:	defff904 	addi	sp,sp,-28
 100e384:	dfc00615 	stw	ra,24(sp)
 100e388:	df000515 	stw	fp,20(sp)
 100e38c:	df000504 	addi	fp,sp,20
 100e390:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 100e394:	00bfedc4 	movi	r2,-73
 100e398:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 100e39c:	e13fff17 	ldw	r4,-4(fp)
 100e3a0:	100e0c40 	call	100e0c4 <epcs_write_enable>

  alt_avalon_spi_command(
 100e3a4:	d8000015 	stw	zero,0(sp)
 100e3a8:	d8000115 	stw	zero,4(sp)
 100e3ac:	d8000215 	stw	zero,8(sp)
 100e3b0:	e13fff17 	ldw	r4,-4(fp)
 100e3b4:	000b883a 	mov	r5,zero
 100e3b8:	01800044 	movi	r6,1
 100e3bc:	e1fffe04 	addi	r7,fp,-8
 100e3c0:	100f1780 	call	100f178 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 100e3c4:	e037883a 	mov	sp,fp
 100e3c8:	dfc00117 	ldw	ra,4(sp)
 100e3cc:	df000017 	ldw	fp,0(sp)
 100e3d0:	dec00204 	addi	sp,sp,8
 100e3d4:	f800283a 	ret

0100e3d8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 100e3d8:	defff904 	addi	sp,sp,-28
 100e3dc:	dfc00615 	stw	ra,24(sp)
 100e3e0:	df000515 	stw	fp,20(sp)
 100e3e4:	df000504 	addi	fp,sp,20
 100e3e8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 100e3ec:	00bffa44 	movi	r2,-23
 100e3f0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 100e3f4:	e13fff17 	ldw	r4,-4(fp)
 100e3f8:	100e0c40 	call	100e0c4 <epcs_write_enable>

  alt_avalon_spi_command(
 100e3fc:	d8000015 	stw	zero,0(sp)
 100e400:	d8000115 	stw	zero,4(sp)
 100e404:	d8000215 	stw	zero,8(sp)
 100e408:	e13fff17 	ldw	r4,-4(fp)
 100e40c:	000b883a 	mov	r5,zero
 100e410:	01800044 	movi	r6,1
 100e414:	e1fffe04 	addi	r7,fp,-8
 100e418:	100f1780 	call	100f178 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 100e41c:	e037883a 	mov	sp,fp
 100e420:	dfc00117 	ldw	ra,4(sp)
 100e424:	df000017 	ldw	fp,0(sp)
 100e428:	dec00204 	addi	sp,sp,8
 100e42c:	f800283a 	ret

0100e430 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100e430:	defff504 	addi	sp,sp,-44
 100e434:	df000a15 	stw	fp,40(sp)
 100e438:	df000a04 	addi	fp,sp,40
 100e43c:	e13ffc15 	stw	r4,-16(fp)
 100e440:	e17ffd15 	stw	r5,-12(fp)
 100e444:	e1bffe15 	stw	r6,-8(fp)
 100e448:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100e44c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100e450:	00804074 	movhi	r2,257
 100e454:	10860304 	addi	r2,r2,6156
 100e458:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100e45c:	10003f26 	beq	r2,zero,100e55c <alt_alarm_start+0x12c>
  {
    if (alarm)
 100e460:	e0bffc17 	ldw	r2,-16(fp)
 100e464:	10003b26 	beq	r2,zero,100e554 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 100e468:	e0bffc17 	ldw	r2,-16(fp)
 100e46c:	e0fffe17 	ldw	r3,-8(fp)
 100e470:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 100e474:	e0bffc17 	ldw	r2,-16(fp)
 100e478:	e0ffff17 	ldw	r3,-4(fp)
 100e47c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e480:	0005303a 	rdctl	r2,status
 100e484:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e488:	e0fff817 	ldw	r3,-32(fp)
 100e48c:	00bfff84 	movi	r2,-2
 100e490:	1884703a 	and	r2,r3,r2
 100e494:	1001703a 	wrctl	status,r2
  
  return context;
 100e498:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100e49c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100e4a0:	00804074 	movhi	r2,257
 100e4a4:	10860404 	addi	r2,r2,6160
 100e4a8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100e4ac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100e4b0:	e0fffd17 	ldw	r3,-12(fp)
 100e4b4:	e0bff617 	ldw	r2,-40(fp)
 100e4b8:	1885883a 	add	r2,r3,r2
 100e4bc:	10c00044 	addi	r3,r2,1
 100e4c0:	e0bffc17 	ldw	r2,-16(fp)
 100e4c4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100e4c8:	e0bffc17 	ldw	r2,-16(fp)
 100e4cc:	10c00217 	ldw	r3,8(r2)
 100e4d0:	e0bff617 	ldw	r2,-40(fp)
 100e4d4:	1880042e 	bgeu	r3,r2,100e4e8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 100e4d8:	e0bffc17 	ldw	r2,-16(fp)
 100e4dc:	00c00044 	movi	r3,1
 100e4e0:	10c00405 	stb	r3,16(r2)
 100e4e4:	00000206 	br	100e4f0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 100e4e8:	e0bffc17 	ldw	r2,-16(fp)
 100e4ec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100e4f0:	e0bffc17 	ldw	r2,-16(fp)
 100e4f4:	00c04074 	movhi	r3,257
 100e4f8:	18c5ef04 	addi	r3,r3,6076
 100e4fc:	e0fff915 	stw	r3,-28(fp)
 100e500:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100e504:	e0bffa17 	ldw	r2,-24(fp)
 100e508:	e0fff917 	ldw	r3,-28(fp)
 100e50c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100e510:	e0bff917 	ldw	r2,-28(fp)
 100e514:	10c00017 	ldw	r3,0(r2)
 100e518:	e0bffa17 	ldw	r2,-24(fp)
 100e51c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100e520:	e0bff917 	ldw	r2,-28(fp)
 100e524:	10800017 	ldw	r2,0(r2)
 100e528:	e0fffa17 	ldw	r3,-24(fp)
 100e52c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100e530:	e0bff917 	ldw	r2,-28(fp)
 100e534:	e0fffa17 	ldw	r3,-24(fp)
 100e538:	10c00015 	stw	r3,0(r2)
 100e53c:	e0bff717 	ldw	r2,-36(fp)
 100e540:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e544:	e0bffb17 	ldw	r2,-20(fp)
 100e548:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100e54c:	0005883a 	mov	r2,zero
 100e550:	00000306 	br	100e560 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 100e554:	00bffa84 	movi	r2,-22
 100e558:	00000106 	br	100e560 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 100e55c:	00bfde84 	movi	r2,-134
  }
}
 100e560:	e037883a 	mov	sp,fp
 100e564:	df000017 	ldw	fp,0(sp)
 100e568:	dec00104 	addi	sp,sp,4
 100e56c:	f800283a 	ret

0100e570 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 100e570:	defffa04 	addi	sp,sp,-24
 100e574:	dfc00515 	stw	ra,20(sp)
 100e578:	df000415 	stw	fp,16(sp)
 100e57c:	df000404 	addi	fp,sp,16
 100e580:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 100e584:	00800244 	movi	r2,9
 100e588:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 100e58c:	e13ffd17 	ldw	r4,-12(fp)
 100e590:	014003f4 	movhi	r5,15
 100e594:	29509004 	addi	r5,r5,16960
 100e598:	10013440 	call	1001344 <__mulsi3>
 100e59c:	0100bef4 	movhi	r4,763
 100e5a0:	213c2004 	addi	r4,r4,-3968
 100e5a4:	100b883a 	mov	r5,r2
 100e5a8:	10013340 	call	1001334 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 100e5ac:	01200034 	movhi	r4,32768
 100e5b0:	213fffc4 	addi	r4,r4,-1
 100e5b4:	100b883a 	mov	r5,r2
 100e5b8:	10013340 	call	1001334 <__udivsi3>
 100e5bc:	e13fff17 	ldw	r4,-4(fp)
 100e5c0:	100b883a 	mov	r5,r2
 100e5c4:	10013340 	call	1001334 <__udivsi3>
 100e5c8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 100e5cc:	e0bffe17 	ldw	r2,-8(fp)
 100e5d0:	10002926 	beq	r2,zero,100e678 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 100e5d4:	e03ffc15 	stw	zero,-16(fp)
 100e5d8:	00001606 	br	100e634 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 100e5dc:	00a00034 	movhi	r2,32768
 100e5e0:	10bfffc4 	addi	r2,r2,-1
 100e5e4:	10bfffc4 	addi	r2,r2,-1
 100e5e8:	103ffe1e 	bne	r2,zero,100e5e4 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 100e5ec:	e13ffd17 	ldw	r4,-12(fp)
 100e5f0:	014003f4 	movhi	r5,15
 100e5f4:	29509004 	addi	r5,r5,16960
 100e5f8:	10013440 	call	1001344 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 100e5fc:	0100bef4 	movhi	r4,763
 100e600:	213c2004 	addi	r4,r4,-3968
 100e604:	100b883a 	mov	r5,r2
 100e608:	10013340 	call	1001334 <__udivsi3>
 100e60c:	01200034 	movhi	r4,32768
 100e610:	213fffc4 	addi	r4,r4,-1
 100e614:	100b883a 	mov	r5,r2
 100e618:	10013340 	call	1001334 <__udivsi3>
 100e61c:	e0ffff17 	ldw	r3,-4(fp)
 100e620:	1885c83a 	sub	r2,r3,r2
 100e624:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 100e628:	e0bffc17 	ldw	r2,-16(fp)
 100e62c:	10800044 	addi	r2,r2,1
 100e630:	e0bffc15 	stw	r2,-16(fp)
 100e634:	e0fffc17 	ldw	r3,-16(fp)
 100e638:	e0bffe17 	ldw	r2,-8(fp)
 100e63c:	18bfe716 	blt	r3,r2,100e5dc <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 100e640:	e13ffd17 	ldw	r4,-12(fp)
 100e644:	014003f4 	movhi	r5,15
 100e648:	29509004 	addi	r5,r5,16960
 100e64c:	10013440 	call	1001344 <__mulsi3>
 100e650:	0100bef4 	movhi	r4,763
 100e654:	213c2004 	addi	r4,r4,-3968
 100e658:	100b883a 	mov	r5,r2
 100e65c:	10013340 	call	1001334 <__udivsi3>
 100e660:	1009883a 	mov	r4,r2
 100e664:	e17fff17 	ldw	r5,-4(fp)
 100e668:	10013440 	call	1001344 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100e66c:	10bfffc4 	addi	r2,r2,-1
 100e670:	103ffe1e 	bne	r2,zero,100e66c <alt_busy_sleep+0xfc>
 100e674:	00000d06 	br	100e6ac <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 100e678:	e13ffd17 	ldw	r4,-12(fp)
 100e67c:	014003f4 	movhi	r5,15
 100e680:	29509004 	addi	r5,r5,16960
 100e684:	10013440 	call	1001344 <__mulsi3>
 100e688:	0100bef4 	movhi	r4,763
 100e68c:	213c2004 	addi	r4,r4,-3968
 100e690:	100b883a 	mov	r5,r2
 100e694:	10013340 	call	1001334 <__udivsi3>
 100e698:	1009883a 	mov	r4,r2
 100e69c:	e17fff17 	ldw	r5,-4(fp)
 100e6a0:	10013440 	call	1001344 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 100e6a4:	10bfffc4 	addi	r2,r2,-1
 100e6a8:	00bffe16 	blt	zero,r2,100e6a4 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 100e6ac:	0005883a 	mov	r2,zero
}
 100e6b0:	e037883a 	mov	sp,fp
 100e6b4:	dfc00117 	ldw	ra,4(sp)
 100e6b8:	df000017 	ldw	fp,0(sp)
 100e6bc:	dec00204 	addi	sp,sp,8
 100e6c0:	f800283a 	ret

0100e6c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100e6c4:	defffe04 	addi	sp,sp,-8
 100e6c8:	dfc00115 	stw	ra,4(sp)
 100e6cc:	df000015 	stw	fp,0(sp)
 100e6d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e6d4:	00804074 	movhi	r2,257
 100e6d8:	1085ea04 	addi	r2,r2,6056
 100e6dc:	10800017 	ldw	r2,0(r2)
 100e6e0:	10000526 	beq	r2,zero,100e6f8 <alt_get_errno+0x34>
 100e6e4:	00804074 	movhi	r2,257
 100e6e8:	1085ea04 	addi	r2,r2,6056
 100e6ec:	10800017 	ldw	r2,0(r2)
 100e6f0:	103ee83a 	callr	r2
 100e6f4:	00000206 	br	100e700 <alt_get_errno+0x3c>
 100e6f8:	00804074 	movhi	r2,257
 100e6fc:	1085f604 	addi	r2,r2,6104
}
 100e700:	e037883a 	mov	sp,fp
 100e704:	dfc00117 	ldw	ra,4(sp)
 100e708:	df000017 	ldw	fp,0(sp)
 100e70c:	dec00204 	addi	sp,sp,8
 100e710:	f800283a 	ret

0100e714 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100e714:	defffa04 	addi	sp,sp,-24
 100e718:	dfc00515 	stw	ra,20(sp)
 100e71c:	df000415 	stw	fp,16(sp)
 100e720:	df000404 	addi	fp,sp,16
 100e724:	e13ffe15 	stw	r4,-8(fp)
 100e728:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100e72c:	e0bffe17 	ldw	r2,-8(fp)
 100e730:	10000326 	beq	r2,zero,100e740 <alt_dev_llist_insert+0x2c>
 100e734:	e0bffe17 	ldw	r2,-8(fp)
 100e738:	10800217 	ldw	r2,8(r2)
 100e73c:	1000051e 	bne	r2,zero,100e754 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 100e740:	100e6c40 	call	100e6c4 <alt_get_errno>
 100e744:	00c00584 	movi	r3,22
 100e748:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 100e74c:	00bffa84 	movi	r2,-22
 100e750:	00001306 	br	100e7a0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100e754:	e0bffe17 	ldw	r2,-8(fp)
 100e758:	e0ffff17 	ldw	r3,-4(fp)
 100e75c:	e0fffc15 	stw	r3,-16(fp)
 100e760:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100e764:	e0bffd17 	ldw	r2,-12(fp)
 100e768:	e0fffc17 	ldw	r3,-16(fp)
 100e76c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 100e770:	e0bffc17 	ldw	r2,-16(fp)
 100e774:	10c00017 	ldw	r3,0(r2)
 100e778:	e0bffd17 	ldw	r2,-12(fp)
 100e77c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100e780:	e0bffc17 	ldw	r2,-16(fp)
 100e784:	10800017 	ldw	r2,0(r2)
 100e788:	e0fffd17 	ldw	r3,-12(fp)
 100e78c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 100e790:	e0bffc17 	ldw	r2,-16(fp)
 100e794:	e0fffd17 	ldw	r3,-12(fp)
 100e798:	10c00015 	stw	r3,0(r2)

  return 0;  
 100e79c:	0005883a 	mov	r2,zero
}
 100e7a0:	e037883a 	mov	sp,fp
 100e7a4:	dfc00117 	ldw	ra,4(sp)
 100e7a8:	df000017 	ldw	fp,0(sp)
 100e7ac:	dec00204 	addi	sp,sp,8
 100e7b0:	f800283a 	ret

0100e7b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100e7b4:	defffd04 	addi	sp,sp,-12
 100e7b8:	dfc00215 	stw	ra,8(sp)
 100e7bc:	df000115 	stw	fp,4(sp)
 100e7c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e7c4:	00804074 	movhi	r2,257
 100e7c8:	10bdd404 	addi	r2,r2,-2224
 100e7cc:	e0bfff15 	stw	r2,-4(fp)
 100e7d0:	00000606 	br	100e7ec <_do_ctors+0x38>
        (*ctor) (); 
 100e7d4:	e0bfff17 	ldw	r2,-4(fp)
 100e7d8:	10800017 	ldw	r2,0(r2)
 100e7dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e7e0:	e0bfff17 	ldw	r2,-4(fp)
 100e7e4:	10bfff04 	addi	r2,r2,-4
 100e7e8:	e0bfff15 	stw	r2,-4(fp)
 100e7ec:	e0ffff17 	ldw	r3,-4(fp)
 100e7f0:	00804074 	movhi	r2,257
 100e7f4:	10bdd504 	addi	r2,r2,-2220
 100e7f8:	18bff62e 	bgeu	r3,r2,100e7d4 <_do_ctors+0x20>
        (*ctor) (); 
}
 100e7fc:	e037883a 	mov	sp,fp
 100e800:	dfc00117 	ldw	ra,4(sp)
 100e804:	df000017 	ldw	fp,0(sp)
 100e808:	dec00204 	addi	sp,sp,8
 100e80c:	f800283a 	ret

0100e810 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100e810:	defffd04 	addi	sp,sp,-12
 100e814:	dfc00215 	stw	ra,8(sp)
 100e818:	df000115 	stw	fp,4(sp)
 100e81c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e820:	00804074 	movhi	r2,257
 100e824:	10bdd404 	addi	r2,r2,-2224
 100e828:	e0bfff15 	stw	r2,-4(fp)
 100e82c:	00000606 	br	100e848 <_do_dtors+0x38>
        (*dtor) (); 
 100e830:	e0bfff17 	ldw	r2,-4(fp)
 100e834:	10800017 	ldw	r2,0(r2)
 100e838:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e83c:	e0bfff17 	ldw	r2,-4(fp)
 100e840:	10bfff04 	addi	r2,r2,-4
 100e844:	e0bfff15 	stw	r2,-4(fp)
 100e848:	e0ffff17 	ldw	r3,-4(fp)
 100e84c:	00804074 	movhi	r2,257
 100e850:	10bdd504 	addi	r2,r2,-2220
 100e854:	18bff62e 	bgeu	r3,r2,100e830 <_do_dtors+0x20>
        (*dtor) (); 
}
 100e858:	e037883a 	mov	sp,fp
 100e85c:	dfc00117 	ldw	ra,4(sp)
 100e860:	df000017 	ldw	fp,0(sp)
 100e864:	dec00204 	addi	sp,sp,8
 100e868:	f800283a 	ret

0100e86c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100e86c:	defffa04 	addi	sp,sp,-24
 100e870:	dfc00515 	stw	ra,20(sp)
 100e874:	df000415 	stw	fp,16(sp)
 100e878:	df000404 	addi	fp,sp,16
 100e87c:	e13ffe15 	stw	r4,-8(fp)
 100e880:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100e884:	e0bfff17 	ldw	r2,-4(fp)
 100e888:	10800017 	ldw	r2,0(r2)
 100e88c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100e890:	e13ffe17 	ldw	r4,-8(fp)
 100e894:	1002ba80 	call	1002ba8 <strlen>
 100e898:	10800044 	addi	r2,r2,1
 100e89c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100e8a0:	00000d06 	br	100e8d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100e8a4:	e0bffc17 	ldw	r2,-16(fp)
 100e8a8:	10c00217 	ldw	r3,8(r2)
 100e8ac:	e0bffd17 	ldw	r2,-12(fp)
 100e8b0:	1809883a 	mov	r4,r3
 100e8b4:	e17ffe17 	ldw	r5,-8(fp)
 100e8b8:	100d883a 	mov	r6,r2
 100e8bc:	100f3cc0 	call	100f3cc <memcmp>
 100e8c0:	1000021e 	bne	r2,zero,100e8cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100e8c4:	e0bffc17 	ldw	r2,-16(fp)
 100e8c8:	00000706 	br	100e8e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100e8cc:	e0bffc17 	ldw	r2,-16(fp)
 100e8d0:	10800017 	ldw	r2,0(r2)
 100e8d4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100e8d8:	e0fffc17 	ldw	r3,-16(fp)
 100e8dc:	e0bfff17 	ldw	r2,-4(fp)
 100e8e0:	18bff01e 	bne	r3,r2,100e8a4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100e8e4:	0005883a 	mov	r2,zero
}
 100e8e8:	e037883a 	mov	sp,fp
 100e8ec:	dfc00117 	ldw	ra,4(sp)
 100e8f0:	df000017 	ldw	fp,0(sp)
 100e8f4:	dec00204 	addi	sp,sp,8
 100e8f8:	f800283a 	ret

0100e8fc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100e8fc:	defffb04 	addi	sp,sp,-20
 100e900:	dfc00415 	stw	ra,16(sp)
 100e904:	df000315 	stw	fp,12(sp)
 100e908:	df000304 	addi	fp,sp,12
 100e90c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100e910:	00804074 	movhi	r2,257
 100e914:	1085e504 	addi	r2,r2,6036
 100e918:	10800017 	ldw	r2,0(r2)
 100e91c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100e920:	00003106 	br	100e9e8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 100e924:	e0bffd17 	ldw	r2,-12(fp)
 100e928:	10800217 	ldw	r2,8(r2)
 100e92c:	1009883a 	mov	r4,r2
 100e930:	1002ba80 	call	1002ba8 <strlen>
 100e934:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 100e938:	e0bffd17 	ldw	r2,-12(fp)
 100e93c:	10c00217 	ldw	r3,8(r2)
 100e940:	e0bffe17 	ldw	r2,-8(fp)
 100e944:	10bfffc4 	addi	r2,r2,-1
 100e948:	1885883a 	add	r2,r3,r2
 100e94c:	10800003 	ldbu	r2,0(r2)
 100e950:	10803fcc 	andi	r2,r2,255
 100e954:	1080201c 	xori	r2,r2,128
 100e958:	10bfe004 	addi	r2,r2,-128
 100e95c:	10800bd8 	cmpnei	r2,r2,47
 100e960:	1000031e 	bne	r2,zero,100e970 <alt_find_file+0x74>
    {
      len -= 1;
 100e964:	e0bffe17 	ldw	r2,-8(fp)
 100e968:	10bfffc4 	addi	r2,r2,-1
 100e96c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100e970:	e0bffe17 	ldw	r2,-8(fp)
 100e974:	e0ffff17 	ldw	r3,-4(fp)
 100e978:	1885883a 	add	r2,r3,r2
 100e97c:	10800003 	ldbu	r2,0(r2)
 100e980:	10803fcc 	andi	r2,r2,255
 100e984:	1080201c 	xori	r2,r2,128
 100e988:	10bfe004 	addi	r2,r2,-128
 100e98c:	10800be0 	cmpeqi	r2,r2,47
 100e990:	1000081e 	bne	r2,zero,100e9b4 <alt_find_file+0xb8>
 100e994:	e0bffe17 	ldw	r2,-8(fp)
 100e998:	e0ffff17 	ldw	r3,-4(fp)
 100e99c:	1885883a 	add	r2,r3,r2
 100e9a0:	10800003 	ldbu	r2,0(r2)
 100e9a4:	10803fcc 	andi	r2,r2,255
 100e9a8:	1080201c 	xori	r2,r2,128
 100e9ac:	10bfe004 	addi	r2,r2,-128
 100e9b0:	10000a1e 	bne	r2,zero,100e9dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 100e9b4:	e0bffd17 	ldw	r2,-12(fp)
 100e9b8:	10c00217 	ldw	r3,8(r2)
 100e9bc:	e0bffe17 	ldw	r2,-8(fp)
 100e9c0:	1809883a 	mov	r4,r3
 100e9c4:	e17fff17 	ldw	r5,-4(fp)
 100e9c8:	100d883a 	mov	r6,r2
 100e9cc:	100f3cc0 	call	100f3cc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100e9d0:	1000021e 	bne	r2,zero,100e9dc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100e9d4:	e0bffd17 	ldw	r2,-12(fp)
 100e9d8:	00000806 	br	100e9fc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 100e9dc:	e0bffd17 	ldw	r2,-12(fp)
 100e9e0:	10800017 	ldw	r2,0(r2)
 100e9e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100e9e8:	e0fffd17 	ldw	r3,-12(fp)
 100e9ec:	00804074 	movhi	r2,257
 100e9f0:	1085e504 	addi	r2,r2,6036
 100e9f4:	18bfcb1e 	bne	r3,r2,100e924 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100e9f8:	0005883a 	mov	r2,zero
}
 100e9fc:	e037883a 	mov	sp,fp
 100ea00:	dfc00117 	ldw	ra,4(sp)
 100ea04:	df000017 	ldw	fp,0(sp)
 100ea08:	dec00204 	addi	sp,sp,8
 100ea0c:	f800283a 	ret

0100ea10 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 100ea10:	defffc04 	addi	sp,sp,-16
 100ea14:	dfc00315 	stw	ra,12(sp)
 100ea18:	df000215 	stw	fp,8(sp)
 100ea1c:	df000204 	addi	fp,sp,8
 100ea20:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 100ea24:	e13fff17 	ldw	r4,-4(fp)
 100ea28:	d1600e04 	addi	r5,gp,-32712
 100ea2c:	100e86c0 	call	100e86c <alt_find_dev>
 100ea30:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 100ea34:	e0bffe17 	ldw	r2,-8(fp)
 100ea38:	10000926 	beq	r2,zero,100ea60 <alt_flash_open_dev+0x50>
 100ea3c:	e0bffe17 	ldw	r2,-8(fp)
 100ea40:	10800317 	ldw	r2,12(r2)
 100ea44:	10000626 	beq	r2,zero,100ea60 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 100ea48:	e0bffe17 	ldw	r2,-8(fp)
 100ea4c:	10800317 	ldw	r2,12(r2)
 100ea50:	e13ffe17 	ldw	r4,-8(fp)
 100ea54:	e17fff17 	ldw	r5,-4(fp)
 100ea58:	103ee83a 	callr	r2
 100ea5c:	00000106 	br	100ea64 <alt_flash_open_dev+0x54>
  }

  return dev;
 100ea60:	e0bffe17 	ldw	r2,-8(fp)
}
 100ea64:	e037883a 	mov	sp,fp
 100ea68:	dfc00117 	ldw	ra,4(sp)
 100ea6c:	df000017 	ldw	fp,0(sp)
 100ea70:	dec00204 	addi	sp,sp,8
 100ea74:	f800283a 	ret

0100ea78 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 100ea78:	defffd04 	addi	sp,sp,-12
 100ea7c:	dfc00215 	stw	ra,8(sp)
 100ea80:	df000115 	stw	fp,4(sp)
 100ea84:	df000104 	addi	fp,sp,4
 100ea88:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 100ea8c:	e0bfff17 	ldw	r2,-4(fp)
 100ea90:	10000726 	beq	r2,zero,100eab0 <alt_flash_close_dev+0x38>
 100ea94:	e0bfff17 	ldw	r2,-4(fp)
 100ea98:	10800417 	ldw	r2,16(r2)
 100ea9c:	10000426 	beq	r2,zero,100eab0 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 100eaa0:	e0bfff17 	ldw	r2,-4(fp)
 100eaa4:	10800417 	ldw	r2,16(r2)
 100eaa8:	e13fff17 	ldw	r4,-4(fp)
 100eaac:	103ee83a 	callr	r2
  }
  return;
 100eab0:	0001883a 	nop
}
 100eab4:	e037883a 	mov	sp,fp
 100eab8:	dfc00117 	ldw	ra,4(sp)
 100eabc:	df000017 	ldw	fp,0(sp)
 100eac0:	dec00204 	addi	sp,sp,8
 100eac4:	f800283a 	ret

0100eac8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100eac8:	defffa04 	addi	sp,sp,-24
 100eacc:	dfc00515 	stw	ra,20(sp)
 100ead0:	df000415 	stw	fp,16(sp)
 100ead4:	dc000315 	stw	r16,12(sp)
 100ead8:	df000304 	addi	fp,sp,12
 100eadc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100eae0:	00bffa04 	movi	r2,-24
 100eae4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100eae8:	e03ffd15 	stw	zero,-12(fp)
 100eaec:	00002106 	br	100eb74 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 100eaf0:	04004074 	movhi	r16,257
 100eaf4:	84010304 	addi	r16,r16,1036
 100eaf8:	e0bffd17 	ldw	r2,-12(fp)
 100eafc:	1009883a 	mov	r4,r2
 100eb00:	01400304 	movi	r5,12
 100eb04:	10013440 	call	1001344 <__mulsi3>
 100eb08:	8085883a 	add	r2,r16,r2
 100eb0c:	10800017 	ldw	r2,0(r2)
 100eb10:	1000151e 	bne	r2,zero,100eb68 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 100eb14:	04004074 	movhi	r16,257
 100eb18:	84010304 	addi	r16,r16,1036
 100eb1c:	e0bffd17 	ldw	r2,-12(fp)
 100eb20:	1009883a 	mov	r4,r2
 100eb24:	01400304 	movi	r5,12
 100eb28:	10013440 	call	1001344 <__mulsi3>
 100eb2c:	8085883a 	add	r2,r16,r2
 100eb30:	e0ffff17 	ldw	r3,-4(fp)
 100eb34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 100eb38:	00804074 	movhi	r2,257
 100eb3c:	1085e904 	addi	r2,r2,6052
 100eb40:	10c00017 	ldw	r3,0(r2)
 100eb44:	e0bffd17 	ldw	r2,-12(fp)
 100eb48:	1880040e 	bge	r3,r2,100eb5c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 100eb4c:	00804074 	movhi	r2,257
 100eb50:	1085e904 	addi	r2,r2,6052
 100eb54:	e0fffd17 	ldw	r3,-12(fp)
 100eb58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 100eb5c:	e0bffd17 	ldw	r2,-12(fp)
 100eb60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 100eb64:	00000606 	br	100eb80 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100eb68:	e0bffd17 	ldw	r2,-12(fp)
 100eb6c:	10800044 	addi	r2,r2,1
 100eb70:	e0bffd15 	stw	r2,-12(fp)
 100eb74:	e0bffd17 	ldw	r2,-12(fp)
 100eb78:	10800810 	cmplti	r2,r2,32
 100eb7c:	103fdc1e 	bne	r2,zero,100eaf0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100eb80:	e0bffe17 	ldw	r2,-8(fp)
}
 100eb84:	e037883a 	mov	sp,fp
 100eb88:	dfc00217 	ldw	ra,8(sp)
 100eb8c:	df000117 	ldw	fp,4(sp)
 100eb90:	dc000017 	ldw	r16,0(sp)
 100eb94:	dec00304 	addi	sp,sp,12
 100eb98:	f800283a 	ret

0100eb9c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100eb9c:	defff904 	addi	sp,sp,-28
 100eba0:	dfc00615 	stw	ra,24(sp)
 100eba4:	df000515 	stw	fp,20(sp)
 100eba8:	df000504 	addi	fp,sp,20
 100ebac:	e13ffc15 	stw	r4,-16(fp)
 100ebb0:	e17ffd15 	stw	r5,-12(fp)
 100ebb4:	e1bffe15 	stw	r6,-8(fp)
 100ebb8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100ebbc:	e0800217 	ldw	r2,8(fp)
 100ebc0:	d8800015 	stw	r2,0(sp)
 100ebc4:	e13ffc17 	ldw	r4,-16(fp)
 100ebc8:	e17ffd17 	ldw	r5,-12(fp)
 100ebcc:	e1bffe17 	ldw	r6,-8(fp)
 100ebd0:	e1ffff17 	ldw	r7,-4(fp)
 100ebd4:	100ed740 	call	100ed74 <alt_iic_isr_register>
}  
 100ebd8:	e037883a 	mov	sp,fp
 100ebdc:	dfc00117 	ldw	ra,4(sp)
 100ebe0:	df000017 	ldw	fp,0(sp)
 100ebe4:	dec00204 	addi	sp,sp,8
 100ebe8:	f800283a 	ret

0100ebec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100ebec:	defff904 	addi	sp,sp,-28
 100ebf0:	df000615 	stw	fp,24(sp)
 100ebf4:	df000604 	addi	fp,sp,24
 100ebf8:	e13ffe15 	stw	r4,-8(fp)
 100ebfc:	e17fff15 	stw	r5,-4(fp)
 100ec00:	e0bfff17 	ldw	r2,-4(fp)
 100ec04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ec08:	0005303a 	rdctl	r2,status
 100ec0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ec10:	e0fffb17 	ldw	r3,-20(fp)
 100ec14:	00bfff84 	movi	r2,-2
 100ec18:	1884703a 	and	r2,r3,r2
 100ec1c:	1001703a 	wrctl	status,r2
  
  return context;
 100ec20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100ec24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 100ec28:	e0bffa17 	ldw	r2,-24(fp)
 100ec2c:	00c00044 	movi	r3,1
 100ec30:	1884983a 	sll	r2,r3,r2
 100ec34:	1007883a 	mov	r3,r2
 100ec38:	00804074 	movhi	r2,257
 100ec3c:	10860204 	addi	r2,r2,6152
 100ec40:	10800017 	ldw	r2,0(r2)
 100ec44:	1886b03a 	or	r3,r3,r2
 100ec48:	00804074 	movhi	r2,257
 100ec4c:	10860204 	addi	r2,r2,6152
 100ec50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100ec54:	00804074 	movhi	r2,257
 100ec58:	10860204 	addi	r2,r2,6152
 100ec5c:	10800017 	ldw	r2,0(r2)
 100ec60:	100170fa 	wrctl	ienable,r2
 100ec64:	e0bffc17 	ldw	r2,-16(fp)
 100ec68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ec6c:	e0bffd17 	ldw	r2,-12(fp)
 100ec70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100ec74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100ec78:	e037883a 	mov	sp,fp
 100ec7c:	df000017 	ldw	fp,0(sp)
 100ec80:	dec00104 	addi	sp,sp,4
 100ec84:	f800283a 	ret

0100ec88 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100ec88:	defff904 	addi	sp,sp,-28
 100ec8c:	df000615 	stw	fp,24(sp)
 100ec90:	df000604 	addi	fp,sp,24
 100ec94:	e13ffe15 	stw	r4,-8(fp)
 100ec98:	e17fff15 	stw	r5,-4(fp)
 100ec9c:	e0bfff17 	ldw	r2,-4(fp)
 100eca0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100eca4:	0005303a 	rdctl	r2,status
 100eca8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ecac:	e0fffb17 	ldw	r3,-20(fp)
 100ecb0:	00bfff84 	movi	r2,-2
 100ecb4:	1884703a 	and	r2,r3,r2
 100ecb8:	1001703a 	wrctl	status,r2
  
  return context;
 100ecbc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100ecc0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 100ecc4:	e0bffa17 	ldw	r2,-24(fp)
 100ecc8:	00c00044 	movi	r3,1
 100eccc:	1884983a 	sll	r2,r3,r2
 100ecd0:	0084303a 	nor	r2,zero,r2
 100ecd4:	1007883a 	mov	r3,r2
 100ecd8:	00804074 	movhi	r2,257
 100ecdc:	10860204 	addi	r2,r2,6152
 100ece0:	10800017 	ldw	r2,0(r2)
 100ece4:	1886703a 	and	r3,r3,r2
 100ece8:	00804074 	movhi	r2,257
 100ecec:	10860204 	addi	r2,r2,6152
 100ecf0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100ecf4:	00804074 	movhi	r2,257
 100ecf8:	10860204 	addi	r2,r2,6152
 100ecfc:	10800017 	ldw	r2,0(r2)
 100ed00:	100170fa 	wrctl	ienable,r2
 100ed04:	e0bffc17 	ldw	r2,-16(fp)
 100ed08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ed0c:	e0bffd17 	ldw	r2,-12(fp)
 100ed10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100ed14:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100ed18:	e037883a 	mov	sp,fp
 100ed1c:	df000017 	ldw	fp,0(sp)
 100ed20:	dec00104 	addi	sp,sp,4
 100ed24:	f800283a 	ret

0100ed28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100ed28:	defffc04 	addi	sp,sp,-16
 100ed2c:	df000315 	stw	fp,12(sp)
 100ed30:	df000304 	addi	fp,sp,12
 100ed34:	e13ffe15 	stw	r4,-8(fp)
 100ed38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100ed3c:	000530fa 	rdctl	r2,ienable
 100ed40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100ed44:	e0bfff17 	ldw	r2,-4(fp)
 100ed48:	00c00044 	movi	r3,1
 100ed4c:	1884983a 	sll	r2,r3,r2
 100ed50:	1007883a 	mov	r3,r2
 100ed54:	e0bffd17 	ldw	r2,-12(fp)
 100ed58:	1884703a 	and	r2,r3,r2
 100ed5c:	1004c03a 	cmpne	r2,r2,zero
 100ed60:	10803fcc 	andi	r2,r2,255
}
 100ed64:	e037883a 	mov	sp,fp
 100ed68:	df000017 	ldw	fp,0(sp)
 100ed6c:	dec00104 	addi	sp,sp,4
 100ed70:	f800283a 	ret

0100ed74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100ed74:	defff504 	addi	sp,sp,-44
 100ed78:	dfc00a15 	stw	ra,40(sp)
 100ed7c:	df000915 	stw	fp,36(sp)
 100ed80:	df000904 	addi	fp,sp,36
 100ed84:	e13ffc15 	stw	r4,-16(fp)
 100ed88:	e17ffd15 	stw	r5,-12(fp)
 100ed8c:	e1bffe15 	stw	r6,-8(fp)
 100ed90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100ed94:	00bffa84 	movi	r2,-22
 100ed98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100ed9c:	e0bffd17 	ldw	r2,-12(fp)
 100eda0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100eda4:	e0bff817 	ldw	r2,-32(fp)
 100eda8:	10800808 	cmpgei	r2,r2,32
 100edac:	1000271e 	bne	r2,zero,100ee4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100edb0:	0005303a 	rdctl	r2,status
 100edb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100edb8:	e0fffa17 	ldw	r3,-24(fp)
 100edbc:	00bfff84 	movi	r2,-2
 100edc0:	1884703a 	and	r2,r3,r2
 100edc4:	1001703a 	wrctl	status,r2
  
  return context;
 100edc8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100edcc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 100edd0:	00c04074 	movhi	r3,257
 100edd4:	18c62304 	addi	r3,r3,6284
 100edd8:	e0bff817 	ldw	r2,-32(fp)
 100eddc:	100490fa 	slli	r2,r2,3
 100ede0:	1885883a 	add	r2,r3,r2
 100ede4:	e0fffe17 	ldw	r3,-8(fp)
 100ede8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 100edec:	00c04074 	movhi	r3,257
 100edf0:	18c62304 	addi	r3,r3,6284
 100edf4:	e0bff817 	ldw	r2,-32(fp)
 100edf8:	100490fa 	slli	r2,r2,3
 100edfc:	1885883a 	add	r2,r3,r2
 100ee00:	10800104 	addi	r2,r2,4
 100ee04:	e0ffff17 	ldw	r3,-4(fp)
 100ee08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100ee0c:	e0bffe17 	ldw	r2,-8(fp)
 100ee10:	10000526 	beq	r2,zero,100ee28 <alt_iic_isr_register+0xb4>
 100ee14:	e0bff817 	ldw	r2,-32(fp)
 100ee18:	e13ffc17 	ldw	r4,-16(fp)
 100ee1c:	100b883a 	mov	r5,r2
 100ee20:	100ebec0 	call	100ebec <alt_ic_irq_enable>
 100ee24:	00000406 	br	100ee38 <alt_iic_isr_register+0xc4>
 100ee28:	e0bff817 	ldw	r2,-32(fp)
 100ee2c:	e13ffc17 	ldw	r4,-16(fp)
 100ee30:	100b883a 	mov	r5,r2
 100ee34:	100ec880 	call	100ec88 <alt_ic_irq_disable>
 100ee38:	e0bff715 	stw	r2,-36(fp)
 100ee3c:	e0bff917 	ldw	r2,-28(fp)
 100ee40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ee44:	e0bffb17 	ldw	r2,-20(fp)
 100ee48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100ee4c:	e0bff717 	ldw	r2,-36(fp)
}
 100ee50:	e037883a 	mov	sp,fp
 100ee54:	dfc00117 	ldw	ra,4(sp)
 100ee58:	df000017 	ldw	fp,0(sp)
 100ee5c:	dec00204 	addi	sp,sp,8
 100ee60:	f800283a 	ret

0100ee64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100ee64:	defff804 	addi	sp,sp,-32
 100ee68:	dfc00715 	stw	ra,28(sp)
 100ee6c:	df000615 	stw	fp,24(sp)
 100ee70:	dc000515 	stw	r16,20(sp)
 100ee74:	df000504 	addi	fp,sp,20
 100ee78:	e13ffc15 	stw	r4,-16(fp)
 100ee7c:	e17ffd15 	stw	r5,-12(fp)
 100ee80:	e1bffe15 	stw	r6,-8(fp)
 100ee84:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100ee88:	e13ffd17 	ldw	r4,-12(fp)
 100ee8c:	e17ffe17 	ldw	r5,-8(fp)
 100ee90:	e1bfff17 	ldw	r6,-4(fp)
 100ee94:	100b7780 	call	100b778 <open>
 100ee98:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100ee9c:	e0bffb17 	ldw	r2,-20(fp)
 100eea0:	10002216 	blt	r2,zero,100ef2c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 100eea4:	04004074 	movhi	r16,257
 100eea8:	84010304 	addi	r16,r16,1036
 100eeac:	e0bffb17 	ldw	r2,-20(fp)
 100eeb0:	1009883a 	mov	r4,r2
 100eeb4:	01400304 	movi	r5,12
 100eeb8:	10013440 	call	1001344 <__mulsi3>
 100eebc:	8085883a 	add	r2,r16,r2
 100eec0:	10c00017 	ldw	r3,0(r2)
 100eec4:	e0bffc17 	ldw	r2,-16(fp)
 100eec8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100eecc:	04004074 	movhi	r16,257
 100eed0:	84010304 	addi	r16,r16,1036
 100eed4:	e0bffb17 	ldw	r2,-20(fp)
 100eed8:	1009883a 	mov	r4,r2
 100eedc:	01400304 	movi	r5,12
 100eee0:	10013440 	call	1001344 <__mulsi3>
 100eee4:	8085883a 	add	r2,r16,r2
 100eee8:	10800104 	addi	r2,r2,4
 100eeec:	10c00017 	ldw	r3,0(r2)
 100eef0:	e0bffc17 	ldw	r2,-16(fp)
 100eef4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100eef8:	04004074 	movhi	r16,257
 100eefc:	84010304 	addi	r16,r16,1036
 100ef00:	e0bffb17 	ldw	r2,-20(fp)
 100ef04:	1009883a 	mov	r4,r2
 100ef08:	01400304 	movi	r5,12
 100ef0c:	10013440 	call	1001344 <__mulsi3>
 100ef10:	8085883a 	add	r2,r16,r2
 100ef14:	10800204 	addi	r2,r2,8
 100ef18:	10c00017 	ldw	r3,0(r2)
 100ef1c:	e0bffc17 	ldw	r2,-16(fp)
 100ef20:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100ef24:	e13ffb17 	ldw	r4,-20(fp)
 100ef28:	100ba140 	call	100ba14 <alt_release_fd>
  }
} 
 100ef2c:	e037883a 	mov	sp,fp
 100ef30:	dfc00217 	ldw	ra,8(sp)
 100ef34:	df000117 	ldw	fp,4(sp)
 100ef38:	dc000017 	ldw	r16,0(sp)
 100ef3c:	dec00304 	addi	sp,sp,12
 100ef40:	f800283a 	ret

0100ef44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100ef44:	defffb04 	addi	sp,sp,-20
 100ef48:	dfc00415 	stw	ra,16(sp)
 100ef4c:	df000315 	stw	fp,12(sp)
 100ef50:	df000304 	addi	fp,sp,12
 100ef54:	e13ffd15 	stw	r4,-12(fp)
 100ef58:	e17ffe15 	stw	r5,-8(fp)
 100ef5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100ef60:	01004074 	movhi	r4,257
 100ef64:	21010604 	addi	r4,r4,1048
 100ef68:	e17ffd17 	ldw	r5,-12(fp)
 100ef6c:	01800044 	movi	r6,1
 100ef70:	01c07fc4 	movi	r7,511
 100ef74:	100ee640 	call	100ee64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100ef78:	01004074 	movhi	r4,257
 100ef7c:	21010304 	addi	r4,r4,1036
 100ef80:	e17ffe17 	ldw	r5,-8(fp)
 100ef84:	000d883a 	mov	r6,zero
 100ef88:	01c07fc4 	movi	r7,511
 100ef8c:	100ee640 	call	100ee64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100ef90:	01004074 	movhi	r4,257
 100ef94:	21010904 	addi	r4,r4,1060
 100ef98:	e17fff17 	ldw	r5,-4(fp)
 100ef9c:	01800044 	movi	r6,1
 100efa0:	01c07fc4 	movi	r7,511
 100efa4:	100ee640 	call	100ee64 <alt_open_fd>
}  
 100efa8:	e037883a 	mov	sp,fp
 100efac:	dfc00117 	ldw	ra,4(sp)
 100efb0:	df000017 	ldw	fp,0(sp)
 100efb4:	dec00204 	addi	sp,sp,8
 100efb8:	f800283a 	ret

0100efbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100efbc:	defffa04 	addi	sp,sp,-24
 100efc0:	df000515 	stw	fp,20(sp)
 100efc4:	df000504 	addi	fp,sp,20
 100efc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100efcc:	0005303a 	rdctl	r2,status
 100efd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100efd4:	e0fffc17 	ldw	r3,-16(fp)
 100efd8:	00bfff84 	movi	r2,-2
 100efdc:	1884703a 	and	r2,r3,r2
 100efe0:	1001703a 	wrctl	status,r2
  
  return context;
 100efe4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100efe8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 100efec:	e0bfff17 	ldw	r2,-4(fp)
 100eff0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100eff4:	e0bffd17 	ldw	r2,-12(fp)
 100eff8:	10800017 	ldw	r2,0(r2)
 100effc:	e0fffd17 	ldw	r3,-12(fp)
 100f000:	18c00117 	ldw	r3,4(r3)
 100f004:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100f008:	e0bffd17 	ldw	r2,-12(fp)
 100f00c:	10800117 	ldw	r2,4(r2)
 100f010:	e0fffd17 	ldw	r3,-12(fp)
 100f014:	18c00017 	ldw	r3,0(r3)
 100f018:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100f01c:	e0bffd17 	ldw	r2,-12(fp)
 100f020:	e0fffd17 	ldw	r3,-12(fp)
 100f024:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100f028:	e0bffd17 	ldw	r2,-12(fp)
 100f02c:	e0fffd17 	ldw	r3,-12(fp)
 100f030:	10c00015 	stw	r3,0(r2)
 100f034:	e0bffb17 	ldw	r2,-20(fp)
 100f038:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f03c:	e0bffe17 	ldw	r2,-8(fp)
 100f040:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100f044:	e037883a 	mov	sp,fp
 100f048:	df000017 	ldw	fp,0(sp)
 100f04c:	dec00104 	addi	sp,sp,4
 100f050:	f800283a 	ret

0100f054 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100f054:	defffb04 	addi	sp,sp,-20
 100f058:	dfc00415 	stw	ra,16(sp)
 100f05c:	df000315 	stw	fp,12(sp)
 100f060:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100f064:	d0a01117 	ldw	r2,-32700(gp)
 100f068:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100f06c:	d0a02617 	ldw	r2,-32616(gp)
 100f070:	10800044 	addi	r2,r2,1
 100f074:	d0a02615 	stw	r2,-32616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f078:	00002e06 	br	100f134 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100f07c:	e0bffd17 	ldw	r2,-12(fp)
 100f080:	10800017 	ldw	r2,0(r2)
 100f084:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100f088:	e0bffd17 	ldw	r2,-12(fp)
 100f08c:	10800403 	ldbu	r2,16(r2)
 100f090:	10803fcc 	andi	r2,r2,255
 100f094:	10000426 	beq	r2,zero,100f0a8 <alt_tick+0x54>
 100f098:	d0a02617 	ldw	r2,-32616(gp)
 100f09c:	1000021e 	bne	r2,zero,100f0a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100f0a0:	e0bffd17 	ldw	r2,-12(fp)
 100f0a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100f0a8:	e0bffd17 	ldw	r2,-12(fp)
 100f0ac:	10800217 	ldw	r2,8(r2)
 100f0b0:	d0e02617 	ldw	r3,-32616(gp)
 100f0b4:	18801d36 	bltu	r3,r2,100f12c <alt_tick+0xd8>
 100f0b8:	e0bffd17 	ldw	r2,-12(fp)
 100f0bc:	10800403 	ldbu	r2,16(r2)
 100f0c0:	10803fcc 	andi	r2,r2,255
 100f0c4:	1000191e 	bne	r2,zero,100f12c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100f0c8:	e0bffd17 	ldw	r2,-12(fp)
 100f0cc:	10c00317 	ldw	r3,12(r2)
 100f0d0:	e0bffd17 	ldw	r2,-12(fp)
 100f0d4:	10800517 	ldw	r2,20(r2)
 100f0d8:	1009883a 	mov	r4,r2
 100f0dc:	183ee83a 	callr	r3
 100f0e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100f0e4:	e0bfff17 	ldw	r2,-4(fp)
 100f0e8:	1000031e 	bne	r2,zero,100f0f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100f0ec:	e13ffd17 	ldw	r4,-12(fp)
 100f0f0:	100efbc0 	call	100efbc <alt_alarm_stop>
 100f0f4:	00000d06 	br	100f12c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100f0f8:	e0bffd17 	ldw	r2,-12(fp)
 100f0fc:	10c00217 	ldw	r3,8(r2)
 100f100:	e0bfff17 	ldw	r2,-4(fp)
 100f104:	1887883a 	add	r3,r3,r2
 100f108:	e0bffd17 	ldw	r2,-12(fp)
 100f10c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100f110:	e0bffd17 	ldw	r2,-12(fp)
 100f114:	10c00217 	ldw	r3,8(r2)
 100f118:	d0a02617 	ldw	r2,-32616(gp)
 100f11c:	1880032e 	bgeu	r3,r2,100f12c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100f120:	e0bffd17 	ldw	r2,-12(fp)
 100f124:	00c00044 	movi	r3,1
 100f128:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100f12c:	e0bffe17 	ldw	r2,-8(fp)
 100f130:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100f134:	e0fffd17 	ldw	r3,-12(fp)
 100f138:	d0a01104 	addi	r2,gp,-32700
 100f13c:	18bfcf1e 	bne	r3,r2,100f07c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100f140:	0001883a 	nop
}
 100f144:	e037883a 	mov	sp,fp
 100f148:	dfc00117 	ldw	ra,4(sp)
 100f14c:	df000017 	ldw	fp,0(sp)
 100f150:	dec00204 	addi	sp,sp,8
 100f154:	f800283a 	ret

0100f158 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100f158:	deffff04 	addi	sp,sp,-4
 100f15c:	df000015 	stw	fp,0(sp)
 100f160:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100f164:	000170fa 	wrctl	ienable,zero
}
 100f168:	e037883a 	mov	sp,fp
 100f16c:	df000017 	ldw	fp,0(sp)
 100f170:	dec00104 	addi	sp,sp,4
 100f174:	f800283a 	ret

0100f178 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 100f178:	defff404 	addi	sp,sp,-48
 100f17c:	df000b15 	stw	fp,44(sp)
 100f180:	df000b04 	addi	fp,sp,44
 100f184:	e13ffc15 	stw	r4,-16(fp)
 100f188:	e17ffd15 	stw	r5,-12(fp)
 100f18c:	e1bffe15 	stw	r6,-8(fp)
 100f190:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 100f194:	e0ffff17 	ldw	r3,-4(fp)
 100f198:	e0bffe17 	ldw	r2,-8(fp)
 100f19c:	1885883a 	add	r2,r3,r2
 100f1a0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 100f1a4:	e0c00217 	ldw	r3,8(fp)
 100f1a8:	e0800117 	ldw	r2,4(fp)
 100f1ac:	1885883a 	add	r2,r3,r2
 100f1b0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 100f1b4:	e0800117 	ldw	r2,4(fp)
 100f1b8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 100f1bc:	e0bffe17 	ldw	r2,-8(fp)
 100f1c0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 100f1c4:	00800044 	movi	r2,1
 100f1c8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 100f1cc:	e0bffc17 	ldw	r2,-16(fp)
 100f1d0:	10800504 	addi	r2,r2,20
 100f1d4:	e0fffd17 	ldw	r3,-12(fp)
 100f1d8:	01000044 	movi	r4,1
 100f1dc:	20c6983a 	sll	r3,r4,r3
 100f1e0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 100f1e4:	e0800317 	ldw	r2,12(fp)
 100f1e8:	1080008c 	andi	r2,r2,2
 100f1ec:	1000041e 	bne	r2,zero,100f200 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 100f1f0:	e0bffc17 	ldw	r2,-16(fp)
 100f1f4:	10800304 	addi	r2,r2,12
 100f1f8:	00c10004 	movi	r3,1024
 100f1fc:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 100f200:	e0bffc17 	ldw	r2,-16(fp)
 100f204:	10800037 	ldwio	r2,0(r2)
 100f208:	00000106 	br	100f210 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 100f20c:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 100f210:	e0bffc17 	ldw	r2,-16(fp)
 100f214:	10800204 	addi	r2,r2,8
 100f218:	10800037 	ldwio	r2,0(r2)
 100f21c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 100f220:	e0bffa17 	ldw	r2,-24(fp)
 100f224:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 100f228:	10000226 	beq	r2,zero,100f234 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 100f22c:	e0bff717 	ldw	r2,-36(fp)
 100f230:	1000031e 	bne	r2,zero,100f240 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 100f234:	e0bffa17 	ldw	r2,-24(fp)
 100f238:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 100f23c:	103ff426 	beq	r2,zero,100f210 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 100f240:	e0bffa17 	ldw	r2,-24(fp)
 100f244:	1080100c 	andi	r2,r2,64
 100f248:	10001e26 	beq	r2,zero,100f2c4 <alt_avalon_spi_command+0x14c>
 100f24c:	e0bff717 	ldw	r2,-36(fp)
 100f250:	00801c0e 	bge	zero,r2,100f2c4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 100f254:	e0bff717 	ldw	r2,-36(fp)
 100f258:	10bfffc4 	addi	r2,r2,-1
 100f25c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 100f260:	e0ffff17 	ldw	r3,-4(fp)
 100f264:	e0bff817 	ldw	r2,-32(fp)
 100f268:	18800a2e 	bgeu	r3,r2,100f294 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 100f26c:	e0bffc17 	ldw	r2,-16(fp)
 100f270:	10800104 	addi	r2,r2,4
 100f274:	e0ffff17 	ldw	r3,-4(fp)
 100f278:	18c00003 	ldbu	r3,0(r3)
 100f27c:	18c03fcc 	andi	r3,r3,255
 100f280:	e13fff17 	ldw	r4,-4(fp)
 100f284:	21000044 	addi	r4,r4,1
 100f288:	e13fff15 	stw	r4,-4(fp)
 100f28c:	10c00035 	stwio	r3,0(r2)
 100f290:	00000c06 	br	100f2c4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 100f294:	e0bff517 	ldw	r2,-44(fp)
 100f298:	10000826 	beq	r2,zero,100f2bc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 100f29c:	e0bff517 	ldw	r2,-44(fp)
 100f2a0:	10bfffc4 	addi	r2,r2,-1
 100f2a4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 100f2a8:	e0bffc17 	ldw	r2,-16(fp)
 100f2ac:	10800104 	addi	r2,r2,4
 100f2b0:	0007883a 	mov	r3,zero
 100f2b4:	10c00035 	stwio	r3,0(r2)
 100f2b8:	00000206 	br	100f2c4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 100f2bc:	00bf0004 	movi	r2,-1024
 100f2c0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 100f2c4:	e0bffa17 	ldw	r2,-24(fp)
 100f2c8:	1080200c 	andi	r2,r2,128
 100f2cc:	103fcf26 	beq	r2,zero,100f20c <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 100f2d0:	e0bffc17 	ldw	r2,-16(fp)
 100f2d4:	10800037 	ldwio	r2,0(r2)
 100f2d8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 100f2dc:	e0bff617 	ldw	r2,-40(fp)
 100f2e0:	10000426 	beq	r2,zero,100f2f4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 100f2e4:	e0bff617 	ldw	r2,-40(fp)
 100f2e8:	10bfffc4 	addi	r2,r2,-1
 100f2ec:	e0bff615 	stw	r2,-40(fp)
 100f2f0:	00000706 	br	100f310 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 100f2f4:	e0bffb17 	ldw	r2,-20(fp)
 100f2f8:	1007883a 	mov	r3,r2
 100f2fc:	e0800217 	ldw	r2,8(fp)
 100f300:	10c00005 	stb	r3,0(r2)
 100f304:	e0800217 	ldw	r2,8(fp)
 100f308:	10800044 	addi	r2,r2,1
 100f30c:	e0800215 	stw	r2,8(fp)
      credits++;
 100f310:	e0bff717 	ldw	r2,-36(fp)
 100f314:	10800044 	addi	r2,r2,1
 100f318:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 100f31c:	e0bff617 	ldw	r2,-40(fp)
 100f320:	103fba1e 	bne	r2,zero,100f20c <alt_avalon_spi_command+0x94>
 100f324:	e0c00217 	ldw	r3,8(fp)
 100f328:	e0bff917 	ldw	r2,-28(fp)
 100f32c:	18bfb71e 	bne	r3,r2,100f20c <alt_avalon_spi_command+0x94>
        break;
 100f330:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 100f334:	e0bffc17 	ldw	r2,-16(fp)
 100f338:	10800204 	addi	r2,r2,8
 100f33c:	10800037 	ldwio	r2,0(r2)
 100f340:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 100f344:	e0bffa17 	ldw	r2,-24(fp)
 100f348:	1080080c 	andi	r2,r2,32
 100f34c:	103ff926 	beq	r2,zero,100f334 <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 100f350:	e0800317 	ldw	r2,12(fp)
 100f354:	1080004c 	andi	r2,r2,1
 100f358:	1000041e 	bne	r2,zero,100f36c <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 100f35c:	e0bffc17 	ldw	r2,-16(fp)
 100f360:	10800304 	addi	r2,r2,12
 100f364:	0007883a 	mov	r3,zero
 100f368:	10c00035 	stwio	r3,0(r2)

  return read_length;
 100f36c:	e0800117 	ldw	r2,4(fp)
}
 100f370:	e037883a 	mov	sp,fp
 100f374:	df000017 	ldw	fp,0(sp)
 100f378:	dec00104 	addi	sp,sp,4
 100f37c:	f800283a 	ret

0100f380 <atexit>:
 100f380:	200b883a 	mov	r5,r4
 100f384:	000d883a 	mov	r6,zero
 100f388:	0009883a 	mov	r4,zero
 100f38c:	000f883a 	mov	r7,zero
 100f390:	100f4481 	jmpi	100f448 <__register_exitproc>

0100f394 <exit>:
 100f394:	defffe04 	addi	sp,sp,-8
 100f398:	000b883a 	mov	r5,zero
 100f39c:	dc000015 	stw	r16,0(sp)
 100f3a0:	dfc00115 	stw	ra,4(sp)
 100f3a4:	2021883a 	mov	r16,r4
 100f3a8:	100f5780 	call	100f578 <__call_exitprocs>
 100f3ac:	00804074 	movhi	r2,257
 100f3b0:	1085e004 	addi	r2,r2,6016
 100f3b4:	11000017 	ldw	r4,0(r2)
 100f3b8:	20800f17 	ldw	r2,60(r4)
 100f3bc:	10000126 	beq	r2,zero,100f3c4 <exit+0x30>
 100f3c0:	103ee83a 	callr	r2
 100f3c4:	8009883a 	mov	r4,r16
 100f3c8:	100f7180 	call	100f718 <_exit>

0100f3cc <memcmp>:
 100f3cc:	01c000c4 	movi	r7,3
 100f3d0:	3980192e 	bgeu	r7,r6,100f438 <memcmp+0x6c>
 100f3d4:	2904b03a 	or	r2,r5,r4
 100f3d8:	11c4703a 	and	r2,r2,r7
 100f3dc:	10000f26 	beq	r2,zero,100f41c <memcmp+0x50>
 100f3e0:	20c00003 	ldbu	r3,0(r4)
 100f3e4:	28800003 	ldbu	r2,0(r5)
 100f3e8:	1880151e 	bne	r3,r2,100f440 <memcmp+0x74>
 100f3ec:	31bfff84 	addi	r6,r6,-2
 100f3f0:	01ffffc4 	movi	r7,-1
 100f3f4:	00000406 	br	100f408 <memcmp+0x3c>
 100f3f8:	20c00003 	ldbu	r3,0(r4)
 100f3fc:	28800003 	ldbu	r2,0(r5)
 100f400:	31bfffc4 	addi	r6,r6,-1
 100f404:	18800e1e 	bne	r3,r2,100f440 <memcmp+0x74>
 100f408:	21000044 	addi	r4,r4,1
 100f40c:	29400044 	addi	r5,r5,1
 100f410:	31fff91e 	bne	r6,r7,100f3f8 <memcmp+0x2c>
 100f414:	0005883a 	mov	r2,zero
 100f418:	f800283a 	ret
 100f41c:	20c00017 	ldw	r3,0(r4)
 100f420:	28800017 	ldw	r2,0(r5)
 100f424:	1880041e 	bne	r3,r2,100f438 <memcmp+0x6c>
 100f428:	31bfff04 	addi	r6,r6,-4
 100f42c:	21000104 	addi	r4,r4,4
 100f430:	29400104 	addi	r5,r5,4
 100f434:	39bff936 	bltu	r7,r6,100f41c <memcmp+0x50>
 100f438:	303fe91e 	bne	r6,zero,100f3e0 <memcmp+0x14>
 100f43c:	003ff506 	br	100f414 <memcmp+0x48>
 100f440:	1885c83a 	sub	r2,r3,r2
 100f444:	f800283a 	ret

0100f448 <__register_exitproc>:
 100f448:	defffa04 	addi	sp,sp,-24
 100f44c:	00804074 	movhi	r2,257
 100f450:	1085e004 	addi	r2,r2,6016
 100f454:	dc000315 	stw	r16,12(sp)
 100f458:	14000017 	ldw	r16,0(r2)
 100f45c:	dc400415 	stw	r17,16(sp)
 100f460:	dfc00515 	stw	ra,20(sp)
 100f464:	80805217 	ldw	r2,328(r16)
 100f468:	2023883a 	mov	r17,r4
 100f46c:	10003e26 	beq	r2,zero,100f568 <__register_exitproc+0x120>
 100f470:	10c00117 	ldw	r3,4(r2)
 100f474:	020007c4 	movi	r8,31
 100f478:	40c0180e 	bge	r8,r3,100f4dc <__register_exitproc+0x94>
 100f47c:	00800034 	movhi	r2,0
 100f480:	10800004 	addi	r2,r2,0
 100f484:	1000061e 	bne	r2,zero,100f4a0 <__register_exitproc+0x58>
 100f488:	00bfffc4 	movi	r2,-1
 100f48c:	dfc00517 	ldw	ra,20(sp)
 100f490:	dc400417 	ldw	r17,16(sp)
 100f494:	dc000317 	ldw	r16,12(sp)
 100f498:	dec00604 	addi	sp,sp,24
 100f49c:	f800283a 	ret
 100f4a0:	01006404 	movi	r4,400
 100f4a4:	d9400015 	stw	r5,0(sp)
 100f4a8:	d9800115 	stw	r6,4(sp)
 100f4ac:	d9c00215 	stw	r7,8(sp)
 100f4b0:	00000000 	call	0 <__alt_mem_SDRAM-0x1000000>
 100f4b4:	d9400017 	ldw	r5,0(sp)
 100f4b8:	d9800117 	ldw	r6,4(sp)
 100f4bc:	d9c00217 	ldw	r7,8(sp)
 100f4c0:	103ff126 	beq	r2,zero,100f488 <__register_exitproc+0x40>
 100f4c4:	80c05217 	ldw	r3,328(r16)
 100f4c8:	10000115 	stw	zero,4(r2)
 100f4cc:	10c00015 	stw	r3,0(r2)
 100f4d0:	80805215 	stw	r2,328(r16)
 100f4d4:	10006215 	stw	zero,392(r2)
 100f4d8:	10006315 	stw	zero,396(r2)
 100f4dc:	10c00117 	ldw	r3,4(r2)
 100f4e0:	88000d1e 	bne	r17,zero,100f518 <__register_exitproc+0xd0>
 100f4e4:	19000084 	addi	r4,r3,2
 100f4e8:	2109883a 	add	r4,r4,r4
 100f4ec:	18c00044 	addi	r3,r3,1
 100f4f0:	2109883a 	add	r4,r4,r4
 100f4f4:	1109883a 	add	r4,r2,r4
 100f4f8:	10c00115 	stw	r3,4(r2)
 100f4fc:	0005883a 	mov	r2,zero
 100f500:	21400015 	stw	r5,0(r4)
 100f504:	dfc00517 	ldw	ra,20(sp)
 100f508:	dc400417 	ldw	r17,16(sp)
 100f50c:	dc000317 	ldw	r16,12(sp)
 100f510:	dec00604 	addi	sp,sp,24
 100f514:	f800283a 	ret
 100f518:	02400044 	movi	r9,1
 100f51c:	12806217 	ldw	r10,392(r2)
 100f520:	48d2983a 	sll	r9,r9,r3
 100f524:	19000804 	addi	r4,r3,32
 100f528:	18d1883a 	add	r8,r3,r3
 100f52c:	2109883a 	add	r4,r4,r4
 100f530:	4211883a 	add	r8,r8,r8
 100f534:	2109883a 	add	r4,r4,r4
 100f538:	1109883a 	add	r4,r2,r4
 100f53c:	1211883a 	add	r8,r2,r8
 100f540:	5254b03a 	or	r10,r10,r9
 100f544:	21c02215 	stw	r7,136(r4)
 100f548:	41802215 	stw	r6,136(r8)
 100f54c:	12806215 	stw	r10,392(r2)
 100f550:	01000084 	movi	r4,2
 100f554:	893fe31e 	bne	r17,r4,100f4e4 <__register_exitproc+0x9c>
 100f558:	11006317 	ldw	r4,396(r2)
 100f55c:	2252b03a 	or	r9,r4,r9
 100f560:	12406315 	stw	r9,396(r2)
 100f564:	003fdf06 	br	100f4e4 <__register_exitproc+0x9c>
 100f568:	00804074 	movhi	r2,257
 100f56c:	10866304 	addi	r2,r2,6540
 100f570:	80805215 	stw	r2,328(r16)
 100f574:	003fbe06 	br	100f470 <__register_exitproc+0x28>

0100f578 <__call_exitprocs>:
 100f578:	00804074 	movhi	r2,257
 100f57c:	1085e004 	addi	r2,r2,6016
 100f580:	10800017 	ldw	r2,0(r2)
 100f584:	defff304 	addi	sp,sp,-52
 100f588:	df000b15 	stw	fp,44(sp)
 100f58c:	d8800015 	stw	r2,0(sp)
 100f590:	10805204 	addi	r2,r2,328
 100f594:	dd400815 	stw	r21,32(sp)
 100f598:	dfc00c15 	stw	ra,48(sp)
 100f59c:	ddc00a15 	stw	r23,40(sp)
 100f5a0:	dd800915 	stw	r22,36(sp)
 100f5a4:	dd000715 	stw	r20,28(sp)
 100f5a8:	dcc00615 	stw	r19,24(sp)
 100f5ac:	dc800515 	stw	r18,20(sp)
 100f5b0:	dc400415 	stw	r17,16(sp)
 100f5b4:	dc000315 	stw	r16,12(sp)
 100f5b8:	d9000115 	stw	r4,4(sp)
 100f5bc:	2839883a 	mov	fp,r5
 100f5c0:	d8800215 	stw	r2,8(sp)
 100f5c4:	057fffc4 	movi	r21,-1
 100f5c8:	d8800017 	ldw	r2,0(sp)
 100f5cc:	ddc00217 	ldw	r23,8(sp)
 100f5d0:	14805217 	ldw	r18,328(r2)
 100f5d4:	90001726 	beq	r18,zero,100f634 <__call_exitprocs+0xbc>
 100f5d8:	94400117 	ldw	r17,4(r18)
 100f5dc:	8c3fffc4 	addi	r16,r17,-1
 100f5e0:	80001116 	blt	r16,zero,100f628 <__call_exitprocs+0xb0>
 100f5e4:	8c400044 	addi	r17,r17,1
 100f5e8:	8427883a 	add	r19,r16,r16
 100f5ec:	8c63883a 	add	r17,r17,r17
 100f5f0:	95802204 	addi	r22,r18,136
 100f5f4:	9ce7883a 	add	r19,r19,r19
 100f5f8:	8c63883a 	add	r17,r17,r17
 100f5fc:	b4e7883a 	add	r19,r22,r19
 100f600:	9463883a 	add	r17,r18,r17
 100f604:	e0001726 	beq	fp,zero,100f664 <__call_exitprocs+0xec>
 100f608:	8c87c83a 	sub	r3,r17,r18
 100f60c:	b0c7883a 	add	r3,r22,r3
 100f610:	18c01e17 	ldw	r3,120(r3)
 100f614:	1f001326 	beq	r3,fp,100f664 <__call_exitprocs+0xec>
 100f618:	843fffc4 	addi	r16,r16,-1
 100f61c:	9cffff04 	addi	r19,r19,-4
 100f620:	8c7fff04 	addi	r17,r17,-4
 100f624:	857ff71e 	bne	r16,r21,100f604 <__call_exitprocs+0x8c>
 100f628:	00800034 	movhi	r2,0
 100f62c:	10800004 	addi	r2,r2,0
 100f630:	10002a1e 	bne	r2,zero,100f6dc <__call_exitprocs+0x164>
 100f634:	dfc00c17 	ldw	ra,48(sp)
 100f638:	df000b17 	ldw	fp,44(sp)
 100f63c:	ddc00a17 	ldw	r23,40(sp)
 100f640:	dd800917 	ldw	r22,36(sp)
 100f644:	dd400817 	ldw	r21,32(sp)
 100f648:	dd000717 	ldw	r20,28(sp)
 100f64c:	dcc00617 	ldw	r19,24(sp)
 100f650:	dc800517 	ldw	r18,20(sp)
 100f654:	dc400417 	ldw	r17,16(sp)
 100f658:	dc000317 	ldw	r16,12(sp)
 100f65c:	dec00d04 	addi	sp,sp,52
 100f660:	f800283a 	ret
 100f664:	91000117 	ldw	r4,4(r18)
 100f668:	88c00017 	ldw	r3,0(r17)
 100f66c:	213fffc4 	addi	r4,r4,-1
 100f670:	24001526 	beq	r4,r16,100f6c8 <__call_exitprocs+0x150>
 100f674:	88000015 	stw	zero,0(r17)
 100f678:	183fe726 	beq	r3,zero,100f618 <__call_exitprocs+0xa0>
 100f67c:	00800044 	movi	r2,1
 100f680:	1408983a 	sll	r4,r2,r16
 100f684:	91406217 	ldw	r5,392(r18)
 100f688:	95000117 	ldw	r20,4(r18)
 100f68c:	214a703a 	and	r5,r4,r5
 100f690:	28000b26 	beq	r5,zero,100f6c0 <__call_exitprocs+0x148>
 100f694:	91406317 	ldw	r5,396(r18)
 100f698:	2148703a 	and	r4,r4,r5
 100f69c:	20000c1e 	bne	r4,zero,100f6d0 <__call_exitprocs+0x158>
 100f6a0:	99400017 	ldw	r5,0(r19)
 100f6a4:	d9000117 	ldw	r4,4(sp)
 100f6a8:	183ee83a 	callr	r3
 100f6ac:	90c00117 	ldw	r3,4(r18)
 100f6b0:	1d3fc51e 	bne	r3,r20,100f5c8 <__call_exitprocs+0x50>
 100f6b4:	b8c00017 	ldw	r3,0(r23)
 100f6b8:	1cbfd726 	beq	r3,r18,100f618 <__call_exitprocs+0xa0>
 100f6bc:	003fc206 	br	100f5c8 <__call_exitprocs+0x50>
 100f6c0:	183ee83a 	callr	r3
 100f6c4:	003ff906 	br	100f6ac <__call_exitprocs+0x134>
 100f6c8:	94000115 	stw	r16,4(r18)
 100f6cc:	003fea06 	br	100f678 <__call_exitprocs+0x100>
 100f6d0:	99000017 	ldw	r4,0(r19)
 100f6d4:	183ee83a 	callr	r3
 100f6d8:	003ff406 	br	100f6ac <__call_exitprocs+0x134>
 100f6dc:	90c00117 	ldw	r3,4(r18)
 100f6e0:	1800071e 	bne	r3,zero,100f700 <__call_exitprocs+0x188>
 100f6e4:	90c00017 	ldw	r3,0(r18)
 100f6e8:	18000926 	beq	r3,zero,100f710 <__call_exitprocs+0x198>
 100f6ec:	9009883a 	mov	r4,r18
 100f6f0:	b8c00015 	stw	r3,0(r23)
 100f6f4:	00000000 	call	0 <__alt_mem_SDRAM-0x1000000>
 100f6f8:	bc800017 	ldw	r18,0(r23)
 100f6fc:	003fb506 	br	100f5d4 <__call_exitprocs+0x5c>
 100f700:	90c00017 	ldw	r3,0(r18)
 100f704:	902f883a 	mov	r23,r18
 100f708:	1825883a 	mov	r18,r3
 100f70c:	003fb106 	br	100f5d4 <__call_exitprocs+0x5c>
 100f710:	0007883a 	mov	r3,zero
 100f714:	003ffb06 	br	100f704 <__call_exitprocs+0x18c>

0100f718 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100f718:	defffc04 	addi	sp,sp,-16
 100f71c:	df000315 	stw	fp,12(sp)
 100f720:	df000304 	addi	fp,sp,12
 100f724:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100f728:	0001883a 	nop
 100f72c:	e0bfff17 	ldw	r2,-4(fp)
 100f730:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 100f734:	e0bffd17 	ldw	r2,-12(fp)
 100f738:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100f73c:	e0bffe17 	ldw	r2,-8(fp)
 100f740:	10000226 	beq	r2,zero,100f74c <_exit+0x34>
    ALT_SIM_FAIL();
 100f744:	002af070 	cmpltui	zero,zero,43969
 100f748:	00000106 	br	100f750 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 100f74c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100f750:	003fff06 	br	100f750 <_exit+0x38>


CPU.elf:     file format elf32-littlenios2
CPU.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000116e8 memsz 0x00011a40 flags rwx
    LOAD off    0x00013000 vaddr 0x04011000 paddr 0x04011000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04011000  04011000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f514  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000448  0200f6cc  0200f6cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bf4  0200fb14  0200fb14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000358  02011708  02011708  00012708  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00013000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000fb0  00000000  00000000  00013028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002ce4c  00000000  00000000  00013fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b268  00000000  00000000  00040e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c975  00000000  00000000  0004c08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002058  00000000  00000000  00058a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000398c  00000000  00000000  0005aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000125a9  00000000  00000000  0005e3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00070994  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a78  00000000  00000000  000709d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00074ddf  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00074de2  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00074dee  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00074def  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000009  00000000  00000000  00074df0  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000009  00000000  00000000  00074df9  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000009  00000000  00000000  00074e02  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000003  00000000  00000000  00074e0b  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001e  00000000  00000000  00074e0e  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     00049fdf  00000000  00000000  00074e2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04011000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
0200f6cc l    d  .rodata	00000000 .rodata
0200fb14 l    d  .rwdata	00000000 .rwdata
02011708 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CPU_bsp//obj/HAL/src/crt0.o
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0200118c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
0200fb14 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
02002714 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02002bac l     F .text	00000034 __sprint_r
0200f912 l     O .rodata	00000010 blanks.3515
0200f922 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
02004cc4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02006734 l     F .text	00000008 __fp_lock
0200673c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0200f954 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0200fa9c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
02009d1c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200b098 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200b1b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200b1e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200b2e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0200b3d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0200b5b0 l     F .text	00000050 alt_get_errno
0200b600 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0200b848 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020116f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200baec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200bc2c l     F .text	00000038 alt_dev_reg
020104d0 l     O .rwdata	000000c8 epcs_flash_controller_0
02010598 l     O .rwdata	00001060 jtag_uart
020115f8 l     O .rwdata	000000c4 uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
0200bd20 l     F .text	00000038 alt_flash_device_register
0200bdac l     F .text	0000028c alt_epcs_flash_query
0200c038 l     F .text	000000e8 alt_epcs_flash_memcmp
0200c40c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200c8d4 l     F .text	00000204 altera_avalon_jtag_uart_irq
0200cad8 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0200d114 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0200d638 l     F .text	00000098 altera_avalon_uart_irq
0200d6d0 l     F .text	000000d8 altera_avalon_uart_rxirq
0200d7a8 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0200d938 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0200db8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
0200dde0 l     F .text	00000038 epcs_test_wip
0200de18 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0200e63c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0200eddc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02002660 g     F .text	0000001c putchar
020088f0 g     F .text	00000074 _mprec_log10
020003fc g     F .text	00000090 printPacket
0200c380 g     F .text	0000008c alt_epcs_flash_get_info
020089e0 g     F .text	00000084 __any_on
02007508 g     F .text	00000064 _isatty_r
0200f984 g     O .rodata	00000028 __mprec_tinytens
0200b4f8 g     F .text	00000078 alt_main
0200b054 g     F .text	00000044 __ashldi3
0200267c g     F .text	00000084 _puts_r
020117d0 g     O .bss	00000100 alt_irq
02007648 g     F .text	0000006c _lseek_r
02006a20 g     F .text	00000098 __sflags
0200a5bc g     F .text	0000005c __eqdf2
02000984 g     F .text	0000004c printHeader
02011a60 g       *ABS*	00000000 __alt_heap_start
0200261c g     F .text	0000003c printf
02002abc g     F .text	0000005c __sseek
020067d8 g     F .text	0000010c __sinit
02009380 g     F .text	0000013c __swbuf_r
0200756c g     F .text	0000009c _setlocale_r
02006750 g     F .text	00000078 __sfmoreglue
0200b590 g     F .text	00000020 __malloc_unlock
02011748 g     O .bss	00000004 altera_avalon_timer_ts_freq
020077ac g     F .text	0000018c memmove
020067c8 g     F .text	00000010 _cleanup
02007a14 g     F .text	000000a8 _Balloc
0200a674 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0200de50 g     F .text	000000f8 epcs_sector_erase
04011000 g     F .entry	00000000 __reset
020018c8 g     F .text	00000068 _fstat_r
0201171c g     O .bss	00000004 errno
02002968 g     F .text	00000014 __srget
0201173c g     O .bss	00000004 alt_argv
020196bc g       *ABS*	00000000 _gp
0200babc g     F .text	00000030 usleep
02010350 g     O .rwdata	00000180 alt_fd_list
02001a20 g     F .text	00000070 _getc_r
02001a90 g     F .text	00000088 getc
02002658 g     F .text	00000008 _putchar_r
0200e08c g     F .text	00000068 epcs_write_status_register
0200e7e4 g     F .text	00000090 alt_find_dev
02002444 g     F .text	00000140 memcpy
02006744 g     F .text	0000000c _cleanup_r
0200a798 g     F .text	000000d4 __floatsidf
02011718 g     O .bss	00000004 ANTUART
0200eebc g     F .text	00000078 alt_io_redirect
0200a73c g     F .text	0000005c __ltdf2
0200f6cc g       *ABS*	00000000 __DTOR_END__
02002700 g     F .text	00000014 puts
0200c514 g     F .text	00000104 alt_epcs_flash_write_block
0200884c g     F .text	000000a4 __ratio
0200ccd8 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
020025f0 g     F .text	0000002c _printf_r
04008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
020012ac g     F .text	00000008 __udivsi3
0200b330 g     F .text	000000a4 isatty
0200f9d4 g     O .rodata	000000c8 __mprec_tens
02007608 g     F .text	0000000c __locale_charset
02011728 g     O .bss	00000004 __malloc_top_pad
020116d4 g     O .rwdata	00000004 __mb_cur_max
02007614 g     F .text	0000000c _localeconv_r
02007e44 g     F .text	0000003c __i2b
02006ec4 g     F .text	000004e4 __sfvwrite_r
0200297c g     F .text	00000064 _sbrk_r
02008c10 g     F .text	0000006c _read_r
0201031c g     O .rwdata	0000000c __lc_ctype
020116e8 g     O .rwdata	00000004 alt_max_fd
0200ae3c g     F .text	00000104 __unpack_d
020095a4 g     F .text	0000013c _fclose_r
02006704 g     F .text	00000030 fflush
02011724 g     O .bss	00000004 __malloc_max_sbrked_mem
0200a070 g     F .text	00000054 __adddf3
0200c4a0 g     F .text	00000074 alt_epcs_flash_erase_block
020085c0 g     F .text	00000148 __b2d
020096f4 g     F .text	00000628 __umoddi3
0200b424 g     F .text	000000d4 lseek
020116c4 g     O .rwdata	00000004 _global_impure_ptr
0200e350 g     F .text	00000058 epcs_exit_4_bytes_mode
02008c7c g     F .text	000005fc _realloc_r
02011a60 g       *ABS*	00000000 __bss_end
0200ecec g     F .text	000000f0 alt_iic_isr_register
0200efcc g     F .text	00000104 alt_tick
02000b3c g     F .text	00000650 __udivdi3
0200f9ac g     O .rodata	00000028 __mprec_bigtens
02007c28 g     F .text	00000104 __s2b
0200a940 g     F .text	0000011c __floatunsidf
02008360 g     F .text	00000058 __mcmp
0200d590 g     F .text	000000a8 altera_avalon_uart_init
020069f0 g     F .text	00000018 __fp_lock_all
0200eca0 g     F .text	0000004c alt_ic_irq_enabled
0200ef34 g     F .text	00000098 alt_alarm_stop
0201174c g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
02010328 g     O .rwdata	00000028 alt_dev_null
02007d2c g     F .text	00000068 __hi0bits
0200a86c g     F .text	000000d4 __fixdfsi
020116e0 g     O .rwdata	00000008 alt_dev_list
0200bb3c g     F .text	000000f0 write
02008a64 g     F .text	000000bc _putc_r
020116bc g     O .rwdata	00000008 antNetKey
0200d458 g     F .text	00000028 alt_timestamp_freq
0200b230 g     F .text	000000b0 fstat
0200b010 g     F .text	00000044 __lshrdi3
02000000 g       *ABS*	00000000 __alt_mem_SDRAM
020080d8 g     F .text	0000012c __pow5mult
02011734 g     O .bss	00000004 __nlocale_changed
020012b4 g     F .text	00000008 __umodsi3
0200e210 g     F .text	00000068 epcs_read_electronic_signature
02011a60 g       *ABS*	00000000 end
0200dbdc g     F .text	000001a8 altera_avalon_uart_write
020018a4 g     F .text	00000024 fseek
0200c814 g     F .text	000000c0 altera_avalon_jtag_uart_init
0200f6cc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200d188 g     F .text	00000088 alt_avalon_timer_sc_init
0200d4e0 g     F .text	00000060 altera_avalon_uart_write_fd
0200ab6c g     F .text	000000ac __clzsi2
0200d540 g     F .text	00000050 altera_avalon_uart_close_fd
0200cef0 g     F .text	00000224 altera_avalon_jtag_uart_write
02011780 g     O .bss	00000050 rxBuf
020069e0 g     F .text	00000004 __sfp_lock_acquire
020076b4 g     F .text	000000f8 memchr
02002be0 g     F .text	00001e7c ___vfprintf_internal_r
02011708 g     O .bss	00000004 rxBufCnt
02006bf4 g     F .text	000002d0 _free_r
0200f4f0 g     F .text	000001a0 __call_exitprocs
0200291c g     F .text	0000004c __srget_r
020001f0 g     F .text	00000020 errorHandler
02011730 g     O .bss	00000004 __mlocale_changed
020116cc g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	00000038 _start
02011750 g     O .bss	00000004 _alt_tick_rate
02008204 g     F .text	0000015c __lshift
0200f0f0 g     F .text	00000208 alt_avalon_spi_command
02011754 g     O .bss	00000004 _alt_nticks
0200b898 g     F .text	000000f4 read
0200bc98 g     F .text	00000088 alt_sys_init
02002584 g     F .text	0000006c _open_r
0200f3c0 g     F .text	00000130 __register_exitproc
02007e80 g     F .text	00000258 __multiply
0200cb7c g     F .text	00000068 altera_avalon_jtag_uart_close
020012bc g     F .text	00000028 __mulsi3
02011758 g     O .bss	00000028 __malloc_current_mallinfo
02008708 g     F .text	00000144 __d2b
0200dd84 g     F .text	0000005c epcs_read_status_register
0200c6b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0200ea40 g     F .text	000000d4 alt_get_fd
0200e4e8 g     F .text	00000154 alt_busy_sleep
0200af40 g     F .text	000000d0 __fpcmp_parts_d
02004c60 g     F .text	00000064 _close_r
0200e278 g     F .text	00000080 epcs_read_device_id
0200f344 g     F .text	0000007c memcmp
0200c770 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02011a60 g       *ABS*	00000000 __alt_stack_base
0200c7c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04011000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
02001930 g     F .text	000000b0 _fwrite_r
02004aec g     F .text	00000174 __swsetup_r
0200a408 g     F .text	000001b4 __divdf3
020068e4 g     F .text	000000fc __sfp
02008964 g     F .text	0000007c __copybits
0200ff14 g     O .rwdata	00000408 __malloc_av_
020069ec g     F .text	00000004 __sinit_lock_release
0200a124 g     F .text	000002e4 __muldf3
020029e0 g     F .text	00000054 __sread
02011714 g     O .bss	00000004 packetCount
0200e874 g     F .text	00000114 alt_find_file
0200e68c g     F .text	000000a0 alt_dev_llist_insert
0200b570 g     F .text	00000020 __malloc_lock
0200ba0c g     F .text	000000b0 sbrk
0200651c g     F .text	000001e8 _fflush_r
020094d8 g     F .text	000000cc _calloc_r
020116f4 g     O .rwdata	00000008 alt_flash_dev_list
02000308 g     F .text	000000f4 sendPacket
02001414 g     F .text	0000001c fopen
02011708 g       *ABS*	00000000 __bss_start
02007938 g     F .text	000000dc memset
02000b20 g     F .text	0000001c main
02011740 g     O .bss	00000004 alt_envp
02011720 g     O .bss	00000004 __malloc_max_total_mem
0200c710 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020094bc g     F .text	0000001c __swbuf
02002b18 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
020096e0 g     F .text	00000014 fclose
0200d210 g     F .text	000000a8 alt_timestamp_start
020118d0 g     O .bss	00000190 _atexit0
02004f00 g     F .text	0000161c _dtoa_r
02001cc0 g     F .text	00000784 _malloc_r
020116ec g     O .rwdata	00000004 alt_errno
020009d0 g     F .text	00000150 readANT
020073a8 g     F .text	000000a8 _fwalk
02011710 g     O .bss	00000004 TicksPerSecond
02008b20 g     F .text	000000f0 putc
02001200 g     F .text	00000050 __divsi3
0200faa8 g     O .rodata	00000014 __thenan_df
02006ab8 g     F .text	0000013c _malloc_trim_r
0200f6cc g       *ABS*	00000000 __CTOR_END__
0200c120 g     F .text	00000260 alt_epcs_flash_write
020092dc g     F .text	000000a4 strcmp
0200f6cc g       *ABS*	00000000 __DTOR_LIST__
02000700 g     F .text	0000004c delay
0200a618 g     F .text	0000005c __nedf2
0200bc64 g     F .text	00000034 alt_irq_init
0200b98c g     F .text	00000080 alt_release_fd
0200f7c8 g     O .rodata	00000100 __clz_tab
0201172c g     O .bss	00000004 _PathLocale
0200f2f8 g     F .text	00000014 atexit
02004a80 g     F .text	0000006c _write_r
02007620 g     F .text	0000001c setlocale
020116c8 g     O .rwdata	00000004 _impure_ptr
02011738 g     O .bss	00000004 alt_argc
02011744 g     O .bss	00000004 altera_avalon_timer_ts_base
0200e788 g     F .text	0000005c _do_dtors
02001430 g     F .text	00000474 _fseek_r
02002730 g     F .text	000001ec __srefill_r
02000020 g       .exceptions	00000000 alt_irq_entry
0201170c g     O .bss	00000001 oldHeartRate
02008560 g     F .text	00000060 __ulp
02009278 g     F .text	00000038 __isinfd
02006a08 g     F .text	00000018 __fp_unlock_all
0200074c g     F .text	00000238 setup
020116d8 g     O .rwdata	00000008 alt_fs_list
020006a0 g     F .text	00000060 checkReturn
0200763c g     F .text	0000000c localeconv
0200d2b8 g     F .text	000001a0 alt_timestamp
0200df48 g     F .text	000000f4 epcs_read_buffer
0200bd58 g     F .text	00000054 alt_epcs_flash_init
0200eb14 g     F .text	00000050 alt_ic_isr_register
020019e0 g     F .text	00000040 fwrite
02011708 g       *ABS*	00000000 _edata
0200d480 g     F .text	00000060 altera_avalon_uart_read_fd
02011a60 g       *ABS*	00000000 _end
0200e988 g     F .text	00000068 alt_flash_open_dev
0200cbe4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02000290 g     F .text	00000078 writeByte
0200ec00 g     F .text	000000a0 alt_ic_irq_disable
0200e2f8 g     F .text	00000058 epcs_enter_4_bytes_mode
02002a34 g     F .text	00000088 __swrite
020116d0 g     O .rwdata	00000004 __malloc_trim_threshold
0200f0d0 g     F .text	00000020 altera_nios2_qsys_irq_init
0200f30c g     F .text	00000038 exit
02007450 g     F .text	000000b8 _fwalk_reent
020083b8 g     F .text	000001a8 __mdiff
0200e9f0 g     F .text	00000050 alt_flash_close_dev
02001250 g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
020069e4 g     F .text	00000004 __sfp_lock_release
0200d8e4 g     F .text	00000054 altera_avalon_uart_close
020012e4 g     F .text	00000130 _fopen_r
0200f690 g     F .text	0000003c _exit
020092b0 g     F .text	0000002c __isnand
0200e3a8 g     F .text	00000140 alt_alarm_start
0200aa5c g     F .text	00000110 __muldi3
02001b18 g     F .text	000001a8 __smakebuf_r
02002b20 g     F .text	0000008c strlen
0200e03c g     F .text	00000050 epcs_write_enable
0200b6f0 g     F .text	00000158 open
0200a6d8 g     F .text	00000064 __gedf2
020116fc g     O .rwdata	00000004 alt_priority_mask
0200eb64 g     F .text	0000009c alt_ic_irq_enable
02004a5c g     F .text	00000024 __vfprintf_internal
0200d988 g     F .text	00000204 altera_avalon_uart_read
0200a0c4 g     F .text	00000060 __subdf3
0200c618 g     F .text	00000098 alt_epcs_flash_read
02007d94 g     F .text	000000b0 __lo0bits
0200048c g     F .text	00000214 readPacket
02011700 g     O .rwdata	00000008 alt_alarm_list
0200e72c g     F .text	0000005c _do_ctors
02000210 g     F .text	00000080 millis
0200b0e8 g     F .text	000000cc close
0200ac18 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
020069e8 g     F .text	00000004 __sinit_lock_acquire
0200e0f4 g     F .text	0000011c epcs_write_buffer
02007ae4 g     F .text	00000144 __multadd
02007abc g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c08074 	movhi	r3,513
 2000130:	18c5f404 	addi	r3,r3,6096
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	01008074 	movhi	r4,513
 2000148:	2105f404 	addi	r4,r4,6096
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001c0:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 20001c4:	d6a5af14 	ori	gp,gp,38588
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001cc:	1085c214 	ori	r2,r2,5896

    movhi r3, %hi(__bss_end)
 20001d0:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001d4:	18c69814 	ori	r3,r3,6752

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	200b4f80 	call	200b4f8 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <errorHandler>:
  errPacketSizeExceeded,
  errChecksumError,
  errMissingSync
};

void errorHandler(int errIn) {
 20001f0:	defffe04 	addi	sp,sp,-8
 20001f4:	df000115 	stw	fp,4(sp)
 20001f8:	df000104 	addi	fp,sp,4
 20001fc:	e13fff15 	stw	r4,-4(fp)
#ifdef DEBUG
  printf("Error: %i \n", errIn);
#endif
  //while (true) {};
}
 2000200:	e037883a 	mov	sp,fp
 2000204:	df000017 	ldw	fp,0(sp)
 2000208:	dec00104 	addi	sp,sp,4
 200020c:	f800283a 	ret

02000210 <millis>:

alt_u32 millis(){
 2000210:	defffc04 	addi	sp,sp,-16
 2000214:	dfc00315 	stw	ra,12(sp)
 2000218:	df000215 	stw	fp,8(sp)
 200021c:	dc400115 	stw	r17,4(sp)
 2000220:	dc000015 	stw	r16,0(sp)
 2000224:	d839883a 	mov	fp,sp
#ifdef DEBUG
  //printf("Current System Time: %i \n", alt_timestamp());
#endif

  return (alt_timestamp()/TicksPerSecond)*1000;
 2000228:	200d2b80 	call	200d2b8 <alt_timestamp>
 200022c:	100b883a 	mov	r5,r2
 2000230:	180d883a 	mov	r6,r3
 2000234:	d0a01517 	ldw	r2,-32684(gp)
 2000238:	1021883a 	mov	r16,r2
 200023c:	1005d7fa 	srai	r2,r2,31
 2000240:	1023883a 	mov	r17,r2
 2000244:	2809883a 	mov	r4,r5
 2000248:	300b883a 	mov	r5,r6
 200024c:	800d883a 	mov	r6,r16
 2000250:	880f883a 	mov	r7,r17
 2000254:	2000b3c0 	call	2000b3c <__udivdi3>
 2000258:	1009883a 	mov	r4,r2
 200025c:	180b883a 	mov	r5,r3
 2000260:	2005883a 	mov	r2,r4
 2000264:	2807883a 	mov	r3,r5
 2000268:	1009883a 	mov	r4,r2
 200026c:	0140fa04 	movi	r5,1000
 2000270:	20012bc0 	call	20012bc <__mulsi3>
}
 2000274:	e037883a 	mov	sp,fp
 2000278:	dfc00317 	ldw	ra,12(sp)
 200027c:	df000217 	ldw	fp,8(sp)
 2000280:	dc400117 	ldw	r17,4(sp)
 2000284:	dc000017 	ldw	r16,0(sp)
 2000288:	dec00404 	addi	sp,sp,16
 200028c:	f800283a 	ret

02000290 <writeByte>:

unsigned char writeByte(unsigned char out, unsigned char chksum) {
 2000290:	defffc04 	addi	sp,sp,-16
 2000294:	dfc00315 	stw	ra,12(sp)
 2000298:	df000215 	stw	fp,8(sp)
 200029c:	df000204 	addi	fp,sp,8
 20002a0:	2007883a 	mov	r3,r4
 20002a4:	2805883a 	mov	r2,r5
 20002a8:	e0fffe05 	stb	r3,-8(fp)
 20002ac:	e0bfff05 	stb	r2,-4(fp)
#ifdef DEBUG
  printf("%02X ", out);
#endif
    if(ANTUART){
 20002b0:	d0a01717 	ldw	r2,-32676(gp)
 20002b4:	10000726 	beq	r2,zero,20002d4 <writeByte+0x44>
        fwrite (&out, 1, 1, ANTUART);
 20002b8:	d0a01717 	ldw	r2,-32676(gp)
 20002bc:	e13ffe04 	addi	r4,fp,-8
 20002c0:	01400044 	movi	r5,1
 20002c4:	01800044 	movi	r6,1
 20002c8:	100f883a 	mov	r7,r2
 20002cc:	20019e00 	call	20019e0 <fwrite>
 20002d0:	00000306 	br	20002e0 <writeByte+0x50>
    }
    else{
        printf("FAILURE: cannot write to ANTUART \n");
 20002d4:	01008074 	movhi	r4,513
 20002d8:	213db304 	addi	r4,r4,-2356
 20002dc:	20027000 	call	2002700 <puts>
    }

    chksum ^= out;
 20002e0:	e0bffe03 	ldbu	r2,-8(fp)
 20002e4:	e0ffff03 	ldbu	r3,-4(fp)
 20002e8:	1884f03a 	xor	r2,r3,r2
 20002ec:	e0bfff05 	stb	r2,-4(fp)
    return chksum;
 20002f0:	e0bfff03 	ldbu	r2,-4(fp)
}
 20002f4:	e037883a 	mov	sp,fp
 20002f8:	dfc00117 	ldw	ra,4(sp)
 20002fc:	df000017 	ldw	fp,0(sp)
 2000300:	dec00204 	addi	sp,sp,8
 2000304:	f800283a 	ret

02000308 <sendPacket>:

void sendPacket(unsigned msgId, unsigned char argCnt, ...) {
 2000308:	defff604 	addi	sp,sp,-40
 200030c:	dfc00715 	stw	ra,28(sp)
 2000310:	df000615 	stw	fp,24(sp)
 2000314:	df000604 	addi	fp,sp,24
 2000318:	e13ffe15 	stw	r4,-8(fp)
 200031c:	e1800215 	stw	r6,8(fp)
 2000320:	e1c00315 	stw	r7,12(fp)
 2000324:	2805883a 	mov	r2,r5
 2000328:	e0bfff05 	stb	r2,-4(fp)
  va_list arg;
  va_start (arg, argCnt);
 200032c:	e0800204 	addi	r2,fp,8
 2000330:	e0bffd15 	stw	r2,-12(fp)
  unsigned char byteOut;
  unsigned char chksum = 0;
 2000334:	e03ffa05 	stb	zero,-24(fp)
  int cnt = 0;
 2000338:	e03ffb15 	stw	zero,-20(fp)

#ifdef DEBUG
  printf("TX: ");
#endif

  chksum = writeByte(MESG_TX_SYNC, chksum); // send sync
 200033c:	e0bffa03 	ldbu	r2,-24(fp)
 2000340:	01002904 	movi	r4,164
 2000344:	100b883a 	mov	r5,r2
 2000348:	20002900 	call	2000290 <writeByte>
 200034c:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(argCnt, chksum);       // send length
 2000350:	e0ffff03 	ldbu	r3,-4(fp)
 2000354:	e0bffa03 	ldbu	r2,-24(fp)
 2000358:	1809883a 	mov	r4,r3
 200035c:	100b883a 	mov	r5,r2
 2000360:	20002900 	call	2000290 <writeByte>
 2000364:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(msgId, chksum);        // send message id
 2000368:	e0bffe17 	ldw	r2,-8(fp)
 200036c:	10c03fcc 	andi	r3,r2,255
 2000370:	e0bffa03 	ldbu	r2,-24(fp)
 2000374:	1809883a 	mov	r4,r3
 2000378:	100b883a 	mov	r5,r2
 200037c:	20002900 	call	2000290 <writeByte>
 2000380:	e0bffa05 	stb	r2,-24(fp)

  // send data
  for (cnt=1; cnt <= argCnt; cnt++) {
 2000384:	00800044 	movi	r2,1
 2000388:	e0bffb15 	stw	r2,-20(fp)
 200038c:	00000e06 	br	20003c8 <sendPacket+0xc0>
    byteOut = va_arg(arg, unsigned int);
 2000390:	e0bffd17 	ldw	r2,-12(fp)
 2000394:	10c00104 	addi	r3,r2,4
 2000398:	e0fffd15 	stw	r3,-12(fp)
 200039c:	10800017 	ldw	r2,0(r2)
 20003a0:	e0bffc05 	stb	r2,-16(fp)
    chksum = writeByte(byteOut, chksum);
 20003a4:	e0fffc03 	ldbu	r3,-16(fp)
 20003a8:	e0bffa03 	ldbu	r2,-24(fp)
 20003ac:	1809883a 	mov	r4,r3
 20003b0:	100b883a 	mov	r5,r2
 20003b4:	20002900 	call	2000290 <writeByte>
 20003b8:	e0bffa05 	stb	r2,-24(fp)
  chksum = writeByte(MESG_TX_SYNC, chksum); // send sync
  chksum = writeByte(argCnt, chksum);       // send length
  chksum = writeByte(msgId, chksum);        // send message id

  // send data
  for (cnt=1; cnt <= argCnt; cnt++) {
 20003bc:	e0bffb17 	ldw	r2,-20(fp)
 20003c0:	10800044 	addi	r2,r2,1
 20003c4:	e0bffb15 	stw	r2,-20(fp)
 20003c8:	e0ffff03 	ldbu	r3,-4(fp)
 20003cc:	e0bffb17 	ldw	r2,-20(fp)
 20003d0:	18bfef0e 	bge	r3,r2,2000390 <sendPacket+0x88>
    byteOut = va_arg(arg, unsigned int);
    chksum = writeByte(byteOut, chksum);
  }
  va_end(arg);

  writeByte(chksum,chksum);                 // send checksum
 20003d4:	e0fffa03 	ldbu	r3,-24(fp)
 20003d8:	e0bffa03 	ldbu	r2,-24(fp)
 20003dc:	1809883a 	mov	r4,r3
 20003e0:	100b883a 	mov	r5,r2
 20003e4:	20002900 	call	2000290 <writeByte>
  #ifdef DEBUG
      printf("\n");
  #endif
}
 20003e8:	e037883a 	mov	sp,fp
 20003ec:	dfc00117 	ldw	ra,4(sp)
 20003f0:	df000017 	ldw	fp,0(sp)
 20003f4:	dec00404 	addi	sp,sp,16
 20003f8:	f800283a 	ret

020003fc <printPacket>:

void printPacket(unsigned char * packet) {
 20003fc:	defffc04 	addi	sp,sp,-16
 2000400:	dfc00315 	stw	ra,12(sp)
 2000404:	df000215 	stw	fp,8(sp)
 2000408:	df000204 	addi	fp,sp,8
 200040c:	e13fff15 	stw	r4,-4(fp)
  int cnt = 0;
 2000410:	e03ffe15 	stw	zero,-8(fp)
  while (cnt < packet[1]+4) {
 2000414:	00000e06 	br	2000450 <printPacket+0x54>
    printf("%02X", packet[cnt++]);
 2000418:	e0bffe17 	ldw	r2,-8(fp)
 200041c:	e0ffff17 	ldw	r3,-4(fp)
 2000420:	1885883a 	add	r2,r3,r2
 2000424:	10800003 	ldbu	r2,0(r2)
 2000428:	10803fcc 	andi	r2,r2,255
 200042c:	e0fffe17 	ldw	r3,-8(fp)
 2000430:	18c00044 	addi	r3,r3,1
 2000434:	e0fffe15 	stw	r3,-8(fp)
 2000438:	01008074 	movhi	r4,513
 200043c:	213dbc04 	addi	r4,r4,-2320
 2000440:	100b883a 	mov	r5,r2
 2000444:	200261c0 	call	200261c <printf>
    printf(" ");
 2000448:	01000804 	movi	r4,32
 200044c:	20026600 	call	2002660 <putchar>
  #endif
}

void printPacket(unsigned char * packet) {
  int cnt = 0;
  while (cnt < packet[1]+4) {
 2000450:	e0bfff17 	ldw	r2,-4(fp)
 2000454:	10800044 	addi	r2,r2,1
 2000458:	10800003 	ldbu	r2,0(r2)
 200045c:	10803fcc 	andi	r2,r2,255
 2000460:	10800104 	addi	r2,r2,4
 2000464:	e0fffe17 	ldw	r3,-8(fp)
 2000468:	18bfeb16 	blt	r3,r2,2000418 <printPacket+0x1c>
    printf("%02X", packet[cnt++]);
    printf(" ");
  }
  printf("\n\n");
 200046c:	01008074 	movhi	r4,513
 2000470:	213dbe04 	addi	r4,r4,-2312
 2000474:	20027000 	call	2002700 <puts>
}
 2000478:	e037883a 	mov	sp,fp
 200047c:	dfc00117 	ldw	ra,4(sp)
 2000480:	df000017 	ldw	fp,0(sp)
 2000484:	dec00204 	addi	sp,sp,8
 2000488:	f800283a 	ret

0200048c <readPacket>:

int readPacket(unsigned char *packet, int packetSize, int readTimeout) {
 200048c:	defff704 	addi	sp,sp,-36
 2000490:	dfc00815 	stw	ra,32(sp)
 2000494:	df000715 	stw	fp,28(sp)
 2000498:	dc000615 	stw	r16,24(sp)
 200049c:	df000604 	addi	fp,sp,24
 20004a0:	e13ffd15 	stw	r4,-12(fp)
 20004a4:	e17ffe15 	stw	r5,-8(fp)
 20004a8:	e1bfff15 	stw	r6,-4(fp)
  unsigned char byteIn;
  unsigned char chksum = 0;
 20004ac:	e03ffa05 	stb	zero,-24(fp)

  long timeoutExit = millis() + readTimeout;
 20004b0:	20002100 	call	2000210 <millis>
 20004b4:	e0ffff17 	ldw	r3,-4(fp)
 20004b8:	10c5883a 	add	r2,r2,r3
 20004bc:	e0bffb15 	stw	r2,-20(fp)
  while (timeoutExit > millis()) {
 20004c0:	00006d06 	br	2000678 <readPacket+0x1ec>
    byteIn = getc(ANTUART);
 20004c4:	d0a01717 	ldw	r2,-32676(gp)
 20004c8:	1009883a 	mov	r4,r2
 20004cc:	2001a900 	call	2001a90 <getc>
 20004d0:	e0bffc05 	stb	r2,-16(fp)
    if (byteIn != EOF) {
      timeoutExit = millis() + readTimeout;
 20004d4:	20002100 	call	2000210 <millis>
 20004d8:	e0ffff17 	ldw	r3,-4(fp)
 20004dc:	10c5883a 	add	r2,r2,r3
 20004e0:	e0bffb15 	stw	r2,-20(fp)
      if ((byteIn == MESG_TX_SYNC) && (rxBufCnt == 0)) {
 20004e4:	e0bffc03 	ldbu	r2,-16(fp)
 20004e8:	10802918 	cmpnei	r2,r2,164
 20004ec:	10000d1e 	bne	r2,zero,2000524 <readPacket+0x98>
 20004f0:	d0a01317 	ldw	r2,-32692(gp)
 20004f4:	10000b1e 	bne	r2,zero,2000524 <readPacket+0x98>
        rxBuf[rxBufCnt++] = byteIn;
 20004f8:	d0a01317 	ldw	r2,-32692(gp)
 20004fc:	00c08074 	movhi	r3,513
 2000500:	18c5e004 	addi	r3,r3,6016
 2000504:	1887883a 	add	r3,r3,r2
 2000508:	e13ffc03 	ldbu	r4,-16(fp)
 200050c:	19000005 	stb	r4,0(r3)
 2000510:	10800044 	addi	r2,r2,1
 2000514:	d0a01315 	stw	r2,-32692(gp)
        chksum = byteIn;
 2000518:	e0bffc03 	ldbu	r2,-16(fp)
 200051c:	e0bffa05 	stb	r2,-24(fp)
 2000520:	00005506 	br	2000678 <readPacket+0x1ec>
      } else if ((rxBufCnt == 0) && (byteIn != MESG_TX_SYNC)) {
 2000524:	d0a01317 	ldw	r2,-32692(gp)
 2000528:	1000071e 	bne	r2,zero,2000548 <readPacket+0xbc>
 200052c:	e0bffc03 	ldbu	r2,-16(fp)
 2000530:	10802920 	cmpeqi	r2,r2,164
 2000534:	1000041e 	bne	r2,zero,2000548 <readPacket+0xbc>
        errorHandler(errMissingSync);
 2000538:	010000c4 	movi	r4,3
 200053c:	20001f00 	call	20001f0 <errorHandler>
        return -1;
 2000540:	00bfffc4 	movi	r2,-1
 2000544:	00005006 	br	2000688 <readPacket+0x1fc>
      } else if (rxBufCnt == 1) {
 2000548:	d0a01317 	ldw	r2,-32692(gp)
 200054c:	10800058 	cmpnei	r2,r2,1
 2000550:	10000d1e 	bne	r2,zero,2000588 <readPacket+0xfc>
        rxBuf[rxBufCnt++] = byteIn;       // second byte will be size
 2000554:	d0a01317 	ldw	r2,-32692(gp)
 2000558:	00c08074 	movhi	r3,513
 200055c:	18c5e004 	addi	r3,r3,6016
 2000560:	1887883a 	add	r3,r3,r2
 2000564:	e13ffc03 	ldbu	r4,-16(fp)
 2000568:	19000005 	stb	r4,0(r3)
 200056c:	10800044 	addi	r2,r2,1
 2000570:	d0a01315 	stw	r2,-32692(gp)
        chksum ^= byteIn;
 2000574:	e0fffa03 	ldbu	r3,-24(fp)
 2000578:	e0bffc03 	ldbu	r2,-16(fp)
 200057c:	1884f03a 	xor	r2,r3,r2
 2000580:	e0bffa05 	stb	r2,-24(fp)
 2000584:	00003c06 	br	2000678 <readPacket+0x1ec>
      } else if (rxBufCnt < rxBuf[1]+3) { // read rest of data taking into account sync, size, and checksum that are each 1 byte
 2000588:	00808074 	movhi	r2,513
 200058c:	1085e004 	addi	r2,r2,6016
 2000590:	10800043 	ldbu	r2,1(r2)
 2000594:	10803fcc 	andi	r2,r2,255
 2000598:	108000c4 	addi	r2,r2,3
 200059c:	d0e01317 	ldw	r3,-32692(gp)
 20005a0:	18800d0e 	bge	r3,r2,20005d8 <readPacket+0x14c>
        rxBuf[rxBufCnt++] = byteIn;
 20005a4:	d0a01317 	ldw	r2,-32692(gp)
 20005a8:	00c08074 	movhi	r3,513
 20005ac:	18c5e004 	addi	r3,r3,6016
 20005b0:	1887883a 	add	r3,r3,r2
 20005b4:	e13ffc03 	ldbu	r4,-16(fp)
 20005b8:	19000005 	stb	r4,0(r3)
 20005bc:	10800044 	addi	r2,r2,1
 20005c0:	d0a01315 	stw	r2,-32692(gp)
        chksum ^= byteIn;
 20005c4:	e0fffa03 	ldbu	r3,-24(fp)
 20005c8:	e0bffc03 	ldbu	r2,-16(fp)
 20005cc:	1884f03a 	xor	r2,r3,r2
 20005d0:	e0bffa05 	stb	r2,-24(fp)
 20005d4:	00002806 	br	2000678 <readPacket+0x1ec>
      } else {
        rxBuf[rxBufCnt++] = byteIn;
 20005d8:	d0a01317 	ldw	r2,-32692(gp)
 20005dc:	00c08074 	movhi	r3,513
 20005e0:	18c5e004 	addi	r3,r3,6016
 20005e4:	1887883a 	add	r3,r3,r2
 20005e8:	e13ffc03 	ldbu	r4,-16(fp)
 20005ec:	19000005 	stb	r4,0(r3)
 20005f0:	10800044 	addi	r2,r2,1
 20005f4:	d0a01315 	stw	r2,-32692(gp)
        if (rxBufCnt > packetSize) {
 20005f8:	d0a01317 	ldw	r2,-32692(gp)
 20005fc:	e0fffe17 	ldw	r3,-8(fp)
 2000600:	1880040e 	bge	r3,r2,2000614 <readPacket+0x188>
          errorHandler(errPacketSizeExceeded);
 2000604:	01000044 	movi	r4,1
 2000608:	20001f00 	call	20001f0 <errorHandler>
          return -1;
 200060c:	00bfffc4 	movi	r2,-1
 2000610:	00001d06 	br	2000688 <readPacket+0x1fc>
        } else {
          memcpy(packet, &rxBuf, rxBufCnt); // should be a complete packet. copy data to packet variable, check checksum and return
 2000614:	d0a01317 	ldw	r2,-32692(gp)
 2000618:	e13ffd17 	ldw	r4,-12(fp)
 200061c:	01408074 	movhi	r5,513
 2000620:	2945e004 	addi	r5,r5,6016
 2000624:	100d883a 	mov	r6,r2
 2000628:	20024440 	call	2002444 <memcpy>
          packetCount++;
 200062c:	d0a01617 	ldw	r2,-32680(gp)
 2000630:	10800044 	addi	r2,r2,1
 2000634:	d0a01615 	stw	r2,-32680(gp)
          if (chksum != packet[rxBufCnt-1]) {
 2000638:	d0a01317 	ldw	r2,-32692(gp)
 200063c:	10bfffc4 	addi	r2,r2,-1
 2000640:	e0fffd17 	ldw	r3,-12(fp)
 2000644:	1885883a 	add	r2,r3,r2
 2000648:	10800003 	ldbu	r2,0(r2)
 200064c:	10c03fcc 	andi	r3,r2,255
 2000650:	e0bffa03 	ldbu	r2,-24(fp)
 2000654:	18800526 	beq	r3,r2,200066c <readPacket+0x1e0>
            errorHandler(errChecksumError);
 2000658:	01000084 	movi	r4,2
 200065c:	20001f00 	call	20001f0 <errorHandler>
            rxBufCnt = 0;
 2000660:	d0201315 	stw	zero,-32692(gp)
            return -1;
 2000664:	00bfffc4 	movi	r2,-1
 2000668:	00000706 	br	2000688 <readPacket+0x1fc>
          } else {
            rxBufCnt = 0;
 200066c:	d0201315 	stw	zero,-32692(gp)
            return 1;
 2000670:	00800044 	movi	r2,1
 2000674:	00000406 	br	2000688 <readPacket+0x1fc>
int readPacket(unsigned char *packet, int packetSize, int readTimeout) {
  unsigned char byteIn;
  unsigned char chksum = 0;

  long timeoutExit = millis() + readTimeout;
  while (timeoutExit > millis()) {
 2000678:	e43ffb17 	ldw	r16,-20(fp)
 200067c:	20002100 	call	2000210 <millis>
 2000680:	143f9036 	bltu	r2,r16,20004c4 <readPacket+0x38>
          }
        }
      }
    }
  }
  return 0;
 2000684:	0005883a 	mov	r2,zero
}
 2000688:	e037883a 	mov	sp,fp
 200068c:	dfc00217 	ldw	ra,8(sp)
 2000690:	df000117 	ldw	fp,4(sp)
 2000694:	dc000017 	ldw	r16,0(sp)
 2000698:	dec00304 	addi	sp,sp,12
 200069c:	f800283a 	ret

020006a0 <checkReturn>:

int checkReturn() {
 20006a0:	deffe904 	addi	sp,sp,-92
 20006a4:	dfc01615 	stw	ra,88(sp)
 20006a8:	df001515 	stw	fp,84(sp)
 20006ac:	df001504 	addi	fp,sp,84
  unsigned char packet[MAXPACKETLEN];
  int packetsRead;

  packetsRead = readPacket(packet, MAXPACKETLEN, PACKETREADTIMEOUT);
 20006b0:	e0bfec04 	addi	r2,fp,-80
 20006b4:	1009883a 	mov	r4,r2
 20006b8:	01401404 	movi	r5,80
 20006bc:	01801904 	movi	r6,100
 20006c0:	200048c0 	call	200048c <readPacket>
 20006c4:	e0bfeb15 	stw	r2,-84(fp)
  // Data <sync> <len> <msg id> <channel> <msg id being responded to> <msg code> <chksum>
  // <sync> always 0xa4
  // <msg id> always 0x40 denoting a channel response / event
  // <msg code? success is 0.  See page 84 of ANT MPaU for other codes

  if (packetsRead > 0) {
 20006c8:	e0bfeb17 	ldw	r2,-84(fp)
 20006cc:	0080060e 	bge	zero,r2,20006e8 <checkReturn+0x48>
    printf("RX: ");
 20006d0:	01008074 	movhi	r4,513
 20006d4:	213dbf04 	addi	r4,r4,-2308
 20006d8:	200261c0 	call	200261c <printf>
    printPacket(packet);
 20006dc:	e0bfec04 	addi	r2,fp,-80
 20006e0:	1009883a 	mov	r4,r2
 20006e4:	20003fc0 	call	20003fc <printPacket>
  }

  return packetsRead;
 20006e8:	e0bfeb17 	ldw	r2,-84(fp)
}
 20006ec:	e037883a 	mov	sp,fp
 20006f0:	dfc00117 	ldw	ra,4(sp)
 20006f4:	df000017 	ldw	fp,0(sp)
 20006f8:	dec00204 	addi	sp,sp,8
 20006fc:	f800283a 	ret

02000700 <delay>:

void delay(int delayTime){
 2000700:	defffd04 	addi	sp,sp,-12
 2000704:	dfc00215 	stw	ra,8(sp)
 2000708:	df000115 	stw	fp,4(sp)
 200070c:	df000104 	addi	fp,sp,4
 2000710:	e13fff15 	stw	r4,-4(fp)
    if(usleep(delayTime*1000) != 0){
 2000714:	e13fff17 	ldw	r4,-4(fp)
 2000718:	0140fa04 	movi	r5,1000
 200071c:	20012bc0 	call	20012bc <__mulsi3>
 2000720:	1009883a 	mov	r4,r2
 2000724:	200babc0 	call	200babc <usleep>
 2000728:	10000326 	beq	r2,zero,2000738 <delay+0x38>
      printf("Delay failure");
 200072c:	01008074 	movhi	r4,513
 2000730:	213dc104 	addi	r4,r4,-2300
 2000734:	200261c0 	call	200261c <printf>
    }
}
 2000738:	e037883a 	mov	sp,fp
 200073c:	dfc00117 	ldw	ra,4(sp)
 2000740:	df000017 	ldw	fp,0(sp)
 2000744:	dec00204 	addi	sp,sp,8
 2000748:	f800283a 	ret

0200074c <setup>:

void setup() {
 200074c:	defff704 	addi	sp,sp,-36
 2000750:	dfc00815 	stw	ra,32(sp)
 2000754:	df000715 	stw	fp,28(sp)
 2000758:	df000704 	addi	fp,sp,28
  printf("Config Starting \n");
 200075c:	01008074 	movhi	r4,513
 2000760:	213dc504 	addi	r4,r4,-2284
 2000764:	20027000 	call	2002700 <puts>

  ANTUART = fopen("/dev/uart_0", "r+");
 2000768:	01008074 	movhi	r4,513
 200076c:	213dca04 	addi	r4,r4,-2264
 2000770:	01408074 	movhi	r5,513
 2000774:	297dcd04 	addi	r5,r5,-2252
 2000778:	20014140 	call	2001414 <fopen>
 200077c:	d0a01715 	stw	r2,-32676(gp)
  //ANTUART = open("/dev/uart_0" ,O_NONBLOCK | O_RDWR);
  if(ANTUART){;}else{
 2000780:	d0a01717 	ldw	r2,-32676(gp)
 2000784:	1000031e 	bne	r2,zero,2000794 <setup+0x48>
    printf("Cannot open ANTUART");
 2000788:	01008074 	movhi	r4,513
 200078c:	213dce04 	addi	r4,r4,-2248
 2000790:	200261c0 	call	200261c <printf>
#endif

  //alt_avalon_timer_sc_init (0x04011040, 2, 2, 1);

  // Reset
  sendPacket(MESG_SYSTEM_RESET_ID, 1, 0);
 2000794:	01001284 	movi	r4,74
 2000798:	01400044 	movi	r5,1
 200079c:	000d883a 	mov	r6,zero
 20007a0:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 20007a4:	20006a00 	call	20006a0 <checkReturn>
 20007a8:	1000021e 	bne	r2,zero,20007b4 <setup+0x68>
 20007ac:	0009883a 	mov	r4,zero
 20007b0:	20001f00 	call	20001f0 <errorHandler>
  delay(1000);
 20007b4:	0100fa04 	movi	r4,1000
 20007b8:	20007000 	call	2000700 <delay>

  // Assign Channel
  //   Channel: 0
  //   Channel Type: for Receive Channel
  //   Network Number: 0 for Public Network
  sendPacket(MESG_ASSIGN_CHANNEL_ID, 3, ANT_CHAN, 0, ANT_NET);
 20007bc:	d8000015 	stw	zero,0(sp)
 20007c0:	01001084 	movi	r4,66
 20007c4:	014000c4 	movi	r5,3
 20007c8:	000d883a 	mov	r6,zero
 20007cc:	000f883a 	mov	r7,zero
 20007d0:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 20007d4:	20006a00 	call	20006a0 <checkReturn>
 20007d8:	1000021e 	bne	r2,zero,20007e4 <setup+0x98>
 20007dc:	0009883a 	mov	r4,zero
 20007e0:	20001f00 	call	20001f0 <errorHandler>
  //   Channel Number: 0
  //   Device Number LSB: 0 for a slave to match any device
  //   Device Number MSB: 0 for a slave to match any device
  //   Device Type: bit 7 0 for pairing request bit 6..0 for device type
  //   Transmission Type: 0 to match any transmission type
  sendPacket(MESG_CHANNEL_ID_ID, 5, ANT_CHAN, 0, 0, ANT_DEVICETYPE, 0);
 20007e4:	d8000015 	stw	zero,0(sp)
 20007e8:	00801e04 	movi	r2,120
 20007ec:	d8800115 	stw	r2,4(sp)
 20007f0:	d8000215 	stw	zero,8(sp)
 20007f4:	01001444 	movi	r4,81
 20007f8:	01400144 	movi	r5,5
 20007fc:	000d883a 	mov	r6,zero
 2000800:	000f883a 	mov	r7,zero
 2000804:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 2000808:	20006a00 	call	20006a0 <checkReturn>
 200080c:	1000021e 	bne	r2,zero,2000818 <setup+0xcc>
 2000810:	0009883a 	mov	r4,zero
 2000814:	20001f00 	call	20001f0 <errorHandler>

  // Set Network Key
  //   Network Number
  //   Key
  sendPacket(MESG_NETWORK_KEY_ID, 9, ANT_NET, antNetKey[0], antNetKey[1], antNetKey[2], antNetKey[3], antNetKey[4], antNetKey[5], antNetKey[6], antNetKey[7]);
 2000818:	d0a00003 	ldbu	r2,-32768(gp)
 200081c:	10803fcc 	andi	r2,r2,255
 2000820:	00c08074 	movhi	r3,513
 2000824:	18c5af44 	addi	r3,r3,5821
 2000828:	18c00003 	ldbu	r3,0(r3)
 200082c:	1a403fcc 	andi	r9,r3,255
 2000830:	00c08074 	movhi	r3,513
 2000834:	18c5af84 	addi	r3,r3,5822
 2000838:	18c00003 	ldbu	r3,0(r3)
 200083c:	1a003fcc 	andi	r8,r3,255
 2000840:	00c08074 	movhi	r3,513
 2000844:	18c5afc4 	addi	r3,r3,5823
 2000848:	18c00003 	ldbu	r3,0(r3)
 200084c:	19c03fcc 	andi	r7,r3,255
 2000850:	00c08074 	movhi	r3,513
 2000854:	18c5b004 	addi	r3,r3,5824
 2000858:	18c00003 	ldbu	r3,0(r3)
 200085c:	19803fcc 	andi	r6,r3,255
 2000860:	00c08074 	movhi	r3,513
 2000864:	18c5b044 	addi	r3,r3,5825
 2000868:	18c00003 	ldbu	r3,0(r3)
 200086c:	19403fcc 	andi	r5,r3,255
 2000870:	00c08074 	movhi	r3,513
 2000874:	18c5b084 	addi	r3,r3,5826
 2000878:	18c00003 	ldbu	r3,0(r3)
 200087c:	19003fcc 	andi	r4,r3,255
 2000880:	00c08074 	movhi	r3,513
 2000884:	18c5b0c4 	addi	r3,r3,5827
 2000888:	18c00003 	ldbu	r3,0(r3)
 200088c:	18c03fcc 	andi	r3,r3,255
 2000890:	da400015 	stw	r9,0(sp)
 2000894:	da000115 	stw	r8,4(sp)
 2000898:	d9c00215 	stw	r7,8(sp)
 200089c:	d9800315 	stw	r6,12(sp)
 20008a0:	d9400415 	stw	r5,16(sp)
 20008a4:	d9000515 	stw	r4,20(sp)
 20008a8:	d8c00615 	stw	r3,24(sp)
 20008ac:	01001184 	movi	r4,70
 20008b0:	01400244 	movi	r5,9
 20008b4:	000d883a 	mov	r6,zero
 20008b8:	100f883a 	mov	r7,r2
 20008bc:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 20008c0:	20006a00 	call	20006a0 <checkReturn>
 20008c4:	1000021e 	bne	r2,zero,20008d0 <setup+0x184>
 20008c8:	0009883a 	mov	r4,zero
 20008cc:	20001f00 	call	20001f0 <errorHandler>

  // Set Channel Search Timeout
  //   Channel
  //   Timeout: time for timeout in 2.5 sec increments
  sendPacket(MESG_CHANNEL_SEARCH_TIMEOUT_ID, 2, ANT_CHAN, ANT_TIMEOUT);
 20008d0:	01001104 	movi	r4,68
 20008d4:	01400084 	movi	r5,2
 20008d8:	000d883a 	mov	r6,zero
 20008dc:	01c00304 	movi	r7,12
 20008e0:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 20008e4:	20006a00 	call	20006a0 <checkReturn>
 20008e8:	1000021e 	bne	r2,zero,20008f4 <setup+0x1a8>
 20008ec:	0009883a 	mov	r4,zero
 20008f0:	20001f00 	call	20001f0 <errorHandler>

  //ANT_send(1+2, MESG_CHANNEL_RADIO_FREQ_ID, CHAN0, FREQ);
  // Set Channel RF Frequency
  //   Channel
  //   Frequency = 2400 MHz + (FREQ * 1 MHz) (See page 59 of ANT MPaU) 0x39 = 2457 MHz
  sendPacket(MESG_CHANNEL_RADIO_FREQ_ID, 2, ANT_CHAN, ANT_FREQ);
 20008f4:	01001144 	movi	r4,69
 20008f8:	01400084 	movi	r5,2
 20008fc:	000d883a 	mov	r6,zero
 2000900:	01c00e44 	movi	r7,57
 2000904:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 2000908:	20006a00 	call	20006a0 <checkReturn>
 200090c:	1000021e 	bne	r2,zero,2000918 <setup+0x1cc>
 2000910:	0009883a 	mov	r4,zero
 2000914:	20001f00 	call	20001f0 <errorHandler>

  // Set Channel Period
  sendPacket(MESG_CHANNEL_MESG_PERIOD_ID, 3, ANT_CHAN, (ANT_PERIOD & 0x00FF), ((ANT_PERIOD & 0xFF00) >> 8));
 2000918:	008007c4 	movi	r2,31
 200091c:	d8800015 	stw	r2,0(sp)
 2000920:	010010c4 	movi	r4,67
 2000924:	014000c4 	movi	r5,3
 2000928:	000d883a 	mov	r6,zero
 200092c:	01c02184 	movi	r7,134
 2000930:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 2000934:	20006a00 	call	20006a0 <checkReturn>
 2000938:	1000021e 	bne	r2,zero,2000944 <setup+0x1f8>
 200093c:	0009883a 	mov	r4,zero
 2000940:	20001f00 	call	20001f0 <errorHandler>

  //Open Channel
  sendPacket(MESG_OPEN_CHANNEL_ID, 1, ANT_CHAN);
 2000944:	010012c4 	movi	r4,75
 2000948:	01400044 	movi	r5,1
 200094c:	000d883a 	mov	r6,zero
 2000950:	20003080 	call	2000308 <sendPacket>
  if (checkReturn() == 0) errorHandler(errDefault);
 2000954:	20006a00 	call	20006a0 <checkReturn>
 2000958:	1000021e 	bne	r2,zero,2000964 <setup+0x218>
 200095c:	0009883a 	mov	r4,zero
 2000960:	20001f00 	call	20001f0 <errorHandler>

  printf("Config Done");
 2000964:	01008074 	movhi	r4,513
 2000968:	213dd304 	addi	r4,r4,-2228
 200096c:	200261c0 	call	200261c <printf>
}
 2000970:	e037883a 	mov	sp,fp
 2000974:	dfc00117 	ldw	ra,4(sp)
 2000978:	df000017 	ldw	fp,0(sp)
 200097c:	dec00204 	addi	sp,sp,8
 2000980:	f800283a 	ret

02000984 <printHeader>:

void printHeader(const char * title) {
 2000984:	defffd04 	addi	sp,sp,-12
 2000988:	dfc00215 	stw	ra,8(sp)
 200098c:	df000115 	stw	fp,4(sp)
 2000990:	df000104 	addi	fp,sp,4
 2000994:	e13fff15 	stw	r4,-4(fp)
    printf("%i %i - %s",millis(), packetCount, title);
 2000998:	20002100 	call	2000210 <millis>
 200099c:	1007883a 	mov	r3,r2
 20009a0:	d0a01617 	ldw	r2,-32680(gp)
 20009a4:	01008074 	movhi	r4,513
 20009a8:	213dd604 	addi	r4,r4,-2216
 20009ac:	180b883a 	mov	r5,r3
 20009b0:	100d883a 	mov	r6,r2
 20009b4:	e1ffff17 	ldw	r7,-4(fp)
 20009b8:	200261c0 	call	200261c <printf>
}
 20009bc:	e037883a 	mov	sp,fp
 20009c0:	dfc00117 	ldw	ra,4(sp)
 20009c4:	df000017 	ldw	fp,0(sp)
 20009c8:	dec00204 	addi	sp,sp,8
 20009cc:	f800283a 	ret

020009d0 <readANT>:

void readANT(){
 20009d0:	deffe704 	addi	sp,sp,-100
 20009d4:	dfc01815 	stw	ra,96(sp)
 20009d8:	df001715 	stw	fp,92(sp)
 20009dc:	df001704 	addi	fp,sp,92
      unsigned char packet[MAXPACKETLEN];
      int packetsRead;
      unsigned char msgId, msgSize;
      unsigned char *msgData;

      packetsRead = readPacket(packet, MAXPACKETLEN, PACKETREADTIMEOUT);
 20009e0:	e0bfec04 	addi	r2,fp,-80
 20009e4:	1009883a 	mov	r4,r2
 20009e8:	01401404 	movi	r5,80
 20009ec:	01801904 	movi	r6,100
 20009f0:	200048c0 	call	200048c <readPacket>
 20009f4:	e0bfe915 	stw	r2,-92(fp)
      if (packetsRead > 0) {
 20009f8:	e0bfe917 	ldw	r2,-92(fp)
 20009fc:	0080430e 	bge	zero,r2,2000b0c <readANT+0x13c>
        msgId = packet[2];
 2000a00:	e0bfec83 	ldbu	r2,-78(fp)
 2000a04:	e0bfea05 	stb	r2,-88(fp)
        msgSize = packet[1];
 2000a08:	e0bfec43 	ldbu	r2,-79(fp)
 2000a0c:	e0bfea45 	stb	r2,-87(fp)
        msgData = &packet[3];
 2000a10:	e0bfec04 	addi	r2,fp,-80
 2000a14:	108000c4 	addi	r2,r2,3
 2000a18:	e0bfeb15 	stw	r2,-84(fp)

        switch (msgId) {
 2000a1c:	e0bfea03 	ldbu	r2,-88(fp)
 2000a20:	10c013a0 	cmpeqi	r3,r2,78
 2000a24:	1800121e 	bne	r3,zero,2000a70 <readANT+0xa0>
 2000a28:	10c01520 	cmpeqi	r3,r2,84
 2000a2c:	1800091e 	bne	r3,zero,2000a54 <readANT+0x84>
 2000a30:	10801020 	cmpeqi	r2,r2,64
 2000a34:	10002c26 	beq	r2,zero,2000ae8 <readANT+0x118>
          case MESG_RESPONSE_EVENT_ID:
            printHeader("MESG_RESPONSE_EVENT_ID: ");
 2000a38:	01008074 	movhi	r4,513
 2000a3c:	213dd904 	addi	r4,r4,-2204
 2000a40:	20009840 	call	2000984 <printHeader>
            printPacket(packet);
 2000a44:	e0bfec04 	addi	r2,fp,-80
 2000a48:	1009883a 	mov	r4,r2
 2000a4c:	20003fc0 	call	20003fc <printPacket>
            break;
 2000a50:	00002e06 	br	2000b0c <readANT+0x13c>

          case MESG_CAPABILITIES_ID:
            printHeader("MESG_CAPABILITIES_ID: ");
 2000a54:	01008074 	movhi	r4,513
 2000a58:	213de004 	addi	r4,r4,-2176
 2000a5c:	20009840 	call	2000984 <printHeader>
            printPacket(packet);
 2000a60:	e0bfec04 	addi	r2,fp,-80
 2000a64:	1009883a 	mov	r4,r2
 2000a68:	20003fc0 	call	20003fc <printPacket>
            break;
 2000a6c:	00002706 	br	2000b0c <readANT+0x13c>

          case MESG_BROADCAST_DATA_ID:
            if (oldHeartRate != msgData[msgSize-1]) {
 2000a70:	e0bfea43 	ldbu	r2,-87(fp)
 2000a74:	10bfffc4 	addi	r2,r2,-1
 2000a78:	e0ffeb17 	ldw	r3,-84(fp)
 2000a7c:	1885883a 	add	r2,r3,r2
 2000a80:	10c00003 	ldbu	r3,0(r2)
 2000a84:	d0a01403 	ldbu	r2,-32688(gp)
 2000a88:	18c03fcc 	andi	r3,r3,255
 2000a8c:	10803fcc 	andi	r2,r2,255
 2000a90:	18801d26 	beq	r3,r2,2000b08 <readANT+0x138>
              oldHeartRate = msgData[msgSize-1];
 2000a94:	e0bfea43 	ldbu	r2,-87(fp)
 2000a98:	10bfffc4 	addi	r2,r2,-1
 2000a9c:	e0ffeb17 	ldw	r3,-84(fp)
 2000aa0:	1885883a 	add	r2,r3,r2
 2000aa4:	10800003 	ldbu	r2,0(r2)
 2000aa8:	d0a01405 	stb	r2,-32688(gp)
              printHeader("New Heart Rate: ");
 2000aac:	01008074 	movhi	r4,513
 2000ab0:	213de604 	addi	r4,r4,-2152
 2000ab4:	20009840 	call	2000984 <printHeader>
              printf("%i \n", oldHeartRate);
 2000ab8:	d0a01403 	ldbu	r2,-32688(gp)
 2000abc:	10803fcc 	andi	r2,r2,255
 2000ac0:	01008074 	movhi	r4,513
 2000ac4:	213deb04 	addi	r4,r4,-2132
 2000ac8:	100b883a 	mov	r5,r2
 2000acc:	200261c0 	call	200261c <printf>
              IOWR(0x040110d0, 0, oldHeartRate); //write to parallel out
 2000ad0:	d0a01403 	ldbu	r2,-32688(gp)
 2000ad4:	10c03fcc 	andi	r3,r2,255
 2000ad8:	00810074 	movhi	r2,1025
 2000adc:	10843404 	addi	r2,r2,4304
 2000ae0:	10c00035 	stwio	r3,0(r2)
            }
            break;
 2000ae4:	00000806 	br	2000b08 <readANT+0x138>

          default:
            printHeader("MESG_ID_UKNOWN: ");
 2000ae8:	01008074 	movhi	r4,513
 2000aec:	213ded04 	addi	r4,r4,-2124
 2000af0:	20009840 	call	2000984 <printHeader>
            printPacket(packet);
 2000af4:	e0bfec04 	addi	r2,fp,-80
 2000af8:	1009883a 	mov	r4,r2
 2000afc:	20003fc0 	call	20003fc <printPacket>
            break;
 2000b00:	0001883a 	nop
 2000b04:	00000106 	br	2000b0c <readANT+0x13c>
              oldHeartRate = msgData[msgSize-1];
              printHeader("New Heart Rate: ");
              printf("%i \n", oldHeartRate);
              IOWR(0x040110d0, 0, oldHeartRate); //write to parallel out
            }
            break;
 2000b08:	0001883a 	nop
            printHeader("MESG_ID_UKNOWN: ");
            printPacket(packet);
            break;
        }
      }
}
 2000b0c:	e037883a 	mov	sp,fp
 2000b10:	dfc00117 	ldw	ra,4(sp)
 2000b14:	df000017 	ldw	fp,0(sp)
 2000b18:	dec00204 	addi	sp,sp,8
 2000b1c:	f800283a 	ret

02000b20 <main>:

int main() {
 2000b20:	defffe04 	addi	sp,sp,-8
 2000b24:	dfc00115 	stw	ra,4(sp)
 2000b28:	df000015 	stw	fp,0(sp)
 2000b2c:	d839883a 	mov	fp,sp
    setup();
 2000b30:	200074c0 	call	200074c <setup>

    while(1){
        readANT();
 2000b34:	20009d00 	call	20009d0 <readANT>
    }
 2000b38:	003ffe06 	br	2000b34 <main+0x14>

02000b3c <__udivdi3>:
 2000b3c:	defff504 	addi	sp,sp,-44
 2000b40:	dd000515 	stw	r20,20(sp)
 2000b44:	dcc00415 	stw	r19,16(sp)
 2000b48:	dc800315 	stw	r18,12(sp)
 2000b4c:	dc400215 	stw	r17,8(sp)
 2000b50:	dc000115 	stw	r16,4(sp)
 2000b54:	dfc00a15 	stw	ra,40(sp)
 2000b58:	df000915 	stw	fp,36(sp)
 2000b5c:	ddc00815 	stw	r23,32(sp)
 2000b60:	dd800715 	stw	r22,28(sp)
 2000b64:	dd400615 	stw	r21,24(sp)
 2000b68:	2025883a 	mov	r18,r4
 2000b6c:	2823883a 	mov	r17,r5
 2000b70:	3021883a 	mov	r16,r6
 2000b74:	2027883a 	mov	r19,r4
 2000b78:	2829883a 	mov	r20,r5
 2000b7c:	3800451e 	bne	r7,zero,2000c94 <__udivdi3+0x158>
 2000b80:	2980652e 	bgeu	r5,r6,2000d18 <__udivdi3+0x1dc>
 2000b84:	00bfffd4 	movui	r2,65535
 2000b88:	1180b436 	bltu	r2,r6,2000e5c <__udivdi3+0x320>
 2000b8c:	00803fc4 	movi	r2,255
 2000b90:	11816636 	bltu	r2,r6,200112c <__udivdi3+0x5f0>
 2000b94:	0005883a 	mov	r2,zero
 2000b98:	0007883a 	mov	r3,zero
 2000b9c:	3084d83a 	srl	r2,r6,r2
 2000ba0:	01008074 	movhi	r4,513
 2000ba4:	213df204 	addi	r4,r4,-2104
 2000ba8:	2085883a 	add	r2,r4,r2
 2000bac:	10800003 	ldbu	r2,0(r2)
 2000bb0:	10c7883a 	add	r3,r2,r3
 2000bb4:	00800804 	movi	r2,32
 2000bb8:	10c5c83a 	sub	r2,r2,r3
 2000bbc:	10000526 	beq	r2,zero,2000bd4 <__udivdi3+0x98>
 2000bc0:	88a2983a 	sll	r17,r17,r2
 2000bc4:	90c6d83a 	srl	r3,r18,r3
 2000bc8:	30a0983a 	sll	r16,r6,r2
 2000bcc:	90a6983a 	sll	r19,r18,r2
 2000bd0:	88e8b03a 	or	r20,r17,r3
 2000bd4:	8022d43a 	srli	r17,r16,16
 2000bd8:	a009883a 	mov	r4,r20
 2000bdc:	857fffcc 	andi	r21,r16,65535
 2000be0:	880b883a 	mov	r5,r17
 2000be4:	20012b40 	call	20012b4 <__umodsi3>
 2000be8:	a009883a 	mov	r4,r20
 2000bec:	880b883a 	mov	r5,r17
 2000bf0:	102d883a 	mov	r22,r2
 2000bf4:	20012ac0 	call	20012ac <__udivsi3>
 2000bf8:	1009883a 	mov	r4,r2
 2000bfc:	a80b883a 	mov	r5,r21
 2000c00:	1025883a 	mov	r18,r2
 2000c04:	20012bc0 	call	20012bc <__mulsi3>
 2000c08:	1009883a 	mov	r4,r2
 2000c0c:	b006943a 	slli	r3,r22,16
 2000c10:	9804d43a 	srli	r2,r19,16
 2000c14:	1886b03a 	or	r3,r3,r2
 2000c18:	1900052e 	bgeu	r3,r4,2000c30 <__udivdi3+0xf4>
 2000c1c:	1c07883a 	add	r3,r3,r16
 2000c20:	90bfffc4 	addi	r2,r18,-1
 2000c24:	1c000136 	bltu	r3,r16,2000c2c <__udivdi3+0xf0>
 2000c28:	19015536 	bltu	r3,r4,2001180 <__udivdi3+0x644>
 2000c2c:	1025883a 	mov	r18,r2
 2000c30:	1929c83a 	sub	r20,r3,r4
 2000c34:	880b883a 	mov	r5,r17
 2000c38:	a009883a 	mov	r4,r20
 2000c3c:	20012b40 	call	20012b4 <__umodsi3>
 2000c40:	102d883a 	mov	r22,r2
 2000c44:	880b883a 	mov	r5,r17
 2000c48:	a009883a 	mov	r4,r20
 2000c4c:	b02c943a 	slli	r22,r22,16
 2000c50:	20012ac0 	call	20012ac <__udivsi3>
 2000c54:	1009883a 	mov	r4,r2
 2000c58:	a80b883a 	mov	r5,r21
 2000c5c:	9cffffcc 	andi	r19,r19,65535
 2000c60:	1023883a 	mov	r17,r2
 2000c64:	b4e6b03a 	or	r19,r22,r19
 2000c68:	20012bc0 	call	20012bc <__mulsi3>
 2000c6c:	9880052e 	bgeu	r19,r2,2000c84 <__udivdi3+0x148>
 2000c70:	9c27883a 	add	r19,r19,r16
 2000c74:	88ffffc4 	addi	r3,r17,-1
 2000c78:	9c011436 	bltu	r19,r16,20010cc <__udivdi3+0x590>
 2000c7c:	9881132e 	bgeu	r19,r2,20010cc <__udivdi3+0x590>
 2000c80:	8c7fff84 	addi	r17,r17,-2
 2000c84:	9004943a 	slli	r2,r18,16
 2000c88:	0007883a 	mov	r3,zero
 2000c8c:	8884b03a 	or	r2,r17,r2
 2000c90:	00001506 	br	2000ce8 <__udivdi3+0x1ac>
 2000c94:	29c06a36 	bltu	r5,r7,2000e40 <__udivdi3+0x304>
 2000c98:	00bfffd4 	movui	r2,65535
 2000c9c:	11c06a2e 	bgeu	r2,r7,2000e48 <__udivdi3+0x30c>
 2000ca0:	00804034 	movhi	r2,256
 2000ca4:	10bfffc4 	addi	r2,r2,-1
 2000ca8:	11c11436 	bltu	r2,r7,20010fc <__udivdi3+0x5c0>
 2000cac:	00c00404 	movi	r3,16
 2000cb0:	180b883a 	mov	r5,r3
 2000cb4:	38c6d83a 	srl	r3,r7,r3
 2000cb8:	01008074 	movhi	r4,513
 2000cbc:	213df204 	addi	r4,r4,-2104
 2000cc0:	04000804 	movi	r16,32
 2000cc4:	20c7883a 	add	r3,r4,r3
 2000cc8:	18800003 	ldbu	r2,0(r3)
 2000ccc:	1145883a 	add	r2,r2,r5
 2000cd0:	80a1c83a 	sub	r16,r16,r2
 2000cd4:	80006e1e 	bne	r16,zero,2000e90 <__udivdi3+0x354>
 2000cd8:	0007883a 	mov	r3,zero
 2000cdc:	3c406a36 	bltu	r7,r17,2000e88 <__udivdi3+0x34c>
 2000ce0:	9180692e 	bgeu	r18,r6,2000e88 <__udivdi3+0x34c>
 2000ce4:	0005883a 	mov	r2,zero
 2000ce8:	dfc00a17 	ldw	ra,40(sp)
 2000cec:	df000917 	ldw	fp,36(sp)
 2000cf0:	ddc00817 	ldw	r23,32(sp)
 2000cf4:	dd800717 	ldw	r22,28(sp)
 2000cf8:	dd400617 	ldw	r21,24(sp)
 2000cfc:	dd000517 	ldw	r20,20(sp)
 2000d00:	dcc00417 	ldw	r19,16(sp)
 2000d04:	dc800317 	ldw	r18,12(sp)
 2000d08:	dc400217 	ldw	r17,8(sp)
 2000d0c:	dc000117 	ldw	r16,4(sp)
 2000d10:	dec00b04 	addi	sp,sp,44
 2000d14:	f800283a 	ret
 2000d18:	3000041e 	bne	r6,zero,2000d2c <__udivdi3+0x1f0>
 2000d1c:	01000044 	movi	r4,1
 2000d20:	000b883a 	mov	r5,zero
 2000d24:	20012ac0 	call	20012ac <__udivsi3>
 2000d28:	1021883a 	mov	r16,r2
 2000d2c:	00bfffd4 	movui	r2,65535
 2000d30:	1400502e 	bgeu	r2,r16,2000e74 <__udivdi3+0x338>
 2000d34:	00804034 	movhi	r2,256
 2000d38:	10bfffc4 	addi	r2,r2,-1
 2000d3c:	1400f536 	bltu	r2,r16,2001114 <__udivdi3+0x5d8>
 2000d40:	00800404 	movi	r2,16
 2000d44:	1007883a 	mov	r3,r2
 2000d48:	8084d83a 	srl	r2,r16,r2
 2000d4c:	01008074 	movhi	r4,513
 2000d50:	213df204 	addi	r4,r4,-2104
 2000d54:	2085883a 	add	r2,r4,r2
 2000d58:	10800003 	ldbu	r2,0(r2)
 2000d5c:	10c7883a 	add	r3,r2,r3
 2000d60:	00800804 	movi	r2,32
 2000d64:	10c5c83a 	sub	r2,r2,r3
 2000d68:	1000a01e 	bne	r2,zero,2000fec <__udivdi3+0x4b0>
 2000d6c:	8028d43a 	srli	r20,r16,16
 2000d70:	8c23c83a 	sub	r17,r17,r16
 2000d74:	857fffcc 	andi	r21,r16,65535
 2000d78:	00c00044 	movi	r3,1
 2000d7c:	8809883a 	mov	r4,r17
 2000d80:	a00b883a 	mov	r5,r20
 2000d84:	d8c00015 	stw	r3,0(sp)
 2000d88:	20012b40 	call	20012b4 <__umodsi3>
 2000d8c:	8809883a 	mov	r4,r17
 2000d90:	a00b883a 	mov	r5,r20
 2000d94:	102d883a 	mov	r22,r2
 2000d98:	20012ac0 	call	20012ac <__udivsi3>
 2000d9c:	1009883a 	mov	r4,r2
 2000da0:	a80b883a 	mov	r5,r21
 2000da4:	1025883a 	mov	r18,r2
 2000da8:	20012bc0 	call	20012bc <__mulsi3>
 2000dac:	1009883a 	mov	r4,r2
 2000db0:	b00c943a 	slli	r6,r22,16
 2000db4:	9804d43a 	srli	r2,r19,16
 2000db8:	d8c00017 	ldw	r3,0(sp)
 2000dbc:	308cb03a 	or	r6,r6,r2
 2000dc0:	3100052e 	bgeu	r6,r4,2000dd8 <__udivdi3+0x29c>
 2000dc4:	340d883a 	add	r6,r6,r16
 2000dc8:	90bfffc4 	addi	r2,r18,-1
 2000dcc:	34000136 	bltu	r6,r16,2000dd4 <__udivdi3+0x298>
 2000dd0:	3100e836 	bltu	r6,r4,2001174 <__udivdi3+0x638>
 2000dd4:	1025883a 	mov	r18,r2
 2000dd8:	3123c83a 	sub	r17,r6,r4
 2000ddc:	8809883a 	mov	r4,r17
 2000de0:	a00b883a 	mov	r5,r20
 2000de4:	d8c00015 	stw	r3,0(sp)
 2000de8:	20012b40 	call	20012b4 <__umodsi3>
 2000dec:	102d883a 	mov	r22,r2
 2000df0:	8809883a 	mov	r4,r17
 2000df4:	a00b883a 	mov	r5,r20
 2000df8:	b02c943a 	slli	r22,r22,16
 2000dfc:	20012ac0 	call	20012ac <__udivsi3>
 2000e00:	1009883a 	mov	r4,r2
 2000e04:	a80b883a 	mov	r5,r21
 2000e08:	9cffffcc 	andi	r19,r19,65535
 2000e0c:	1023883a 	mov	r17,r2
 2000e10:	b4e6b03a 	or	r19,r22,r19
 2000e14:	20012bc0 	call	20012bc <__mulsi3>
 2000e18:	d8c00017 	ldw	r3,0(sp)
 2000e1c:	9880052e 	bgeu	r19,r2,2000e34 <__udivdi3+0x2f8>
 2000e20:	9c27883a 	add	r19,r19,r16
 2000e24:	893fffc4 	addi	r4,r17,-1
 2000e28:	9c00aa36 	bltu	r19,r16,20010d4 <__udivdi3+0x598>
 2000e2c:	9880a92e 	bgeu	r19,r2,20010d4 <__udivdi3+0x598>
 2000e30:	8c7fff84 	addi	r17,r17,-2
 2000e34:	9004943a 	slli	r2,r18,16
 2000e38:	8884b03a 	or	r2,r17,r2
 2000e3c:	003faa06 	br	2000ce8 <__udivdi3+0x1ac>
 2000e40:	0007883a 	mov	r3,zero
 2000e44:	003fa706 	br	2000ce4 <__udivdi3+0x1a8>
 2000e48:	00803fc4 	movi	r2,255
 2000e4c:	11c0ae36 	bltu	r2,r7,2001108 <__udivdi3+0x5cc>
 2000e50:	0007883a 	mov	r3,zero
 2000e54:	000b883a 	mov	r5,zero
 2000e58:	003f9606 	br	2000cb4 <__udivdi3+0x178>
 2000e5c:	00804034 	movhi	r2,256
 2000e60:	10bfffc4 	addi	r2,r2,-1
 2000e64:	1180ae36 	bltu	r2,r6,2001120 <__udivdi3+0x5e4>
 2000e68:	00800404 	movi	r2,16
 2000e6c:	1007883a 	mov	r3,r2
 2000e70:	003f4a06 	br	2000b9c <__udivdi3+0x60>
 2000e74:	00803fc4 	movi	r2,255
 2000e78:	1400af36 	bltu	r2,r16,2001138 <__udivdi3+0x5fc>
 2000e7c:	0005883a 	mov	r2,zero
 2000e80:	0007883a 	mov	r3,zero
 2000e84:	003fb006 	br	2000d48 <__udivdi3+0x20c>
 2000e88:	00800044 	movi	r2,1
 2000e8c:	003f9606 	br	2000ce8 <__udivdi3+0x1ac>
 2000e90:	3c0e983a 	sll	r7,r7,r16
 2000e94:	3086d83a 	srl	r3,r6,r2
 2000e98:	88aed83a 	srl	r23,r17,r2
 2000e9c:	9084d83a 	srl	r2,r18,r2
 2000ea0:	38e6b03a 	or	r19,r7,r3
 2000ea4:	9828d43a 	srli	r20,r19,16
 2000ea8:	8c22983a 	sll	r17,r17,r16
 2000eac:	b809883a 	mov	r4,r23
 2000eb0:	a00b883a 	mov	r5,r20
 2000eb4:	342a983a 	sll	r21,r6,r16
 2000eb8:	88a2b03a 	or	r17,r17,r2
 2000ebc:	20012b40 	call	20012b4 <__umodsi3>
 2000ec0:	b809883a 	mov	r4,r23
 2000ec4:	a00b883a 	mov	r5,r20
 2000ec8:	1039883a 	mov	fp,r2
 2000ecc:	9dbfffcc 	andi	r22,r19,65535
 2000ed0:	20012ac0 	call	20012ac <__udivsi3>
 2000ed4:	1009883a 	mov	r4,r2
 2000ed8:	b00b883a 	mov	r5,r22
 2000edc:	102f883a 	mov	r23,r2
 2000ee0:	20012bc0 	call	20012bc <__mulsi3>
 2000ee4:	1009883a 	mov	r4,r2
 2000ee8:	e00e943a 	slli	r7,fp,16
 2000eec:	8804d43a 	srli	r2,r17,16
 2000ef0:	388eb03a 	or	r7,r7,r2
 2000ef4:	3900042e 	bgeu	r7,r4,2000f08 <__udivdi3+0x3cc>
 2000ef8:	3ccf883a 	add	r7,r7,r19
 2000efc:	b8bfffc4 	addi	r2,r23,-1
 2000f00:	3cc0942e 	bgeu	r7,r19,2001154 <__udivdi3+0x618>
 2000f04:	102f883a 	mov	r23,r2
 2000f08:	3939c83a 	sub	fp,r7,r4
 2000f0c:	a00b883a 	mov	r5,r20
 2000f10:	e009883a 	mov	r4,fp
 2000f14:	20012b40 	call	20012b4 <__umodsi3>
 2000f18:	a00b883a 	mov	r5,r20
 2000f1c:	e009883a 	mov	r4,fp
 2000f20:	d8800015 	stw	r2,0(sp)
 2000f24:	20012ac0 	call	20012ac <__udivsi3>
 2000f28:	1009883a 	mov	r4,r2
 2000f2c:	b00b883a 	mov	r5,r22
 2000f30:	1029883a 	mov	r20,r2
 2000f34:	20012bc0 	call	20012bc <__mulsi3>
 2000f38:	d8c00017 	ldw	r3,0(sp)
 2000f3c:	8c7fffcc 	andi	r17,r17,65535
 2000f40:	1806943a 	slli	r3,r3,16
 2000f44:	1c46b03a 	or	r3,r3,r17
 2000f48:	1880042e 	bgeu	r3,r2,2000f5c <__udivdi3+0x420>
 2000f4c:	1cc7883a 	add	r3,r3,r19
 2000f50:	a13fffc4 	addi	r4,r20,-1
 2000f54:	1cc07b2e 	bgeu	r3,r19,2001144 <__udivdi3+0x608>
 2000f58:	2029883a 	mov	r20,r4
 2000f5c:	b82e943a 	slli	r23,r23,16
 2000f60:	a822d43a 	srli	r17,r21,16
 2000f64:	ad7fffcc 	andi	r21,r21,65535
 2000f68:	a5e8b03a 	or	r20,r20,r23
 2000f6c:	a5bfffcc 	andi	r22,r20,65535
 2000f70:	b009883a 	mov	r4,r22
 2000f74:	a80b883a 	mov	r5,r21
 2000f78:	18afc83a 	sub	r23,r3,r2
 2000f7c:	a026d43a 	srli	r19,r20,16
 2000f80:	20012bc0 	call	20012bc <__mulsi3>
 2000f84:	b009883a 	mov	r4,r22
 2000f88:	880b883a 	mov	r5,r17
 2000f8c:	1039883a 	mov	fp,r2
 2000f90:	20012bc0 	call	20012bc <__mulsi3>
 2000f94:	a80b883a 	mov	r5,r21
 2000f98:	9809883a 	mov	r4,r19
 2000f9c:	102d883a 	mov	r22,r2
 2000fa0:	20012bc0 	call	20012bc <__mulsi3>
 2000fa4:	9809883a 	mov	r4,r19
 2000fa8:	880b883a 	mov	r5,r17
 2000fac:	102b883a 	mov	r21,r2
 2000fb0:	20012bc0 	call	20012bc <__mulsi3>
 2000fb4:	100b883a 	mov	r5,r2
 2000fb8:	e004d43a 	srli	r2,fp,16
 2000fbc:	ad89883a 	add	r4,r21,r22
 2000fc0:	2089883a 	add	r4,r4,r2
 2000fc4:	2540022e 	bgeu	r4,r21,2000fd0 <__udivdi3+0x494>
 2000fc8:	00800074 	movhi	r2,1
 2000fcc:	288b883a 	add	r5,r5,r2
 2000fd0:	2004d43a 	srli	r2,r4,16
 2000fd4:	288b883a 	add	r5,r5,r2
 2000fd8:	b9404536 	bltu	r23,r5,20010f0 <__udivdi3+0x5b4>
 2000fdc:	b9403f26 	beq	r23,r5,20010dc <__udivdi3+0x5a0>
 2000fe0:	a005883a 	mov	r2,r20
 2000fe4:	0007883a 	mov	r3,zero
 2000fe8:	003f3f06 	br	2000ce8 <__udivdi3+0x1ac>
 2000fec:	80a0983a 	sll	r16,r16,r2
 2000ff0:	88eed83a 	srl	r23,r17,r3
 2000ff4:	90c6d83a 	srl	r3,r18,r3
 2000ff8:	8028d43a 	srli	r20,r16,16
 2000ffc:	88a2983a 	sll	r17,r17,r2
 2001000:	b809883a 	mov	r4,r23
 2001004:	a00b883a 	mov	r5,r20
 2001008:	88ecb03a 	or	r22,r17,r3
 200100c:	90a6983a 	sll	r19,r18,r2
 2001010:	20012b40 	call	20012b4 <__umodsi3>
 2001014:	b809883a 	mov	r4,r23
 2001018:	a00b883a 	mov	r5,r20
 200101c:	1023883a 	mov	r17,r2
 2001020:	857fffcc 	andi	r21,r16,65535
 2001024:	20012ac0 	call	20012ac <__udivsi3>
 2001028:	1009883a 	mov	r4,r2
 200102c:	a80b883a 	mov	r5,r21
 2001030:	102f883a 	mov	r23,r2
 2001034:	20012bc0 	call	20012bc <__mulsi3>
 2001038:	1009883a 	mov	r4,r2
 200103c:	880a943a 	slli	r5,r17,16
 2001040:	b004d43a 	srli	r2,r22,16
 2001044:	288ab03a 	or	r5,r5,r2
 2001048:	2900062e 	bgeu	r5,r4,2001064 <__udivdi3+0x528>
 200104c:	2c0b883a 	add	r5,r5,r16
 2001050:	b8bfffc4 	addi	r2,r23,-1
 2001054:	2c004536 	bltu	r5,r16,200116c <__udivdi3+0x630>
 2001058:	2900442e 	bgeu	r5,r4,200116c <__udivdi3+0x630>
 200105c:	bdffff84 	addi	r23,r23,-2
 2001060:	2c0b883a 	add	r5,r5,r16
 2001064:	2925c83a 	sub	r18,r5,r4
 2001068:	9009883a 	mov	r4,r18
 200106c:	a00b883a 	mov	r5,r20
 2001070:	20012b40 	call	20012b4 <__umodsi3>
 2001074:	1023883a 	mov	r17,r2
 2001078:	9009883a 	mov	r4,r18
 200107c:	a00b883a 	mov	r5,r20
 2001080:	8822943a 	slli	r17,r17,16
 2001084:	20012ac0 	call	20012ac <__udivsi3>
 2001088:	1009883a 	mov	r4,r2
 200108c:	a80b883a 	mov	r5,r21
 2001090:	b5bfffcc 	andi	r22,r22,65535
 2001094:	1025883a 	mov	r18,r2
 2001098:	8da2b03a 	or	r17,r17,r22
 200109c:	20012bc0 	call	20012bc <__mulsi3>
 20010a0:	8880062e 	bgeu	r17,r2,20010bc <__udivdi3+0x580>
 20010a4:	8c23883a 	add	r17,r17,r16
 20010a8:	90ffffc4 	addi	r3,r18,-1
 20010ac:	8c002d36 	bltu	r17,r16,2001164 <__udivdi3+0x628>
 20010b0:	88802c2e 	bgeu	r17,r2,2001164 <__udivdi3+0x628>
 20010b4:	94bfff84 	addi	r18,r18,-2
 20010b8:	8c23883a 	add	r17,r17,r16
 20010bc:	b806943a 	slli	r3,r23,16
 20010c0:	88a3c83a 	sub	r17,r17,r2
 20010c4:	90c6b03a 	or	r3,r18,r3
 20010c8:	003f2c06 	br	2000d7c <__udivdi3+0x240>
 20010cc:	1823883a 	mov	r17,r3
 20010d0:	003eec06 	br	2000c84 <__udivdi3+0x148>
 20010d4:	2023883a 	mov	r17,r4
 20010d8:	003f5606 	br	2000e34 <__udivdi3+0x2f8>
 20010dc:	2008943a 	slli	r4,r4,16
 20010e0:	9420983a 	sll	r16,r18,r16
 20010e4:	e73fffcc 	andi	fp,fp,65535
 20010e8:	2709883a 	add	r4,r4,fp
 20010ec:	813fbc2e 	bgeu	r16,r4,2000fe0 <__udivdi3+0x4a4>
 20010f0:	a0bfffc4 	addi	r2,r20,-1
 20010f4:	0007883a 	mov	r3,zero
 20010f8:	003efb06 	br	2000ce8 <__udivdi3+0x1ac>
 20010fc:	00c00604 	movi	r3,24
 2001100:	180b883a 	mov	r5,r3
 2001104:	003eeb06 	br	2000cb4 <__udivdi3+0x178>
 2001108:	00c00204 	movi	r3,8
 200110c:	180b883a 	mov	r5,r3
 2001110:	003ee806 	br	2000cb4 <__udivdi3+0x178>
 2001114:	00800604 	movi	r2,24
 2001118:	1007883a 	mov	r3,r2
 200111c:	003f0a06 	br	2000d48 <__udivdi3+0x20c>
 2001120:	00800604 	movi	r2,24
 2001124:	1007883a 	mov	r3,r2
 2001128:	003e9c06 	br	2000b9c <__udivdi3+0x60>
 200112c:	00800204 	movi	r2,8
 2001130:	1007883a 	mov	r3,r2
 2001134:	003e9906 	br	2000b9c <__udivdi3+0x60>
 2001138:	00800204 	movi	r2,8
 200113c:	1007883a 	mov	r3,r2
 2001140:	003f0106 	br	2000d48 <__udivdi3+0x20c>
 2001144:	18bf842e 	bgeu	r3,r2,2000f58 <__udivdi3+0x41c>
 2001148:	a53fff84 	addi	r20,r20,-2
 200114c:	1cc7883a 	add	r3,r3,r19
 2001150:	003f8206 	br	2000f5c <__udivdi3+0x420>
 2001154:	393f6b2e 	bgeu	r7,r4,2000f04 <__udivdi3+0x3c8>
 2001158:	bdffff84 	addi	r23,r23,-2
 200115c:	3ccf883a 	add	r7,r7,r19
 2001160:	003f6906 	br	2000f08 <__udivdi3+0x3cc>
 2001164:	1825883a 	mov	r18,r3
 2001168:	003fd406 	br	20010bc <__udivdi3+0x580>
 200116c:	102f883a 	mov	r23,r2
 2001170:	003fbc06 	br	2001064 <__udivdi3+0x528>
 2001174:	94bfff84 	addi	r18,r18,-2
 2001178:	340d883a 	add	r6,r6,r16
 200117c:	003f1606 	br	2000dd8 <__udivdi3+0x29c>
 2001180:	94bfff84 	addi	r18,r18,-2
 2001184:	1c07883a 	add	r3,r3,r16
 2001188:	003ea906 	br	2000c30 <__udivdi3+0xf4>

0200118c <udivmodsi4>:
 200118c:	2005883a 	mov	r2,r4
 2001190:	2900182e 	bgeu	r5,r4,20011f4 <udivmodsi4+0x68>
 2001194:	28001716 	blt	r5,zero,20011f4 <udivmodsi4+0x68>
 2001198:	01000804 	movi	r4,32
 200119c:	00c00044 	movi	r3,1
 20011a0:	00000206 	br	20011ac <udivmodsi4+0x20>
 20011a4:	20001126 	beq	r4,zero,20011ec <udivmodsi4+0x60>
 20011a8:	28000516 	blt	r5,zero,20011c0 <udivmodsi4+0x34>
 20011ac:	294b883a 	add	r5,r5,r5
 20011b0:	213fffc4 	addi	r4,r4,-1
 20011b4:	18c7883a 	add	r3,r3,r3
 20011b8:	28bffa36 	bltu	r5,r2,20011a4 <udivmodsi4+0x18>
 20011bc:	18000b26 	beq	r3,zero,20011ec <udivmodsi4+0x60>
 20011c0:	0009883a 	mov	r4,zero
 20011c4:	11400236 	bltu	r2,r5,20011d0 <udivmodsi4+0x44>
 20011c8:	1145c83a 	sub	r2,r2,r5
 20011cc:	20c8b03a 	or	r4,r4,r3
 20011d0:	1806d07a 	srli	r3,r3,1
 20011d4:	280ad07a 	srli	r5,r5,1
 20011d8:	183ffa1e 	bne	r3,zero,20011c4 <udivmodsi4+0x38>
 20011dc:	3000021e 	bne	r6,zero,20011e8 <udivmodsi4+0x5c>
 20011e0:	2005883a 	mov	r2,r4
 20011e4:	f800283a 	ret
 20011e8:	f800283a 	ret
 20011ec:	0009883a 	mov	r4,zero
 20011f0:	003ffa06 	br	20011dc <udivmodsi4+0x50>
 20011f4:	00c00044 	movi	r3,1
 20011f8:	0009883a 	mov	r4,zero
 20011fc:	003ff106 	br	20011c4 <udivmodsi4+0x38>

02001200 <__divsi3>:
 2001200:	defffe04 	addi	sp,sp,-8
 2001204:	dfc00115 	stw	ra,4(sp)
 2001208:	dc000015 	stw	r16,0(sp)
 200120c:	20000a16 	blt	r4,zero,2001238 <__divsi3+0x38>
 2001210:	0021883a 	mov	r16,zero
 2001214:	28000b16 	blt	r5,zero,2001244 <__divsi3+0x44>
 2001218:	000d883a 	mov	r6,zero
 200121c:	200118c0 	call	200118c <udivmodsi4>
 2001220:	80000126 	beq	r16,zero,2001228 <__divsi3+0x28>
 2001224:	0085c83a 	sub	r2,zero,r2
 2001228:	dfc00117 	ldw	ra,4(sp)
 200122c:	dc000017 	ldw	r16,0(sp)
 2001230:	dec00204 	addi	sp,sp,8
 2001234:	f800283a 	ret
 2001238:	0109c83a 	sub	r4,zero,r4
 200123c:	04000044 	movi	r16,1
 2001240:	283ff50e 	bge	r5,zero,2001218 <__divsi3+0x18>
 2001244:	014bc83a 	sub	r5,zero,r5
 2001248:	8400005c 	xori	r16,r16,1
 200124c:	003ff206 	br	2001218 <__divsi3+0x18>

02001250 <__modsi3>:
 2001250:	deffff04 	addi	sp,sp,-4
 2001254:	dfc00015 	stw	ra,0(sp)
 2001258:	20000516 	blt	r4,zero,2001270 <__modsi3+0x20>
 200125c:	28000c16 	blt	r5,zero,2001290 <__modsi3+0x40>
 2001260:	01800044 	movi	r6,1
 2001264:	dfc00017 	ldw	ra,0(sp)
 2001268:	dec00104 	addi	sp,sp,4
 200126c:	200118c1 	jmpi	200118c <udivmodsi4>
 2001270:	0109c83a 	sub	r4,zero,r4
 2001274:	28000b16 	blt	r5,zero,20012a4 <__modsi3+0x54>
 2001278:	01800044 	movi	r6,1
 200127c:	200118c0 	call	200118c <udivmodsi4>
 2001280:	0085c83a 	sub	r2,zero,r2
 2001284:	dfc00017 	ldw	ra,0(sp)
 2001288:	dec00104 	addi	sp,sp,4
 200128c:	f800283a 	ret
 2001290:	014bc83a 	sub	r5,zero,r5
 2001294:	01800044 	movi	r6,1
 2001298:	dfc00017 	ldw	ra,0(sp)
 200129c:	dec00104 	addi	sp,sp,4
 20012a0:	200118c1 	jmpi	200118c <udivmodsi4>
 20012a4:	014bc83a 	sub	r5,zero,r5
 20012a8:	003ff306 	br	2001278 <__modsi3+0x28>

020012ac <__udivsi3>:
 20012ac:	000d883a 	mov	r6,zero
 20012b0:	200118c1 	jmpi	200118c <udivmodsi4>

020012b4 <__umodsi3>:
 20012b4:	01800044 	movi	r6,1
 20012b8:	200118c1 	jmpi	200118c <udivmodsi4>

020012bc <__mulsi3>:
 20012bc:	0005883a 	mov	r2,zero
 20012c0:	20000726 	beq	r4,zero,20012e0 <__mulsi3+0x24>
 20012c4:	20c0004c 	andi	r3,r4,1
 20012c8:	2008d07a 	srli	r4,r4,1
 20012cc:	18000126 	beq	r3,zero,20012d4 <__mulsi3+0x18>
 20012d0:	1145883a 	add	r2,r2,r5
 20012d4:	294b883a 	add	r5,r5,r5
 20012d8:	203ffa1e 	bne	r4,zero,20012c4 <__mulsi3+0x8>
 20012dc:	f800283a 	ret
 20012e0:	f800283a 	ret

020012e4 <_fopen_r>:
 20012e4:	defffa04 	addi	sp,sp,-24
 20012e8:	dcc00415 	stw	r19,16(sp)
 20012ec:	2827883a 	mov	r19,r5
 20012f0:	300b883a 	mov	r5,r6
 20012f4:	d80d883a 	mov	r6,sp
 20012f8:	dc800315 	stw	r18,12(sp)
 20012fc:	dc400215 	stw	r17,8(sp)
 2001300:	dfc00515 	stw	ra,20(sp)
 2001304:	dc000115 	stw	r16,4(sp)
 2001308:	2025883a 	mov	r18,r4
 200130c:	2006a200 	call	2006a20 <__sflags>
 2001310:	1023883a 	mov	r17,r2
 2001314:	10002926 	beq	r2,zero,20013bc <_fopen_r+0xd8>
 2001318:	9009883a 	mov	r4,r18
 200131c:	20068e40 	call	20068e4 <__sfp>
 2001320:	1021883a 	mov	r16,r2
 2001324:	10002526 	beq	r2,zero,20013bc <_fopen_r+0xd8>
 2001328:	d9800017 	ldw	r6,0(sp)
 200132c:	9009883a 	mov	r4,r18
 2001330:	980b883a 	mov	r5,r19
 2001334:	01c06d84 	movi	r7,438
 2001338:	20025840 	call	2002584 <_open_r>
 200133c:	10001c16 	blt	r2,zero,20013b0 <_fopen_r+0xcc>
 2001340:	8080038d 	sth	r2,14(r16)
 2001344:	00808034 	movhi	r2,512
 2001348:	108a7804 	addi	r2,r2,10720
 200134c:	80800815 	stw	r2,32(r16)
 2001350:	00808034 	movhi	r2,512
 2001354:	108a8d04 	addi	r2,r2,10804
 2001358:	80800915 	stw	r2,36(r16)
 200135c:	00808034 	movhi	r2,512
 2001360:	108aaf04 	addi	r2,r2,10940
 2001364:	88c0400c 	andi	r3,r17,256
 2001368:	80800a15 	stw	r2,40(r16)
 200136c:	00808034 	movhi	r2,512
 2001370:	108ac604 	addi	r2,r2,11032
 2001374:	80800b15 	stw	r2,44(r16)
 2001378:	18bfffcc 	andi	r2,r3,65535
 200137c:	10a0001c 	xori	r2,r2,32768
 2001380:	8440030d 	sth	r17,12(r16)
 2001384:	84000715 	stw	r16,28(r16)
 2001388:	10a00004 	addi	r2,r2,-32768
 200138c:	1000141e 	bne	r2,zero,20013e0 <_fopen_r+0xfc>
 2001390:	8005883a 	mov	r2,r16
 2001394:	dfc00517 	ldw	ra,20(sp)
 2001398:	dcc00417 	ldw	r19,16(sp)
 200139c:	dc800317 	ldw	r18,12(sp)
 20013a0:	dc400217 	ldw	r17,8(sp)
 20013a4:	dc000117 	ldw	r16,4(sp)
 20013a8:	dec00604 	addi	sp,sp,24
 20013ac:	f800283a 	ret
 20013b0:	20069e00 	call	20069e0 <__sfp_lock_acquire>
 20013b4:	8000030d 	sth	zero,12(r16)
 20013b8:	20069e40 	call	20069e4 <__sfp_lock_release>
 20013bc:	0021883a 	mov	r16,zero
 20013c0:	8005883a 	mov	r2,r16
 20013c4:	dfc00517 	ldw	ra,20(sp)
 20013c8:	dcc00417 	ldw	r19,16(sp)
 20013cc:	dc800317 	ldw	r18,12(sp)
 20013d0:	dc400217 	ldw	r17,8(sp)
 20013d4:	dc000117 	ldw	r16,4(sp)
 20013d8:	dec00604 	addi	sp,sp,24
 20013dc:	f800283a 	ret
 20013e0:	9009883a 	mov	r4,r18
 20013e4:	800b883a 	mov	r5,r16
 20013e8:	000d883a 	mov	r6,zero
 20013ec:	01c00084 	movi	r7,2
 20013f0:	20014300 	call	2001430 <_fseek_r>
 20013f4:	8005883a 	mov	r2,r16
 20013f8:	dfc00517 	ldw	ra,20(sp)
 20013fc:	dcc00417 	ldw	r19,16(sp)
 2001400:	dc800317 	ldw	r18,12(sp)
 2001404:	dc400217 	ldw	r17,8(sp)
 2001408:	dc000117 	ldw	r16,4(sp)
 200140c:	dec00604 	addi	sp,sp,24
 2001410:	f800283a 	ret

02001414 <fopen>:
 2001414:	00c08074 	movhi	r3,513
 2001418:	18c5b204 	addi	r3,r3,5832
 200141c:	2005883a 	mov	r2,r4
 2001420:	19000017 	ldw	r4,0(r3)
 2001424:	280d883a 	mov	r6,r5
 2001428:	100b883a 	mov	r5,r2
 200142c:	20012e41 	jmpi	20012e4 <_fopen_r>

02001430 <_fseek_r>:
 2001430:	deffe804 	addi	sp,sp,-96
 2001434:	dd001315 	stw	r20,76(sp)
 2001438:	dc801115 	stw	r18,68(sp)
 200143c:	dc401015 	stw	r17,64(sp)
 2001440:	dc000f15 	stw	r16,60(sp)
 2001444:	dfc01715 	stw	ra,92(sp)
 2001448:	ddc01615 	stw	r23,88(sp)
 200144c:	dd801515 	stw	r22,84(sp)
 2001450:	dd401415 	stw	r21,80(sp)
 2001454:	dcc01215 	stw	r19,72(sp)
 2001458:	2023883a 	mov	r17,r4
 200145c:	2821883a 	mov	r16,r5
 2001460:	3029883a 	mov	r20,r6
 2001464:	3825883a 	mov	r18,r7
 2001468:	20000226 	beq	r4,zero,2001474 <_fseek_r+0x44>
 200146c:	20800e17 	ldw	r2,56(r4)
 2001470:	10006226 	beq	r2,zero,20015fc <_fseek_r+0x1cc>
 2001474:	80c0030b 	ldhu	r3,12(r16)
 2001478:	00804204 	movi	r2,264
 200147c:	18c0420c 	andi	r3,r3,264
 2001480:	18806326 	beq	r3,r2,2001610 <_fseek_r+0x1e0>
 2001484:	84c00a17 	ldw	r19,40(r16)
 2001488:	98010226 	beq	r19,zero,2001894 <_fseek_r+0x464>
 200148c:	00800044 	movi	r2,1
 2001490:	90803d26 	beq	r18,r2,2001588 <_fseek_r+0x158>
 2001494:	00800084 	movi	r2,2
 2001498:	90800126 	beq	r18,r2,20014a0 <_fseek_r+0x70>
 200149c:	90002c1e 	bne	r18,zero,2001550 <_fseek_r+0x120>
 20014a0:	80800417 	ldw	r2,16(r16)
 20014a4:	002d883a 	mov	r22,zero
 20014a8:	002b883a 	mov	r21,zero
 20014ac:	1000e526 	beq	r2,zero,2001844 <_fseek_r+0x414>
 20014b0:	80c0030b 	ldhu	r3,12(r16)
 20014b4:	1882068c 	andi	r2,r3,2074
 20014b8:	1809883a 	mov	r4,r3
 20014bc:	10000a1e 	bne	r2,zero,20014e8 <_fseek_r+0xb8>
 20014c0:	1881000c 	andi	r2,r3,1024
 20014c4:	10bfffcc 	andi	r2,r2,65535
 20014c8:	10a0001c 	xori	r2,r2,32768
 20014cc:	10a00004 	addi	r2,r2,-32768
 20014d0:	1000631e 	bne	r2,zero,2001660 <_fseek_r+0x230>
 20014d4:	00808034 	movhi	r2,512
 20014d8:	108aaf04 	addi	r2,r2,10940
 20014dc:	98805026 	beq	r19,r2,2001620 <_fseek_r+0x1f0>
 20014e0:	18c20014 	ori	r3,r3,2048
 20014e4:	80c0030d 	sth	r3,12(r16)
 20014e8:	8809883a 	mov	r4,r17
 20014ec:	800b883a 	mov	r5,r16
 20014f0:	200651c0 	call	200651c <_fflush_r>
 20014f4:	1000181e 	bne	r2,zero,2001558 <_fseek_r+0x128>
 20014f8:	81400717 	ldw	r5,28(r16)
 20014fc:	8809883a 	mov	r4,r17
 2001500:	a00d883a 	mov	r6,r20
 2001504:	900f883a 	mov	r7,r18
 2001508:	983ee83a 	callr	r19
 200150c:	00ffffc4 	movi	r3,-1
 2001510:	10c01126 	beq	r2,r3,2001558 <_fseek_r+0x128>
 2001514:	81400c17 	ldw	r5,48(r16)
 2001518:	28000526 	beq	r5,zero,2001530 <_fseek_r+0x100>
 200151c:	80801004 	addi	r2,r16,64
 2001520:	28800226 	beq	r5,r2,200152c <_fseek_r+0xfc>
 2001524:	8809883a 	mov	r4,r17
 2001528:	2006bf40 	call	2006bf4 <_free_r>
 200152c:	80000c15 	stw	zero,48(r16)
 2001530:	8080030b 	ldhu	r2,12(r16)
 2001534:	80c00417 	ldw	r3,16(r16)
 2001538:	80000115 	stw	zero,4(r16)
 200153c:	10bdf7cc 	andi	r2,r2,63455
 2001540:	8080030d 	sth	r2,12(r16)
 2001544:	80c00015 	stw	r3,0(r16)
 2001548:	0005883a 	mov	r2,zero
 200154c:	00000306 	br	200155c <_fseek_r+0x12c>
 2001550:	00800584 	movi	r2,22
 2001554:	88800015 	stw	r2,0(r17)
 2001558:	00bfffc4 	movi	r2,-1
 200155c:	dfc01717 	ldw	ra,92(sp)
 2001560:	ddc01617 	ldw	r23,88(sp)
 2001564:	dd801517 	ldw	r22,84(sp)
 2001568:	dd401417 	ldw	r21,80(sp)
 200156c:	dd001317 	ldw	r20,76(sp)
 2001570:	dcc01217 	ldw	r19,72(sp)
 2001574:	dc801117 	ldw	r18,68(sp)
 2001578:	dc401017 	ldw	r17,64(sp)
 200157c:	dc000f17 	ldw	r16,60(sp)
 2001580:	dec01804 	addi	sp,sp,96
 2001584:	f800283a 	ret
 2001588:	8809883a 	mov	r4,r17
 200158c:	800b883a 	mov	r5,r16
 2001590:	200651c0 	call	200651c <_fflush_r>
 2001594:	8080030b 	ldhu	r2,12(r16)
 2001598:	10c4000c 	andi	r3,r2,4096
 200159c:	18ffffcc 	andi	r3,r3,65535
 20015a0:	18e0001c 	xori	r3,r3,32768
 20015a4:	18e00004 	addi	r3,r3,-32768
 20015a8:	18007d26 	beq	r3,zero,20017a0 <_fseek_r+0x370>
 20015ac:	85401417 	ldw	r21,80(r16)
 20015b0:	10c0010c 	andi	r3,r2,4
 20015b4:	18ffffcc 	andi	r3,r3,65535
 20015b8:	18e0001c 	xori	r3,r3,32768
 20015bc:	18e00004 	addi	r3,r3,-32768
 20015c0:	18005f1e 	bne	r3,zero,2001740 <_fseek_r+0x310>
 20015c4:	1080020c 	andi	r2,r2,8
 20015c8:	10bfffcc 	andi	r2,r2,65535
 20015cc:	10a0001c 	xori	r2,r2,32768
 20015d0:	10a00004 	addi	r2,r2,-32768
 20015d4:	10007026 	beq	r2,zero,2001798 <_fseek_r+0x368>
 20015d8:	80c00017 	ldw	r3,0(r16)
 20015dc:	80800417 	ldw	r2,16(r16)
 20015e0:	18000226 	beq	r3,zero,20015ec <_fseek_r+0x1bc>
 20015e4:	1887c83a 	sub	r3,r3,r2
 20015e8:	a8eb883a 	add	r21,r21,r3
 20015ec:	a569883a 	add	r20,r20,r21
 20015f0:	05800044 	movi	r22,1
 20015f4:	0025883a 	mov	r18,zero
 20015f8:	003fac06 	br	20014ac <_fseek_r+0x7c>
 20015fc:	20067d80 	call	20067d8 <__sinit>
 2001600:	80c0030b 	ldhu	r3,12(r16)
 2001604:	00804204 	movi	r2,264
 2001608:	18c0420c 	andi	r3,r3,264
 200160c:	18bf9d1e 	bne	r3,r2,2001484 <_fseek_r+0x54>
 2001610:	8809883a 	mov	r4,r17
 2001614:	800b883a 	mov	r5,r16
 2001618:	200651c0 	call	200651c <_fflush_r>
 200161c:	003f9906 	br	2001484 <_fseek_r+0x54>
 2001620:	8140038f 	ldh	r5,14(r16)
 2001624:	283fae16 	blt	r5,zero,20014e0 <_fseek_r+0xb0>
 2001628:	8809883a 	mov	r4,r17
 200162c:	d80d883a 	mov	r6,sp
 2001630:	20018c80 	call	20018c8 <_fstat_r>
 2001634:	1000741e 	bne	r2,zero,2001808 <_fseek_r+0x3d8>
 2001638:	d8c00117 	ldw	r3,4(sp)
 200163c:	00a00014 	movui	r2,32768
 2001640:	18fc000c 	andi	r3,r3,61440
 2001644:	1880701e 	bne	r3,r2,2001808 <_fseek_r+0x3d8>
 2001648:	8100030b 	ldhu	r4,12(r16)
 200164c:	00810004 	movi	r2,1024
 2001650:	80801315 	stw	r2,76(r16)
 2001654:	2084b03a 	or	r2,r4,r2
 2001658:	1009883a 	mov	r4,r2
 200165c:	8080030d 	sth	r2,12(r16)
 2001660:	90003f1e 	bne	r18,zero,2001760 <_fseek_r+0x330>
 2001664:	a02f883a 	mov	r23,r20
 2001668:	b000461e 	bne	r22,zero,2001784 <_fseek_r+0x354>
 200166c:	2084000c 	andi	r2,r4,4096
 2001670:	10bfffcc 	andi	r2,r2,65535
 2001674:	10a0001c 	xori	r2,r2,32768
 2001678:	10a00004 	addi	r2,r2,-32768
 200167c:	10007526 	beq	r2,zero,2001854 <_fseek_r+0x424>
 2001680:	80801417 	ldw	r2,80(r16)
 2001684:	80c00117 	ldw	r3,4(r16)
 2001688:	81400c17 	ldw	r5,48(r16)
 200168c:	10ebc83a 	sub	r21,r2,r3
 2001690:	28007926 	beq	r5,zero,2001878 <_fseek_r+0x448>
 2001694:	81c00f17 	ldw	r7,60(r16)
 2001698:	a9ebc83a 	sub	r21,r21,r7
 200169c:	80800e17 	ldw	r2,56(r16)
 20016a0:	81800417 	ldw	r6,16(r16)
 20016a4:	a8eb883a 	add	r21,r21,r3
 20016a8:	1185c83a 	sub	r2,r2,r6
 20016ac:	a8abc83a 	sub	r21,r21,r2
 20016b0:	3885883a 	add	r2,r7,r2
 20016b4:	2208000c 	andi	r8,r4,8192
 20016b8:	423fffcc 	andi	r8,r8,65535
 20016bc:	4220001c 	xori	r8,r8,32768
 20016c0:	42200004 	addi	r8,r8,-32768
 20016c4:	4000031e 	bne	r8,zero,20016d4 <_fseek_r+0x2a4>
 20016c8:	bd400216 	blt	r23,r21,20016d4 <_fseek_r+0x2a4>
 20016cc:	a887883a 	add	r3,r21,r2
 20016d0:	b8c03d36 	bltu	r23,r3,20017c8 <_fseek_r+0x398>
 20016d4:	85401317 	ldw	r21,76(r16)
 20016d8:	81400717 	ldw	r5,28(r16)
 20016dc:	8809883a 	mov	r4,r17
 20016e0:	056bc83a 	sub	r21,zero,r21
 20016e4:	bd6a703a 	and	r21,r23,r21
 20016e8:	a80d883a 	mov	r6,r21
 20016ec:	000f883a 	mov	r7,zero
 20016f0:	983ee83a 	callr	r19
 20016f4:	00ffffc4 	movi	r3,-1
 20016f8:	10ff7b26 	beq	r2,r3,20014e8 <_fseek_r+0xb8>
 20016fc:	80800417 	ldw	r2,16(r16)
 2001700:	81400c17 	ldw	r5,48(r16)
 2001704:	80000115 	stw	zero,4(r16)
 2001708:	80800015 	stw	r2,0(r16)
 200170c:	28000526 	beq	r5,zero,2001724 <_fseek_r+0x2f4>
 2001710:	80801004 	addi	r2,r16,64
 2001714:	28800226 	beq	r5,r2,2001720 <_fseek_r+0x2f0>
 2001718:	8809883a 	mov	r4,r17
 200171c:	2006bf40 	call	2006bf4 <_free_r>
 2001720:	80000c15 	stw	zero,48(r16)
 2001724:	8080030b 	ldhu	r2,12(r16)
 2001728:	bd6fc83a 	sub	r23,r23,r21
 200172c:	10bff7cc 	andi	r2,r2,65503
 2001730:	8080030d 	sth	r2,12(r16)
 2001734:	b800361e 	bne	r23,zero,2001810 <_fseek_r+0x3e0>
 2001738:	0005883a 	mov	r2,zero
 200173c:	003f8706 	br	200155c <_fseek_r+0x12c>
 2001740:	80c00117 	ldw	r3,4(r16)
 2001744:	80800c17 	ldw	r2,48(r16)
 2001748:	a8ebc83a 	sub	r21,r21,r3
 200174c:	10001226 	beq	r2,zero,2001798 <_fseek_r+0x368>
 2001750:	80c00f17 	ldw	r3,60(r16)
 2001754:	80800417 	ldw	r2,16(r16)
 2001758:	a8ebc83a 	sub	r21,r21,r3
 200175c:	003fa306 	br	20015ec <_fseek_r+0x1bc>
 2001760:	8140038f 	ldh	r5,14(r16)
 2001764:	8809883a 	mov	r4,r17
 2001768:	d80d883a 	mov	r6,sp
 200176c:	20018c80 	call	20018c8 <_fstat_r>
 2001770:	103f5d1e 	bne	r2,zero,20014e8 <_fseek_r+0xb8>
 2001774:	ddc00417 	ldw	r23,16(sp)
 2001778:	8100030b 	ldhu	r4,12(r16)
 200177c:	a5ef883a 	add	r23,r20,r23
 2001780:	b03fba26 	beq	r22,zero,200166c <_fseek_r+0x23c>
 2001784:	81400c17 	ldw	r5,48(r16)
 2001788:	80c00117 	ldw	r3,4(r16)
 200178c:	28003a26 	beq	r5,zero,2001878 <_fseek_r+0x448>
 2001790:	81c00f17 	ldw	r7,60(r16)
 2001794:	003fc106 	br	200169c <_fseek_r+0x26c>
 2001798:	80800417 	ldw	r2,16(r16)
 200179c:	003f9306 	br	20015ec <_fseek_r+0x1bc>
 20017a0:	81400717 	ldw	r5,28(r16)
 20017a4:	8809883a 	mov	r4,r17
 20017a8:	000d883a 	mov	r6,zero
 20017ac:	900f883a 	mov	r7,r18
 20017b0:	983ee83a 	callr	r19
 20017b4:	102b883a 	mov	r21,r2
 20017b8:	00bfffc4 	movi	r2,-1
 20017bc:	a8bf6626 	beq	r21,r2,2001558 <_fseek_r+0x128>
 20017c0:	8080030b 	ldhu	r2,12(r16)
 20017c4:	003f7a06 	br	20015b0 <_fseek_r+0x180>
 20017c8:	bd6bc83a 	sub	r21,r23,r21
 20017cc:	354d883a 	add	r6,r6,r21
 20017d0:	1545c83a 	sub	r2,r2,r21
 20017d4:	81800015 	stw	r6,0(r16)
 20017d8:	80800115 	stw	r2,4(r16)
 20017dc:	28000626 	beq	r5,zero,20017f8 <_fseek_r+0x3c8>
 20017e0:	80801004 	addi	r2,r16,64
 20017e4:	28800326 	beq	r5,r2,20017f4 <_fseek_r+0x3c4>
 20017e8:	8809883a 	mov	r4,r17
 20017ec:	2006bf40 	call	2006bf4 <_free_r>
 20017f0:	8100030b 	ldhu	r4,12(r16)
 20017f4:	80000c15 	stw	zero,48(r16)
 20017f8:	213ff7cc 	andi	r4,r4,65503
 20017fc:	8100030d 	sth	r4,12(r16)
 2001800:	0005883a 	mov	r2,zero
 2001804:	003f5506 	br	200155c <_fseek_r+0x12c>
 2001808:	80c0030b 	ldhu	r3,12(r16)
 200180c:	003f3406 	br	20014e0 <_fseek_r+0xb0>
 2001810:	8809883a 	mov	r4,r17
 2001814:	800b883a 	mov	r5,r16
 2001818:	20027300 	call	2002730 <__srefill_r>
 200181c:	103f321e 	bne	r2,zero,20014e8 <_fseek_r+0xb8>
 2001820:	80800117 	ldw	r2,4(r16)
 2001824:	15ff3036 	bltu	r2,r23,20014e8 <_fseek_r+0xb8>
 2001828:	80c00017 	ldw	r3,0(r16)
 200182c:	15c5c83a 	sub	r2,r2,r23
 2001830:	80800115 	stw	r2,4(r16)
 2001834:	1def883a 	add	r23,r3,r23
 2001838:	85c00015 	stw	r23,0(r16)
 200183c:	0005883a 	mov	r2,zero
 2001840:	003f4606 	br	200155c <_fseek_r+0x12c>
 2001844:	8809883a 	mov	r4,r17
 2001848:	800b883a 	mov	r5,r16
 200184c:	2001b180 	call	2001b18 <__smakebuf_r>
 2001850:	003f1706 	br	20014b0 <_fseek_r+0x80>
 2001854:	81400717 	ldw	r5,28(r16)
 2001858:	8809883a 	mov	r4,r17
 200185c:	000d883a 	mov	r6,zero
 2001860:	01c00044 	movi	r7,1
 2001864:	983ee83a 	callr	r19
 2001868:	00ffffc4 	movi	r3,-1
 200186c:	10ff1e26 	beq	r2,r3,20014e8 <_fseek_r+0xb8>
 2001870:	8100030b 	ldhu	r4,12(r16)
 2001874:	003f8306 	br	2001684 <_fseek_r+0x254>
 2001878:	80800017 	ldw	r2,0(r16)
 200187c:	81800417 	ldw	r6,16(r16)
 2001880:	000b883a 	mov	r5,zero
 2001884:	1185c83a 	sub	r2,r2,r6
 2001888:	a8abc83a 	sub	r21,r21,r2
 200188c:	1885883a 	add	r2,r3,r2
 2001890:	003f8806 	br	20016b4 <_fseek_r+0x284>
 2001894:	00800744 	movi	r2,29
 2001898:	88800015 	stw	r2,0(r17)
 200189c:	00bfffc4 	movi	r2,-1
 20018a0:	003f2e06 	br	200155c <_fseek_r+0x12c>

020018a4 <fseek>:
 20018a4:	00808074 	movhi	r2,513
 20018a8:	1085b204 	addi	r2,r2,5832
 20018ac:	2007883a 	mov	r3,r4
 20018b0:	11000017 	ldw	r4,0(r2)
 20018b4:	2805883a 	mov	r2,r5
 20018b8:	300f883a 	mov	r7,r6
 20018bc:	180b883a 	mov	r5,r3
 20018c0:	100d883a 	mov	r6,r2
 20018c4:	20014301 	jmpi	2001430 <_fseek_r>

020018c8 <_fstat_r>:
 20018c8:	defffd04 	addi	sp,sp,-12
 20018cc:	dc400115 	stw	r17,4(sp)
 20018d0:	dc000015 	stw	r16,0(sp)
 20018d4:	2023883a 	mov	r17,r4
 20018d8:	04008074 	movhi	r16,513
 20018dc:	8405c704 	addi	r16,r16,5916
 20018e0:	2809883a 	mov	r4,r5
 20018e4:	300b883a 	mov	r5,r6
 20018e8:	dfc00215 	stw	ra,8(sp)
 20018ec:	80000015 	stw	zero,0(r16)
 20018f0:	200b2300 	call	200b230 <fstat>
 20018f4:	00ffffc4 	movi	r3,-1
 20018f8:	10c00526 	beq	r2,r3,2001910 <_fstat_r+0x48>
 20018fc:	dfc00217 	ldw	ra,8(sp)
 2001900:	dc400117 	ldw	r17,4(sp)
 2001904:	dc000017 	ldw	r16,0(sp)
 2001908:	dec00304 	addi	sp,sp,12
 200190c:	f800283a 	ret
 2001910:	80c00017 	ldw	r3,0(r16)
 2001914:	183ff926 	beq	r3,zero,20018fc <_fstat_r+0x34>
 2001918:	88c00015 	stw	r3,0(r17)
 200191c:	dfc00217 	ldw	ra,8(sp)
 2001920:	dc400117 	ldw	r17,4(sp)
 2001924:	dc000017 	ldw	r16,0(sp)
 2001928:	dec00304 	addi	sp,sp,12
 200192c:	f800283a 	ret

02001930 <_fwrite_r>:
 2001930:	defff604 	addi	sp,sp,-40
 2001934:	dc000515 	stw	r16,20(sp)
 2001938:	d9400315 	stw	r5,12(sp)
 200193c:	2021883a 	mov	r16,r4
 2001940:	300b883a 	mov	r5,r6
 2001944:	3809883a 	mov	r4,r7
 2001948:	dcc00815 	stw	r19,32(sp)
 200194c:	dc800715 	stw	r18,28(sp)
 2001950:	dc400615 	stw	r17,24(sp)
 2001954:	dfc00915 	stw	ra,36(sp)
 2001958:	3027883a 	mov	r19,r6
 200195c:	3823883a 	mov	r17,r7
 2001960:	20012bc0 	call	20012bc <__mulsi3>
 2001964:	1025883a 	mov	r18,r2
 2001968:	d8800415 	stw	r2,16(sp)
 200196c:	d8800215 	stw	r2,8(sp)
 2001970:	d8800304 	addi	r2,sp,12
 2001974:	d8800015 	stw	r2,0(sp)
 2001978:	00800044 	movi	r2,1
 200197c:	d8800115 	stw	r2,4(sp)
 2001980:	80000226 	beq	r16,zero,200198c <_fwrite_r+0x5c>
 2001984:	80800e17 	ldw	r2,56(r16)
 2001988:	10001226 	beq	r2,zero,20019d4 <_fwrite_r+0xa4>
 200198c:	d9400a17 	ldw	r5,40(sp)
 2001990:	8009883a 	mov	r4,r16
 2001994:	d80d883a 	mov	r6,sp
 2001998:	2006ec40 	call	2006ec4 <__sfvwrite_r>
 200199c:	10000526 	beq	r2,zero,20019b4 <_fwrite_r+0x84>
 20019a0:	d9000217 	ldw	r4,8(sp)
 20019a4:	980b883a 	mov	r5,r19
 20019a8:	9109c83a 	sub	r4,r18,r4
 20019ac:	20012ac0 	call	20012ac <__udivsi3>
 20019b0:	1023883a 	mov	r17,r2
 20019b4:	8805883a 	mov	r2,r17
 20019b8:	dfc00917 	ldw	ra,36(sp)
 20019bc:	dcc00817 	ldw	r19,32(sp)
 20019c0:	dc800717 	ldw	r18,28(sp)
 20019c4:	dc400617 	ldw	r17,24(sp)
 20019c8:	dc000517 	ldw	r16,20(sp)
 20019cc:	dec00a04 	addi	sp,sp,40
 20019d0:	f800283a 	ret
 20019d4:	8009883a 	mov	r4,r16
 20019d8:	20067d80 	call	20067d8 <__sinit>
 20019dc:	003feb06 	br	200198c <_fwrite_r+0x5c>

020019e0 <fwrite>:
 20019e0:	00808074 	movhi	r2,513
 20019e4:	1085b204 	addi	r2,r2,5832
 20019e8:	2011883a 	mov	r8,r4
 20019ec:	11000017 	ldw	r4,0(r2)
 20019f0:	defffe04 	addi	sp,sp,-8
 20019f4:	2807883a 	mov	r3,r5
 20019f8:	3005883a 	mov	r2,r6
 20019fc:	d9c00015 	stw	r7,0(sp)
 2001a00:	400b883a 	mov	r5,r8
 2001a04:	180d883a 	mov	r6,r3
 2001a08:	100f883a 	mov	r7,r2
 2001a0c:	dfc00115 	stw	ra,4(sp)
 2001a10:	20019300 	call	2001930 <_fwrite_r>
 2001a14:	dfc00117 	ldw	ra,4(sp)
 2001a18:	dec00204 	addi	sp,sp,8
 2001a1c:	f800283a 	ret

02001a20 <_getc_r>:
 2001a20:	defffd04 	addi	sp,sp,-12
 2001a24:	dc000115 	stw	r16,4(sp)
 2001a28:	dfc00215 	stw	ra,8(sp)
 2001a2c:	2021883a 	mov	r16,r4
 2001a30:	20000226 	beq	r4,zero,2001a3c <_getc_r+0x1c>
 2001a34:	20800e17 	ldw	r2,56(r4)
 2001a38:	10000c26 	beq	r2,zero,2001a6c <_getc_r+0x4c>
 2001a3c:	28800117 	ldw	r2,4(r5)
 2001a40:	10bfffc4 	addi	r2,r2,-1
 2001a44:	28800115 	stw	r2,4(r5)
 2001a48:	10000c16 	blt	r2,zero,2001a7c <_getc_r+0x5c>
 2001a4c:	28c00017 	ldw	r3,0(r5)
 2001a50:	18800003 	ldbu	r2,0(r3)
 2001a54:	18c00044 	addi	r3,r3,1
 2001a58:	28c00015 	stw	r3,0(r5)
 2001a5c:	dfc00217 	ldw	ra,8(sp)
 2001a60:	dc000117 	ldw	r16,4(sp)
 2001a64:	dec00304 	addi	sp,sp,12
 2001a68:	f800283a 	ret
 2001a6c:	d9400015 	stw	r5,0(sp)
 2001a70:	20067d80 	call	20067d8 <__sinit>
 2001a74:	d9400017 	ldw	r5,0(sp)
 2001a78:	003ff006 	br	2001a3c <_getc_r+0x1c>
 2001a7c:	8009883a 	mov	r4,r16
 2001a80:	dfc00217 	ldw	ra,8(sp)
 2001a84:	dc000117 	ldw	r16,4(sp)
 2001a88:	dec00304 	addi	sp,sp,12
 2001a8c:	200291c1 	jmpi	200291c <__srget_r>

02001a90 <getc>:
 2001a90:	defffd04 	addi	sp,sp,-12
 2001a94:	dc400115 	stw	r17,4(sp)
 2001a98:	04408074 	movhi	r17,513
 2001a9c:	8c45b204 	addi	r17,r17,5832
 2001aa0:	88800017 	ldw	r2,0(r17)
 2001aa4:	dc000015 	stw	r16,0(sp)
 2001aa8:	dfc00215 	stw	ra,8(sp)
 2001aac:	2021883a 	mov	r16,r4
 2001ab0:	10000226 	beq	r2,zero,2001abc <getc+0x2c>
 2001ab4:	10c00e17 	ldw	r3,56(r2)
 2001ab8:	18000d26 	beq	r3,zero,2001af0 <getc+0x60>
 2001abc:	80800117 	ldw	r2,4(r16)
 2001ac0:	10bfffc4 	addi	r2,r2,-1
 2001ac4:	80800115 	stw	r2,4(r16)
 2001ac8:	10000c16 	blt	r2,zero,2001afc <getc+0x6c>
 2001acc:	80c00017 	ldw	r3,0(r16)
 2001ad0:	18800003 	ldbu	r2,0(r3)
 2001ad4:	18c00044 	addi	r3,r3,1
 2001ad8:	80c00015 	stw	r3,0(r16)
 2001adc:	dfc00217 	ldw	ra,8(sp)
 2001ae0:	dc400117 	ldw	r17,4(sp)
 2001ae4:	dc000017 	ldw	r16,0(sp)
 2001ae8:	dec00304 	addi	sp,sp,12
 2001aec:	f800283a 	ret
 2001af0:	1009883a 	mov	r4,r2
 2001af4:	20067d80 	call	20067d8 <__sinit>
 2001af8:	003ff006 	br	2001abc <getc+0x2c>
 2001afc:	89000017 	ldw	r4,0(r17)
 2001b00:	800b883a 	mov	r5,r16
 2001b04:	dfc00217 	ldw	ra,8(sp)
 2001b08:	dc400117 	ldw	r17,4(sp)
 2001b0c:	dc000017 	ldw	r16,0(sp)
 2001b10:	dec00304 	addi	sp,sp,12
 2001b14:	200291c1 	jmpi	200291c <__srget_r>

02001b18 <__smakebuf_r>:
 2001b18:	2880030b 	ldhu	r2,12(r5)
 2001b1c:	deffed04 	addi	sp,sp,-76
 2001b20:	dc401015 	stw	r17,64(sp)
 2001b24:	10c0008c 	andi	r3,r2,2
 2001b28:	18ffffcc 	andi	r3,r3,65535
 2001b2c:	18e0001c 	xori	r3,r3,32768
 2001b30:	dc000f15 	stw	r16,60(sp)
 2001b34:	dfc01215 	stw	ra,72(sp)
 2001b38:	dc801115 	stw	r18,68(sp)
 2001b3c:	18e00004 	addi	r3,r3,-32768
 2001b40:	2821883a 	mov	r16,r5
 2001b44:	2023883a 	mov	r17,r4
 2001b48:	1800381e 	bne	r3,zero,2001c2c <__smakebuf_r+0x114>
 2001b4c:	2940038f 	ldh	r5,14(r5)
 2001b50:	28002d16 	blt	r5,zero,2001c08 <__smakebuf_r+0xf0>
 2001b54:	d80d883a 	mov	r6,sp
 2001b58:	20018c80 	call	20018c8 <_fstat_r>
 2001b5c:	10002916 	blt	r2,zero,2001c04 <__smakebuf_r+0xec>
 2001b60:	d8800117 	ldw	r2,4(sp)
 2001b64:	00e00014 	movui	r3,32768
 2001b68:	10bc000c 	andi	r2,r2,61440
 2001b6c:	10c03c26 	beq	r2,r3,2001c60 <__smakebuf_r+0x148>
 2001b70:	80c0030b 	ldhu	r3,12(r16)
 2001b74:	18c20014 	ori	r3,r3,2048
 2001b78:	80c0030d 	sth	r3,12(r16)
 2001b7c:	00c80004 	movi	r3,8192
 2001b80:	10c00c1e 	bne	r2,r3,2001bb4 <__smakebuf_r+0x9c>
 2001b84:	8140038f 	ldh	r5,14(r16)
 2001b88:	8809883a 	mov	r4,r17
 2001b8c:	20075080 	call	2007508 <_isatty_r>
 2001b90:	10000826 	beq	r2,zero,2001bb4 <__smakebuf_r+0x9c>
 2001b94:	80c0030b 	ldhu	r3,12(r16)
 2001b98:	808010c4 	addi	r2,r16,67
 2001b9c:	80800015 	stw	r2,0(r16)
 2001ba0:	18c00054 	ori	r3,r3,1
 2001ba4:	80800415 	stw	r2,16(r16)
 2001ba8:	00800044 	movi	r2,1
 2001bac:	80c0030d 	sth	r3,12(r16)
 2001bb0:	80800515 	stw	r2,20(r16)
 2001bb4:	04810004 	movi	r18,1024
 2001bb8:	8809883a 	mov	r4,r17
 2001bbc:	900b883a 	mov	r5,r18
 2001bc0:	2001cc00 	call	2001cc0 <_malloc_r>
 2001bc4:	10003026 	beq	r2,zero,2001c88 <__smakebuf_r+0x170>
 2001bc8:	80c0030b 	ldhu	r3,12(r16)
 2001bcc:	01008034 	movhi	r4,512
 2001bd0:	2119d104 	addi	r4,r4,26436
 2001bd4:	89000f15 	stw	r4,60(r17)
 2001bd8:	18c02014 	ori	r3,r3,128
 2001bdc:	80c0030d 	sth	r3,12(r16)
 2001be0:	80800015 	stw	r2,0(r16)
 2001be4:	80800415 	stw	r2,16(r16)
 2001be8:	84800515 	stw	r18,20(r16)
 2001bec:	dfc01217 	ldw	ra,72(sp)
 2001bf0:	dc801117 	ldw	r18,68(sp)
 2001bf4:	dc401017 	ldw	r17,64(sp)
 2001bf8:	dc000f17 	ldw	r16,60(sp)
 2001bfc:	dec01304 	addi	sp,sp,76
 2001c00:	f800283a 	ret
 2001c04:	8080030b 	ldhu	r2,12(r16)
 2001c08:	10c0200c 	andi	r3,r2,128
 2001c0c:	18ffffcc 	andi	r3,r3,65535
 2001c10:	18e0001c 	xori	r3,r3,32768
 2001c14:	18e00004 	addi	r3,r3,-32768
 2001c18:	18000f1e 	bne	r3,zero,2001c58 <__smakebuf_r+0x140>
 2001c1c:	04810004 	movi	r18,1024
 2001c20:	10820014 	ori	r2,r2,2048
 2001c24:	8080030d 	sth	r2,12(r16)
 2001c28:	003fe306 	br	2001bb8 <__smakebuf_r+0xa0>
 2001c2c:	288010c4 	addi	r2,r5,67
 2001c30:	28800015 	stw	r2,0(r5)
 2001c34:	28800415 	stw	r2,16(r5)
 2001c38:	00800044 	movi	r2,1
 2001c3c:	28800515 	stw	r2,20(r5)
 2001c40:	dfc01217 	ldw	ra,72(sp)
 2001c44:	dc801117 	ldw	r18,68(sp)
 2001c48:	dc401017 	ldw	r17,64(sp)
 2001c4c:	dc000f17 	ldw	r16,60(sp)
 2001c50:	dec01304 	addi	sp,sp,76
 2001c54:	f800283a 	ret
 2001c58:	04801004 	movi	r18,64
 2001c5c:	003ff006 	br	2001c20 <__smakebuf_r+0x108>
 2001c60:	81000a17 	ldw	r4,40(r16)
 2001c64:	00c08034 	movhi	r3,512
 2001c68:	18caaf04 	addi	r3,r3,10940
 2001c6c:	20ffc01e 	bne	r4,r3,2001b70 <__smakebuf_r+0x58>
 2001c70:	8080030b 	ldhu	r2,12(r16)
 2001c74:	00c10004 	movi	r3,1024
 2001c78:	80c01315 	stw	r3,76(r16)
 2001c7c:	10c4b03a 	or	r2,r2,r3
 2001c80:	8080030d 	sth	r2,12(r16)
 2001c84:	003fcb06 	br	2001bb4 <__smakebuf_r+0x9c>
 2001c88:	8080030b 	ldhu	r2,12(r16)
 2001c8c:	10c0800c 	andi	r3,r2,512
 2001c90:	18ffffcc 	andi	r3,r3,65535
 2001c94:	18e0001c 	xori	r3,r3,32768
 2001c98:	18e00004 	addi	r3,r3,-32768
 2001c9c:	183fd31e 	bne	r3,zero,2001bec <__smakebuf_r+0xd4>
 2001ca0:	10800094 	ori	r2,r2,2
 2001ca4:	80c010c4 	addi	r3,r16,67
 2001ca8:	8080030d 	sth	r2,12(r16)
 2001cac:	00800044 	movi	r2,1
 2001cb0:	80c00015 	stw	r3,0(r16)
 2001cb4:	80c00415 	stw	r3,16(r16)
 2001cb8:	80800515 	stw	r2,20(r16)
 2001cbc:	003fcb06 	br	2001bec <__smakebuf_r+0xd4>

02001cc0 <_malloc_r>:
 2001cc0:	defff604 	addi	sp,sp,-40
 2001cc4:	dc800215 	stw	r18,8(sp)
 2001cc8:	dfc00915 	stw	ra,36(sp)
 2001ccc:	df000815 	stw	fp,32(sp)
 2001cd0:	ddc00715 	stw	r23,28(sp)
 2001cd4:	dd800615 	stw	r22,24(sp)
 2001cd8:	dd400515 	stw	r21,20(sp)
 2001cdc:	dd000415 	stw	r20,16(sp)
 2001ce0:	dcc00315 	stw	r19,12(sp)
 2001ce4:	dc400115 	stw	r17,4(sp)
 2001ce8:	dc000015 	stw	r16,0(sp)
 2001cec:	288002c4 	addi	r2,r5,11
 2001cf0:	00c00584 	movi	r3,22
 2001cf4:	2025883a 	mov	r18,r4
 2001cf8:	18802b2e 	bgeu	r3,r2,2001da8 <_malloc_r+0xe8>
 2001cfc:	047ffe04 	movi	r17,-8
 2001d00:	1462703a 	and	r17,r2,r17
 2001d04:	88002a16 	blt	r17,zero,2001db0 <_malloc_r+0xf0>
 2001d08:	89402936 	bltu	r17,r5,2001db0 <_malloc_r+0xf0>
 2001d0c:	9009883a 	mov	r4,r18
 2001d10:	200b5700 	call	200b570 <__malloc_lock>
 2001d14:	00807dc4 	movi	r2,503
 2001d18:	14402936 	bltu	r2,r17,2001dc0 <_malloc_r+0x100>
 2001d1c:	8808d0fa 	srli	r4,r17,3
 2001d20:	04c08074 	movhi	r19,513
 2001d24:	9cffc504 	addi	r19,r19,-236
 2001d28:	2105883a 	add	r2,r4,r4
 2001d2c:	1085883a 	add	r2,r2,r2
 2001d30:	1085883a 	add	r2,r2,r2
 2001d34:	9885883a 	add	r2,r19,r2
 2001d38:	14000317 	ldw	r16,12(r2)
 2001d3c:	80815526 	beq	r16,r2,2002294 <_malloc_r+0x5d4>
 2001d40:	81000117 	ldw	r4,4(r16)
 2001d44:	00bfff04 	movi	r2,-4
 2001d48:	80c00317 	ldw	r3,12(r16)
 2001d4c:	2084703a 	and	r2,r4,r2
 2001d50:	8085883a 	add	r2,r16,r2
 2001d54:	11800117 	ldw	r6,4(r2)
 2001d58:	81400217 	ldw	r5,8(r16)
 2001d5c:	9009883a 	mov	r4,r18
 2001d60:	31800054 	ori	r6,r6,1
 2001d64:	11800115 	stw	r6,4(r2)
 2001d68:	28c00315 	stw	r3,12(r5)
 2001d6c:	19400215 	stw	r5,8(r3)
 2001d70:	200b5900 	call	200b590 <__malloc_unlock>
 2001d74:	80800204 	addi	r2,r16,8
 2001d78:	dfc00917 	ldw	ra,36(sp)
 2001d7c:	df000817 	ldw	fp,32(sp)
 2001d80:	ddc00717 	ldw	r23,28(sp)
 2001d84:	dd800617 	ldw	r22,24(sp)
 2001d88:	dd400517 	ldw	r21,20(sp)
 2001d8c:	dd000417 	ldw	r20,16(sp)
 2001d90:	dcc00317 	ldw	r19,12(sp)
 2001d94:	dc800217 	ldw	r18,8(sp)
 2001d98:	dc400117 	ldw	r17,4(sp)
 2001d9c:	dc000017 	ldw	r16,0(sp)
 2001da0:	dec00a04 	addi	sp,sp,40
 2001da4:	f800283a 	ret
 2001da8:	04400404 	movi	r17,16
 2001dac:	897fd72e 	bgeu	r17,r5,2001d0c <_malloc_r+0x4c>
 2001db0:	00800304 	movi	r2,12
 2001db4:	90800015 	stw	r2,0(r18)
 2001db8:	0005883a 	mov	r2,zero
 2001dbc:	003fee06 	br	2001d78 <_malloc_r+0xb8>
 2001dc0:	8808d27a 	srli	r4,r17,9
 2001dc4:	20007126 	beq	r4,zero,2001f8c <_malloc_r+0x2cc>
 2001dc8:	00800104 	movi	r2,4
 2001dcc:	1100eb36 	bltu	r2,r4,200217c <_malloc_r+0x4bc>
 2001dd0:	8808d1ba 	srli	r4,r17,6
 2001dd4:	21000e04 	addi	r4,r4,56
 2001dd8:	210b883a 	add	r5,r4,r4
 2001ddc:	294b883a 	add	r5,r5,r5
 2001de0:	294b883a 	add	r5,r5,r5
 2001de4:	04c08074 	movhi	r19,513
 2001de8:	9cffc504 	addi	r19,r19,-236
 2001dec:	994b883a 	add	r5,r19,r5
 2001df0:	2c000317 	ldw	r16,12(r5)
 2001df4:	2c000e26 	beq	r5,r16,2001e30 <_malloc_r+0x170>
 2001df8:	80c00117 	ldw	r3,4(r16)
 2001dfc:	01ffff04 	movi	r7,-4
 2001e00:	018003c4 	movi	r6,15
 2001e04:	19c6703a 	and	r3,r3,r7
 2001e08:	1c45c83a 	sub	r2,r3,r17
 2001e0c:	30800716 	blt	r6,r2,2001e2c <_malloc_r+0x16c>
 2001e10:	1000610e 	bge	r2,zero,2001f98 <_malloc_r+0x2d8>
 2001e14:	84000317 	ldw	r16,12(r16)
 2001e18:	2c000526 	beq	r5,r16,2001e30 <_malloc_r+0x170>
 2001e1c:	80c00117 	ldw	r3,4(r16)
 2001e20:	19c6703a 	and	r3,r3,r7
 2001e24:	1c45c83a 	sub	r2,r3,r17
 2001e28:	30bff90e 	bge	r6,r2,2001e10 <_malloc_r+0x150>
 2001e2c:	213fffc4 	addi	r4,r4,-1
 2001e30:	21000044 	addi	r4,r4,1
 2001e34:	9c000417 	ldw	r16,16(r19)
 2001e38:	00c08074 	movhi	r3,513
 2001e3c:	18ffc504 	addi	r3,r3,-236
 2001e40:	1a400204 	addi	r9,r3,8
 2001e44:	8240ff26 	beq	r16,r9,2002244 <_malloc_r+0x584>
 2001e48:	81400117 	ldw	r5,4(r16)
 2001e4c:	00bfff04 	movi	r2,-4
 2001e50:	018003c4 	movi	r6,15
 2001e54:	2884703a 	and	r2,r5,r2
 2001e58:	144bc83a 	sub	r5,r2,r17
 2001e5c:	3140ea16 	blt	r6,r5,2002208 <_malloc_r+0x548>
 2001e60:	1a400515 	stw	r9,20(r3)
 2001e64:	1a400415 	stw	r9,16(r3)
 2001e68:	2800570e 	bge	r5,zero,2001fc8 <_malloc_r+0x308>
 2001e6c:	01407fc4 	movi	r5,511
 2001e70:	2880ca36 	bltu	r5,r2,200219c <_malloc_r+0x4dc>
 2001e74:	1004d0fa 	srli	r2,r2,3
 2001e78:	02000044 	movi	r8,1
 2001e7c:	19c00117 	ldw	r7,4(r3)
 2001e80:	108b883a 	add	r5,r2,r2
 2001e84:	294b883a 	add	r5,r5,r5
 2001e88:	1005d0ba 	srai	r2,r2,2
 2001e8c:	294b883a 	add	r5,r5,r5
 2001e90:	28cb883a 	add	r5,r5,r3
 2001e94:	29800217 	ldw	r6,8(r5)
 2001e98:	4084983a 	sll	r2,r8,r2
 2001e9c:	81400315 	stw	r5,12(r16)
 2001ea0:	81800215 	stw	r6,8(r16)
 2001ea4:	11c4b03a 	or	r2,r2,r7
 2001ea8:	18800115 	stw	r2,4(r3)
 2001eac:	2c000215 	stw	r16,8(r5)
 2001eb0:	34000315 	stw	r16,12(r6)
 2001eb4:	200bd0ba 	srai	r5,r4,2
 2001eb8:	00c00044 	movi	r3,1
 2001ebc:	194a983a 	sll	r5,r3,r5
 2001ec0:	11404936 	bltu	r2,r5,2001fe8 <_malloc_r+0x328>
 2001ec4:	1146703a 	and	r3,r2,r5
 2001ec8:	18000a1e 	bne	r3,zero,2001ef4 <_malloc_r+0x234>
 2001ecc:	00ffff04 	movi	r3,-4
 2001ed0:	294b883a 	add	r5,r5,r5
 2001ed4:	20c8703a 	and	r4,r4,r3
 2001ed8:	1146703a 	and	r3,r2,r5
 2001edc:	21000104 	addi	r4,r4,4
 2001ee0:	1800041e 	bne	r3,zero,2001ef4 <_malloc_r+0x234>
 2001ee4:	294b883a 	add	r5,r5,r5
 2001ee8:	1146703a 	and	r3,r2,r5
 2001eec:	21000104 	addi	r4,r4,4
 2001ef0:	183ffc26 	beq	r3,zero,2001ee4 <_malloc_r+0x224>
 2001ef4:	023fff04 	movi	r8,-4
 2001ef8:	01c003c4 	movi	r7,15
 2001efc:	2105883a 	add	r2,r4,r4
 2001f00:	1085883a 	add	r2,r2,r2
 2001f04:	1085883a 	add	r2,r2,r2
 2001f08:	9899883a 	add	r12,r19,r2
 2001f0c:	62800304 	addi	r10,r12,12
 2001f10:	2017883a 	mov	r11,r4
 2001f14:	54000017 	ldw	r16,0(r10)
 2001f18:	51bffd04 	addi	r6,r10,-12
 2001f1c:	8180041e 	bne	r16,r6,2001f30 <_malloc_r+0x270>
 2001f20:	0000ca06 	br	200224c <_malloc_r+0x58c>
 2001f24:	10001c0e 	bge	r2,zero,2001f98 <_malloc_r+0x2d8>
 2001f28:	84000317 	ldw	r16,12(r16)
 2001f2c:	8180c726 	beq	r16,r6,200224c <_malloc_r+0x58c>
 2001f30:	80c00117 	ldw	r3,4(r16)
 2001f34:	1a06703a 	and	r3,r3,r8
 2001f38:	1c45c83a 	sub	r2,r3,r17
 2001f3c:	38bff90e 	bge	r7,r2,2001f24 <_malloc_r+0x264>
 2001f40:	81000317 	ldw	r4,12(r16)
 2001f44:	81400217 	ldw	r5,8(r16)
 2001f48:	8447883a 	add	r3,r16,r17
 2001f4c:	8c400054 	ori	r17,r17,1
 2001f50:	29000315 	stw	r4,12(r5)
 2001f54:	21400215 	stw	r5,8(r4)
 2001f58:	84400115 	stw	r17,4(r16)
 2001f5c:	1889883a 	add	r4,r3,r2
 2001f60:	11400054 	ori	r5,r2,1
 2001f64:	98c00515 	stw	r3,20(r19)
 2001f68:	98c00415 	stw	r3,16(r19)
 2001f6c:	20800015 	stw	r2,0(r4)
 2001f70:	1a400315 	stw	r9,12(r3)
 2001f74:	1a400215 	stw	r9,8(r3)
 2001f78:	19400115 	stw	r5,4(r3)
 2001f7c:	9009883a 	mov	r4,r18
 2001f80:	200b5900 	call	200b590 <__malloc_unlock>
 2001f84:	80800204 	addi	r2,r16,8
 2001f88:	003f7b06 	br	2001d78 <_malloc_r+0xb8>
 2001f8c:	8808d0fa 	srli	r4,r17,3
 2001f90:	210b883a 	add	r5,r4,r4
 2001f94:	003f9106 	br	2001ddc <_malloc_r+0x11c>
 2001f98:	80c7883a 	add	r3,r16,r3
 2001f9c:	19400117 	ldw	r5,4(r3)
 2001fa0:	80800317 	ldw	r2,12(r16)
 2001fa4:	81000217 	ldw	r4,8(r16)
 2001fa8:	29400054 	ori	r5,r5,1
 2001fac:	19400115 	stw	r5,4(r3)
 2001fb0:	20800315 	stw	r2,12(r4)
 2001fb4:	11000215 	stw	r4,8(r2)
 2001fb8:	9009883a 	mov	r4,r18
 2001fbc:	200b5900 	call	200b590 <__malloc_unlock>
 2001fc0:	80800204 	addi	r2,r16,8
 2001fc4:	003f6c06 	br	2001d78 <_malloc_r+0xb8>
 2001fc8:	8085883a 	add	r2,r16,r2
 2001fcc:	10c00117 	ldw	r3,4(r2)
 2001fd0:	9009883a 	mov	r4,r18
 2001fd4:	18c00054 	ori	r3,r3,1
 2001fd8:	10c00115 	stw	r3,4(r2)
 2001fdc:	200b5900 	call	200b590 <__malloc_unlock>
 2001fe0:	80800204 	addi	r2,r16,8
 2001fe4:	003f6406 	br	2001d78 <_malloc_r+0xb8>
 2001fe8:	9c000217 	ldw	r16,8(r19)
 2001fec:	00bfff04 	movi	r2,-4
 2001ff0:	85400117 	ldw	r21,4(r16)
 2001ff4:	a8aa703a 	and	r21,r21,r2
 2001ff8:	ac400336 	bltu	r21,r17,2002008 <_malloc_r+0x348>
 2001ffc:	ac45c83a 	sub	r2,r21,r17
 2002000:	00c003c4 	movi	r3,15
 2002004:	18805316 	blt	r3,r2,2002154 <_malloc_r+0x494>
 2002008:	d5e01b17 	ldw	r23,-32660(gp)
 200200c:	d0e00417 	ldw	r3,-32752(gp)
 2002010:	00bfffc4 	movi	r2,-1
 2002014:	8579883a 	add	fp,r16,r21
 2002018:	8def883a 	add	r23,r17,r23
 200201c:	1880d226 	beq	r3,r2,2002368 <_malloc_r+0x6a8>
 2002020:	bdc403c4 	addi	r23,r23,4111
 2002024:	00bc0004 	movi	r2,-4096
 2002028:	b8ae703a 	and	r23,r23,r2
 200202c:	9009883a 	mov	r4,r18
 2002030:	b80b883a 	mov	r5,r23
 2002034:	200297c0 	call	200297c <_sbrk_r>
 2002038:	1029883a 	mov	r20,r2
 200203c:	00bfffc4 	movi	r2,-1
 2002040:	a080d126 	beq	r20,r2,2002388 <_malloc_r+0x6c8>
 2002044:	a7009f36 	bltu	r20,fp,20022c4 <_malloc_r+0x604>
 2002048:	05808074 	movhi	r22,513
 200204c:	b585d604 	addi	r22,r22,5976
 2002050:	b0800017 	ldw	r2,0(r22)
 2002054:	b885883a 	add	r2,r23,r2
 2002058:	b0800015 	stw	r2,0(r22)
 200205c:	e500cf26 	beq	fp,r20,200239c <_malloc_r+0x6dc>
 2002060:	d1200417 	ldw	r4,-32752(gp)
 2002064:	00ffffc4 	movi	r3,-1
 2002068:	20c0e026 	beq	r4,r3,20023ec <_malloc_r+0x72c>
 200206c:	a739c83a 	sub	fp,r20,fp
 2002070:	1705883a 	add	r2,r2,fp
 2002074:	b0800015 	stw	r2,0(r22)
 2002078:	a08001cc 	andi	r2,r20,7
 200207c:	1000a526 	beq	r2,zero,2002314 <_malloc_r+0x654>
 2002080:	a0a9c83a 	sub	r20,r20,r2
 2002084:	00c40204 	movi	r3,4104
 2002088:	a5000204 	addi	r20,r20,8
 200208c:	1885c83a 	sub	r2,r3,r2
 2002090:	a5c7883a 	add	r3,r20,r23
 2002094:	18c3ffcc 	andi	r3,r3,4095
 2002098:	10efc83a 	sub	r23,r2,r3
 200209c:	9009883a 	mov	r4,r18
 20020a0:	b80b883a 	mov	r5,r23
 20020a4:	200297c0 	call	200297c <_sbrk_r>
 20020a8:	00ffffc4 	movi	r3,-1
 20020ac:	10c0cc26 	beq	r2,r3,20023e0 <_malloc_r+0x720>
 20020b0:	1505c83a 	sub	r2,r2,r20
 20020b4:	b887883a 	add	r3,r23,r2
 20020b8:	18c00054 	ori	r3,r3,1
 20020bc:	b0800017 	ldw	r2,0(r22)
 20020c0:	9d000215 	stw	r20,8(r19)
 20020c4:	a0c00115 	stw	r3,4(r20)
 20020c8:	b885883a 	add	r2,r23,r2
 20020cc:	b0800015 	stw	r2,0(r22)
 20020d0:	84c00e26 	beq	r16,r19,200210c <_malloc_r+0x44c>
 20020d4:	00c003c4 	movi	r3,15
 20020d8:	1d40902e 	bgeu	r3,r21,200231c <_malloc_r+0x65c>
 20020dc:	ad7ffd04 	addi	r21,r21,-12
 20020e0:	013ffe04 	movi	r4,-8
 20020e4:	a908703a 	and	r4,r21,r4
 20020e8:	810b883a 	add	r5,r16,r4
 20020ec:	01800144 	movi	r6,5
 20020f0:	29800115 	stw	r6,4(r5)
 20020f4:	29800215 	stw	r6,8(r5)
 20020f8:	81400117 	ldw	r5,4(r16)
 20020fc:	2940004c 	andi	r5,r5,1
 2002100:	214ab03a 	or	r5,r4,r5
 2002104:	81400115 	stw	r5,4(r16)
 2002108:	1900ae36 	bltu	r3,r4,20023c4 <_malloc_r+0x704>
 200210c:	d0e01a17 	ldw	r3,-32664(gp)
 2002110:	1880012e 	bgeu	r3,r2,2002118 <_malloc_r+0x458>
 2002114:	d0a01a15 	stw	r2,-32664(gp)
 2002118:	d0e01917 	ldw	r3,-32668(gp)
 200211c:	9c000217 	ldw	r16,8(r19)
 2002120:	1880012e 	bgeu	r3,r2,2002128 <_malloc_r+0x468>
 2002124:	d0a01915 	stw	r2,-32668(gp)
 2002128:	80c00117 	ldw	r3,4(r16)
 200212c:	00bfff04 	movi	r2,-4
 2002130:	1886703a 	and	r3,r3,r2
 2002134:	1c45c83a 	sub	r2,r3,r17
 2002138:	1c400236 	bltu	r3,r17,2002144 <_malloc_r+0x484>
 200213c:	00c003c4 	movi	r3,15
 2002140:	18800416 	blt	r3,r2,2002154 <_malloc_r+0x494>
 2002144:	9009883a 	mov	r4,r18
 2002148:	200b5900 	call	200b590 <__malloc_unlock>
 200214c:	0005883a 	mov	r2,zero
 2002150:	003f0906 	br	2001d78 <_malloc_r+0xb8>
 2002154:	88c00054 	ori	r3,r17,1
 2002158:	10800054 	ori	r2,r2,1
 200215c:	80c00115 	stw	r3,4(r16)
 2002160:	8463883a 	add	r17,r16,r17
 2002164:	88800115 	stw	r2,4(r17)
 2002168:	9009883a 	mov	r4,r18
 200216c:	9c400215 	stw	r17,8(r19)
 2002170:	200b5900 	call	200b590 <__malloc_unlock>
 2002174:	80800204 	addi	r2,r16,8
 2002178:	003eff06 	br	2001d78 <_malloc_r+0xb8>
 200217c:	00800504 	movi	r2,20
 2002180:	1100492e 	bgeu	r2,r4,20022a8 <_malloc_r+0x5e8>
 2002184:	00801504 	movi	r2,84
 2002188:	11005c36 	bltu	r2,r4,20022fc <_malloc_r+0x63c>
 200218c:	8808d33a 	srli	r4,r17,12
 2002190:	21001b84 	addi	r4,r4,110
 2002194:	210b883a 	add	r5,r4,r4
 2002198:	003f1006 	br	2001ddc <_malloc_r+0x11c>
 200219c:	1006d27a 	srli	r3,r2,9
 20021a0:	01400104 	movi	r5,4
 20021a4:	28c0432e 	bgeu	r5,r3,20022b4 <_malloc_r+0x5f4>
 20021a8:	01400504 	movi	r5,20
 20021ac:	28c07036 	bltu	r5,r3,2002370 <_malloc_r+0x6b0>
 20021b0:	194016c4 	addi	r5,r3,91
 20021b4:	294d883a 	add	r6,r5,r5
 20021b8:	318d883a 	add	r6,r6,r6
 20021bc:	318d883a 	add	r6,r6,r6
 20021c0:	998d883a 	add	r6,r19,r6
 20021c4:	30c00217 	ldw	r3,8(r6)
 20021c8:	01c08074 	movhi	r7,513
 20021cc:	39ffc504 	addi	r7,r7,-236
 20021d0:	19805726 	beq	r3,r6,2002330 <_malloc_r+0x670>
 20021d4:	01ffff04 	movi	r7,-4
 20021d8:	19400117 	ldw	r5,4(r3)
 20021dc:	29ca703a 	and	r5,r5,r7
 20021e0:	1140022e 	bgeu	r2,r5,20021ec <_malloc_r+0x52c>
 20021e4:	18c00217 	ldw	r3,8(r3)
 20021e8:	30fffb1e 	bne	r6,r3,20021d8 <_malloc_r+0x518>
 20021ec:	19400317 	ldw	r5,12(r3)
 20021f0:	98800117 	ldw	r2,4(r19)
 20021f4:	81400315 	stw	r5,12(r16)
 20021f8:	80c00215 	stw	r3,8(r16)
 20021fc:	2c000215 	stw	r16,8(r5)
 2002200:	1c000315 	stw	r16,12(r3)
 2002204:	003f2b06 	br	2001eb4 <_malloc_r+0x1f4>
 2002208:	8445883a 	add	r2,r16,r17
 200220c:	8c400054 	ori	r17,r17,1
 2002210:	18800515 	stw	r2,20(r3)
 2002214:	18800415 	stw	r2,16(r3)
 2002218:	29000054 	ori	r4,r5,1
 200221c:	1147883a 	add	r3,r2,r5
 2002220:	84400115 	stw	r17,4(r16)
 2002224:	11000115 	stw	r4,4(r2)
 2002228:	12400315 	stw	r9,12(r2)
 200222c:	12400215 	stw	r9,8(r2)
 2002230:	19400015 	stw	r5,0(r3)
 2002234:	9009883a 	mov	r4,r18
 2002238:	200b5900 	call	200b590 <__malloc_unlock>
 200223c:	80800204 	addi	r2,r16,8
 2002240:	003ecd06 	br	2001d78 <_malloc_r+0xb8>
 2002244:	18800117 	ldw	r2,4(r3)
 2002248:	003f1a06 	br	2001eb4 <_malloc_r+0x1f4>
 200224c:	5ac00044 	addi	r11,r11,1
 2002250:	588000cc 	andi	r2,r11,3
 2002254:	52800204 	addi	r10,r10,8
 2002258:	103f2e1e 	bne	r2,zero,2001f14 <_malloc_r+0x254>
 200225c:	20c000cc 	andi	r3,r4,3
 2002260:	60bffe04 	addi	r2,r12,-8
 2002264:	18006f26 	beq	r3,zero,2002424 <_malloc_r+0x764>
 2002268:	63000017 	ldw	r12,0(r12)
 200226c:	213fffc4 	addi	r4,r4,-1
 2002270:	60bffa26 	beq	r12,r2,200225c <_malloc_r+0x59c>
 2002274:	98800117 	ldw	r2,4(r19)
 2002278:	294b883a 	add	r5,r5,r5
 200227c:	117f5a36 	bltu	r2,r5,2001fe8 <_malloc_r+0x328>
 2002280:	283f5926 	beq	r5,zero,2001fe8 <_malloc_r+0x328>
 2002284:	1146703a 	and	r3,r2,r5
 2002288:	18001626 	beq	r3,zero,20022e4 <_malloc_r+0x624>
 200228c:	5809883a 	mov	r4,r11
 2002290:	003f1a06 	br	2001efc <_malloc_r+0x23c>
 2002294:	80800204 	addi	r2,r16,8
 2002298:	84000517 	ldw	r16,20(r16)
 200229c:	143ea81e 	bne	r2,r16,2001d40 <_malloc_r+0x80>
 20022a0:	21000084 	addi	r4,r4,2
 20022a4:	003ee306 	br	2001e34 <_malloc_r+0x174>
 20022a8:	210016c4 	addi	r4,r4,91
 20022ac:	210b883a 	add	r5,r4,r4
 20022b0:	003eca06 	br	2001ddc <_malloc_r+0x11c>
 20022b4:	100ad1ba 	srli	r5,r2,6
 20022b8:	29400e04 	addi	r5,r5,56
 20022bc:	294d883a 	add	r6,r5,r5
 20022c0:	003fbd06 	br	20021b8 <_malloc_r+0x4f8>
 20022c4:	84ff6026 	beq	r16,r19,2002048 <_malloc_r+0x388>
 20022c8:	00808074 	movhi	r2,513
 20022cc:	10bfc504 	addi	r2,r2,-236
 20022d0:	14000217 	ldw	r16,8(r2)
 20022d4:	00bfff04 	movi	r2,-4
 20022d8:	80c00117 	ldw	r3,4(r16)
 20022dc:	1886703a 	and	r3,r3,r2
 20022e0:	003f9406 	br	2002134 <_malloc_r+0x474>
 20022e4:	294b883a 	add	r5,r5,r5
 20022e8:	1146703a 	and	r3,r2,r5
 20022ec:	5ac00104 	addi	r11,r11,4
 20022f0:	183ffc26 	beq	r3,zero,20022e4 <_malloc_r+0x624>
 20022f4:	5809883a 	mov	r4,r11
 20022f8:	003f0006 	br	2001efc <_malloc_r+0x23c>
 20022fc:	00805504 	movi	r2,340
 2002300:	11001336 	bltu	r2,r4,2002350 <_malloc_r+0x690>
 2002304:	8808d3fa 	srli	r4,r17,15
 2002308:	21001dc4 	addi	r4,r4,119
 200230c:	210b883a 	add	r5,r4,r4
 2002310:	003eb206 	br	2001ddc <_malloc_r+0x11c>
 2002314:	00840004 	movi	r2,4096
 2002318:	003f5d06 	br	2002090 <_malloc_r+0x3d0>
 200231c:	00800044 	movi	r2,1
 2002320:	a0800115 	stw	r2,4(r20)
 2002324:	a021883a 	mov	r16,r20
 2002328:	0007883a 	mov	r3,zero
 200232c:	003f8106 	br	2002134 <_malloc_r+0x474>
 2002330:	280bd0ba 	srai	r5,r5,2
 2002334:	01800044 	movi	r6,1
 2002338:	38800117 	ldw	r2,4(r7)
 200233c:	314c983a 	sll	r6,r6,r5
 2002340:	180b883a 	mov	r5,r3
 2002344:	3084b03a 	or	r2,r6,r2
 2002348:	38800115 	stw	r2,4(r7)
 200234c:	003fa906 	br	20021f4 <_malloc_r+0x534>
 2002350:	00815504 	movi	r2,1364
 2002354:	11001836 	bltu	r2,r4,20023b8 <_malloc_r+0x6f8>
 2002358:	8808d4ba 	srli	r4,r17,18
 200235c:	21001f04 	addi	r4,r4,124
 2002360:	210b883a 	add	r5,r4,r4
 2002364:	003e9d06 	br	2001ddc <_malloc_r+0x11c>
 2002368:	bdc00404 	addi	r23,r23,16
 200236c:	003f2f06 	br	200202c <_malloc_r+0x36c>
 2002370:	01401504 	movi	r5,84
 2002374:	28c01f36 	bltu	r5,r3,20023f4 <_malloc_r+0x734>
 2002378:	100ad33a 	srli	r5,r2,12
 200237c:	29401b84 	addi	r5,r5,110
 2002380:	294d883a 	add	r6,r5,r5
 2002384:	003f8c06 	br	20021b8 <_malloc_r+0x4f8>
 2002388:	9c000217 	ldw	r16,8(r19)
 200238c:	00bfff04 	movi	r2,-4
 2002390:	80c00117 	ldw	r3,4(r16)
 2002394:	1886703a 	and	r3,r3,r2
 2002398:	003f6606 	br	2002134 <_malloc_r+0x474>
 200239c:	e0c3ffcc 	andi	r3,fp,4095
 20023a0:	183f2f1e 	bne	r3,zero,2002060 <_malloc_r+0x3a0>
 20023a4:	98c00217 	ldw	r3,8(r19)
 20023a8:	bd49883a 	add	r4,r23,r21
 20023ac:	21000054 	ori	r4,r4,1
 20023b0:	19000115 	stw	r4,4(r3)
 20023b4:	003f5506 	br	200210c <_malloc_r+0x44c>
 20023b8:	01403f04 	movi	r5,252
 20023bc:	01001f84 	movi	r4,126
 20023c0:	003e8606 	br	2001ddc <_malloc_r+0x11c>
 20023c4:	9009883a 	mov	r4,r18
 20023c8:	81400204 	addi	r5,r16,8
 20023cc:	2006bf40 	call	2006bf4 <_free_r>
 20023d0:	00808074 	movhi	r2,513
 20023d4:	1085d604 	addi	r2,r2,5976
 20023d8:	10800017 	ldw	r2,0(r2)
 20023dc:	003f4b06 	br	200210c <_malloc_r+0x44c>
 20023e0:	00c00044 	movi	r3,1
 20023e4:	002f883a 	mov	r23,zero
 20023e8:	003f3406 	br	20020bc <_malloc_r+0x3fc>
 20023ec:	d5200415 	stw	r20,-32752(gp)
 20023f0:	003f2106 	br	2002078 <_malloc_r+0x3b8>
 20023f4:	01405504 	movi	r5,340
 20023f8:	28c00436 	bltu	r5,r3,200240c <_malloc_r+0x74c>
 20023fc:	100ad3fa 	srli	r5,r2,15
 2002400:	29401dc4 	addi	r5,r5,119
 2002404:	294d883a 	add	r6,r5,r5
 2002408:	003f6b06 	br	20021b8 <_malloc_r+0x4f8>
 200240c:	01415504 	movi	r5,1364
 2002410:	28c00936 	bltu	r5,r3,2002438 <_malloc_r+0x778>
 2002414:	100ad4ba 	srli	r5,r2,18
 2002418:	29401f04 	addi	r5,r5,124
 200241c:	294d883a 	add	r6,r5,r5
 2002420:	003f6506 	br	20021b8 <_malloc_r+0x4f8>
 2002424:	98800117 	ldw	r2,4(r19)
 2002428:	0146303a 	nor	r3,zero,r5
 200242c:	1884703a 	and	r2,r3,r2
 2002430:	98800115 	stw	r2,4(r19)
 2002434:	003f9006 	br	2002278 <_malloc_r+0x5b8>
 2002438:	01803f04 	movi	r6,252
 200243c:	01401f84 	movi	r5,126
 2002440:	003f5d06 	br	20021b8 <_malloc_r+0x4f8>

02002444 <memcpy>:
 2002444:	defffb04 	addi	sp,sp,-20
 2002448:	dc000015 	stw	r16,0(sp)
 200244c:	dfc00415 	stw	ra,16(sp)
 2002450:	dcc00315 	stw	r19,12(sp)
 2002454:	dc800215 	stw	r18,8(sp)
 2002458:	dc400115 	stw	r17,4(sp)
 200245c:	00c003c4 	movi	r3,15
 2002460:	2021883a 	mov	r16,r4
 2002464:	3005883a 	mov	r2,r6
 2002468:	1980032e 	bgeu	r3,r6,2002478 <memcpy+0x34>
 200246c:	2906b03a 	or	r3,r5,r4
 2002470:	18c000cc 	andi	r3,r3,3
 2002474:	18001026 	beq	r3,zero,20024b8 <memcpy+0x74>
 2002478:	8007883a 	mov	r3,r16
 200247c:	288f883a 	add	r7,r5,r2
 2002480:	10000526 	beq	r2,zero,2002498 <memcpy+0x54>
 2002484:	29800003 	ldbu	r6,0(r5)
 2002488:	18c00044 	addi	r3,r3,1
 200248c:	29400044 	addi	r5,r5,1
 2002490:	19bfffc5 	stb	r6,-1(r3)
 2002494:	29fffb1e 	bne	r5,r7,2002484 <memcpy+0x40>
 2002498:	8005883a 	mov	r2,r16
 200249c:	dfc00417 	ldw	ra,16(sp)
 20024a0:	dcc00317 	ldw	r19,12(sp)
 20024a4:	dc800217 	ldw	r18,8(sp)
 20024a8:	dc400117 	ldw	r17,4(sp)
 20024ac:	dc000017 	ldw	r16,0(sp)
 20024b0:	dec00504 	addi	sp,sp,20
 20024b4:	f800283a 	ret
 20024b8:	32bffc04 	addi	r10,r6,-16
 20024bc:	5014d13a 	srli	r10,r10,4
 20024c0:	20800404 	addi	r2,r4,16
 20024c4:	2007883a 	mov	r3,r4
 20024c8:	5008913a 	slli	r4,r10,4
 20024cc:	280f883a 	mov	r7,r5
 20024d0:	1105883a 	add	r2,r2,r4
 20024d4:	3a000017 	ldw	r8,0(r7)
 20024d8:	18c00404 	addi	r3,r3,16
 20024dc:	39c00404 	addi	r7,r7,16
 20024e0:	1a3ffc15 	stw	r8,-16(r3)
 20024e4:	3a3ffd17 	ldw	r8,-12(r7)
 20024e8:	1a3ffd15 	stw	r8,-12(r3)
 20024ec:	3a3ffe17 	ldw	r8,-8(r7)
 20024f0:	1a3ffe15 	stw	r8,-8(r3)
 20024f4:	3a3fff17 	ldw	r8,-4(r7)
 20024f8:	1a3fff15 	stw	r8,-4(r3)
 20024fc:	18bff51e 	bne	r3,r2,20024d4 <memcpy+0x90>
 2002500:	52800044 	addi	r10,r10,1
 2002504:	5014913a 	slli	r10,r10,4
 2002508:	308003cc 	andi	r2,r6,15
 200250c:	010000c4 	movi	r4,3
 2002510:	8287883a 	add	r3,r16,r10
 2002514:	2a95883a 	add	r10,r5,r10
 2002518:	2080182e 	bgeu	r4,r2,200257c <memcpy+0x138>
 200251c:	147fff04 	addi	r17,r2,-4
 2002520:	8808d0ba 	srli	r4,r17,2
 2002524:	1a400104 	addi	r9,r3,4
 2002528:	180d883a 	mov	r6,r3
 200252c:	2105883a 	add	r2,r4,r4
 2002530:	1085883a 	add	r2,r2,r2
 2002534:	4893883a 	add	r9,r9,r2
 2002538:	500f883a 	mov	r7,r10
 200253c:	3a000017 	ldw	r8,0(r7)
 2002540:	31800104 	addi	r6,r6,4
 2002544:	39c00104 	addi	r7,r7,4
 2002548:	323fff15 	stw	r8,-4(r6)
 200254c:	327ffb1e 	bne	r6,r9,200253c <memcpy+0xf8>
 2002550:	20800044 	addi	r2,r4,1
 2002554:	1085883a 	add	r2,r2,r2
 2002558:	1085883a 	add	r2,r2,r2
 200255c:	017fff04 	movi	r5,-4
 2002560:	18a5883a 	add	r18,r3,r2
 2002564:	50a7883a 	add	r19,r10,r2
 2002568:	20012bc0 	call	20012bc <__mulsi3>
 200256c:	1445883a 	add	r2,r2,r17
 2002570:	980b883a 	mov	r5,r19
 2002574:	9007883a 	mov	r3,r18
 2002578:	003fc006 	br	200247c <memcpy+0x38>
 200257c:	500b883a 	mov	r5,r10
 2002580:	003fbe06 	br	200247c <memcpy+0x38>

02002584 <_open_r>:
 2002584:	defffd04 	addi	sp,sp,-12
 2002588:	dc400115 	stw	r17,4(sp)
 200258c:	dc000015 	stw	r16,0(sp)
 2002590:	2023883a 	mov	r17,r4
 2002594:	04008074 	movhi	r16,513
 2002598:	8405c704 	addi	r16,r16,5916
 200259c:	2809883a 	mov	r4,r5
 20025a0:	300b883a 	mov	r5,r6
 20025a4:	380d883a 	mov	r6,r7
 20025a8:	dfc00215 	stw	ra,8(sp)
 20025ac:	80000015 	stw	zero,0(r16)
 20025b0:	200b6f00 	call	200b6f0 <open>
 20025b4:	00ffffc4 	movi	r3,-1
 20025b8:	10c00526 	beq	r2,r3,20025d0 <_open_r+0x4c>
 20025bc:	dfc00217 	ldw	ra,8(sp)
 20025c0:	dc400117 	ldw	r17,4(sp)
 20025c4:	dc000017 	ldw	r16,0(sp)
 20025c8:	dec00304 	addi	sp,sp,12
 20025cc:	f800283a 	ret
 20025d0:	80c00017 	ldw	r3,0(r16)
 20025d4:	183ff926 	beq	r3,zero,20025bc <_open_r+0x38>
 20025d8:	88c00015 	stw	r3,0(r17)
 20025dc:	dfc00217 	ldw	ra,8(sp)
 20025e0:	dc400117 	ldw	r17,4(sp)
 20025e4:	dc000017 	ldw	r16,0(sp)
 20025e8:	dec00304 	addi	sp,sp,12
 20025ec:	f800283a 	ret

020025f0 <_printf_r>:
 20025f0:	defffd04 	addi	sp,sp,-12
 20025f4:	dfc00015 	stw	ra,0(sp)
 20025f8:	d9800115 	stw	r6,4(sp)
 20025fc:	d9c00215 	stw	r7,8(sp)
 2002600:	280d883a 	mov	r6,r5
 2002604:	21400217 	ldw	r5,8(r4)
 2002608:	d9c00104 	addi	r7,sp,4
 200260c:	2002be00 	call	2002be0 <___vfprintf_internal_r>
 2002610:	dfc00017 	ldw	ra,0(sp)
 2002614:	dec00304 	addi	sp,sp,12
 2002618:	f800283a 	ret

0200261c <printf>:
 200261c:	defffc04 	addi	sp,sp,-16
 2002620:	dfc00015 	stw	ra,0(sp)
 2002624:	d9400115 	stw	r5,4(sp)
 2002628:	d9800215 	stw	r6,8(sp)
 200262c:	d9c00315 	stw	r7,12(sp)
 2002630:	00808074 	movhi	r2,513
 2002634:	1085b204 	addi	r2,r2,5832
 2002638:	10800017 	ldw	r2,0(r2)
 200263c:	200b883a 	mov	r5,r4
 2002640:	d9800104 	addi	r6,sp,4
 2002644:	11000217 	ldw	r4,8(r2)
 2002648:	2004a5c0 	call	2004a5c <__vfprintf_internal>
 200264c:	dfc00017 	ldw	ra,0(sp)
 2002650:	dec00404 	addi	sp,sp,16
 2002654:	f800283a 	ret

02002658 <_putchar_r>:
 2002658:	21800217 	ldw	r6,8(r4)
 200265c:	2008a641 	jmpi	2008a64 <_putc_r>

02002660 <putchar>:
 2002660:	00808074 	movhi	r2,513
 2002664:	1085b204 	addi	r2,r2,5832
 2002668:	10800017 	ldw	r2,0(r2)
 200266c:	200b883a 	mov	r5,r4
 2002670:	11800217 	ldw	r6,8(r2)
 2002674:	1009883a 	mov	r4,r2
 2002678:	2008a641 	jmpi	2008a64 <_putc_r>

0200267c <_puts_r>:
 200267c:	defff604 	addi	sp,sp,-40
 2002680:	dc400815 	stw	r17,32(sp)
 2002684:	2023883a 	mov	r17,r4
 2002688:	2809883a 	mov	r4,r5
 200268c:	dc000715 	stw	r16,28(sp)
 2002690:	dfc00915 	stw	ra,36(sp)
 2002694:	2821883a 	mov	r16,r5
 2002698:	2002b200 	call	2002b20 <strlen>
 200269c:	10c00044 	addi	r3,r2,1
 20026a0:	d8800115 	stw	r2,4(sp)
 20026a4:	89400217 	ldw	r5,8(r17)
 20026a8:	00808074 	movhi	r2,513
 20026ac:	10be3304 	addi	r2,r2,-1844
 20026b0:	d8800215 	stw	r2,8(sp)
 20026b4:	00800044 	movi	r2,1
 20026b8:	d8800315 	stw	r2,12(sp)
 20026bc:	8809883a 	mov	r4,r17
 20026c0:	00800084 	movi	r2,2
 20026c4:	d9800404 	addi	r6,sp,16
 20026c8:	dc000015 	stw	r16,0(sp)
 20026cc:	d8c00615 	stw	r3,24(sp)
 20026d0:	dec00415 	stw	sp,16(sp)
 20026d4:	d8800515 	stw	r2,20(sp)
 20026d8:	2006ec40 	call	2006ec4 <__sfvwrite_r>
 20026dc:	1000061e 	bne	r2,zero,20026f8 <_puts_r+0x7c>
 20026e0:	00800284 	movi	r2,10
 20026e4:	dfc00917 	ldw	ra,36(sp)
 20026e8:	dc400817 	ldw	r17,32(sp)
 20026ec:	dc000717 	ldw	r16,28(sp)
 20026f0:	dec00a04 	addi	sp,sp,40
 20026f4:	f800283a 	ret
 20026f8:	00bfffc4 	movi	r2,-1
 20026fc:	003ff906 	br	20026e4 <_puts_r+0x68>

02002700 <puts>:
 2002700:	00808074 	movhi	r2,513
 2002704:	1085b204 	addi	r2,r2,5832
 2002708:	200b883a 	mov	r5,r4
 200270c:	11000017 	ldw	r4,0(r2)
 2002710:	200267c1 	jmpi	200267c <_puts_r>

02002714 <lflush>:
 2002714:	20c0030b 	ldhu	r3,12(r4)
 2002718:	00800244 	movi	r2,9
 200271c:	18c0024c 	andi	r3,r3,9
 2002720:	18800226 	beq	r3,r2,200272c <lflush+0x18>
 2002724:	0005883a 	mov	r2,zero
 2002728:	f800283a 	ret
 200272c:	20067041 	jmpi	2006704 <fflush>

02002730 <__srefill_r>:
 2002730:	defffd04 	addi	sp,sp,-12
 2002734:	dc400115 	stw	r17,4(sp)
 2002738:	dc000015 	stw	r16,0(sp)
 200273c:	dfc00215 	stw	ra,8(sp)
 2002740:	2023883a 	mov	r17,r4
 2002744:	2821883a 	mov	r16,r5
 2002748:	20000226 	beq	r4,zero,2002754 <__srefill_r+0x24>
 200274c:	20800e17 	ldw	r2,56(r4)
 2002750:	10004426 	beq	r2,zero,2002864 <__srefill_r+0x134>
 2002754:	8080030b 	ldhu	r2,12(r16)
 2002758:	80000115 	stw	zero,4(r16)
 200275c:	10c0080c 	andi	r3,r2,32
 2002760:	18ffffcc 	andi	r3,r3,65535
 2002764:	18e0001c 	xori	r3,r3,32768
 2002768:	18e00004 	addi	r3,r3,-32768
 200276c:	1800371e 	bne	r3,zero,200284c <__srefill_r+0x11c>
 2002770:	10c0010c 	andi	r3,r2,4
 2002774:	18ffffcc 	andi	r3,r3,65535
 2002778:	18e0001c 	xori	r3,r3,32768
 200277c:	18e00004 	addi	r3,r3,-32768
 2002780:	18002226 	beq	r3,zero,200280c <__srefill_r+0xdc>
 2002784:	81400c17 	ldw	r5,48(r16)
 2002788:	28000826 	beq	r5,zero,20027ac <__srefill_r+0x7c>
 200278c:	80801004 	addi	r2,r16,64
 2002790:	28800226 	beq	r5,r2,200279c <__srefill_r+0x6c>
 2002794:	8809883a 	mov	r4,r17
 2002798:	2006bf40 	call	2006bf4 <_free_r>
 200279c:	80800f17 	ldw	r2,60(r16)
 20027a0:	80000c15 	stw	zero,48(r16)
 20027a4:	80800115 	stw	r2,4(r16)
 20027a8:	1000401e 	bne	r2,zero,20028ac <__srefill_r+0x17c>
 20027ac:	80800417 	ldw	r2,16(r16)
 20027b0:	10005026 	beq	r2,zero,20028f4 <__srefill_r+0x1c4>
 20027b4:	8080030b 	ldhu	r2,12(r16)
 20027b8:	108000cc 	andi	r2,r2,3
 20027bc:	10002b1e 	bne	r2,zero,200286c <__srefill_r+0x13c>
 20027c0:	81800417 	ldw	r6,16(r16)
 20027c4:	80800817 	ldw	r2,32(r16)
 20027c8:	81400717 	ldw	r5,28(r16)
 20027cc:	81c00517 	ldw	r7,20(r16)
 20027d0:	8809883a 	mov	r4,r17
 20027d4:	81800015 	stw	r6,0(r16)
 20027d8:	103ee83a 	callr	r2
 20027dc:	8100030b 	ldhu	r4,12(r16)
 20027e0:	00f7ffc4 	movi	r3,-8193
 20027e4:	80800115 	stw	r2,4(r16)
 20027e8:	20c6703a 	and	r3,r4,r3
 20027ec:	80c0030d 	sth	r3,12(r16)
 20027f0:	0080130e 	bge	zero,r2,2002840 <__srefill_r+0x110>
 20027f4:	0005883a 	mov	r2,zero
 20027f8:	dfc00217 	ldw	ra,8(sp)
 20027fc:	dc400117 	ldw	r17,4(sp)
 2002800:	dc000017 	ldw	r16,0(sp)
 2002804:	dec00304 	addi	sp,sp,12
 2002808:	f800283a 	ret
 200280c:	10c0040c 	andi	r3,r2,16
 2002810:	18ffffcc 	andi	r3,r3,65535
 2002814:	18e0001c 	xori	r3,r3,32768
 2002818:	18e00004 	addi	r3,r3,-32768
 200281c:	18003926 	beq	r3,zero,2002904 <__srefill_r+0x1d4>
 2002820:	10c0020c 	andi	r3,r2,8
 2002824:	18ffffcc 	andi	r3,r3,65535
 2002828:	18e0001c 	xori	r3,r3,32768
 200282c:	18e00004 	addi	r3,r3,-32768
 2002830:	1800261e 	bne	r3,zero,20028cc <__srefill_r+0x19c>
 2002834:	10800114 	ori	r2,r2,4
 2002838:	8080030d 	sth	r2,12(r16)
 200283c:	003fdb06 	br	20027ac <__srefill_r+0x7c>
 2002840:	1000111e 	bne	r2,zero,2002888 <__srefill_r+0x158>
 2002844:	18c00814 	ori	r3,r3,32
 2002848:	80c0030d 	sth	r3,12(r16)
 200284c:	00bfffc4 	movi	r2,-1
 2002850:	dfc00217 	ldw	ra,8(sp)
 2002854:	dc400117 	ldw	r17,4(sp)
 2002858:	dc000017 	ldw	r16,0(sp)
 200285c:	dec00304 	addi	sp,sp,12
 2002860:	f800283a 	ret
 2002864:	20067d80 	call	20067d8 <__sinit>
 2002868:	003fba06 	br	2002754 <__srefill_r+0x24>
 200286c:	00808074 	movhi	r2,513
 2002870:	1085b104 	addi	r2,r2,5828
 2002874:	11000017 	ldw	r4,0(r2)
 2002878:	01408034 	movhi	r5,512
 200287c:	2949c504 	addi	r5,r5,10004
 2002880:	20073a80 	call	20073a8 <_fwalk>
 2002884:	003fce06 	br	20027c0 <__srefill_r+0x90>
 2002888:	18c01014 	ori	r3,r3,64
 200288c:	00bfffc4 	movi	r2,-1
 2002890:	80000115 	stw	zero,4(r16)
 2002894:	80c0030d 	sth	r3,12(r16)
 2002898:	dfc00217 	ldw	ra,8(sp)
 200289c:	dc400117 	ldw	r17,4(sp)
 20028a0:	dc000017 	ldw	r16,0(sp)
 20028a4:	dec00304 	addi	sp,sp,12
 20028a8:	f800283a 	ret
 20028ac:	80c00e17 	ldw	r3,56(r16)
 20028b0:	0005883a 	mov	r2,zero
 20028b4:	80c00015 	stw	r3,0(r16)
 20028b8:	dfc00217 	ldw	ra,8(sp)
 20028bc:	dc400117 	ldw	r17,4(sp)
 20028c0:	dc000017 	ldw	r16,0(sp)
 20028c4:	dec00304 	addi	sp,sp,12
 20028c8:	f800283a 	ret
 20028cc:	8809883a 	mov	r4,r17
 20028d0:	800b883a 	mov	r5,r16
 20028d4:	200651c0 	call	200651c <_fflush_r>
 20028d8:	103fdc1e 	bne	r2,zero,200284c <__srefill_r+0x11c>
 20028dc:	8080030b 	ldhu	r2,12(r16)
 20028e0:	00fffdc4 	movi	r3,-9
 20028e4:	80000215 	stw	zero,8(r16)
 20028e8:	1884703a 	and	r2,r3,r2
 20028ec:	80000615 	stw	zero,24(r16)
 20028f0:	003fd006 	br	2002834 <__srefill_r+0x104>
 20028f4:	8809883a 	mov	r4,r17
 20028f8:	800b883a 	mov	r5,r16
 20028fc:	2001b180 	call	2001b18 <__smakebuf_r>
 2002900:	003fac06 	br	20027b4 <__srefill_r+0x84>
 2002904:	00c00244 	movi	r3,9
 2002908:	10801014 	ori	r2,r2,64
 200290c:	88c00015 	stw	r3,0(r17)
 2002910:	8080030d 	sth	r2,12(r16)
 2002914:	00bfffc4 	movi	r2,-1
 2002918:	003fb706 	br	20027f8 <__srefill_r+0xc8>

0200291c <__srget_r>:
 200291c:	defffe04 	addi	sp,sp,-8
 2002920:	dc000015 	stw	r16,0(sp)
 2002924:	dfc00115 	stw	ra,4(sp)
 2002928:	2821883a 	mov	r16,r5
 200292c:	20027300 	call	2002730 <__srefill_r>
 2002930:	10000b1e 	bne	r2,zero,2002960 <__srget_r+0x44>
 2002934:	80c00117 	ldw	r3,4(r16)
 2002938:	80800017 	ldw	r2,0(r16)
 200293c:	18ffffc4 	addi	r3,r3,-1
 2002940:	80c00115 	stw	r3,4(r16)
 2002944:	10c00044 	addi	r3,r2,1
 2002948:	10800003 	ldbu	r2,0(r2)
 200294c:	80c00015 	stw	r3,0(r16)
 2002950:	dfc00117 	ldw	ra,4(sp)
 2002954:	dc000017 	ldw	r16,0(sp)
 2002958:	dec00204 	addi	sp,sp,8
 200295c:	f800283a 	ret
 2002960:	00bfffc4 	movi	r2,-1
 2002964:	003ffa06 	br	2002950 <__srget_r+0x34>

02002968 <__srget>:
 2002968:	00808074 	movhi	r2,513
 200296c:	1085b204 	addi	r2,r2,5832
 2002970:	200b883a 	mov	r5,r4
 2002974:	11000017 	ldw	r4,0(r2)
 2002978:	200291c1 	jmpi	200291c <__srget_r>

0200297c <_sbrk_r>:
 200297c:	defffd04 	addi	sp,sp,-12
 2002980:	dc400115 	stw	r17,4(sp)
 2002984:	dc000015 	stw	r16,0(sp)
 2002988:	2023883a 	mov	r17,r4
 200298c:	04008074 	movhi	r16,513
 2002990:	8405c704 	addi	r16,r16,5916
 2002994:	2809883a 	mov	r4,r5
 2002998:	dfc00215 	stw	ra,8(sp)
 200299c:	80000015 	stw	zero,0(r16)
 20029a0:	200ba0c0 	call	200ba0c <sbrk>
 20029a4:	00ffffc4 	movi	r3,-1
 20029a8:	10c00526 	beq	r2,r3,20029c0 <_sbrk_r+0x44>
 20029ac:	dfc00217 	ldw	ra,8(sp)
 20029b0:	dc400117 	ldw	r17,4(sp)
 20029b4:	dc000017 	ldw	r16,0(sp)
 20029b8:	dec00304 	addi	sp,sp,12
 20029bc:	f800283a 	ret
 20029c0:	80c00017 	ldw	r3,0(r16)
 20029c4:	183ff926 	beq	r3,zero,20029ac <_sbrk_r+0x30>
 20029c8:	88c00015 	stw	r3,0(r17)
 20029cc:	dfc00217 	ldw	ra,8(sp)
 20029d0:	dc400117 	ldw	r17,4(sp)
 20029d4:	dc000017 	ldw	r16,0(sp)
 20029d8:	dec00304 	addi	sp,sp,12
 20029dc:	f800283a 	ret

020029e0 <__sread>:
 20029e0:	defffe04 	addi	sp,sp,-8
 20029e4:	dc000015 	stw	r16,0(sp)
 20029e8:	2821883a 	mov	r16,r5
 20029ec:	2940038f 	ldh	r5,14(r5)
 20029f0:	dfc00115 	stw	ra,4(sp)
 20029f4:	2008c100 	call	2008c10 <_read_r>
 20029f8:	10000716 	blt	r2,zero,2002a18 <__sread+0x38>
 20029fc:	80c01417 	ldw	r3,80(r16)
 2002a00:	1887883a 	add	r3,r3,r2
 2002a04:	80c01415 	stw	r3,80(r16)
 2002a08:	dfc00117 	ldw	ra,4(sp)
 2002a0c:	dc000017 	ldw	r16,0(sp)
 2002a10:	dec00204 	addi	sp,sp,8
 2002a14:	f800283a 	ret
 2002a18:	80c0030b 	ldhu	r3,12(r16)
 2002a1c:	18fbffcc 	andi	r3,r3,61439
 2002a20:	80c0030d 	sth	r3,12(r16)
 2002a24:	dfc00117 	ldw	ra,4(sp)
 2002a28:	dc000017 	ldw	r16,0(sp)
 2002a2c:	dec00204 	addi	sp,sp,8
 2002a30:	f800283a 	ret

02002a34 <__swrite>:
 2002a34:	2880030b 	ldhu	r2,12(r5)
 2002a38:	defffb04 	addi	sp,sp,-20
 2002a3c:	dcc00315 	stw	r19,12(sp)
 2002a40:	10c0400c 	andi	r3,r2,256
 2002a44:	18ffffcc 	andi	r3,r3,65535
 2002a48:	18e0001c 	xori	r3,r3,32768
 2002a4c:	dc800215 	stw	r18,8(sp)
 2002a50:	dc400115 	stw	r17,4(sp)
 2002a54:	dc000015 	stw	r16,0(sp)
 2002a58:	dfc00415 	stw	ra,16(sp)
 2002a5c:	18e00004 	addi	r3,r3,-32768
 2002a60:	2821883a 	mov	r16,r5
 2002a64:	2027883a 	mov	r19,r4
 2002a68:	3025883a 	mov	r18,r6
 2002a6c:	3823883a 	mov	r17,r7
 2002a70:	18000526 	beq	r3,zero,2002a88 <__swrite+0x54>
 2002a74:	2940038f 	ldh	r5,14(r5)
 2002a78:	000d883a 	mov	r6,zero
 2002a7c:	01c00084 	movi	r7,2
 2002a80:	20076480 	call	2007648 <_lseek_r>
 2002a84:	8080030b 	ldhu	r2,12(r16)
 2002a88:	8140038f 	ldh	r5,14(r16)
 2002a8c:	10bbffcc 	andi	r2,r2,61439
 2002a90:	9809883a 	mov	r4,r19
 2002a94:	900d883a 	mov	r6,r18
 2002a98:	880f883a 	mov	r7,r17
 2002a9c:	8080030d 	sth	r2,12(r16)
 2002aa0:	dfc00417 	ldw	ra,16(sp)
 2002aa4:	dcc00317 	ldw	r19,12(sp)
 2002aa8:	dc800217 	ldw	r18,8(sp)
 2002aac:	dc400117 	ldw	r17,4(sp)
 2002ab0:	dc000017 	ldw	r16,0(sp)
 2002ab4:	dec00504 	addi	sp,sp,20
 2002ab8:	2004a801 	jmpi	2004a80 <_write_r>

02002abc <__sseek>:
 2002abc:	defffe04 	addi	sp,sp,-8
 2002ac0:	dc000015 	stw	r16,0(sp)
 2002ac4:	2821883a 	mov	r16,r5
 2002ac8:	2940038f 	ldh	r5,14(r5)
 2002acc:	dfc00115 	stw	ra,4(sp)
 2002ad0:	20076480 	call	2007648 <_lseek_r>
 2002ad4:	00ffffc4 	movi	r3,-1
 2002ad8:	10c00826 	beq	r2,r3,2002afc <__sseek+0x40>
 2002adc:	80c0030b 	ldhu	r3,12(r16)
 2002ae0:	80801415 	stw	r2,80(r16)
 2002ae4:	18c40014 	ori	r3,r3,4096
 2002ae8:	80c0030d 	sth	r3,12(r16)
 2002aec:	dfc00117 	ldw	ra,4(sp)
 2002af0:	dc000017 	ldw	r16,0(sp)
 2002af4:	dec00204 	addi	sp,sp,8
 2002af8:	f800283a 	ret
 2002afc:	80c0030b 	ldhu	r3,12(r16)
 2002b00:	18fbffcc 	andi	r3,r3,61439
 2002b04:	80c0030d 	sth	r3,12(r16)
 2002b08:	dfc00117 	ldw	ra,4(sp)
 2002b0c:	dc000017 	ldw	r16,0(sp)
 2002b10:	dec00204 	addi	sp,sp,8
 2002b14:	f800283a 	ret

02002b18 <__sclose>:
 2002b18:	2940038f 	ldh	r5,14(r5)
 2002b1c:	2004c601 	jmpi	2004c60 <_close_r>

02002b20 <strlen>:
 2002b20:	208000cc 	andi	r2,r4,3
 2002b24:	10001f1e 	bne	r2,zero,2002ba4 <strlen+0x84>
 2002b28:	20800017 	ldw	r2,0(r4)
 2002b2c:	01ffbff4 	movhi	r7,65279
 2002b30:	39ffbfc4 	addi	r7,r7,-257
 2002b34:	01a02074 	movhi	r6,32897
 2002b38:	31a02004 	addi	r6,r6,-32640
 2002b3c:	11c7883a 	add	r3,r2,r7
 2002b40:	0084303a 	nor	r2,zero,r2
 2002b44:	1886703a 	and	r3,r3,r2
 2002b48:	1986703a 	and	r3,r3,r6
 2002b4c:	2005883a 	mov	r2,r4
 2002b50:	1800101e 	bne	r3,zero,2002b94 <strlen+0x74>
 2002b54:	10800104 	addi	r2,r2,4
 2002b58:	10c00017 	ldw	r3,0(r2)
 2002b5c:	19cb883a 	add	r5,r3,r7
 2002b60:	00c6303a 	nor	r3,zero,r3
 2002b64:	28c6703a 	and	r3,r5,r3
 2002b68:	1986703a 	and	r3,r3,r6
 2002b6c:	1800091e 	bne	r3,zero,2002b94 <strlen+0x74>
 2002b70:	10800104 	addi	r2,r2,4
 2002b74:	10c00017 	ldw	r3,0(r2)
 2002b78:	19cb883a 	add	r5,r3,r7
 2002b7c:	00c6303a 	nor	r3,zero,r3
 2002b80:	28c6703a 	and	r3,r5,r3
 2002b84:	1986703a 	and	r3,r3,r6
 2002b88:	183ff226 	beq	r3,zero,2002b54 <strlen+0x34>
 2002b8c:	00000106 	br	2002b94 <strlen+0x74>
 2002b90:	10800044 	addi	r2,r2,1
 2002b94:	10c00007 	ldb	r3,0(r2)
 2002b98:	183ffd1e 	bne	r3,zero,2002b90 <strlen+0x70>
 2002b9c:	1105c83a 	sub	r2,r2,r4
 2002ba0:	f800283a 	ret
 2002ba4:	2005883a 	mov	r2,r4
 2002ba8:	003ffa06 	br	2002b94 <strlen+0x74>

02002bac <__sprint_r>:
 2002bac:	30800217 	ldw	r2,8(r6)
 2002bb0:	defffe04 	addi	sp,sp,-8
 2002bb4:	dc000015 	stw	r16,0(sp)
 2002bb8:	dfc00115 	stw	ra,4(sp)
 2002bbc:	3021883a 	mov	r16,r6
 2002bc0:	10000226 	beq	r2,zero,2002bcc <__sprint_r+0x20>
 2002bc4:	2006ec40 	call	2006ec4 <__sfvwrite_r>
 2002bc8:	80000215 	stw	zero,8(r16)
 2002bcc:	80000115 	stw	zero,4(r16)
 2002bd0:	dfc00117 	ldw	ra,4(sp)
 2002bd4:	dc000017 	ldw	r16,0(sp)
 2002bd8:	dec00204 	addi	sp,sp,8
 2002bdc:	f800283a 	ret

02002be0 <___vfprintf_internal_r>:
 2002be0:	defeb904 	addi	sp,sp,-1308
 2002be4:	dc013d15 	stw	r16,1268(sp)
 2002be8:	d9013015 	stw	r4,1216(sp)
 2002bec:	dfc14615 	stw	ra,1304(sp)
 2002bf0:	df014515 	stw	fp,1300(sp)
 2002bf4:	ddc14415 	stw	r23,1296(sp)
 2002bf8:	dd814315 	stw	r22,1292(sp)
 2002bfc:	dd414215 	stw	r21,1288(sp)
 2002c00:	dd014115 	stw	r20,1284(sp)
 2002c04:	dcc14015 	stw	r19,1280(sp)
 2002c08:	dc813f15 	stw	r18,1276(sp)
 2002c0c:	dc413e15 	stw	r17,1272(sp)
 2002c10:	d9412915 	stw	r5,1188(sp)
 2002c14:	3021883a 	mov	r16,r6
 2002c18:	d9c12d15 	stw	r7,1204(sp)
 2002c1c:	20076140 	call	2007614 <_localeconv_r>
 2002c20:	10800017 	ldw	r2,0(r2)
 2002c24:	d9013017 	ldw	r4,1216(sp)
 2002c28:	d8013315 	stw	zero,1228(sp)
 2002c2c:	d8813715 	stw	r2,1244(sp)
 2002c30:	d8013415 	stw	zero,1232(sp)
 2002c34:	20000226 	beq	r4,zero,2002c40 <___vfprintf_internal_r+0x60>
 2002c38:	20800e17 	ldw	r2,56(r4)
 2002c3c:	10014b26 	beq	r2,zero,200316c <___vfprintf_internal_r+0x58c>
 2002c40:	d8c12917 	ldw	r3,1188(sp)
 2002c44:	1880030b 	ldhu	r2,12(r3)
 2002c48:	10c0020c 	andi	r3,r2,8
 2002c4c:	18ffffcc 	andi	r3,r3,65535
 2002c50:	18e0001c 	xori	r3,r3,32768
 2002c54:	18e00004 	addi	r3,r3,-32768
 2002c58:	1800ed26 	beq	r3,zero,2003010 <___vfprintf_internal_r+0x430>
 2002c5c:	d9012917 	ldw	r4,1188(sp)
 2002c60:	20c00417 	ldw	r3,16(r4)
 2002c64:	1800ea26 	beq	r3,zero,2003010 <___vfprintf_internal_r+0x430>
 2002c68:	1100068c 	andi	r4,r2,26
 2002c6c:	00c00284 	movi	r3,10
 2002c70:	20c0f026 	beq	r4,r3,2003034 <___vfprintf_internal_r+0x454>
 2002c74:	d9010dc4 	addi	r4,sp,1079
 2002c78:	d8810e04 	addi	r2,sp,1080
 2002c7c:	dc413017 	ldw	r17,1216(sp)
 2002c80:	d8c00404 	addi	r3,sp,16
 2002c84:	d9012615 	stw	r4,1176(sp)
 2002c88:	1109c83a 	sub	r4,r2,r4
 2002c8c:	d8812715 	stw	r2,1180(sp)
 2002c90:	d8c11b15 	stw	r3,1132(sp)
 2002c94:	d8011d15 	stw	zero,1140(sp)
 2002c98:	d8011c15 	stw	zero,1136(sp)
 2002c9c:	802b883a 	mov	r21,r16
 2002ca0:	d8013215 	stw	zero,1224(sp)
 2002ca4:	d8013615 	stw	zero,1240(sp)
 2002ca8:	d8013515 	stw	zero,1236(sp)
 2002cac:	d8012c15 	stw	zero,1200(sp)
 2002cb0:	1813883a 	mov	r9,r3
 2002cb4:	d9013915 	stw	r4,1252(sp)
 2002cb8:	a8800007 	ldb	r2,0(r21)
 2002cbc:	1002f326 	beq	r2,zero,200388c <___vfprintf_internal_r+0xcac>
 2002cc0:	00c00944 	movi	r3,37
 2002cc4:	a825883a 	mov	r18,r21
 2002cc8:	10c0021e 	bne	r2,r3,2002cd4 <___vfprintf_internal_r+0xf4>
 2002ccc:	00001406 	br	2002d20 <___vfprintf_internal_r+0x140>
 2002cd0:	10c00326 	beq	r2,r3,2002ce0 <___vfprintf_internal_r+0x100>
 2002cd4:	94800044 	addi	r18,r18,1
 2002cd8:	90800007 	ldb	r2,0(r18)
 2002cdc:	103ffc1e 	bne	r2,zero,2002cd0 <___vfprintf_internal_r+0xf0>
 2002ce0:	9561c83a 	sub	r16,r18,r21
 2002ce4:	80000e26 	beq	r16,zero,2002d20 <___vfprintf_internal_r+0x140>
 2002ce8:	da011d17 	ldw	r8,1140(sp)
 2002cec:	d8c11c17 	ldw	r3,1136(sp)
 2002cf0:	4d400015 	stw	r21,0(r9)
 2002cf4:	4c000115 	stw	r16,4(r9)
 2002cf8:	4411883a 	add	r8,r8,r16
 2002cfc:	18c00044 	addi	r3,r3,1
 2002d00:	da011d15 	stw	r8,1140(sp)
 2002d04:	d8c11c15 	stw	r3,1136(sp)
 2002d08:	008001c4 	movi	r2,7
 2002d0c:	10c11016 	blt	r2,r3,2003150 <___vfprintf_internal_r+0x570>
 2002d10:	4a400204 	addi	r9,r9,8
 2002d14:	d8812c17 	ldw	r2,1200(sp)
 2002d18:	1405883a 	add	r2,r2,r16
 2002d1c:	d8812c15 	stw	r2,1200(sp)
 2002d20:	90800007 	ldb	r2,0(r18)
 2002d24:	1000ee26 	beq	r2,zero,20030e0 <___vfprintf_internal_r+0x500>
 2002d28:	95400044 	addi	r21,r18,1
 2002d2c:	94800047 	ldb	r18,1(r18)
 2002d30:	073fffc4 	movi	fp,-1
 2002d34:	e007883a 	mov	r3,fp
 2002d38:	d8012585 	stb	zero,1174(sp)
 2002d3c:	d8012e15 	stw	zero,1208(sp)
 2002d40:	0021883a 	mov	r16,zero
 2002d44:	05001604 	movi	r20,88
 2002d48:	04c00244 	movi	r19,9
 2002d4c:	4839883a 	mov	fp,r9
 2002d50:	ad400044 	addi	r21,r21,1
 2002d54:	90bff804 	addi	r2,r18,-32
 2002d58:	a080462e 	bgeu	r20,r2,2002e74 <___vfprintf_internal_r+0x294>
 2002d5c:	e013883a 	mov	r9,fp
 2002d60:	9000df26 	beq	r18,zero,20030e0 <___vfprintf_internal_r+0x500>
 2002d64:	00c00044 	movi	r3,1
 2002d68:	d8c12815 	stw	r3,1184(sp)
 2002d6c:	dc810405 	stb	r18,1040(sp)
 2002d70:	d8012585 	stb	zero,1174(sp)
 2002d74:	d8c12b15 	stw	r3,1196(sp)
 2002d78:	dcc10404 	addi	r19,sp,1040
 2002d7c:	d8013115 	stw	zero,1220(sp)
 2002d80:	80c0008c 	andi	r3,r16,2
 2002d84:	d8c12a15 	stw	r3,1192(sp)
 2002d88:	18000326 	beq	r3,zero,2002d98 <___vfprintf_internal_r+0x1b8>
 2002d8c:	d8c12817 	ldw	r3,1184(sp)
 2002d90:	18c00084 	addi	r3,r3,2
 2002d94:	d8c12815 	stw	r3,1184(sp)
 2002d98:	80c0210c 	andi	r3,r16,132
 2002d9c:	d8c12f15 	stw	r3,1212(sp)
 2002da0:	1802251e 	bne	r3,zero,2003638 <___vfprintf_internal_r+0xa58>
 2002da4:	d9012e17 	ldw	r4,1208(sp)
 2002da8:	d8c12817 	ldw	r3,1184(sp)
 2002dac:	20edc83a 	sub	r22,r4,r3
 2002db0:	0582210e 	bge	zero,r22,2003638 <___vfprintf_internal_r+0xa58>
 2002db4:	02800404 	movi	r10,16
 2002db8:	da011d17 	ldw	r8,1140(sp)
 2002dbc:	d8c11c17 	ldw	r3,1136(sp)
 2002dc0:	05c08074 	movhi	r23,513
 2002dc4:	bdfe4484 	addi	r23,r23,-1774
 2002dc8:	5580200e 	bge	r10,r22,2002e4c <___vfprintf_internal_r+0x26c>
 2002dcc:	dc813815 	stw	r18,1248(sp)
 2002dd0:	5039883a 	mov	fp,r10
 2002dd4:	b825883a 	mov	r18,r23
 2002dd8:	050001c4 	movi	r20,7
 2002ddc:	b02f883a 	mov	r23,r22
 2002de0:	802d883a 	mov	r22,r16
 2002de4:	dc012917 	ldw	r16,1188(sp)
 2002de8:	00000306 	br	2002df8 <___vfprintf_internal_r+0x218>
 2002dec:	bdfffc04 	addi	r23,r23,-16
 2002df0:	4a400204 	addi	r9,r9,8
 2002df4:	e5c0110e 	bge	fp,r23,2002e3c <___vfprintf_internal_r+0x25c>
 2002df8:	4c800015 	stw	r18,0(r9)
 2002dfc:	4f000115 	stw	fp,4(r9)
 2002e00:	42000404 	addi	r8,r8,16
 2002e04:	18c00044 	addi	r3,r3,1
 2002e08:	da011d15 	stw	r8,1140(sp)
 2002e0c:	d8c11c15 	stw	r3,1136(sp)
 2002e10:	a0fff60e 	bge	r20,r3,2002dec <___vfprintf_internal_r+0x20c>
 2002e14:	8809883a 	mov	r4,r17
 2002e18:	800b883a 	mov	r5,r16
 2002e1c:	d9811b04 	addi	r6,sp,1132
 2002e20:	2002bac0 	call	2002bac <__sprint_r>
 2002e24:	1000b41e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2002e28:	bdfffc04 	addi	r23,r23,-16
 2002e2c:	da011d17 	ldw	r8,1140(sp)
 2002e30:	d8c11c17 	ldw	r3,1136(sp)
 2002e34:	da400404 	addi	r9,sp,16
 2002e38:	e5ffef16 	blt	fp,r23,2002df8 <___vfprintf_internal_r+0x218>
 2002e3c:	b021883a 	mov	r16,r22
 2002e40:	b82d883a 	mov	r22,r23
 2002e44:	902f883a 	mov	r23,r18
 2002e48:	dc813817 	ldw	r18,1248(sp)
 2002e4c:	4dc00015 	stw	r23,0(r9)
 2002e50:	4d800115 	stw	r22,4(r9)
 2002e54:	4591883a 	add	r8,r8,r22
 2002e58:	18c00044 	addi	r3,r3,1
 2002e5c:	da011d15 	stw	r8,1140(sp)
 2002e60:	d8c11c15 	stw	r3,1136(sp)
 2002e64:	008001c4 	movi	r2,7
 2002e68:	10c3fe16 	blt	r2,r3,2003e64 <___vfprintf_internal_r+0x1284>
 2002e6c:	4a400204 	addi	r9,r9,8
 2002e70:	0001f306 	br	2003640 <___vfprintf_internal_r+0xa60>
 2002e74:	1085883a 	add	r2,r2,r2
 2002e78:	1085883a 	add	r2,r2,r2
 2002e7c:	01008034 	movhi	r4,512
 2002e80:	210ba404 	addi	r4,r4,11920
 2002e84:	1105883a 	add	r2,r2,r4
 2002e88:	10800017 	ldw	r2,0(r2)
 2002e8c:	1000683a 	jmp	r2
 2002e90:	0200356c 	andhi	r8,zero,213
 2002e94:	02002d5c 	xori	r8,zero,181
 2002e98:	02002d5c 	xori	r8,zero,181
 2002e9c:	02003584 	movi	r8,214
 2002ea0:	02002d5c 	xori	r8,zero,181
 2002ea4:	02002d5c 	xori	r8,zero,181
 2002ea8:	02002d5c 	xori	r8,zero,181
 2002eac:	02002d5c 	xori	r8,zero,181
 2002eb0:	02002d5c 	xori	r8,zero,181
 2002eb4:	02002d5c 	xori	r8,zero,181
 2002eb8:	0200343c 	xorhi	r8,zero,208
 2002ebc:	020035d0 	cmplti	r8,zero,215
 2002ec0:	02002d5c 	xori	r8,zero,181
 2002ec4:	02003004 	movi	r8,192
 2002ec8:	020033a4 	muli	r8,zero,206
 2002ecc:	02002d5c 	xori	r8,zero,181
 2002ed0:	02003590 	cmplti	r8,zero,214
 2002ed4:	0200359c 	xori	r8,zero,214
 2002ed8:	0200359c 	xori	r8,zero,214
 2002edc:	0200359c 	xori	r8,zero,214
 2002ee0:	0200359c 	xori	r8,zero,214
 2002ee4:	0200359c 	xori	r8,zero,214
 2002ee8:	0200359c 	xori	r8,zero,214
 2002eec:	0200359c 	xori	r8,zero,214
 2002ef0:	0200359c 	xori	r8,zero,214
 2002ef4:	0200359c 	xori	r8,zero,214
 2002ef8:	02002d5c 	xori	r8,zero,181
 2002efc:	02002d5c 	xori	r8,zero,181
 2002f00:	02002d5c 	xori	r8,zero,181
 2002f04:	02002d5c 	xori	r8,zero,181
 2002f08:	02002d5c 	xori	r8,zero,181
 2002f0c:	02002d5c 	xori	r8,zero,181
 2002f10:	02002d5c 	xori	r8,zero,181
 2002f14:	02002d5c 	xori	r8,zero,181
 2002f18:	02002d5c 	xori	r8,zero,181
 2002f1c:	02002d5c 	xori	r8,zero,181
 2002f20:	02003174 	movhi	r8,197
 2002f24:	02003234 	movhi	r8,200
 2002f28:	02002d5c 	xori	r8,zero,181
 2002f2c:	02003234 	movhi	r8,200
 2002f30:	02002d5c 	xori	r8,zero,181
 2002f34:	02002d5c 	xori	r8,zero,181
 2002f38:	02002d5c 	xori	r8,zero,181
 2002f3c:	02002d5c 	xori	r8,zero,181
 2002f40:	020032c8 	cmpgei	r8,zero,203
 2002f44:	02002d5c 	xori	r8,zero,181
 2002f48:	02002d5c 	xori	r8,zero,181
 2002f4c:	020032d4 	movui	r8,203
 2002f50:	02002d5c 	xori	r8,zero,181
 2002f54:	02002d5c 	xori	r8,zero,181
 2002f58:	02002d5c 	xori	r8,zero,181
 2002f5c:	02002d5c 	xori	r8,zero,181
 2002f60:	02002d5c 	xori	r8,zero,181
 2002f64:	0200330c 	andi	r8,zero,204
 2002f68:	02002d5c 	xori	r8,zero,181
 2002f6c:	02002d5c 	xori	r8,zero,181
 2002f70:	02003348 	cmpgei	r8,zero,205
 2002f74:	02002d5c 	xori	r8,zero,181
 2002f78:	02002d5c 	xori	r8,zero,181
 2002f7c:	02002d5c 	xori	r8,zero,181
 2002f80:	02002d5c 	xori	r8,zero,181
 2002f84:	02002d5c 	xori	r8,zero,181
 2002f88:	02002d5c 	xori	r8,zero,181
 2002f8c:	02002d5c 	xori	r8,zero,181
 2002f90:	02002d5c 	xori	r8,zero,181
 2002f94:	02002d5c 	xori	r8,zero,181
 2002f98:	02002d5c 	xori	r8,zero,181
 2002f9c:	020035e0 	cmpeqi	r8,zero,215
 2002fa0:	02003614 	movui	r8,216
 2002fa4:	02003234 	movhi	r8,200
 2002fa8:	02003234 	movhi	r8,200
 2002fac:	02003234 	movhi	r8,200
 2002fb0:	02003560 	cmpeqi	r8,zero,213
 2002fb4:	02003614 	movui	r8,216
 2002fb8:	02002d5c 	xori	r8,zero,181
 2002fbc:	02002d5c 	xori	r8,zero,181
 2002fc0:	020033ec 	andhi	r8,zero,207
 2002fc4:	02002d5c 	xori	r8,zero,181
 2002fc8:	02003404 	movi	r8,208
 2002fcc:	02003620 	cmpeqi	r8,zero,216
 2002fd0:	02003464 	muli	r8,zero,209
 2002fd4:	020034b4 	movhi	r8,210
 2002fd8:	02002d5c 	xori	r8,zero,181
 2002fdc:	020034c0 	call	20034c <__alt_mem_SDRAM-0x1dffcb4>
 2002fe0:	02002d5c 	xori	r8,zero,181
 2002fe4:	0200362c 	andhi	r8,zero,216
 2002fe8:	02002d5c 	xori	r8,zero,181
 2002fec:	02002d5c 	xori	r8,zero,181
 2002ff0:	02003524 	muli	r8,zero,212
 2002ff4:	d9012e17 	ldw	r4,1208(sp)
 2002ff8:	d8812d15 	stw	r2,1204(sp)
 2002ffc:	0109c83a 	sub	r4,zero,r4
 2003000:	d9012e15 	stw	r4,1208(sp)
 2003004:	84000114 	ori	r16,r16,4
 2003008:	ac800007 	ldb	r18,0(r21)
 200300c:	003f5006 	br	2002d50 <___vfprintf_internal_r+0x170>
 2003010:	d9013017 	ldw	r4,1216(sp)
 2003014:	d9412917 	ldw	r5,1188(sp)
 2003018:	2004aec0 	call	2004aec <__swsetup_r>
 200301c:	10003d1e 	bne	r2,zero,2003114 <___vfprintf_internal_r+0x534>
 2003020:	d8c12917 	ldw	r3,1188(sp)
 2003024:	1880030b 	ldhu	r2,12(r3)
 2003028:	00c00284 	movi	r3,10
 200302c:	1100068c 	andi	r4,r2,26
 2003030:	20ff101e 	bne	r4,r3,2002c74 <___vfprintf_internal_r+0x94>
 2003034:	d9012917 	ldw	r4,1188(sp)
 2003038:	20c0038b 	ldhu	r3,14(r4)
 200303c:	193fffcc 	andi	r4,r3,65535
 2003040:	2120001c 	xori	r4,r4,32768
 2003044:	21200004 	addi	r4,r4,-32768
 2003048:	203f0a16 	blt	r4,zero,2002c74 <___vfprintf_internal_r+0x94>
 200304c:	d9012917 	ldw	r4,1188(sp)
 2003050:	d9c12d17 	ldw	r7,1204(sp)
 2003054:	10bfff4c 	andi	r2,r2,65533
 2003058:	22800717 	ldw	r10,28(r4)
 200305c:	22400917 	ldw	r9,36(r4)
 2003060:	d9013017 	ldw	r4,1216(sp)
 2003064:	02010004 	movi	r8,1024
 2003068:	d881070d 	sth	r2,1052(sp)
 200306c:	d9410404 	addi	r5,sp,1040
 2003070:	d8800404 	addi	r2,sp,16
 2003074:	800d883a 	mov	r6,r16
 2003078:	d8c1078d 	sth	r3,1054(sp)
 200307c:	da810b15 	stw	r10,1068(sp)
 2003080:	da410d15 	stw	r9,1076(sp)
 2003084:	d8810415 	stw	r2,1040(sp)
 2003088:	d8810815 	stw	r2,1056(sp)
 200308c:	da010615 	stw	r8,1048(sp)
 2003090:	da010915 	stw	r8,1060(sp)
 2003094:	d8010a15 	stw	zero,1064(sp)
 2003098:	2002be00 	call	2002be0 <___vfprintf_internal_r>
 200309c:	d8812c15 	stw	r2,1200(sp)
 20030a0:	10000416 	blt	r2,zero,20030b4 <___vfprintf_internal_r+0x4d4>
 20030a4:	d9013017 	ldw	r4,1216(sp)
 20030a8:	d9410404 	addi	r5,sp,1040
 20030ac:	200651c0 	call	200651c <_fflush_r>
 20030b0:	1006501e 	bne	r2,zero,20049f4 <___vfprintf_internal_r+0x1e14>
 20030b4:	d881070b 	ldhu	r2,1052(sp)
 20030b8:	1080100c 	andi	r2,r2,64
 20030bc:	10bfffcc 	andi	r2,r2,65535
 20030c0:	10a0001c 	xori	r2,r2,32768
 20030c4:	10a00004 	addi	r2,r2,-32768
 20030c8:	10001426 	beq	r2,zero,200311c <___vfprintf_internal_r+0x53c>
 20030cc:	d8c12917 	ldw	r3,1188(sp)
 20030d0:	1880030b 	ldhu	r2,12(r3)
 20030d4:	10801014 	ori	r2,r2,64
 20030d8:	1880030d 	sth	r2,12(r3)
 20030dc:	00000f06 	br	200311c <___vfprintf_internal_r+0x53c>
 20030e0:	d8811d17 	ldw	r2,1140(sp)
 20030e4:	10000426 	beq	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20030e8:	d9013017 	ldw	r4,1216(sp)
 20030ec:	d9412917 	ldw	r5,1188(sp)
 20030f0:	d9811b04 	addi	r6,sp,1132
 20030f4:	2002bac0 	call	2002bac <__sprint_r>
 20030f8:	d8c12917 	ldw	r3,1188(sp)
 20030fc:	1880030b 	ldhu	r2,12(r3)
 2003100:	1080100c 	andi	r2,r2,64
 2003104:	10bfffcc 	andi	r2,r2,65535
 2003108:	10a0001c 	xori	r2,r2,32768
 200310c:	10a00004 	addi	r2,r2,-32768
 2003110:	10000226 	beq	r2,zero,200311c <___vfprintf_internal_r+0x53c>
 2003114:	00bfffc4 	movi	r2,-1
 2003118:	d8812c15 	stw	r2,1200(sp)
 200311c:	d8812c17 	ldw	r2,1200(sp)
 2003120:	dfc14617 	ldw	ra,1304(sp)
 2003124:	df014517 	ldw	fp,1300(sp)
 2003128:	ddc14417 	ldw	r23,1296(sp)
 200312c:	dd814317 	ldw	r22,1292(sp)
 2003130:	dd414217 	ldw	r21,1288(sp)
 2003134:	dd014117 	ldw	r20,1284(sp)
 2003138:	dcc14017 	ldw	r19,1280(sp)
 200313c:	dc813f17 	ldw	r18,1276(sp)
 2003140:	dc413e17 	ldw	r17,1272(sp)
 2003144:	dc013d17 	ldw	r16,1268(sp)
 2003148:	dec14704 	addi	sp,sp,1308
 200314c:	f800283a 	ret
 2003150:	d9412917 	ldw	r5,1188(sp)
 2003154:	8809883a 	mov	r4,r17
 2003158:	d9811b04 	addi	r6,sp,1132
 200315c:	2002bac0 	call	2002bac <__sprint_r>
 2003160:	103fe51e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003164:	da400404 	addi	r9,sp,16
 2003168:	003eea06 	br	2002d14 <___vfprintf_internal_r+0x134>
 200316c:	20067d80 	call	20067d8 <__sinit>
 2003170:	003eb306 	br	2002c40 <___vfprintf_internal_r+0x60>
 2003174:	e013883a 	mov	r9,fp
 2003178:	84000414 	ori	r16,r16,16
 200317c:	1839883a 	mov	fp,r3
 2003180:	8080080c 	andi	r2,r16,32
 2003184:	10034426 	beq	r2,zero,2003e98 <___vfprintf_internal_r+0x12b8>
 2003188:	d8c12d17 	ldw	r3,1204(sp)
 200318c:	18800117 	ldw	r2,4(r3)
 2003190:	1dc00017 	ldw	r23,0(r3)
 2003194:	18c00204 	addi	r3,r3,8
 2003198:	d8c12d15 	stw	r3,1204(sp)
 200319c:	102d883a 	mov	r22,r2
 20031a0:	1003020e 	bge	r2,zero,2003dac <___vfprintf_internal_r+0x11cc>
 20031a4:	05efc83a 	sub	r23,zero,r23
 20031a8:	b804c03a 	cmpne	r2,r23,zero
 20031ac:	05adc83a 	sub	r22,zero,r22
 20031b0:	b0adc83a 	sub	r22,r22,r2
 20031b4:	00800b44 	movi	r2,45
 20031b8:	d8812585 	stb	r2,1174(sp)
 20031bc:	00c00044 	movi	r3,1
 20031c0:	bd84b03a 	or	r2,r23,r22
 20031c4:	e0000216 	blt	fp,zero,20031d0 <___vfprintf_internal_r+0x5f0>
 20031c8:	013fdfc4 	movi	r4,-129
 20031cc:	8120703a 	and	r16,r16,r4
 20031d0:	1001cc1e 	bne	r2,zero,2003904 <___vfprintf_internal_r+0xd24>
 20031d4:	e001cb1e 	bne	fp,zero,2003904 <___vfprintf_internal_r+0xd24>
 20031d8:	18c03fcc 	andi	r3,r3,255
 20031dc:	1802ca1e 	bne	r3,zero,2003d08 <___vfprintf_internal_r+0x1128>
 20031e0:	8080004c 	andi	r2,r16,1
 20031e4:	1002c826 	beq	r2,zero,2003d08 <___vfprintf_internal_r+0x1128>
 20031e8:	d8c13917 	ldw	r3,1252(sp)
 20031ec:	00800c04 	movi	r2,48
 20031f0:	d8810dc5 	stb	r2,1079(sp)
 20031f4:	d8c12b15 	stw	r3,1196(sp)
 20031f8:	dcc10dc4 	addi	r19,sp,1079
 20031fc:	d8812b17 	ldw	r2,1196(sp)
 2003200:	d8812815 	stw	r2,1184(sp)
 2003204:	1700010e 	bge	r2,fp,200320c <___vfprintf_internal_r+0x62c>
 2003208:	df012815 	stw	fp,1184(sp)
 200320c:	d8812583 	ldbu	r2,1174(sp)
 2003210:	df013115 	stw	fp,1220(sp)
 2003214:	10803fcc 	andi	r2,r2,255
 2003218:	1080201c 	xori	r2,r2,128
 200321c:	10bfe004 	addi	r2,r2,-128
 2003220:	103ed726 	beq	r2,zero,2002d80 <___vfprintf_internal_r+0x1a0>
 2003224:	d8c12817 	ldw	r3,1184(sp)
 2003228:	18c00044 	addi	r3,r3,1
 200322c:	d8c12815 	stw	r3,1184(sp)
 2003230:	003ed306 	br	2002d80 <___vfprintf_internal_r+0x1a0>
 2003234:	8080020c 	andi	r2,r16,8
 2003238:	e013883a 	mov	r9,fp
 200323c:	1839883a 	mov	fp,r3
 2003240:	1003a626 	beq	r2,zero,20040dc <___vfprintf_internal_r+0x14fc>
 2003244:	d9012d17 	ldw	r4,1204(sp)
 2003248:	25800017 	ldw	r22,0(r4)
 200324c:	25000117 	ldw	r20,4(r4)
 2003250:	21000204 	addi	r4,r4,8
 2003254:	d9012d15 	stw	r4,1204(sp)
 2003258:	dd813315 	stw	r22,1228(sp)
 200325c:	dd013415 	stw	r20,1232(sp)
 2003260:	b009883a 	mov	r4,r22
 2003264:	a00b883a 	mov	r5,r20
 2003268:	da413c15 	stw	r9,1264(sp)
 200326c:	20092780 	call	2009278 <__isinfd>
 2003270:	da413c17 	ldw	r9,1264(sp)
 2003274:	b009883a 	mov	r4,r22
 2003278:	a00b883a 	mov	r5,r20
 200327c:	10041d26 	beq	r2,zero,20042f4 <___vfprintf_internal_r+0x1714>
 2003280:	000d883a 	mov	r6,zero
 2003284:	000f883a 	mov	r7,zero
 2003288:	200a73c0 	call	200a73c <__ltdf2>
 200328c:	da413c17 	ldw	r9,1264(sp)
 2003290:	1004da16 	blt	r2,zero,20045fc <___vfprintf_internal_r+0x1a1c>
 2003294:	d8812583 	ldbu	r2,1174(sp)
 2003298:	00c011c4 	movi	r3,71
 200329c:	1c83d116 	blt	r3,r18,20041e4 <___vfprintf_internal_r+0x1604>
 20032a0:	04c08074 	movhi	r19,513
 20032a4:	9cfe3404 	addi	r19,r19,-1840
 20032a8:	00c000c4 	movi	r3,3
 20032ac:	d8c12815 	stw	r3,1184(sp)
 20032b0:	00ffdfc4 	movi	r3,-129
 20032b4:	80e0703a 	and	r16,r16,r3
 20032b8:	d8c12817 	ldw	r3,1184(sp)
 20032bc:	d8013115 	stw	zero,1220(sp)
 20032c0:	d8c12b15 	stw	r3,1196(sp)
 20032c4:	003fd306 	br	2003214 <___vfprintf_internal_r+0x634>
 20032c8:	84000214 	ori	r16,r16,8
 20032cc:	ac800007 	ldb	r18,0(r21)
 20032d0:	003e9f06 	br	2002d50 <___vfprintf_internal_r+0x170>
 20032d4:	e013883a 	mov	r9,fp
 20032d8:	84000414 	ori	r16,r16,16
 20032dc:	1839883a 	mov	fp,r3
 20032e0:	8080080c 	andi	r2,r16,32
 20032e4:	10031d26 	beq	r2,zero,2003f5c <___vfprintf_internal_r+0x137c>
 20032e8:	d8812d17 	ldw	r2,1204(sp)
 20032ec:	0007883a 	mov	r3,zero
 20032f0:	15c00017 	ldw	r23,0(r2)
 20032f4:	15800117 	ldw	r22,4(r2)
 20032f8:	10800204 	addi	r2,r2,8
 20032fc:	d8812d15 	stw	r2,1204(sp)
 2003300:	d8012585 	stb	zero,1174(sp)
 2003304:	bd84b03a 	or	r2,r23,r22
 2003308:	003fae06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 200330c:	e013883a 	mov	r9,fp
 2003310:	84000414 	ori	r16,r16,16
 2003314:	1839883a 	mov	fp,r3
 2003318:	8080080c 	andi	r2,r16,32
 200331c:	1002e726 	beq	r2,zero,2003ebc <___vfprintf_internal_r+0x12dc>
 2003320:	d8c12d17 	ldw	r3,1204(sp)
 2003324:	d9012d17 	ldw	r4,1204(sp)
 2003328:	1dc00017 	ldw	r23,0(r3)
 200332c:	1d800117 	ldw	r22,4(r3)
 2003330:	21000204 	addi	r4,r4,8
 2003334:	00c00044 	movi	r3,1
 2003338:	d9012d15 	stw	r4,1204(sp)
 200333c:	bd84b03a 	or	r2,r23,r22
 2003340:	d8012585 	stb	zero,1174(sp)
 2003344:	003f9f06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2003348:	e013883a 	mov	r9,fp
 200334c:	1839883a 	mov	fp,r3
 2003350:	00c08074 	movhi	r3,513
 2003354:	18fe3804 	addi	r3,r3,-1824
 2003358:	d8c13615 	stw	r3,1240(sp)
 200335c:	8080080c 	andi	r2,r16,32
 2003360:	10007726 	beq	r2,zero,2003540 <___vfprintf_internal_r+0x960>
 2003364:	d9012d17 	ldw	r4,1204(sp)
 2003368:	25c00017 	ldw	r23,0(r4)
 200336c:	25800117 	ldw	r22,4(r4)
 2003370:	21000204 	addi	r4,r4,8
 2003374:	d9012d15 	stw	r4,1204(sp)
 2003378:	8080004c 	andi	r2,r16,1
 200337c:	1002c226 	beq	r2,zero,2003e88 <___vfprintf_internal_r+0x12a8>
 2003380:	bd84b03a 	or	r2,r23,r22
 2003384:	10035d26 	beq	r2,zero,20040fc <___vfprintf_internal_r+0x151c>
 2003388:	00c00c04 	movi	r3,48
 200338c:	d8c12505 	stb	r3,1172(sp)
 2003390:	dc812545 	stb	r18,1173(sp)
 2003394:	84000094 	ori	r16,r16,2
 2003398:	00c00084 	movi	r3,2
 200339c:	d8012585 	stb	zero,1174(sp)
 20033a0:	003f8806 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20033a4:	ac800007 	ldb	r18,0(r21)
 20033a8:	00c00a84 	movi	r3,42
 20033ac:	adc00044 	addi	r23,r21,1
 20033b0:	90c57526 	beq	r18,r3,2004988 <___vfprintf_internal_r+0x1da8>
 20033b4:	95bff404 	addi	r22,r18,-48
 20033b8:	0009883a 	mov	r4,zero
 20033bc:	9d84ff36 	bltu	r19,r22,20047bc <___vfprintf_internal_r+0x1bdc>
 20033c0:	01400284 	movi	r5,10
 20033c4:	20012bc0 	call	20012bc <__mulsi3>
 20033c8:	bc800007 	ldb	r18,0(r23)
 20033cc:	b089883a 	add	r4,r22,r2
 20033d0:	bdc00044 	addi	r23,r23,1
 20033d4:	95bff404 	addi	r22,r18,-48
 20033d8:	9dbff92e 	bgeu	r19,r22,20033c0 <___vfprintf_internal_r+0x7e0>
 20033dc:	2007883a 	mov	r3,r4
 20033e0:	20044316 	blt	r4,zero,20044f0 <___vfprintf_internal_r+0x1910>
 20033e4:	b82b883a 	mov	r21,r23
 20033e8:	003e5a06 	br	2002d54 <___vfprintf_internal_r+0x174>
 20033ec:	ac800007 	ldb	r18,0(r21)
 20033f0:	01001b04 	movi	r4,108
 20033f4:	a805883a 	mov	r2,r21
 20033f8:	91045526 	beq	r18,r4,2004550 <___vfprintf_internal_r+0x1970>
 20033fc:	84000414 	ori	r16,r16,16
 2003400:	003e5306 	br	2002d50 <___vfprintf_internal_r+0x170>
 2003404:	8080080c 	andi	r2,r16,32
 2003408:	e013883a 	mov	r9,fp
 200340c:	10034026 	beq	r2,zero,2004110 <___vfprintf_internal_r+0x1530>
 2003410:	d9012d17 	ldw	r4,1204(sp)
 2003414:	20800017 	ldw	r2,0(r4)
 2003418:	d9012c17 	ldw	r4,1200(sp)
 200341c:	2007d7fa 	srai	r3,r4,31
 2003420:	d9012d17 	ldw	r4,1204(sp)
 2003424:	10c00115 	stw	r3,4(r2)
 2003428:	21000104 	addi	r4,r4,4
 200342c:	d9012d15 	stw	r4,1204(sp)
 2003430:	d9012c17 	ldw	r4,1200(sp)
 2003434:	11000015 	stw	r4,0(r2)
 2003438:	003e1f06 	br	2002cb8 <___vfprintf_internal_r+0xd8>
 200343c:	d9012d17 	ldw	r4,1204(sp)
 2003440:	21000017 	ldw	r4,0(r4)
 2003444:	d9012e15 	stw	r4,1208(sp)
 2003448:	d9012d17 	ldw	r4,1204(sp)
 200344c:	20800104 	addi	r2,r4,4
 2003450:	d9012e17 	ldw	r4,1208(sp)
 2003454:	203ee716 	blt	r4,zero,2002ff4 <___vfprintf_internal_r+0x414>
 2003458:	d8812d15 	stw	r2,1204(sp)
 200345c:	ac800007 	ldb	r18,0(r21)
 2003460:	003e3b06 	br	2002d50 <___vfprintf_internal_r+0x170>
 2003464:	e013883a 	mov	r9,fp
 2003468:	1839883a 	mov	fp,r3
 200346c:	d8c12d17 	ldw	r3,1204(sp)
 2003470:	00800c04 	movi	r2,48
 2003474:	01008074 	movhi	r4,513
 2003478:	213e3d04 	addi	r4,r4,-1804
 200347c:	1dc00017 	ldw	r23,0(r3)
 2003480:	18c00104 	addi	r3,r3,4
 2003484:	d8812505 	stb	r2,1172(sp)
 2003488:	00801e04 	movi	r2,120
 200348c:	d8812545 	stb	r2,1173(sp)
 2003490:	d8c12d15 	stw	r3,1204(sp)
 2003494:	002d883a 	mov	r22,zero
 2003498:	84000094 	ori	r16,r16,2
 200349c:	d9013615 	stw	r4,1240(sp)
 20034a0:	00c00084 	movi	r3,2
 20034a4:	04801e04 	movi	r18,120
 20034a8:	b805883a 	mov	r2,r23
 20034ac:	d8012585 	stb	zero,1174(sp)
 20034b0:	003f4406 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20034b4:	84000814 	ori	r16,r16,32
 20034b8:	ac800007 	ldb	r18,0(r21)
 20034bc:	003e2406 	br	2002d50 <___vfprintf_internal_r+0x170>
 20034c0:	d8812d17 	ldw	r2,1204(sp)
 20034c4:	d8012585 	stb	zero,1174(sp)
 20034c8:	e013883a 	mov	r9,fp
 20034cc:	14c00017 	ldw	r19,0(r2)
 20034d0:	1839883a 	mov	fp,r3
 20034d4:	15c00104 	addi	r23,r2,4
 20034d8:	98045526 	beq	r19,zero,2004630 <___vfprintf_internal_r+0x1a50>
 20034dc:	9809883a 	mov	r4,r19
 20034e0:	18043116 	blt	r3,zero,20045a8 <___vfprintf_internal_r+0x19c8>
 20034e4:	000b883a 	mov	r5,zero
 20034e8:	180d883a 	mov	r6,r3
 20034ec:	da413c15 	stw	r9,1264(sp)
 20034f0:	20076b40 	call	20076b4 <memchr>
 20034f4:	da413c17 	ldw	r9,1264(sp)
 20034f8:	10047a26 	beq	r2,zero,20046e4 <___vfprintf_internal_r+0x1b04>
 20034fc:	14c5c83a 	sub	r2,r2,r19
 2003500:	d8812b15 	stw	r2,1196(sp)
 2003504:	e083d40e 	bge	fp,r2,2004458 <___vfprintf_internal_r+0x1878>
 2003508:	df012815 	stw	fp,1184(sp)
 200350c:	e004e416 	blt	fp,zero,20048a0 <___vfprintf_internal_r+0x1cc0>
 2003510:	d8812583 	ldbu	r2,1174(sp)
 2003514:	df012b15 	stw	fp,1196(sp)
 2003518:	ddc12d15 	stw	r23,1204(sp)
 200351c:	d8013115 	stw	zero,1220(sp)
 2003520:	003f3c06 	br	2003214 <___vfprintf_internal_r+0x634>
 2003524:	00808074 	movhi	r2,513
 2003528:	10be3d04 	addi	r2,r2,-1804
 200352c:	d8813615 	stw	r2,1240(sp)
 2003530:	8080080c 	andi	r2,r16,32
 2003534:	e013883a 	mov	r9,fp
 2003538:	1839883a 	mov	fp,r3
 200353c:	103f891e 	bne	r2,zero,2003364 <___vfprintf_internal_r+0x784>
 2003540:	8080040c 	andi	r2,r16,16
 2003544:	1002c326 	beq	r2,zero,2004054 <___vfprintf_internal_r+0x1474>
 2003548:	d8812d17 	ldw	r2,1204(sp)
 200354c:	002d883a 	mov	r22,zero
 2003550:	15c00017 	ldw	r23,0(r2)
 2003554:	10800104 	addi	r2,r2,4
 2003558:	d8812d15 	stw	r2,1204(sp)
 200355c:	003f8606 	br	2003378 <___vfprintf_internal_r+0x798>
 2003560:	84001014 	ori	r16,r16,64
 2003564:	ac800007 	ldb	r18,0(r21)
 2003568:	003df906 	br	2002d50 <___vfprintf_internal_r+0x170>
 200356c:	d8812587 	ldb	r2,1174(sp)
 2003570:	1002e51e 	bne	r2,zero,2004108 <___vfprintf_internal_r+0x1528>
 2003574:	00800804 	movi	r2,32
 2003578:	d8812585 	stb	r2,1174(sp)
 200357c:	ac800007 	ldb	r18,0(r21)
 2003580:	003df306 	br	2002d50 <___vfprintf_internal_r+0x170>
 2003584:	84000054 	ori	r16,r16,1
 2003588:	ac800007 	ldb	r18,0(r21)
 200358c:	003df006 	br	2002d50 <___vfprintf_internal_r+0x170>
 2003590:	84002014 	ori	r16,r16,128
 2003594:	ac800007 	ldb	r18,0(r21)
 2003598:	003ded06 	br	2002d50 <___vfprintf_internal_r+0x170>
 200359c:	0009883a 	mov	r4,zero
 20035a0:	95bff404 	addi	r22,r18,-48
 20035a4:	182f883a 	mov	r23,r3
 20035a8:	01400284 	movi	r5,10
 20035ac:	20012bc0 	call	20012bc <__mulsi3>
 20035b0:	ac800007 	ldb	r18,0(r21)
 20035b4:	1589883a 	add	r4,r2,r22
 20035b8:	ad400044 	addi	r21,r21,1
 20035bc:	95bff404 	addi	r22,r18,-48
 20035c0:	9dbff92e 	bgeu	r19,r22,20035a8 <___vfprintf_internal_r+0x9c8>
 20035c4:	b807883a 	mov	r3,r23
 20035c8:	d9012e15 	stw	r4,1208(sp)
 20035cc:	003de106 	br	2002d54 <___vfprintf_internal_r+0x174>
 20035d0:	00800ac4 	movi	r2,43
 20035d4:	d8812585 	stb	r2,1174(sp)
 20035d8:	ac800007 	ldb	r18,0(r21)
 20035dc:	003ddc06 	br	2002d50 <___vfprintf_internal_r+0x170>
 20035e0:	d8c12d17 	ldw	r3,1204(sp)
 20035e4:	d9012d17 	ldw	r4,1204(sp)
 20035e8:	e013883a 	mov	r9,fp
 20035ec:	18800017 	ldw	r2,0(r3)
 20035f0:	21000104 	addi	r4,r4,4
 20035f4:	00c00044 	movi	r3,1
 20035f8:	d8c12815 	stw	r3,1184(sp)
 20035fc:	d8012585 	stb	zero,1174(sp)
 2003600:	d8810405 	stb	r2,1040(sp)
 2003604:	d9012d15 	stw	r4,1204(sp)
 2003608:	d8c12b15 	stw	r3,1196(sp)
 200360c:	dcc10404 	addi	r19,sp,1040
 2003610:	003dda06 	br	2002d7c <___vfprintf_internal_r+0x19c>
 2003614:	e013883a 	mov	r9,fp
 2003618:	1839883a 	mov	fp,r3
 200361c:	003ed806 	br	2003180 <___vfprintf_internal_r+0x5a0>
 2003620:	e013883a 	mov	r9,fp
 2003624:	1839883a 	mov	fp,r3
 2003628:	003f2d06 	br	20032e0 <___vfprintf_internal_r+0x700>
 200362c:	e013883a 	mov	r9,fp
 2003630:	1839883a 	mov	fp,r3
 2003634:	003f3806 	br	2003318 <___vfprintf_internal_r+0x738>
 2003638:	da011d17 	ldw	r8,1140(sp)
 200363c:	d8c11c17 	ldw	r3,1136(sp)
 2003640:	d8812587 	ldb	r2,1174(sp)
 2003644:	10000b26 	beq	r2,zero,2003674 <___vfprintf_internal_r+0xa94>
 2003648:	d8812584 	addi	r2,sp,1174
 200364c:	48800015 	stw	r2,0(r9)
 2003650:	00800044 	movi	r2,1
 2003654:	48800115 	stw	r2,4(r9)
 2003658:	4091883a 	add	r8,r8,r2
 200365c:	1887883a 	add	r3,r3,r2
 2003660:	da011d15 	stw	r8,1140(sp)
 2003664:	d8c11c15 	stw	r3,1136(sp)
 2003668:	008001c4 	movi	r2,7
 200366c:	10c18e16 	blt	r2,r3,2003ca8 <___vfprintf_internal_r+0x10c8>
 2003670:	4a400204 	addi	r9,r9,8
 2003674:	d9012a17 	ldw	r4,1192(sp)
 2003678:	20000b26 	beq	r4,zero,20036a8 <___vfprintf_internal_r+0xac8>
 200367c:	d8812504 	addi	r2,sp,1172
 2003680:	48800015 	stw	r2,0(r9)
 2003684:	00800084 	movi	r2,2
 2003688:	48800115 	stw	r2,4(r9)
 200368c:	4091883a 	add	r8,r8,r2
 2003690:	18c00044 	addi	r3,r3,1
 2003694:	da011d15 	stw	r8,1140(sp)
 2003698:	d8c11c15 	stw	r3,1136(sp)
 200369c:	008001c4 	movi	r2,7
 20036a0:	10c17816 	blt	r2,r3,2003c84 <___vfprintf_internal_r+0x10a4>
 20036a4:	4a400204 	addi	r9,r9,8
 20036a8:	d9012f17 	ldw	r4,1212(sp)
 20036ac:	00802004 	movi	r2,128
 20036b0:	2080fc26 	beq	r4,r2,2003aa4 <___vfprintf_internal_r+0xec4>
 20036b4:	d8813117 	ldw	r2,1220(sp)
 20036b8:	d9012b17 	ldw	r4,1196(sp)
 20036bc:	112fc83a 	sub	r23,r2,r4
 20036c0:	05c02a0e 	bge	zero,r23,200376c <___vfprintf_internal_r+0xb8c>
 20036c4:	07000404 	movi	fp,16
 20036c8:	05008074 	movhi	r20,513
 20036cc:	a53e4884 	addi	r20,r20,-1758
 20036d0:	e5c01d0e 	bge	fp,r23,2003748 <___vfprintf_internal_r+0xb68>
 20036d4:	dc812a15 	stw	r18,1192(sp)
 20036d8:	058001c4 	movi	r22,7
 20036dc:	a025883a 	mov	r18,r20
 20036e0:	8029883a 	mov	r20,r16
 20036e4:	dc012917 	ldw	r16,1188(sp)
 20036e8:	00000306 	br	20036f8 <___vfprintf_internal_r+0xb18>
 20036ec:	bdfffc04 	addi	r23,r23,-16
 20036f0:	4a400204 	addi	r9,r9,8
 20036f4:	e5c0110e 	bge	fp,r23,200373c <___vfprintf_internal_r+0xb5c>
 20036f8:	4c800015 	stw	r18,0(r9)
 20036fc:	4f000115 	stw	fp,4(r9)
 2003700:	42000404 	addi	r8,r8,16
 2003704:	18c00044 	addi	r3,r3,1
 2003708:	da011d15 	stw	r8,1140(sp)
 200370c:	d8c11c15 	stw	r3,1136(sp)
 2003710:	b0fff60e 	bge	r22,r3,20036ec <___vfprintf_internal_r+0xb0c>
 2003714:	8809883a 	mov	r4,r17
 2003718:	800b883a 	mov	r5,r16
 200371c:	d9811b04 	addi	r6,sp,1132
 2003720:	2002bac0 	call	2002bac <__sprint_r>
 2003724:	103e741e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003728:	bdfffc04 	addi	r23,r23,-16
 200372c:	da011d17 	ldw	r8,1140(sp)
 2003730:	d8c11c17 	ldw	r3,1136(sp)
 2003734:	da400404 	addi	r9,sp,16
 2003738:	e5ffef16 	blt	fp,r23,20036f8 <___vfprintf_internal_r+0xb18>
 200373c:	a021883a 	mov	r16,r20
 2003740:	9029883a 	mov	r20,r18
 2003744:	dc812a17 	ldw	r18,1192(sp)
 2003748:	4d000015 	stw	r20,0(r9)
 200374c:	4dc00115 	stw	r23,4(r9)
 2003750:	45d1883a 	add	r8,r8,r23
 2003754:	18c00044 	addi	r3,r3,1
 2003758:	da011d15 	stw	r8,1140(sp)
 200375c:	d8c11c15 	stw	r3,1136(sp)
 2003760:	008001c4 	movi	r2,7
 2003764:	10c13e16 	blt	r2,r3,2003c60 <___vfprintf_internal_r+0x1080>
 2003768:	4a400204 	addi	r9,r9,8
 200376c:	8080400c 	andi	r2,r16,256
 2003770:	1000831e 	bne	r2,zero,2003980 <___vfprintf_internal_r+0xda0>
 2003774:	d8812b17 	ldw	r2,1196(sp)
 2003778:	4cc00015 	stw	r19,0(r9)
 200377c:	48800115 	stw	r2,4(r9)
 2003780:	4091883a 	add	r8,r8,r2
 2003784:	18c00044 	addi	r3,r3,1
 2003788:	da011d15 	stw	r8,1140(sp)
 200378c:	d8c11c15 	stw	r3,1136(sp)
 2003790:	008001c4 	movi	r2,7
 2003794:	10c05316 	blt	r2,r3,20038e4 <___vfprintf_internal_r+0xd04>
 2003798:	4a400204 	addi	r9,r9,8
 200379c:	8400010c 	andi	r16,r16,4
 20037a0:	80002e26 	beq	r16,zero,200385c <___vfprintf_internal_r+0xc7c>
 20037a4:	d8812e17 	ldw	r2,1208(sp)
 20037a8:	d8c12817 	ldw	r3,1184(sp)
 20037ac:	10e1c83a 	sub	r16,r2,r3
 20037b0:	04002a0e 	bge	zero,r16,200385c <___vfprintf_internal_r+0xc7c>
 20037b4:	04800404 	movi	r18,16
 20037b8:	d8c11c17 	ldw	r3,1136(sp)
 20037bc:	05c08074 	movhi	r23,513
 20037c0:	bdfe4484 	addi	r23,r23,-1774
 20037c4:	9400170e 	bge	r18,r16,2003824 <___vfprintf_internal_r+0xc44>
 20037c8:	04c001c4 	movi	r19,7
 20037cc:	dd012917 	ldw	r20,1188(sp)
 20037d0:	00000306 	br	20037e0 <___vfprintf_internal_r+0xc00>
 20037d4:	843ffc04 	addi	r16,r16,-16
 20037d8:	4a400204 	addi	r9,r9,8
 20037dc:	9400110e 	bge	r18,r16,2003824 <___vfprintf_internal_r+0xc44>
 20037e0:	4dc00015 	stw	r23,0(r9)
 20037e4:	4c800115 	stw	r18,4(r9)
 20037e8:	42000404 	addi	r8,r8,16
 20037ec:	18c00044 	addi	r3,r3,1
 20037f0:	da011d15 	stw	r8,1140(sp)
 20037f4:	d8c11c15 	stw	r3,1136(sp)
 20037f8:	98fff60e 	bge	r19,r3,20037d4 <___vfprintf_internal_r+0xbf4>
 20037fc:	8809883a 	mov	r4,r17
 2003800:	a00b883a 	mov	r5,r20
 2003804:	d9811b04 	addi	r6,sp,1132
 2003808:	2002bac0 	call	2002bac <__sprint_r>
 200380c:	103e3a1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003810:	843ffc04 	addi	r16,r16,-16
 2003814:	da011d17 	ldw	r8,1140(sp)
 2003818:	d8c11c17 	ldw	r3,1136(sp)
 200381c:	da400404 	addi	r9,sp,16
 2003820:	943fef16 	blt	r18,r16,20037e0 <___vfprintf_internal_r+0xc00>
 2003824:	4dc00015 	stw	r23,0(r9)
 2003828:	4c000115 	stw	r16,4(r9)
 200382c:	8211883a 	add	r8,r16,r8
 2003830:	18c00044 	addi	r3,r3,1
 2003834:	da011d15 	stw	r8,1140(sp)
 2003838:	d8c11c15 	stw	r3,1136(sp)
 200383c:	008001c4 	movi	r2,7
 2003840:	10c0060e 	bge	r2,r3,200385c <___vfprintf_internal_r+0xc7c>
 2003844:	d9412917 	ldw	r5,1188(sp)
 2003848:	8809883a 	mov	r4,r17
 200384c:	d9811b04 	addi	r6,sp,1132
 2003850:	2002bac0 	call	2002bac <__sprint_r>
 2003854:	103e281e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003858:	da011d17 	ldw	r8,1140(sp)
 200385c:	dd012817 	ldw	r20,1184(sp)
 2003860:	d9012e17 	ldw	r4,1208(sp)
 2003864:	a100010e 	bge	r20,r4,200386c <___vfprintf_internal_r+0xc8c>
 2003868:	2029883a 	mov	r20,r4
 200386c:	d8812c17 	ldw	r2,1200(sp)
 2003870:	1505883a 	add	r2,r2,r20
 2003874:	d8812c15 	stw	r2,1200(sp)
 2003878:	4000b91e 	bne	r8,zero,2003b60 <___vfprintf_internal_r+0xf80>
 200387c:	d8011c15 	stw	zero,1136(sp)
 2003880:	a8800007 	ldb	r2,0(r21)
 2003884:	da400404 	addi	r9,sp,16
 2003888:	103d0d1e 	bne	r2,zero,2002cc0 <___vfprintf_internal_r+0xe0>
 200388c:	a825883a 	mov	r18,r21
 2003890:	003d2306 	br	2002d20 <___vfprintf_internal_r+0x140>
 2003894:	d9412917 	ldw	r5,1188(sp)
 2003898:	8809883a 	mov	r4,r17
 200389c:	d9811b04 	addi	r6,sp,1132
 20038a0:	2002bac0 	call	2002bac <__sprint_r>
 20038a4:	103e141e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20038a8:	da011d17 	ldw	r8,1140(sp)
 20038ac:	da400404 	addi	r9,sp,16
 20038b0:	8080004c 	andi	r2,r16,1
 20038b4:	103fb926 	beq	r2,zero,200379c <___vfprintf_internal_r+0xbbc>
 20038b8:	d8c11c17 	ldw	r3,1136(sp)
 20038bc:	d9013717 	ldw	r4,1244(sp)
 20038c0:	00800044 	movi	r2,1
 20038c4:	48800115 	stw	r2,4(r9)
 20038c8:	49000015 	stw	r4,0(r9)
 20038cc:	4091883a 	add	r8,r8,r2
 20038d0:	1887883a 	add	r3,r3,r2
 20038d4:	da011d15 	stw	r8,1140(sp)
 20038d8:	d8c11c15 	stw	r3,1136(sp)
 20038dc:	008001c4 	movi	r2,7
 20038e0:	10ffad0e 	bge	r2,r3,2003798 <___vfprintf_internal_r+0xbb8>
 20038e4:	d9412917 	ldw	r5,1188(sp)
 20038e8:	8809883a 	mov	r4,r17
 20038ec:	d9811b04 	addi	r6,sp,1132
 20038f0:	2002bac0 	call	2002bac <__sprint_r>
 20038f4:	103e001e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20038f8:	da400404 	addi	r9,sp,16
 20038fc:	da011d17 	ldw	r8,1140(sp)
 2003900:	003fa606 	br	200379c <___vfprintf_internal_r+0xbbc>
 2003904:	18803fcc 	andi	r2,r3,255
 2003908:	00c00044 	movi	r3,1
 200390c:	10c10126 	beq	r2,r3,2003d14 <___vfprintf_internal_r+0x1134>
 2003910:	00c00084 	movi	r3,2
 2003914:	10c0ed26 	beq	r2,r3,2003ccc <___vfprintf_internal_r+0x10ec>
 2003918:	d8c10dc4 	addi	r3,sp,1079
 200391c:	b808d0fa 	srli	r4,r23,3
 2003920:	b00a977a 	slli	r5,r22,29
 2003924:	b02cd0fa 	srli	r22,r22,3
 2003928:	bdc001cc 	andi	r23,r23,7
 200392c:	b8800c04 	addi	r2,r23,48
 2003930:	292eb03a 	or	r23,r5,r4
 2003934:	18800005 	stb	r2,0(r3)
 2003938:	bd88b03a 	or	r4,r23,r22
 200393c:	1827883a 	mov	r19,r3
 2003940:	18ffffc4 	addi	r3,r3,-1
 2003944:	203ff51e 	bne	r4,zero,200391c <___vfprintf_internal_r+0xd3c>
 2003948:	8100004c 	andi	r4,r16,1
 200394c:	980b883a 	mov	r5,r19
 2003950:	20000726 	beq	r4,zero,2003970 <___vfprintf_internal_r+0xd90>
 2003954:	10803fcc 	andi	r2,r2,255
 2003958:	1080201c 	xori	r2,r2,128
 200395c:	10bfe004 	addi	r2,r2,-128
 2003960:	01000c04 	movi	r4,48
 2003964:	11000226 	beq	r2,r4,2003970 <___vfprintf_internal_r+0xd90>
 2003968:	1827883a 	mov	r19,r3
 200396c:	293fffc5 	stb	r4,-1(r5)
 2003970:	d8812717 	ldw	r2,1180(sp)
 2003974:	14c5c83a 	sub	r2,r2,r19
 2003978:	d8812b15 	stw	r2,1196(sp)
 200397c:	003e1f06 	br	20031fc <___vfprintf_internal_r+0x61c>
 2003980:	00801944 	movi	r2,101
 2003984:	14807c0e 	bge	r2,r18,2003b78 <___vfprintf_internal_r+0xf98>
 2003988:	d9013317 	ldw	r4,1228(sp)
 200398c:	d9413417 	ldw	r5,1232(sp)
 2003990:	000d883a 	mov	r6,zero
 2003994:	000f883a 	mov	r7,zero
 2003998:	d8c13b15 	stw	r3,1260(sp)
 200399c:	da013a15 	stw	r8,1256(sp)
 20039a0:	da413c15 	stw	r9,1264(sp)
 20039a4:	200a5bc0 	call	200a5bc <__eqdf2>
 20039a8:	d8c13b17 	ldw	r3,1260(sp)
 20039ac:	da013a17 	ldw	r8,1256(sp)
 20039b0:	da413c17 	ldw	r9,1264(sp)
 20039b4:	1001001e 	bne	r2,zero,2003db8 <___vfprintf_internal_r+0x11d8>
 20039b8:	00808074 	movhi	r2,513
 20039bc:	10be4404 	addi	r2,r2,-1776
 20039c0:	48800015 	stw	r2,0(r9)
 20039c4:	00800044 	movi	r2,1
 20039c8:	48800115 	stw	r2,4(r9)
 20039cc:	4091883a 	add	r8,r8,r2
 20039d0:	1887883a 	add	r3,r3,r2
 20039d4:	da011d15 	stw	r8,1140(sp)
 20039d8:	d8c11c15 	stw	r3,1136(sp)
 20039dc:	008001c4 	movi	r2,7
 20039e0:	10c20316 	blt	r2,r3,20041f0 <___vfprintf_internal_r+0x1610>
 20039e4:	4a400204 	addi	r9,r9,8
 20039e8:	d8812417 	ldw	r2,1168(sp)
 20039ec:	d8c13217 	ldw	r3,1224(sp)
 20039f0:	10c00216 	blt	r2,r3,20039fc <___vfprintf_internal_r+0xe1c>
 20039f4:	8080004c 	andi	r2,r16,1
 20039f8:	103f6826 	beq	r2,zero,200379c <___vfprintf_internal_r+0xbbc>
 20039fc:	d8c11c17 	ldw	r3,1136(sp)
 2003a00:	d9013717 	ldw	r4,1244(sp)
 2003a04:	00800044 	movi	r2,1
 2003a08:	48800115 	stw	r2,4(r9)
 2003a0c:	49000015 	stw	r4,0(r9)
 2003a10:	4091883a 	add	r8,r8,r2
 2003a14:	1887883a 	add	r3,r3,r2
 2003a18:	da011d15 	stw	r8,1140(sp)
 2003a1c:	d8c11c15 	stw	r3,1136(sp)
 2003a20:	008001c4 	movi	r2,7
 2003a24:	10c2ce16 	blt	r2,r3,2004560 <___vfprintf_internal_r+0x1980>
 2003a28:	4a400204 	addi	r9,r9,8
 2003a2c:	d8813217 	ldw	r2,1224(sp)
 2003a30:	14bfffc4 	addi	r18,r2,-1
 2003a34:	04bf590e 	bge	zero,r18,200379c <___vfprintf_internal_r+0xbbc>
 2003a38:	04c00404 	movi	r19,16
 2003a3c:	d8c11c17 	ldw	r3,1136(sp)
 2003a40:	05008074 	movhi	r20,513
 2003a44:	a53e4884 	addi	r20,r20,-1758
 2003a48:	9c818a0e 	bge	r19,r18,2004074 <___vfprintf_internal_r+0x1494>
 2003a4c:	058001c4 	movi	r22,7
 2003a50:	ddc12917 	ldw	r23,1188(sp)
 2003a54:	00000306 	br	2003a64 <___vfprintf_internal_r+0xe84>
 2003a58:	4a400204 	addi	r9,r9,8
 2003a5c:	94bffc04 	addi	r18,r18,-16
 2003a60:	9c81840e 	bge	r19,r18,2004074 <___vfprintf_internal_r+0x1494>
 2003a64:	4d000015 	stw	r20,0(r9)
 2003a68:	4cc00115 	stw	r19,4(r9)
 2003a6c:	42000404 	addi	r8,r8,16
 2003a70:	18c00044 	addi	r3,r3,1
 2003a74:	da011d15 	stw	r8,1140(sp)
 2003a78:	d8c11c15 	stw	r3,1136(sp)
 2003a7c:	b0fff60e 	bge	r22,r3,2003a58 <___vfprintf_internal_r+0xe78>
 2003a80:	8809883a 	mov	r4,r17
 2003a84:	b80b883a 	mov	r5,r23
 2003a88:	d9811b04 	addi	r6,sp,1132
 2003a8c:	2002bac0 	call	2002bac <__sprint_r>
 2003a90:	103d991e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003a94:	da011d17 	ldw	r8,1140(sp)
 2003a98:	d8c11c17 	ldw	r3,1136(sp)
 2003a9c:	da400404 	addi	r9,sp,16
 2003aa0:	003fee06 	br	2003a5c <___vfprintf_internal_r+0xe7c>
 2003aa4:	d8812e17 	ldw	r2,1208(sp)
 2003aa8:	d9012817 	ldw	r4,1184(sp)
 2003aac:	112fc83a 	sub	r23,r2,r4
 2003ab0:	05ff000e 	bge	zero,r23,20036b4 <___vfprintf_internal_r+0xad4>
 2003ab4:	07000404 	movi	fp,16
 2003ab8:	05008074 	movhi	r20,513
 2003abc:	a53e4884 	addi	r20,r20,-1758
 2003ac0:	e5c01d0e 	bge	fp,r23,2003b38 <___vfprintf_internal_r+0xf58>
 2003ac4:	dc812a15 	stw	r18,1192(sp)
 2003ac8:	058001c4 	movi	r22,7
 2003acc:	a025883a 	mov	r18,r20
 2003ad0:	8029883a 	mov	r20,r16
 2003ad4:	dc012917 	ldw	r16,1188(sp)
 2003ad8:	00000306 	br	2003ae8 <___vfprintf_internal_r+0xf08>
 2003adc:	bdfffc04 	addi	r23,r23,-16
 2003ae0:	4a400204 	addi	r9,r9,8
 2003ae4:	e5c0110e 	bge	fp,r23,2003b2c <___vfprintf_internal_r+0xf4c>
 2003ae8:	4c800015 	stw	r18,0(r9)
 2003aec:	4f000115 	stw	fp,4(r9)
 2003af0:	42000404 	addi	r8,r8,16
 2003af4:	18c00044 	addi	r3,r3,1
 2003af8:	da011d15 	stw	r8,1140(sp)
 2003afc:	d8c11c15 	stw	r3,1136(sp)
 2003b00:	b0fff60e 	bge	r22,r3,2003adc <___vfprintf_internal_r+0xefc>
 2003b04:	8809883a 	mov	r4,r17
 2003b08:	800b883a 	mov	r5,r16
 2003b0c:	d9811b04 	addi	r6,sp,1132
 2003b10:	2002bac0 	call	2002bac <__sprint_r>
 2003b14:	103d781e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003b18:	bdfffc04 	addi	r23,r23,-16
 2003b1c:	da011d17 	ldw	r8,1140(sp)
 2003b20:	d8c11c17 	ldw	r3,1136(sp)
 2003b24:	da400404 	addi	r9,sp,16
 2003b28:	e5ffef16 	blt	fp,r23,2003ae8 <___vfprintf_internal_r+0xf08>
 2003b2c:	a021883a 	mov	r16,r20
 2003b30:	9029883a 	mov	r20,r18
 2003b34:	dc812a17 	ldw	r18,1192(sp)
 2003b38:	4d000015 	stw	r20,0(r9)
 2003b3c:	4dc00115 	stw	r23,4(r9)
 2003b40:	45d1883a 	add	r8,r8,r23
 2003b44:	18c00044 	addi	r3,r3,1
 2003b48:	da011d15 	stw	r8,1140(sp)
 2003b4c:	d8c11c15 	stw	r3,1136(sp)
 2003b50:	008001c4 	movi	r2,7
 2003b54:	10c13616 	blt	r2,r3,2004030 <___vfprintf_internal_r+0x1450>
 2003b58:	4a400204 	addi	r9,r9,8
 2003b5c:	003ed506 	br	20036b4 <___vfprintf_internal_r+0xad4>
 2003b60:	d9412917 	ldw	r5,1188(sp)
 2003b64:	8809883a 	mov	r4,r17
 2003b68:	d9811b04 	addi	r6,sp,1132
 2003b6c:	2002bac0 	call	2002bac <__sprint_r>
 2003b70:	103f4226 	beq	r2,zero,200387c <___vfprintf_internal_r+0xc9c>
 2003b74:	003d6006 	br	20030f8 <___vfprintf_internal_r+0x518>
 2003b78:	d9013217 	ldw	r4,1224(sp)
 2003b7c:	00800044 	movi	r2,1
 2003b80:	4cc00015 	stw	r19,0(r9)
 2003b84:	1101000e 	bge	r2,r4,2003f88 <___vfprintf_internal_r+0x13a8>
 2003b88:	00800044 	movi	r2,1
 2003b8c:	48800115 	stw	r2,4(r9)
 2003b90:	4091883a 	add	r8,r8,r2
 2003b94:	1887883a 	add	r3,r3,r2
 2003b98:	da011d15 	stw	r8,1140(sp)
 2003b9c:	d8c11c15 	stw	r3,1136(sp)
 2003ba0:	008001c4 	movi	r2,7
 2003ba4:	10c10c16 	blt	r2,r3,2003fd8 <___vfprintf_internal_r+0x13f8>
 2003ba8:	4a400204 	addi	r9,r9,8
 2003bac:	d8813717 	ldw	r2,1244(sp)
 2003bb0:	48800015 	stw	r2,0(r9)
 2003bb4:	00800044 	movi	r2,1
 2003bb8:	48800115 	stw	r2,4(r9)
 2003bbc:	4091883a 	add	r8,r8,r2
 2003bc0:	1887883a 	add	r3,r3,r2
 2003bc4:	da011d15 	stw	r8,1140(sp)
 2003bc8:	d8c11c15 	stw	r3,1136(sp)
 2003bcc:	008001c4 	movi	r2,7
 2003bd0:	10c10a16 	blt	r2,r3,2003ffc <___vfprintf_internal_r+0x141c>
 2003bd4:	4c800204 	addi	r18,r9,8
 2003bd8:	d9013317 	ldw	r4,1228(sp)
 2003bdc:	d9413417 	ldw	r5,1232(sp)
 2003be0:	000d883a 	mov	r6,zero
 2003be4:	000f883a 	mov	r7,zero
 2003be8:	d8c13b15 	stw	r3,1260(sp)
 2003bec:	da013a15 	stw	r8,1256(sp)
 2003bf0:	200a6180 	call	200a618 <__nedf2>
 2003bf4:	d8c13b17 	ldw	r3,1260(sp)
 2003bf8:	da013a17 	ldw	r8,1256(sp)
 2003bfc:	1000ba26 	beq	r2,zero,2003ee8 <___vfprintf_internal_r+0x1308>
 2003c00:	d9013217 	ldw	r4,1224(sp)
 2003c04:	9cc00044 	addi	r19,r19,1
 2003c08:	94c00015 	stw	r19,0(r18)
 2003c0c:	20bfffc4 	addi	r2,r4,-1
 2003c10:	90800115 	stw	r2,4(r18)
 2003c14:	4091883a 	add	r8,r8,r2
 2003c18:	18c00044 	addi	r3,r3,1
 2003c1c:	da011d15 	stw	r8,1140(sp)
 2003c20:	d8c11c15 	stw	r3,1136(sp)
 2003c24:	008001c4 	movi	r2,7
 2003c28:	10c0e216 	blt	r2,r3,2003fb4 <___vfprintf_internal_r+0x13d4>
 2003c2c:	94800204 	addi	r18,r18,8
 2003c30:	d9013517 	ldw	r4,1236(sp)
 2003c34:	d8811fc4 	addi	r2,sp,1151
 2003c38:	90800015 	stw	r2,0(r18)
 2003c3c:	91000115 	stw	r4,4(r18)
 2003c40:	4111883a 	add	r8,r8,r4
 2003c44:	18c00044 	addi	r3,r3,1
 2003c48:	da011d15 	stw	r8,1140(sp)
 2003c4c:	d8c11c15 	stw	r3,1136(sp)
 2003c50:	008001c4 	movi	r2,7
 2003c54:	10ff2316 	blt	r2,r3,20038e4 <___vfprintf_internal_r+0xd04>
 2003c58:	92400204 	addi	r9,r18,8
 2003c5c:	003ecf06 	br	200379c <___vfprintf_internal_r+0xbbc>
 2003c60:	d9412917 	ldw	r5,1188(sp)
 2003c64:	8809883a 	mov	r4,r17
 2003c68:	d9811b04 	addi	r6,sp,1132
 2003c6c:	2002bac0 	call	2002bac <__sprint_r>
 2003c70:	103d211e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003c74:	da011d17 	ldw	r8,1140(sp)
 2003c78:	d8c11c17 	ldw	r3,1136(sp)
 2003c7c:	da400404 	addi	r9,sp,16
 2003c80:	003eba06 	br	200376c <___vfprintf_internal_r+0xb8c>
 2003c84:	d9412917 	ldw	r5,1188(sp)
 2003c88:	8809883a 	mov	r4,r17
 2003c8c:	d9811b04 	addi	r6,sp,1132
 2003c90:	2002bac0 	call	2002bac <__sprint_r>
 2003c94:	103d181e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003c98:	da011d17 	ldw	r8,1140(sp)
 2003c9c:	d8c11c17 	ldw	r3,1136(sp)
 2003ca0:	da400404 	addi	r9,sp,16
 2003ca4:	003e8006 	br	20036a8 <___vfprintf_internal_r+0xac8>
 2003ca8:	d9412917 	ldw	r5,1188(sp)
 2003cac:	8809883a 	mov	r4,r17
 2003cb0:	d9811b04 	addi	r6,sp,1132
 2003cb4:	2002bac0 	call	2002bac <__sprint_r>
 2003cb8:	103d0f1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003cbc:	da011d17 	ldw	r8,1140(sp)
 2003cc0:	d8c11c17 	ldw	r3,1136(sp)
 2003cc4:	da400404 	addi	r9,sp,16
 2003cc8:	003e6a06 	br	2003674 <___vfprintf_internal_r+0xa94>
 2003ccc:	d9413617 	ldw	r5,1240(sp)
 2003cd0:	d8810dc4 	addi	r2,sp,1079
 2003cd4:	b8c003cc 	andi	r3,r23,15
 2003cd8:	b008973a 	slli	r4,r22,28
 2003cdc:	28c7883a 	add	r3,r5,r3
 2003ce0:	b82ed13a 	srli	r23,r23,4
 2003ce4:	18c00003 	ldbu	r3,0(r3)
 2003ce8:	b02cd13a 	srli	r22,r22,4
 2003cec:	25eeb03a 	or	r23,r4,r23
 2003cf0:	10c00005 	stb	r3,0(r2)
 2003cf4:	bd86b03a 	or	r3,r23,r22
 2003cf8:	1027883a 	mov	r19,r2
 2003cfc:	10bfffc4 	addi	r2,r2,-1
 2003d00:	183ff41e 	bne	r3,zero,2003cd4 <___vfprintf_internal_r+0x10f4>
 2003d04:	003f1a06 	br	2003970 <___vfprintf_internal_r+0xd90>
 2003d08:	d8012b15 	stw	zero,1196(sp)
 2003d0c:	dcc10e04 	addi	r19,sp,1080
 2003d10:	003d3a06 	br	20031fc <___vfprintf_internal_r+0x61c>
 2003d14:	b0025426 	beq	r22,zero,2004668 <___vfprintf_internal_r+0x1a88>
 2003d18:	b807883a 	mov	r3,r23
 2003d1c:	d8810dc4 	addi	r2,sp,1079
 2003d20:	882f883a 	mov	r23,r17
 2003d24:	04c00244 	movi	r19,9
 2003d28:	8023883a 	mov	r17,r16
 2003d2c:	da412815 	stw	r9,1184(sp)
 2003d30:	1821883a 	mov	r16,r3
 2003d34:	8009883a 	mov	r4,r16
 2003d38:	b00b883a 	mov	r5,r22
 2003d3c:	01800284 	movi	r6,10
 2003d40:	000f883a 	mov	r7,zero
 2003d44:	1029883a 	mov	r20,r2
 2003d48:	20096f40 	call	20096f4 <__umoddi3>
 2003d4c:	10800c04 	addi	r2,r2,48
 2003d50:	8009883a 	mov	r4,r16
 2003d54:	b00b883a 	mov	r5,r22
 2003d58:	a0800005 	stb	r2,0(r20)
 2003d5c:	01800284 	movi	r6,10
 2003d60:	000f883a 	mov	r7,zero
 2003d64:	2000b3c0 	call	2000b3c <__udivdi3>
 2003d68:	1021883a 	mov	r16,r2
 2003d6c:	182d883a 	mov	r22,r3
 2003d70:	a0bfffc4 	addi	r2,r20,-1
 2003d74:	183fef1e 	bne	r3,zero,2003d34 <___vfprintf_internal_r+0x1154>
 2003d78:	9c3fee36 	bltu	r19,r16,2003d34 <___vfprintf_internal_r+0x1154>
 2003d7c:	da412817 	ldw	r9,1184(sp)
 2003d80:	8005883a 	mov	r2,r16
 2003d84:	8821883a 	mov	r16,r17
 2003d88:	b823883a 	mov	r17,r23
 2003d8c:	102f883a 	mov	r23,r2
 2003d90:	d8812717 	ldw	r2,1180(sp)
 2003d94:	a4ffffc4 	addi	r19,r20,-1
 2003d98:	bdc00c04 	addi	r23,r23,48
 2003d9c:	14c5c83a 	sub	r2,r2,r19
 2003da0:	a5ffffc5 	stb	r23,-1(r20)
 2003da4:	d8812b15 	stw	r2,1196(sp)
 2003da8:	003d1406 	br	20031fc <___vfprintf_internal_r+0x61c>
 2003dac:	00c00044 	movi	r3,1
 2003db0:	bd84b03a 	or	r2,r23,r22
 2003db4:	003d0306 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2003db8:	dc812417 	ldw	r18,1168(sp)
 2003dbc:	0481140e 	bge	zero,r18,2004210 <___vfprintf_internal_r+0x1630>
 2003dc0:	d9013217 	ldw	r4,1224(sp)
 2003dc4:	4cc00015 	stw	r19,0(r9)
 2003dc8:	9100ec16 	blt	r18,r4,200417c <___vfprintf_internal_r+0x159c>
 2003dcc:	49000115 	stw	r4,4(r9)
 2003dd0:	4111883a 	add	r8,r8,r4
 2003dd4:	18c00044 	addi	r3,r3,1
 2003dd8:	da011d15 	stw	r8,1140(sp)
 2003ddc:	d8c11c15 	stw	r3,1136(sp)
 2003de0:	008001c4 	movi	r2,7
 2003de4:	10c23616 	blt	r2,r3,20046c0 <___vfprintf_internal_r+0x1ae0>
 2003de8:	4a400204 	addi	r9,r9,8
 2003dec:	d8813217 	ldw	r2,1224(sp)
 2003df0:	90a5c83a 	sub	r18,r18,r2
 2003df4:	04beae0e 	bge	zero,r18,20038b0 <___vfprintf_internal_r+0xcd0>
 2003df8:	04c00404 	movi	r19,16
 2003dfc:	d8c11c17 	ldw	r3,1136(sp)
 2003e00:	05008074 	movhi	r20,513
 2003e04:	a53e4884 	addi	r20,r20,-1758
 2003e08:	9c81dd0e 	bge	r19,r18,2004580 <___vfprintf_internal_r+0x19a0>
 2003e0c:	058001c4 	movi	r22,7
 2003e10:	ddc12917 	ldw	r23,1188(sp)
 2003e14:	00000306 	br	2003e24 <___vfprintf_internal_r+0x1244>
 2003e18:	4a400204 	addi	r9,r9,8
 2003e1c:	94bffc04 	addi	r18,r18,-16
 2003e20:	9c81d70e 	bge	r19,r18,2004580 <___vfprintf_internal_r+0x19a0>
 2003e24:	4d000015 	stw	r20,0(r9)
 2003e28:	4cc00115 	stw	r19,4(r9)
 2003e2c:	42000404 	addi	r8,r8,16
 2003e30:	18c00044 	addi	r3,r3,1
 2003e34:	da011d15 	stw	r8,1140(sp)
 2003e38:	d8c11c15 	stw	r3,1136(sp)
 2003e3c:	b0fff60e 	bge	r22,r3,2003e18 <___vfprintf_internal_r+0x1238>
 2003e40:	8809883a 	mov	r4,r17
 2003e44:	b80b883a 	mov	r5,r23
 2003e48:	d9811b04 	addi	r6,sp,1132
 2003e4c:	2002bac0 	call	2002bac <__sprint_r>
 2003e50:	103ca91e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003e54:	da011d17 	ldw	r8,1140(sp)
 2003e58:	d8c11c17 	ldw	r3,1136(sp)
 2003e5c:	da400404 	addi	r9,sp,16
 2003e60:	003fee06 	br	2003e1c <___vfprintf_internal_r+0x123c>
 2003e64:	d9412917 	ldw	r5,1188(sp)
 2003e68:	8809883a 	mov	r4,r17
 2003e6c:	d9811b04 	addi	r6,sp,1132
 2003e70:	2002bac0 	call	2002bac <__sprint_r>
 2003e74:	103ca01e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003e78:	da011d17 	ldw	r8,1140(sp)
 2003e7c:	d8c11c17 	ldw	r3,1136(sp)
 2003e80:	da400404 	addi	r9,sp,16
 2003e84:	003dee06 	br	2003640 <___vfprintf_internal_r+0xa60>
 2003e88:	00c00084 	movi	r3,2
 2003e8c:	bd84b03a 	or	r2,r23,r22
 2003e90:	d8012585 	stb	zero,1174(sp)
 2003e94:	003ccb06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2003e98:	8080040c 	andi	r2,r16,16
 2003e9c:	1000ae26 	beq	r2,zero,2004158 <___vfprintf_internal_r+0x1578>
 2003ea0:	d9012d17 	ldw	r4,1204(sp)
 2003ea4:	25c00017 	ldw	r23,0(r4)
 2003ea8:	21000104 	addi	r4,r4,4
 2003eac:	d9012d15 	stw	r4,1204(sp)
 2003eb0:	b82dd7fa 	srai	r22,r23,31
 2003eb4:	b005883a 	mov	r2,r22
 2003eb8:	003cb906 	br	20031a0 <___vfprintf_internal_r+0x5c0>
 2003ebc:	8080040c 	andi	r2,r16,16
 2003ec0:	10007026 	beq	r2,zero,2004084 <___vfprintf_internal_r+0x14a4>
 2003ec4:	d8812d17 	ldw	r2,1204(sp)
 2003ec8:	002d883a 	mov	r22,zero
 2003ecc:	00c00044 	movi	r3,1
 2003ed0:	15c00017 	ldw	r23,0(r2)
 2003ed4:	10800104 	addi	r2,r2,4
 2003ed8:	d8812d15 	stw	r2,1204(sp)
 2003edc:	d8012585 	stb	zero,1174(sp)
 2003ee0:	b805883a 	mov	r2,r23
 2003ee4:	003cb706 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2003ee8:	d8813217 	ldw	r2,1224(sp)
 2003eec:	14ffffc4 	addi	r19,r2,-1
 2003ef0:	04ff4f0e 	bge	zero,r19,2003c30 <___vfprintf_internal_r+0x1050>
 2003ef4:	05800404 	movi	r22,16
 2003ef8:	05008074 	movhi	r20,513
 2003efc:	a53e4884 	addi	r20,r20,-1758
 2003f00:	b4c0470e 	bge	r22,r19,2004020 <___vfprintf_internal_r+0x1440>
 2003f04:	05c001c4 	movi	r23,7
 2003f08:	df012917 	ldw	fp,1188(sp)
 2003f0c:	00000306 	br	2003f1c <___vfprintf_internal_r+0x133c>
 2003f10:	94800204 	addi	r18,r18,8
 2003f14:	9cfffc04 	addi	r19,r19,-16
 2003f18:	b4c0410e 	bge	r22,r19,2004020 <___vfprintf_internal_r+0x1440>
 2003f1c:	95000015 	stw	r20,0(r18)
 2003f20:	95800115 	stw	r22,4(r18)
 2003f24:	42000404 	addi	r8,r8,16
 2003f28:	18c00044 	addi	r3,r3,1
 2003f2c:	da011d15 	stw	r8,1140(sp)
 2003f30:	d8c11c15 	stw	r3,1136(sp)
 2003f34:	b8fff60e 	bge	r23,r3,2003f10 <___vfprintf_internal_r+0x1330>
 2003f38:	8809883a 	mov	r4,r17
 2003f3c:	e00b883a 	mov	r5,fp
 2003f40:	d9811b04 	addi	r6,sp,1132
 2003f44:	2002bac0 	call	2002bac <__sprint_r>
 2003f48:	103c6b1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003f4c:	da011d17 	ldw	r8,1140(sp)
 2003f50:	d8c11c17 	ldw	r3,1136(sp)
 2003f54:	dc800404 	addi	r18,sp,16
 2003f58:	003fee06 	br	2003f14 <___vfprintf_internal_r+0x1334>
 2003f5c:	8080040c 	andi	r2,r16,16
 2003f60:	10005326 	beq	r2,zero,20040b0 <___vfprintf_internal_r+0x14d0>
 2003f64:	d8c12d17 	ldw	r3,1204(sp)
 2003f68:	002d883a 	mov	r22,zero
 2003f6c:	1dc00017 	ldw	r23,0(r3)
 2003f70:	18c00104 	addi	r3,r3,4
 2003f74:	d8c12d15 	stw	r3,1204(sp)
 2003f78:	b805883a 	mov	r2,r23
 2003f7c:	0007883a 	mov	r3,zero
 2003f80:	d8012585 	stb	zero,1174(sp)
 2003f84:	003c8f06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2003f88:	8088703a 	and	r4,r16,r2
 2003f8c:	203efe1e 	bne	r4,zero,2003b88 <___vfprintf_internal_r+0xfa8>
 2003f90:	48800115 	stw	r2,4(r9)
 2003f94:	42000044 	addi	r8,r8,1
 2003f98:	18c00044 	addi	r3,r3,1
 2003f9c:	da011d15 	stw	r8,1140(sp)
 2003fa0:	d8c11c15 	stw	r3,1136(sp)
 2003fa4:	008001c4 	movi	r2,7
 2003fa8:	10c00216 	blt	r2,r3,2003fb4 <___vfprintf_internal_r+0x13d4>
 2003fac:	4c800204 	addi	r18,r9,8
 2003fb0:	003f1f06 	br	2003c30 <___vfprintf_internal_r+0x1050>
 2003fb4:	d9412917 	ldw	r5,1188(sp)
 2003fb8:	8809883a 	mov	r4,r17
 2003fbc:	d9811b04 	addi	r6,sp,1132
 2003fc0:	2002bac0 	call	2002bac <__sprint_r>
 2003fc4:	103c4c1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003fc8:	dc800404 	addi	r18,sp,16
 2003fcc:	da011d17 	ldw	r8,1140(sp)
 2003fd0:	d8c11c17 	ldw	r3,1136(sp)
 2003fd4:	003f1606 	br	2003c30 <___vfprintf_internal_r+0x1050>
 2003fd8:	d9412917 	ldw	r5,1188(sp)
 2003fdc:	8809883a 	mov	r4,r17
 2003fe0:	d9811b04 	addi	r6,sp,1132
 2003fe4:	2002bac0 	call	2002bac <__sprint_r>
 2003fe8:	103c431e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2003fec:	da011d17 	ldw	r8,1140(sp)
 2003ff0:	d8c11c17 	ldw	r3,1136(sp)
 2003ff4:	da400404 	addi	r9,sp,16
 2003ff8:	003eec06 	br	2003bac <___vfprintf_internal_r+0xfcc>
 2003ffc:	d9412917 	ldw	r5,1188(sp)
 2004000:	8809883a 	mov	r4,r17
 2004004:	d9811b04 	addi	r6,sp,1132
 2004008:	2002bac0 	call	2002bac <__sprint_r>
 200400c:	103c3a1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2004010:	da011d17 	ldw	r8,1140(sp)
 2004014:	d8c11c17 	ldw	r3,1136(sp)
 2004018:	dc800404 	addi	r18,sp,16
 200401c:	003eee06 	br	2003bd8 <___vfprintf_internal_r+0xff8>
 2004020:	95000015 	stw	r20,0(r18)
 2004024:	94c00115 	stw	r19,4(r18)
 2004028:	44d1883a 	add	r8,r8,r19
 200402c:	003efa06 	br	2003c18 <___vfprintf_internal_r+0x1038>
 2004030:	d9412917 	ldw	r5,1188(sp)
 2004034:	8809883a 	mov	r4,r17
 2004038:	d9811b04 	addi	r6,sp,1132
 200403c:	2002bac0 	call	2002bac <__sprint_r>
 2004040:	103c2d1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2004044:	da011d17 	ldw	r8,1140(sp)
 2004048:	d8c11c17 	ldw	r3,1136(sp)
 200404c:	da400404 	addi	r9,sp,16
 2004050:	003d9806 	br	20036b4 <___vfprintf_internal_r+0xad4>
 2004054:	8080100c 	andi	r2,r16,64
 2004058:	10011626 	beq	r2,zero,20044b4 <___vfprintf_internal_r+0x18d4>
 200405c:	d8c12d17 	ldw	r3,1204(sp)
 2004060:	002d883a 	mov	r22,zero
 2004064:	1dc0000b 	ldhu	r23,0(r3)
 2004068:	18c00104 	addi	r3,r3,4
 200406c:	d8c12d15 	stw	r3,1204(sp)
 2004070:	003cc106 	br	2003378 <___vfprintf_internal_r+0x798>
 2004074:	4d000015 	stw	r20,0(r9)
 2004078:	4c800115 	stw	r18,4(r9)
 200407c:	4491883a 	add	r8,r8,r18
 2004080:	003dc006 	br	2003784 <___vfprintf_internal_r+0xba4>
 2004084:	8080100c 	andi	r2,r16,64
 2004088:	10010126 	beq	r2,zero,2004490 <___vfprintf_internal_r+0x18b0>
 200408c:	d8c12d17 	ldw	r3,1204(sp)
 2004090:	002d883a 	mov	r22,zero
 2004094:	1dc0000b 	ldhu	r23,0(r3)
 2004098:	18c00104 	addi	r3,r3,4
 200409c:	d8c12d15 	stw	r3,1204(sp)
 20040a0:	b805883a 	mov	r2,r23
 20040a4:	00c00044 	movi	r3,1
 20040a8:	d8012585 	stb	zero,1174(sp)
 20040ac:	003c4506 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20040b0:	8080100c 	andi	r2,r16,64
 20040b4:	10010526 	beq	r2,zero,20044cc <___vfprintf_internal_r+0x18ec>
 20040b8:	d9012d17 	ldw	r4,1204(sp)
 20040bc:	002d883a 	mov	r22,zero
 20040c0:	0007883a 	mov	r3,zero
 20040c4:	25c0000b 	ldhu	r23,0(r4)
 20040c8:	21000104 	addi	r4,r4,4
 20040cc:	d9012d15 	stw	r4,1204(sp)
 20040d0:	b805883a 	mov	r2,r23
 20040d4:	d8012585 	stb	zero,1174(sp)
 20040d8:	003c3a06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20040dc:	d8812d17 	ldw	r2,1204(sp)
 20040e0:	15800017 	ldw	r22,0(r2)
 20040e4:	15000117 	ldw	r20,4(r2)
 20040e8:	10800204 	addi	r2,r2,8
 20040ec:	d8812d15 	stw	r2,1204(sp)
 20040f0:	dd813315 	stw	r22,1228(sp)
 20040f4:	dd013415 	stw	r20,1232(sp)
 20040f8:	003c5906 	br	2003260 <___vfprintf_internal_r+0x680>
 20040fc:	00c00084 	movi	r3,2
 2004100:	d8012585 	stb	zero,1174(sp)
 2004104:	003c2f06 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 2004108:	ac800007 	ldb	r18,0(r21)
 200410c:	003b1006 	br	2002d50 <___vfprintf_internal_r+0x170>
 2004110:	8080040c 	andi	r2,r16,16
 2004114:	1000091e 	bne	r2,zero,200413c <___vfprintf_internal_r+0x155c>
 2004118:	8400100c 	andi	r16,r16,64
 200411c:	80000726 	beq	r16,zero,200413c <___vfprintf_internal_r+0x155c>
 2004120:	d8c12d17 	ldw	r3,1204(sp)
 2004124:	d9012c17 	ldw	r4,1200(sp)
 2004128:	18800017 	ldw	r2,0(r3)
 200412c:	18c00104 	addi	r3,r3,4
 2004130:	d8c12d15 	stw	r3,1204(sp)
 2004134:	1100000d 	sth	r4,0(r2)
 2004138:	003adf06 	br	2002cb8 <___vfprintf_internal_r+0xd8>
 200413c:	d8c12d17 	ldw	r3,1204(sp)
 2004140:	d9012c17 	ldw	r4,1200(sp)
 2004144:	18800017 	ldw	r2,0(r3)
 2004148:	18c00104 	addi	r3,r3,4
 200414c:	d8c12d15 	stw	r3,1204(sp)
 2004150:	11000015 	stw	r4,0(r2)
 2004154:	003ad806 	br	2002cb8 <___vfprintf_internal_r+0xd8>
 2004158:	8080100c 	andi	r2,r16,64
 200415c:	1000c526 	beq	r2,zero,2004474 <___vfprintf_internal_r+0x1894>
 2004160:	d8812d17 	ldw	r2,1204(sp)
 2004164:	15c0000f 	ldh	r23,0(r2)
 2004168:	10800104 	addi	r2,r2,4
 200416c:	d8812d15 	stw	r2,1204(sp)
 2004170:	b82dd7fa 	srai	r22,r23,31
 2004174:	b005883a 	mov	r2,r22
 2004178:	003c0906 	br	20031a0 <___vfprintf_internal_r+0x5c0>
 200417c:	4c800115 	stw	r18,4(r9)
 2004180:	9211883a 	add	r8,r18,r8
 2004184:	18c00044 	addi	r3,r3,1
 2004188:	da011d15 	stw	r8,1140(sp)
 200418c:	d8c11c15 	stw	r3,1136(sp)
 2004190:	008001c4 	movi	r2,7
 2004194:	10c14016 	blt	r2,r3,2004698 <___vfprintf_internal_r+0x1ab8>
 2004198:	4a400204 	addi	r9,r9,8
 200419c:	d8813717 	ldw	r2,1244(sp)
 20041a0:	9ca7883a 	add	r19,r19,r18
 20041a4:	48800015 	stw	r2,0(r9)
 20041a8:	00800044 	movi	r2,1
 20041ac:	48800115 	stw	r2,4(r9)
 20041b0:	4091883a 	add	r8,r8,r2
 20041b4:	1887883a 	add	r3,r3,r2
 20041b8:	da011d15 	stw	r8,1140(sp)
 20041bc:	d8c11c15 	stw	r3,1136(sp)
 20041c0:	008001c4 	movi	r2,7
 20041c4:	10c12c16 	blt	r2,r3,2004678 <___vfprintf_internal_r+0x1a98>
 20041c8:	4a400204 	addi	r9,r9,8
 20041cc:	d9013217 	ldw	r4,1224(sp)
 20041d0:	da011d17 	ldw	r8,1140(sp)
 20041d4:	d8c11c17 	ldw	r3,1136(sp)
 20041d8:	24a5c83a 	sub	r18,r4,r18
 20041dc:	4cc00015 	stw	r19,0(r9)
 20041e0:	003fa506 	br	2004078 <___vfprintf_internal_r+0x1498>
 20041e4:	04c08074 	movhi	r19,513
 20041e8:	9cfe3504 	addi	r19,r19,-1836
 20041ec:	003c2e06 	br	20032a8 <___vfprintf_internal_r+0x6c8>
 20041f0:	d9412917 	ldw	r5,1188(sp)
 20041f4:	8809883a 	mov	r4,r17
 20041f8:	d9811b04 	addi	r6,sp,1132
 20041fc:	2002bac0 	call	2002bac <__sprint_r>
 2004200:	103bbd1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2004204:	da011d17 	ldw	r8,1140(sp)
 2004208:	da400404 	addi	r9,sp,16
 200420c:	003df606 	br	20039e8 <___vfprintf_internal_r+0xe08>
 2004210:	00808074 	movhi	r2,513
 2004214:	10be4404 	addi	r2,r2,-1776
 2004218:	48800015 	stw	r2,0(r9)
 200421c:	00800044 	movi	r2,1
 2004220:	48800115 	stw	r2,4(r9)
 2004224:	4091883a 	add	r8,r8,r2
 2004228:	1887883a 	add	r3,r3,r2
 200422c:	da011d15 	stw	r8,1140(sp)
 2004230:	d8c11c15 	stw	r3,1136(sp)
 2004234:	008001c4 	movi	r2,7
 2004238:	10c0bc16 	blt	r2,r3,200452c <___vfprintf_internal_r+0x194c>
 200423c:	4a400204 	addi	r9,r9,8
 2004240:	9000041e 	bne	r18,zero,2004254 <___vfprintf_internal_r+0x1674>
 2004244:	d8c13217 	ldw	r3,1224(sp)
 2004248:	1800021e 	bne	r3,zero,2004254 <___vfprintf_internal_r+0x1674>
 200424c:	8080004c 	andi	r2,r16,1
 2004250:	103d5226 	beq	r2,zero,200379c <___vfprintf_internal_r+0xbbc>
 2004254:	d8c11c17 	ldw	r3,1136(sp)
 2004258:	d9013717 	ldw	r4,1244(sp)
 200425c:	00800044 	movi	r2,1
 2004260:	48800115 	stw	r2,4(r9)
 2004264:	49000015 	stw	r4,0(r9)
 2004268:	4091883a 	add	r8,r8,r2
 200426c:	1887883a 	add	r3,r3,r2
 2004270:	da011d15 	stw	r8,1140(sp)
 2004274:	d8c11c15 	stw	r3,1136(sp)
 2004278:	008001c4 	movi	r2,7
 200427c:	10c14516 	blt	r2,r3,2004794 <___vfprintf_internal_r+0x1bb4>
 2004280:	4a400204 	addi	r9,r9,8
 2004284:	04a5c83a 	sub	r18,zero,r18
 2004288:	0480d70e 	bge	zero,r18,20045e8 <___vfprintf_internal_r+0x1a08>
 200428c:	05800404 	movi	r22,16
 2004290:	05008074 	movhi	r20,513
 2004294:	a53e4884 	addi	r20,r20,-1758
 2004298:	b480db0e 	bge	r22,r18,2004608 <___vfprintf_internal_r+0x1a28>
 200429c:	05c001c4 	movi	r23,7
 20042a0:	df012917 	ldw	fp,1188(sp)
 20042a4:	00000306 	br	20042b4 <___vfprintf_internal_r+0x16d4>
 20042a8:	4a400204 	addi	r9,r9,8
 20042ac:	94bffc04 	addi	r18,r18,-16
 20042b0:	b480d50e 	bge	r22,r18,2004608 <___vfprintf_internal_r+0x1a28>
 20042b4:	4d000015 	stw	r20,0(r9)
 20042b8:	4d800115 	stw	r22,4(r9)
 20042bc:	42000404 	addi	r8,r8,16
 20042c0:	18c00044 	addi	r3,r3,1
 20042c4:	da011d15 	stw	r8,1140(sp)
 20042c8:	d8c11c15 	stw	r3,1136(sp)
 20042cc:	b8fff60e 	bge	r23,r3,20042a8 <___vfprintf_internal_r+0x16c8>
 20042d0:	8809883a 	mov	r4,r17
 20042d4:	e00b883a 	mov	r5,fp
 20042d8:	d9811b04 	addi	r6,sp,1132
 20042dc:	2002bac0 	call	2002bac <__sprint_r>
 20042e0:	103b851e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20042e4:	da011d17 	ldw	r8,1140(sp)
 20042e8:	d8c11c17 	ldw	r3,1136(sp)
 20042ec:	da400404 	addi	r9,sp,16
 20042f0:	003fee06 	br	20042ac <___vfprintf_internal_r+0x16cc>
 20042f4:	da413c15 	stw	r9,1264(sp)
 20042f8:	20092b00 	call	20092b0 <__isnand>
 20042fc:	da413c17 	ldw	r9,1264(sp)
 2004300:	10007e1e 	bne	r2,zero,20044fc <___vfprintf_internal_r+0x191c>
 2004304:	00bfffc4 	movi	r2,-1
 2004308:	e0816a26 	beq	fp,r2,20048b4 <___vfprintf_internal_r+0x1cd4>
 200430c:	008019c4 	movi	r2,103
 2004310:	90816526 	beq	r18,r2,20048a8 <___vfprintf_internal_r+0x1cc8>
 2004314:	008011c4 	movi	r2,71
 2004318:	90816326 	beq	r18,r2,20048a8 <___vfprintf_internal_r+0x1cc8>
 200431c:	80c04014 	ori	r3,r16,256
 2004320:	d8c12a15 	stw	r3,1192(sp)
 2004324:	a0016516 	blt	r20,zero,20048bc <___vfprintf_internal_r+0x1cdc>
 2004328:	d8012f05 	stb	zero,1212(sp)
 200432c:	00801984 	movi	r2,102
 2004330:	9080f226 	beq	r18,r2,20046fc <___vfprintf_internal_r+0x1b1c>
 2004334:	00801184 	movi	r2,70
 2004338:	9080f026 	beq	r18,r2,20046fc <___vfprintf_internal_r+0x1b1c>
 200433c:	00801944 	movi	r2,101
 2004340:	90818d26 	beq	r18,r2,2004978 <___vfprintf_internal_r+0x1d98>
 2004344:	00801144 	movi	r2,69
 2004348:	90818b26 	beq	r18,r2,2004978 <___vfprintf_internal_r+0x1d98>
 200434c:	e02f883a 	mov	r23,fp
 2004350:	d8812404 	addi	r2,sp,1168
 2004354:	d8800115 	stw	r2,4(sp)
 2004358:	d8812304 	addi	r2,sp,1164
 200435c:	d8800215 	stw	r2,8(sp)
 2004360:	d8812204 	addi	r2,sp,1160
 2004364:	ddc00015 	stw	r23,0(sp)
 2004368:	d8800315 	stw	r2,12(sp)
 200436c:	8809883a 	mov	r4,r17
 2004370:	b00b883a 	mov	r5,r22
 2004374:	a00d883a 	mov	r6,r20
 2004378:	01c00084 	movi	r7,2
 200437c:	da413c15 	stw	r9,1264(sp)
 2004380:	2004f000 	call	2004f00 <_dtoa_r>
 2004384:	1027883a 	mov	r19,r2
 2004388:	008019c4 	movi	r2,103
 200438c:	da413c17 	ldw	r9,1264(sp)
 2004390:	9081951e 	bne	r18,r2,20049e8 <___vfprintf_internal_r+0x1e08>
 2004394:	8080004c 	andi	r2,r16,1
 2004398:	10017926 	beq	r2,zero,2004980 <___vfprintf_internal_r+0x1da0>
 200439c:	00801184 	movi	r2,70
 20043a0:	9dc7883a 	add	r3,r19,r23
 20043a4:	9080e626 	beq	r18,r2,2004740 <___vfprintf_internal_r+0x1b60>
 20043a8:	b009883a 	mov	r4,r22
 20043ac:	a00b883a 	mov	r5,r20
 20043b0:	000d883a 	mov	r6,zero
 20043b4:	000f883a 	mov	r7,zero
 20043b8:	d8c13b15 	stw	r3,1260(sp)
 20043bc:	da413c15 	stw	r9,1264(sp)
 20043c0:	200a5bc0 	call	200a5bc <__eqdf2>
 20043c4:	d8c13b17 	ldw	r3,1260(sp)
 20043c8:	da413c17 	ldw	r9,1264(sp)
 20043cc:	10000726 	beq	r2,zero,20043ec <___vfprintf_internal_r+0x180c>
 20043d0:	d8812217 	ldw	r2,1160(sp)
 20043d4:	10c18a2e 	bgeu	r2,r3,2004a00 <___vfprintf_internal_r+0x1e20>
 20043d8:	01000c04 	movi	r4,48
 20043dc:	11000005 	stb	r4,0(r2)
 20043e0:	10800044 	addi	r2,r2,1
 20043e4:	d8812215 	stw	r2,1160(sp)
 20043e8:	10fffc1e 	bne	r2,r3,20043dc <___vfprintf_internal_r+0x17fc>
 20043ec:	1cc7c83a 	sub	r3,r3,r19
 20043f0:	d8c13215 	stw	r3,1224(sp)
 20043f4:	008019c4 	movi	r2,103
 20043f8:	9080fa26 	beq	r18,r2,20047e4 <___vfprintf_internal_r+0x1c04>
 20043fc:	008011c4 	movi	r2,71
 2004400:	9080f826 	beq	r18,r2,20047e4 <___vfprintf_internal_r+0x1c04>
 2004404:	00801984 	movi	r2,102
 2004408:	90818e1e 	bne	r18,r2,2004a44 <___vfprintf_internal_r+0x1e64>
 200440c:	d8812417 	ldw	r2,1168(sp)
 2004410:	d8812b15 	stw	r2,1196(sp)
 2004414:	00817c0e 	bge	zero,r2,2004a08 <___vfprintf_internal_r+0x1e28>
 2004418:	e000021e 	bne	fp,zero,2004424 <___vfprintf_internal_r+0x1844>
 200441c:	8400004c 	andi	r16,r16,1
 2004420:	80000426 	beq	r16,zero,2004434 <___vfprintf_internal_r+0x1854>
 2004424:	d8812b17 	ldw	r2,1196(sp)
 2004428:	e2000044 	addi	r8,fp,1
 200442c:	1205883a 	add	r2,r2,r8
 2004430:	d8812b15 	stw	r2,1196(sp)
 2004434:	d8812815 	stw	r2,1184(sp)
 2004438:	10010b16 	blt	r2,zero,2004868 <___vfprintf_internal_r+0x1c88>
 200443c:	ddc12f07 	ldb	r23,1212(sp)
 2004440:	b800e426 	beq	r23,zero,20047d4 <___vfprintf_internal_r+0x1bf4>
 2004444:	00800b44 	movi	r2,45
 2004448:	d8812585 	stb	r2,1174(sp)
 200444c:	dc012a17 	ldw	r16,1192(sp)
 2004450:	d8013115 	stw	zero,1220(sp)
 2004454:	003b7306 	br	2003224 <___vfprintf_internal_r+0x644>
 2004458:	d8812b17 	ldw	r2,1196(sp)
 200445c:	d8812815 	stw	r2,1184(sp)
 2004460:	10005716 	blt	r2,zero,20045c0 <___vfprintf_internal_r+0x19e0>
 2004464:	d8812583 	ldbu	r2,1174(sp)
 2004468:	ddc12d15 	stw	r23,1204(sp)
 200446c:	d8013115 	stw	zero,1220(sp)
 2004470:	003b6806 	br	2003214 <___vfprintf_internal_r+0x634>
 2004474:	d8c12d17 	ldw	r3,1204(sp)
 2004478:	1dc00017 	ldw	r23,0(r3)
 200447c:	18c00104 	addi	r3,r3,4
 2004480:	d8c12d15 	stw	r3,1204(sp)
 2004484:	b82dd7fa 	srai	r22,r23,31
 2004488:	b005883a 	mov	r2,r22
 200448c:	003b4406 	br	20031a0 <___vfprintf_internal_r+0x5c0>
 2004490:	d9012d17 	ldw	r4,1204(sp)
 2004494:	002d883a 	mov	r22,zero
 2004498:	00c00044 	movi	r3,1
 200449c:	25c00017 	ldw	r23,0(r4)
 20044a0:	21000104 	addi	r4,r4,4
 20044a4:	d9012d15 	stw	r4,1204(sp)
 20044a8:	b805883a 	mov	r2,r23
 20044ac:	d8012585 	stb	zero,1174(sp)
 20044b0:	003b4406 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20044b4:	d9012d17 	ldw	r4,1204(sp)
 20044b8:	002d883a 	mov	r22,zero
 20044bc:	25c00017 	ldw	r23,0(r4)
 20044c0:	21000104 	addi	r4,r4,4
 20044c4:	d9012d15 	stw	r4,1204(sp)
 20044c8:	003bab06 	br	2003378 <___vfprintf_internal_r+0x798>
 20044cc:	d8812d17 	ldw	r2,1204(sp)
 20044d0:	002d883a 	mov	r22,zero
 20044d4:	0007883a 	mov	r3,zero
 20044d8:	15c00017 	ldw	r23,0(r2)
 20044dc:	10800104 	addi	r2,r2,4
 20044e0:	d8812d15 	stw	r2,1204(sp)
 20044e4:	d8012585 	stb	zero,1174(sp)
 20044e8:	b805883a 	mov	r2,r23
 20044ec:	003b3506 	br	20031c4 <___vfprintf_internal_r+0x5e4>
 20044f0:	00ffffc4 	movi	r3,-1
 20044f4:	b82b883a 	mov	r21,r23
 20044f8:	003a1606 	br	2002d54 <___vfprintf_internal_r+0x174>
 20044fc:	008011c4 	movi	r2,71
 2004500:	1480b116 	blt	r2,r18,20047c8 <___vfprintf_internal_r+0x1be8>
 2004504:	04c08074 	movhi	r19,513
 2004508:	9cfe3604 	addi	r19,r19,-1832
 200450c:	00c000c4 	movi	r3,3
 2004510:	00bfdfc4 	movi	r2,-129
 2004514:	80a0703a 	and	r16,r16,r2
 2004518:	d8c12815 	stw	r3,1184(sp)
 200451c:	d8812583 	ldbu	r2,1174(sp)
 2004520:	d8c12b15 	stw	r3,1196(sp)
 2004524:	d8013115 	stw	zero,1220(sp)
 2004528:	003b3a06 	br	2003214 <___vfprintf_internal_r+0x634>
 200452c:	d9412917 	ldw	r5,1188(sp)
 2004530:	8809883a 	mov	r4,r17
 2004534:	d9811b04 	addi	r6,sp,1132
 2004538:	2002bac0 	call	2002bac <__sprint_r>
 200453c:	103aee1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2004540:	dc812417 	ldw	r18,1168(sp)
 2004544:	da011d17 	ldw	r8,1140(sp)
 2004548:	da400404 	addi	r9,sp,16
 200454c:	003f3c06 	br	2004240 <___vfprintf_internal_r+0x1660>
 2004550:	ad400044 	addi	r21,r21,1
 2004554:	84000814 	ori	r16,r16,32
 2004558:	14800047 	ldb	r18,1(r2)
 200455c:	0039fc06 	br	2002d50 <___vfprintf_internal_r+0x170>
 2004560:	d9412917 	ldw	r5,1188(sp)
 2004564:	8809883a 	mov	r4,r17
 2004568:	d9811b04 	addi	r6,sp,1132
 200456c:	2002bac0 	call	2002bac <__sprint_r>
 2004570:	103ae11e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 2004574:	da011d17 	ldw	r8,1140(sp)
 2004578:	da400404 	addi	r9,sp,16
 200457c:	003d2b06 	br	2003a2c <___vfprintf_internal_r+0xe4c>
 2004580:	4d000015 	stw	r20,0(r9)
 2004584:	4c800115 	stw	r18,4(r9)
 2004588:	4491883a 	add	r8,r8,r18
 200458c:	18c00044 	addi	r3,r3,1
 2004590:	da011d15 	stw	r8,1140(sp)
 2004594:	d8c11c15 	stw	r3,1136(sp)
 2004598:	008001c4 	movi	r2,7
 200459c:	10fcbd16 	blt	r2,r3,2003894 <___vfprintf_internal_r+0xcb4>
 20045a0:	4a400204 	addi	r9,r9,8
 20045a4:	003cc206 	br	20038b0 <___vfprintf_internal_r+0xcd0>
 20045a8:	da413c15 	stw	r9,1264(sp)
 20045ac:	2002b200 	call	2002b20 <strlen>
 20045b0:	d8812b15 	stw	r2,1196(sp)
 20045b4:	d8812815 	stw	r2,1184(sp)
 20045b8:	da413c17 	ldw	r9,1264(sp)
 20045bc:	103fa90e 	bge	r2,zero,2004464 <___vfprintf_internal_r+0x1884>
 20045c0:	d8012815 	stw	zero,1184(sp)
 20045c4:	003fa706 	br	2004464 <___vfprintf_internal_r+0x1884>
 20045c8:	d9412917 	ldw	r5,1188(sp)
 20045cc:	8809883a 	mov	r4,r17
 20045d0:	d9811b04 	addi	r6,sp,1132
 20045d4:	2002bac0 	call	2002bac <__sprint_r>
 20045d8:	103ac71e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20045dc:	da011d17 	ldw	r8,1140(sp)
 20045e0:	d8c11c17 	ldw	r3,1136(sp)
 20045e4:	da400404 	addi	r9,sp,16
 20045e8:	d8813217 	ldw	r2,1224(sp)
 20045ec:	4cc00015 	stw	r19,0(r9)
 20045f0:	48800115 	stw	r2,4(r9)
 20045f4:	4091883a 	add	r8,r8,r2
 20045f8:	003c6206 	br	2003784 <___vfprintf_internal_r+0xba4>
 20045fc:	00800b44 	movi	r2,45
 2004600:	d8812585 	stb	r2,1174(sp)
 2004604:	003b2406 	br	2003298 <___vfprintf_internal_r+0x6b8>
 2004608:	4d000015 	stw	r20,0(r9)
 200460c:	4c800115 	stw	r18,4(r9)
 2004610:	4491883a 	add	r8,r8,r18
 2004614:	18c00044 	addi	r3,r3,1
 2004618:	da011d15 	stw	r8,1140(sp)
 200461c:	d8c11c15 	stw	r3,1136(sp)
 2004620:	008001c4 	movi	r2,7
 2004624:	10ffe816 	blt	r2,r3,20045c8 <___vfprintf_internal_r+0x19e8>
 2004628:	4a400204 	addi	r9,r9,8
 200462c:	003fee06 	br	20045e8 <___vfprintf_internal_r+0x1a08>
 2004630:	d8c12b15 	stw	r3,1196(sp)
 2004634:	00800184 	movi	r2,6
 2004638:	10c0062e 	bgeu	r2,r3,2004654 <___vfprintf_internal_r+0x1a74>
 200463c:	d8812b15 	stw	r2,1196(sp)
 2004640:	d8812815 	stw	r2,1184(sp)
 2004644:	ddc12d15 	stw	r23,1204(sp)
 2004648:	04c08074 	movhi	r19,513
 200464c:	9cfe4204 	addi	r19,r19,-1784
 2004650:	0039ca06 	br	2002d7c <___vfprintf_internal_r+0x19c>
 2004654:	d8812b17 	ldw	r2,1196(sp)
 2004658:	d8812815 	stw	r2,1184(sp)
 200465c:	103ff90e 	bge	r2,zero,2004644 <___vfprintf_internal_r+0x1a64>
 2004660:	d8012815 	stw	zero,1184(sp)
 2004664:	003ff706 	br	2004644 <___vfprintf_internal_r+0x1a64>
 2004668:	00800244 	movi	r2,9
 200466c:	15fdaa36 	bltu	r2,r23,2003d18 <___vfprintf_internal_r+0x1138>
 2004670:	dd010e04 	addi	r20,sp,1080
 2004674:	003dc606 	br	2003d90 <___vfprintf_internal_r+0x11b0>
 2004678:	d9412917 	ldw	r5,1188(sp)
 200467c:	8809883a 	mov	r4,r17
 2004680:	d9811b04 	addi	r6,sp,1132
 2004684:	2002bac0 	call	2002bac <__sprint_r>
 2004688:	103a9b1e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 200468c:	dc812417 	ldw	r18,1168(sp)
 2004690:	da400404 	addi	r9,sp,16
 2004694:	003ecd06 	br	20041cc <___vfprintf_internal_r+0x15ec>
 2004698:	d9412917 	ldw	r5,1188(sp)
 200469c:	8809883a 	mov	r4,r17
 20046a0:	d9811b04 	addi	r6,sp,1132
 20046a4:	2002bac0 	call	2002bac <__sprint_r>
 20046a8:	103a931e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20046ac:	dc812417 	ldw	r18,1168(sp)
 20046b0:	da011d17 	ldw	r8,1140(sp)
 20046b4:	d8c11c17 	ldw	r3,1136(sp)
 20046b8:	da400404 	addi	r9,sp,16
 20046bc:	003eb706 	br	200419c <___vfprintf_internal_r+0x15bc>
 20046c0:	d9412917 	ldw	r5,1188(sp)
 20046c4:	8809883a 	mov	r4,r17
 20046c8:	d9811b04 	addi	r6,sp,1132
 20046cc:	2002bac0 	call	2002bac <__sprint_r>
 20046d0:	103a891e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20046d4:	dc812417 	ldw	r18,1168(sp)
 20046d8:	da011d17 	ldw	r8,1140(sp)
 20046dc:	da400404 	addi	r9,sp,16
 20046e0:	003dc206 	br	2003dec <___vfprintf_internal_r+0x120c>
 20046e4:	df012815 	stw	fp,1184(sp)
 20046e8:	d8812583 	ldbu	r2,1174(sp)
 20046ec:	df012b15 	stw	fp,1196(sp)
 20046f0:	ddc12d15 	stw	r23,1204(sp)
 20046f4:	d8013115 	stw	zero,1220(sp)
 20046f8:	003ac606 	br	2003214 <___vfprintf_internal_r+0x634>
 20046fc:	d8812404 	addi	r2,sp,1168
 2004700:	d8800115 	stw	r2,4(sp)
 2004704:	d8812304 	addi	r2,sp,1164
 2004708:	d8800215 	stw	r2,8(sp)
 200470c:	d8812204 	addi	r2,sp,1160
 2004710:	df000015 	stw	fp,0(sp)
 2004714:	d8800315 	stw	r2,12(sp)
 2004718:	8809883a 	mov	r4,r17
 200471c:	b00b883a 	mov	r5,r22
 2004720:	a00d883a 	mov	r6,r20
 2004724:	01c000c4 	movi	r7,3
 2004728:	da413c15 	stw	r9,1264(sp)
 200472c:	2004f000 	call	2004f00 <_dtoa_r>
 2004730:	da413c17 	ldw	r9,1264(sp)
 2004734:	1027883a 	mov	r19,r2
 2004738:	1707883a 	add	r3,r2,fp
 200473c:	e02f883a 	mov	r23,fp
 2004740:	99000007 	ldb	r4,0(r19)
 2004744:	00800c04 	movi	r2,48
 2004748:	20800326 	beq	r4,r2,2004758 <___vfprintf_internal_r+0x1b78>
 200474c:	da812417 	ldw	r10,1168(sp)
 2004750:	1a87883a 	add	r3,r3,r10
 2004754:	003f1406 	br	20043a8 <___vfprintf_internal_r+0x17c8>
 2004758:	b009883a 	mov	r4,r22
 200475c:	a00b883a 	mov	r5,r20
 2004760:	000d883a 	mov	r6,zero
 2004764:	000f883a 	mov	r7,zero
 2004768:	d8c13b15 	stw	r3,1260(sp)
 200476c:	da413c15 	stw	r9,1264(sp)
 2004770:	200a6180 	call	200a618 <__nedf2>
 2004774:	d8c13b17 	ldw	r3,1260(sp)
 2004778:	da413c17 	ldw	r9,1264(sp)
 200477c:	103ff326 	beq	r2,zero,200474c <___vfprintf_internal_r+0x1b6c>
 2004780:	00800044 	movi	r2,1
 2004784:	15d5c83a 	sub	r10,r2,r23
 2004788:	da812415 	stw	r10,1168(sp)
 200478c:	1a87883a 	add	r3,r3,r10
 2004790:	003f0506 	br	20043a8 <___vfprintf_internal_r+0x17c8>
 2004794:	d9412917 	ldw	r5,1188(sp)
 2004798:	8809883a 	mov	r4,r17
 200479c:	d9811b04 	addi	r6,sp,1132
 20047a0:	2002bac0 	call	2002bac <__sprint_r>
 20047a4:	103a541e 	bne	r2,zero,20030f8 <___vfprintf_internal_r+0x518>
 20047a8:	dc812417 	ldw	r18,1168(sp)
 20047ac:	da011d17 	ldw	r8,1140(sp)
 20047b0:	d8c11c17 	ldw	r3,1136(sp)
 20047b4:	da400404 	addi	r9,sp,16
 20047b8:	003eb206 	br	2004284 <___vfprintf_internal_r+0x16a4>
 20047bc:	b82b883a 	mov	r21,r23
 20047c0:	0007883a 	mov	r3,zero
 20047c4:	00396306 	br	2002d54 <___vfprintf_internal_r+0x174>
 20047c8:	04c08074 	movhi	r19,513
 20047cc:	9cfe3704 	addi	r19,r19,-1828
 20047d0:	003f4e06 	br	200450c <___vfprintf_internal_r+0x192c>
 20047d4:	d8812583 	ldbu	r2,1174(sp)
 20047d8:	dc012a17 	ldw	r16,1192(sp)
 20047dc:	d8013115 	stw	zero,1220(sp)
 20047e0:	003a8c06 	br	2003214 <___vfprintf_internal_r+0x634>
 20047e4:	d8812417 	ldw	r2,1168(sp)
 20047e8:	d8812b15 	stw	r2,1196(sp)
 20047ec:	1029883a 	mov	r20,r2
 20047f0:	00bfff44 	movi	r2,-3
 20047f4:	a0800116 	blt	r20,r2,20047fc <___vfprintf_internal_r+0x1c1c>
 20047f8:	e5001d0e 	bge	fp,r20,2004870 <___vfprintf_internal_r+0x1c90>
 20047fc:	94bfff84 	addi	r18,r18,-2
 2004800:	a53fffc4 	addi	r20,r20,-1
 2004804:	dd012415 	stw	r20,1168(sp)
 2004808:	dc811fc5 	stb	r18,1151(sp)
 200480c:	a0007216 	blt	r20,zero,20049d8 <___vfprintf_internal_r+0x1df8>
 2004810:	00800ac4 	movi	r2,43
 2004814:	d8812005 	stb	r2,1152(sp)
 2004818:	00800244 	movi	r2,9
 200481c:	15003516 	blt	r2,r20,20048f4 <___vfprintf_internal_r+0x1d14>
 2004820:	00800c04 	movi	r2,48
 2004824:	a5000c04 	addi	r20,r20,48
 2004828:	d8812045 	stb	r2,1153(sp)
 200482c:	dd012085 	stb	r20,1154(sp)
 2004830:	d8c120c4 	addi	r3,sp,1155
 2004834:	d8811fc4 	addi	r2,sp,1151
 2004838:	1885c83a 	sub	r2,r3,r2
 200483c:	d8c13217 	ldw	r3,1224(sp)
 2004840:	d8813515 	stw	r2,1236(sp)
 2004844:	1885883a 	add	r2,r3,r2
 2004848:	d8812b15 	stw	r2,1196(sp)
 200484c:	00800044 	movi	r2,1
 2004850:	10c0580e 	bge	r2,r3,20049b4 <___vfprintf_internal_r+0x1dd4>
 2004854:	d8812b17 	ldw	r2,1196(sp)
 2004858:	10800044 	addi	r2,r2,1
 200485c:	d8812b15 	stw	r2,1196(sp)
 2004860:	d8812815 	stw	r2,1184(sp)
 2004864:	103ef50e 	bge	r2,zero,200443c <___vfprintf_internal_r+0x185c>
 2004868:	d8012815 	stw	zero,1184(sp)
 200486c:	003ef306 	br	200443c <___vfprintf_internal_r+0x185c>
 2004870:	d8812b17 	ldw	r2,1196(sp)
 2004874:	d8c13217 	ldw	r3,1224(sp)
 2004878:	10c01416 	blt	r2,r3,20048cc <___vfprintf_internal_r+0x1cec>
 200487c:	8400004c 	andi	r16,r16,1
 2004880:	80000326 	beq	r16,zero,2004890 <___vfprintf_internal_r+0x1cb0>
 2004884:	d8812b17 	ldw	r2,1196(sp)
 2004888:	10800044 	addi	r2,r2,1
 200488c:	d8812b15 	stw	r2,1196(sp)
 2004890:	d8812815 	stw	r2,1184(sp)
 2004894:	10001416 	blt	r2,zero,20048e8 <___vfprintf_internal_r+0x1d08>
 2004898:	048019c4 	movi	r18,103
 200489c:	003ee706 	br	200443c <___vfprintf_internal_r+0x185c>
 20048a0:	d8012815 	stw	zero,1184(sp)
 20048a4:	003b1a06 	br	2003510 <___vfprintf_internal_r+0x930>
 20048a8:	e03e9c1e 	bne	fp,zero,200431c <___vfprintf_internal_r+0x173c>
 20048ac:	07000044 	movi	fp,1
 20048b0:	003e9a06 	br	200431c <___vfprintf_internal_r+0x173c>
 20048b4:	07000184 	movi	fp,6
 20048b8:	003e9806 	br	200431c <___vfprintf_internal_r+0x173c>
 20048bc:	00c00b44 	movi	r3,45
 20048c0:	a520003c 	xorhi	r20,r20,32768
 20048c4:	d8c12f05 	stb	r3,1212(sp)
 20048c8:	003e9806 	br	200432c <___vfprintf_internal_r+0x174c>
 20048cc:	05003f0e 	bge	zero,r20,20049cc <___vfprintf_internal_r+0x1dec>
 20048d0:	05000044 	movi	r20,1
 20048d4:	d8c13217 	ldw	r3,1224(sp)
 20048d8:	a0e9883a 	add	r20,r20,r3
 20048dc:	dd012b15 	stw	r20,1196(sp)
 20048e0:	dd012815 	stw	r20,1184(sp)
 20048e4:	a03fec0e 	bge	r20,zero,2004898 <___vfprintf_internal_r+0x1cb8>
 20048e8:	d8012815 	stw	zero,1184(sp)
 20048ec:	048019c4 	movi	r18,103
 20048f0:	003ed206 	br	200443c <___vfprintf_internal_r+0x185c>
 20048f4:	d8c11f84 	addi	r3,sp,1150
 20048f8:	102f883a 	mov	r23,r2
 20048fc:	4839883a 	mov	fp,r9
 2004900:	a009883a 	mov	r4,r20
 2004904:	01400284 	movi	r5,10
 2004908:	182d883a 	mov	r22,r3
 200490c:	20012500 	call	2001250 <__modsi3>
 2004910:	10800c04 	addi	r2,r2,48
 2004914:	a009883a 	mov	r4,r20
 2004918:	b0800005 	stb	r2,0(r22)
 200491c:	01400284 	movi	r5,10
 2004920:	20012000 	call	2001200 <__divsi3>
 2004924:	1029883a 	mov	r20,r2
 2004928:	b0ffffc4 	addi	r3,r22,-1
 200492c:	b8bff416 	blt	r23,r2,2004900 <___vfprintf_internal_r+0x1d20>
 2004930:	11400c04 	addi	r5,r2,48
 2004934:	b17fffc5 	stb	r5,-1(r22)
 2004938:	d8811fc4 	addi	r2,sp,1151
 200493c:	e013883a 	mov	r9,fp
 2004940:	18803e2e 	bgeu	r3,r2,2004a3c <___vfprintf_internal_r+0x1e5c>
 2004944:	b007883a 	mov	r3,r22
 2004948:	d9012044 	addi	r4,sp,1153
 200494c:	00000206 	br	2004958 <___vfprintf_internal_r+0x1d78>
 2004950:	19400003 	ldbu	r5,0(r3)
 2004954:	18c00044 	addi	r3,r3,1
 2004958:	21400005 	stb	r5,0(r4)
 200495c:	21000044 	addi	r4,r4,1
 2004960:	10fffb1e 	bne	r2,r3,2004950 <___vfprintf_internal_r+0x1d70>
 2004964:	d8c12004 	addi	r3,sp,1152
 2004968:	1d87c83a 	sub	r3,r3,r22
 200496c:	d9012044 	addi	r4,sp,1153
 2004970:	20c7883a 	add	r3,r4,r3
 2004974:	003fb006 	br	2004838 <___vfprintf_internal_r+0x1c58>
 2004978:	e5c00044 	addi	r23,fp,1
 200497c:	003e7406 	br	2004350 <___vfprintf_internal_r+0x1770>
 2004980:	d8c12217 	ldw	r3,1160(sp)
 2004984:	003e9906 	br	20043ec <___vfprintf_internal_r+0x180c>
 2004988:	d9012d17 	ldw	r4,1204(sp)
 200498c:	ac800043 	ldbu	r18,1(r21)
 2004990:	b82b883a 	mov	r21,r23
 2004994:	20c00017 	ldw	r3,0(r4)
 2004998:	20800104 	addi	r2,r4,4
 200499c:	d8812d15 	stw	r2,1204(sp)
 20049a0:	18002116 	blt	r3,zero,2004a28 <___vfprintf_internal_r+0x1e48>
 20049a4:	94803fcc 	andi	r18,r18,255
 20049a8:	9480201c 	xori	r18,r18,128
 20049ac:	94bfe004 	addi	r18,r18,-128
 20049b0:	0038e706 	br	2002d50 <___vfprintf_internal_r+0x170>
 20049b4:	80a0703a 	and	r16,r16,r2
 20049b8:	803fa61e 	bne	r16,zero,2004854 <___vfprintf_internal_r+0x1c74>
 20049bc:	d8812b17 	ldw	r2,1196(sp)
 20049c0:	d8812815 	stw	r2,1184(sp)
 20049c4:	103e9d0e 	bge	r2,zero,200443c <___vfprintf_internal_r+0x185c>
 20049c8:	003fa706 	br	2004868 <___vfprintf_internal_r+0x1c88>
 20049cc:	00800084 	movi	r2,2
 20049d0:	1529c83a 	sub	r20,r2,r20
 20049d4:	003fbf06 	br	20048d4 <___vfprintf_internal_r+0x1cf4>
 20049d8:	00800b44 	movi	r2,45
 20049dc:	0529c83a 	sub	r20,zero,r20
 20049e0:	d8812005 	stb	r2,1152(sp)
 20049e4:	003f8c06 	br	2004818 <___vfprintf_internal_r+0x1c38>
 20049e8:	008011c4 	movi	r2,71
 20049ec:	90be6926 	beq	r18,r2,2004394 <___vfprintf_internal_r+0x17b4>
 20049f0:	003e6a06 	br	200439c <___vfprintf_internal_r+0x17bc>
 20049f4:	00bfffc4 	movi	r2,-1
 20049f8:	d8812c15 	stw	r2,1200(sp)
 20049fc:	0039ad06 	br	20030b4 <___vfprintf_internal_r+0x4d4>
 2004a00:	1007883a 	mov	r3,r2
 2004a04:	003e7906 	br	20043ec <___vfprintf_internal_r+0x180c>
 2004a08:	e000021e 	bne	fp,zero,2004a14 <___vfprintf_internal_r+0x1e34>
 2004a0c:	8400004c 	andi	r16,r16,1
 2004a10:	80000e26 	beq	r16,zero,2004a4c <___vfprintf_internal_r+0x1e6c>
 2004a14:	e7000084 	addi	fp,fp,2
 2004a18:	df012b15 	stw	fp,1196(sp)
 2004a1c:	df012815 	stw	fp,1184(sp)
 2004a20:	e03e860e 	bge	fp,zero,200443c <___vfprintf_internal_r+0x185c>
 2004a24:	003f9006 	br	2004868 <___vfprintf_internal_r+0x1c88>
 2004a28:	94803fcc 	andi	r18,r18,255
 2004a2c:	9480201c 	xori	r18,r18,128
 2004a30:	00ffffc4 	movi	r3,-1
 2004a34:	94bfe004 	addi	r18,r18,-128
 2004a38:	0038c506 	br	2002d50 <___vfprintf_internal_r+0x170>
 2004a3c:	d8c12044 	addi	r3,sp,1153
 2004a40:	003f7d06 	br	2004838 <___vfprintf_internal_r+0x1c58>
 2004a44:	dd012417 	ldw	r20,1168(sp)
 2004a48:	003f6d06 	br	2004800 <___vfprintf_internal_r+0x1c20>
 2004a4c:	00c00044 	movi	r3,1
 2004a50:	d8c12815 	stw	r3,1184(sp)
 2004a54:	d8c12b15 	stw	r3,1196(sp)
 2004a58:	003e7806 	br	200443c <___vfprintf_internal_r+0x185c>

02004a5c <__vfprintf_internal>:
 2004a5c:	00808074 	movhi	r2,513
 2004a60:	1085b204 	addi	r2,r2,5832
 2004a64:	2007883a 	mov	r3,r4
 2004a68:	11000017 	ldw	r4,0(r2)
 2004a6c:	2805883a 	mov	r2,r5
 2004a70:	300f883a 	mov	r7,r6
 2004a74:	180b883a 	mov	r5,r3
 2004a78:	100d883a 	mov	r6,r2
 2004a7c:	2002be01 	jmpi	2002be0 <___vfprintf_internal_r>

02004a80 <_write_r>:
 2004a80:	defffd04 	addi	sp,sp,-12
 2004a84:	dc400115 	stw	r17,4(sp)
 2004a88:	dc000015 	stw	r16,0(sp)
 2004a8c:	2023883a 	mov	r17,r4
 2004a90:	04008074 	movhi	r16,513
 2004a94:	8405c704 	addi	r16,r16,5916
 2004a98:	2809883a 	mov	r4,r5
 2004a9c:	300b883a 	mov	r5,r6
 2004aa0:	380d883a 	mov	r6,r7
 2004aa4:	dfc00215 	stw	ra,8(sp)
 2004aa8:	80000015 	stw	zero,0(r16)
 2004aac:	200bb3c0 	call	200bb3c <write>
 2004ab0:	00ffffc4 	movi	r3,-1
 2004ab4:	10c00526 	beq	r2,r3,2004acc <_write_r+0x4c>
 2004ab8:	dfc00217 	ldw	ra,8(sp)
 2004abc:	dc400117 	ldw	r17,4(sp)
 2004ac0:	dc000017 	ldw	r16,0(sp)
 2004ac4:	dec00304 	addi	sp,sp,12
 2004ac8:	f800283a 	ret
 2004acc:	80c00017 	ldw	r3,0(r16)
 2004ad0:	183ff926 	beq	r3,zero,2004ab8 <_write_r+0x38>
 2004ad4:	88c00015 	stw	r3,0(r17)
 2004ad8:	dfc00217 	ldw	ra,8(sp)
 2004adc:	dc400117 	ldw	r17,4(sp)
 2004ae0:	dc000017 	ldw	r16,0(sp)
 2004ae4:	dec00304 	addi	sp,sp,12
 2004ae8:	f800283a 	ret

02004aec <__swsetup_r>:
 2004aec:	00808074 	movhi	r2,513
 2004af0:	1085b204 	addi	r2,r2,5832
 2004af4:	10800017 	ldw	r2,0(r2)
 2004af8:	defffd04 	addi	sp,sp,-12
 2004afc:	dc400115 	stw	r17,4(sp)
 2004b00:	dc000015 	stw	r16,0(sp)
 2004b04:	dfc00215 	stw	ra,8(sp)
 2004b08:	2023883a 	mov	r17,r4
 2004b0c:	2821883a 	mov	r16,r5
 2004b10:	10000226 	beq	r2,zero,2004b1c <__swsetup_r+0x30>
 2004b14:	10c00e17 	ldw	r3,56(r2)
 2004b18:	18003d26 	beq	r3,zero,2004c10 <__swsetup_r+0x124>
 2004b1c:	8080030b 	ldhu	r2,12(r16)
 2004b20:	10c0020c 	andi	r3,r2,8
 2004b24:	18ffffcc 	andi	r3,r3,65535
 2004b28:	18e0001c 	xori	r3,r3,32768
 2004b2c:	18e00004 	addi	r3,r3,-32768
 2004b30:	18001226 	beq	r3,zero,2004b7c <__swsetup_r+0x90>
 2004b34:	80c00417 	ldw	r3,16(r16)
 2004b38:	18001f26 	beq	r3,zero,2004bb8 <__swsetup_r+0xcc>
 2004b3c:	1100004c 	andi	r4,r2,1
 2004b40:	2000261e 	bne	r4,zero,2004bdc <__swsetup_r+0xf0>
 2004b44:	1080008c 	andi	r2,r2,2
 2004b48:	10bfffcc 	andi	r2,r2,65535
 2004b4c:	10a0001c 	xori	r2,r2,32768
 2004b50:	10a00004 	addi	r2,r2,-32768
 2004b54:	1000311e 	bne	r2,zero,2004c1c <__swsetup_r+0x130>
 2004b58:	80800517 	ldw	r2,20(r16)
 2004b5c:	80800215 	stw	r2,8(r16)
 2004b60:	18002326 	beq	r3,zero,2004bf0 <__swsetup_r+0x104>
 2004b64:	0005883a 	mov	r2,zero
 2004b68:	dfc00217 	ldw	ra,8(sp)
 2004b6c:	dc400117 	ldw	r17,4(sp)
 2004b70:	dc000017 	ldw	r16,0(sp)
 2004b74:	dec00304 	addi	sp,sp,12
 2004b78:	f800283a 	ret
 2004b7c:	10c0040c 	andi	r3,r2,16
 2004b80:	18ffffcc 	andi	r3,r3,65535
 2004b84:	18e0001c 	xori	r3,r3,32768
 2004b88:	18e00004 	addi	r3,r3,-32768
 2004b8c:	18001e26 	beq	r3,zero,2004c08 <__swsetup_r+0x11c>
 2004b90:	10c0010c 	andi	r3,r2,4
 2004b94:	18ffffcc 	andi	r3,r3,65535
 2004b98:	18e0001c 	xori	r3,r3,32768
 2004b9c:	18e00004 	addi	r3,r3,-32768
 2004ba0:	1800211e 	bne	r3,zero,2004c28 <__swsetup_r+0x13c>
 2004ba4:	80c00417 	ldw	r3,16(r16)
 2004ba8:	11400214 	ori	r5,r2,8
 2004bac:	8140030d 	sth	r5,12(r16)
 2004bb0:	2805883a 	mov	r2,r5
 2004bb4:	183fe11e 	bne	r3,zero,2004b3c <__swsetup_r+0x50>
 2004bb8:	1140a00c 	andi	r5,r2,640
 2004bbc:	01008004 	movi	r4,512
 2004bc0:	293fde26 	beq	r5,r4,2004b3c <__swsetup_r+0x50>
 2004bc4:	8809883a 	mov	r4,r17
 2004bc8:	800b883a 	mov	r5,r16
 2004bcc:	2001b180 	call	2001b18 <__smakebuf_r>
 2004bd0:	8080030b 	ldhu	r2,12(r16)
 2004bd4:	80c00417 	ldw	r3,16(r16)
 2004bd8:	003fd806 	br	2004b3c <__swsetup_r+0x50>
 2004bdc:	80800517 	ldw	r2,20(r16)
 2004be0:	80000215 	stw	zero,8(r16)
 2004be4:	0085c83a 	sub	r2,zero,r2
 2004be8:	80800615 	stw	r2,24(r16)
 2004bec:	183fdd1e 	bne	r3,zero,2004b64 <__swsetup_r+0x78>
 2004bf0:	8080030b 	ldhu	r2,12(r16)
 2004bf4:	1080200c 	andi	r2,r2,128
 2004bf8:	10bfffcc 	andi	r2,r2,65535
 2004bfc:	10a0001c 	xori	r2,r2,32768
 2004c00:	10a00004 	addi	r2,r2,-32768
 2004c04:	103fd826 	beq	r2,zero,2004b68 <__swsetup_r+0x7c>
 2004c08:	00bfffc4 	movi	r2,-1
 2004c0c:	003fd606 	br	2004b68 <__swsetup_r+0x7c>
 2004c10:	1009883a 	mov	r4,r2
 2004c14:	20067d80 	call	20067d8 <__sinit>
 2004c18:	003fc006 	br	2004b1c <__swsetup_r+0x30>
 2004c1c:	0005883a 	mov	r2,zero
 2004c20:	80800215 	stw	r2,8(r16)
 2004c24:	003fce06 	br	2004b60 <__swsetup_r+0x74>
 2004c28:	81400c17 	ldw	r5,48(r16)
 2004c2c:	28000626 	beq	r5,zero,2004c48 <__swsetup_r+0x15c>
 2004c30:	80c01004 	addi	r3,r16,64
 2004c34:	28c00326 	beq	r5,r3,2004c44 <__swsetup_r+0x158>
 2004c38:	8809883a 	mov	r4,r17
 2004c3c:	2006bf40 	call	2006bf4 <_free_r>
 2004c40:	8080030b 	ldhu	r2,12(r16)
 2004c44:	80000c15 	stw	zero,48(r16)
 2004c48:	80c00417 	ldw	r3,16(r16)
 2004c4c:	013ff6c4 	movi	r4,-37
 2004c50:	2084703a 	and	r2,r4,r2
 2004c54:	80000115 	stw	zero,4(r16)
 2004c58:	80c00015 	stw	r3,0(r16)
 2004c5c:	003fd206 	br	2004ba8 <__swsetup_r+0xbc>

02004c60 <_close_r>:
 2004c60:	defffd04 	addi	sp,sp,-12
 2004c64:	dc400115 	stw	r17,4(sp)
 2004c68:	dc000015 	stw	r16,0(sp)
 2004c6c:	2023883a 	mov	r17,r4
 2004c70:	04008074 	movhi	r16,513
 2004c74:	8405c704 	addi	r16,r16,5916
 2004c78:	2809883a 	mov	r4,r5
 2004c7c:	dfc00215 	stw	ra,8(sp)
 2004c80:	80000015 	stw	zero,0(r16)
 2004c84:	200b0e80 	call	200b0e8 <close>
 2004c88:	00ffffc4 	movi	r3,-1
 2004c8c:	10c00526 	beq	r2,r3,2004ca4 <_close_r+0x44>
 2004c90:	dfc00217 	ldw	ra,8(sp)
 2004c94:	dc400117 	ldw	r17,4(sp)
 2004c98:	dc000017 	ldw	r16,0(sp)
 2004c9c:	dec00304 	addi	sp,sp,12
 2004ca0:	f800283a 	ret
 2004ca4:	80c00017 	ldw	r3,0(r16)
 2004ca8:	183ff926 	beq	r3,zero,2004c90 <_close_r+0x30>
 2004cac:	88c00015 	stw	r3,0(r17)
 2004cb0:	dfc00217 	ldw	ra,8(sp)
 2004cb4:	dc400117 	ldw	r17,4(sp)
 2004cb8:	dc000017 	ldw	r16,0(sp)
 2004cbc:	dec00304 	addi	sp,sp,12
 2004cc0:	f800283a 	ret

02004cc4 <quorem>:
 2004cc4:	defff204 	addi	sp,sp,-56
 2004cc8:	dd000815 	stw	r20,32(sp)
 2004ccc:	20800417 	ldw	r2,16(r4)
 2004cd0:	2d000417 	ldw	r20,16(r5)
 2004cd4:	dcc00715 	stw	r19,28(sp)
 2004cd8:	dfc00d15 	stw	ra,52(sp)
 2004cdc:	df000c15 	stw	fp,48(sp)
 2004ce0:	ddc00b15 	stw	r23,44(sp)
 2004ce4:	dd800a15 	stw	r22,40(sp)
 2004ce8:	dd400915 	stw	r21,36(sp)
 2004cec:	dc800615 	stw	r18,24(sp)
 2004cf0:	dc400515 	stw	r17,20(sp)
 2004cf4:	dc000415 	stw	r16,16(sp)
 2004cf8:	d9400015 	stw	r5,0(sp)
 2004cfc:	2027883a 	mov	r19,r4
 2004d00:	15007d16 	blt	r2,r20,2004ef8 <quorem+0x234>
 2004d04:	a0800104 	addi	r2,r20,4
 2004d08:	1085883a 	add	r2,r2,r2
 2004d0c:	1085883a 	add	r2,r2,r2
 2004d10:	28ad883a 	add	r22,r5,r2
 2004d14:	2085883a 	add	r2,r4,r2
 2004d18:	10800017 	ldw	r2,0(r2)
 2004d1c:	b1400017 	ldw	r5,0(r22)
 2004d20:	a53fffc4 	addi	r20,r20,-1
 2004d24:	1009883a 	mov	r4,r2
 2004d28:	29400044 	addi	r5,r5,1
 2004d2c:	d8800115 	stw	r2,4(sp)
 2004d30:	20012ac0 	call	20012ac <__udivsi3>
 2004d34:	1025883a 	mov	r18,r2
 2004d38:	d8800017 	ldw	r2,0(sp)
 2004d3c:	9f000504 	addi	fp,r19,20
 2004d40:	14000504 	addi	r16,r2,20
 2004d44:	90003626 	beq	r18,zero,2004e20 <quorem+0x15c>
 2004d48:	802b883a 	mov	r21,r16
 2004d4c:	e023883a 	mov	r17,fp
 2004d50:	0007883a 	mov	r3,zero
 2004d54:	002f883a 	mov	r23,zero
 2004d58:	a9800017 	ldw	r6,0(r21)
 2004d5c:	900b883a 	mov	r5,r18
 2004d60:	d8c00315 	stw	r3,12(sp)
 2004d64:	313fffcc 	andi	r4,r6,65535
 2004d68:	d9800215 	stw	r6,8(sp)
 2004d6c:	20012bc0 	call	20012bc <__mulsi3>
 2004d70:	d9800217 	ldw	r6,8(sp)
 2004d74:	d8c00317 	ldw	r3,12(sp)
 2004d78:	900b883a 	mov	r5,r18
 2004d7c:	3008d43a 	srli	r4,r6,16
 2004d80:	1887883a 	add	r3,r3,r2
 2004d84:	d8c00315 	stw	r3,12(sp)
 2004d88:	20012bc0 	call	20012bc <__mulsi3>
 2004d8c:	89400017 	ldw	r5,0(r17)
 2004d90:	d8c00317 	ldw	r3,12(sp)
 2004d94:	ad400104 	addi	r21,r21,4
 2004d98:	293fffcc 	andi	r4,r5,65535
 2004d9c:	1810d43a 	srli	r8,r3,16
 2004da0:	25c9883a 	add	r4,r4,r23
 2004da4:	18ffffcc 	andi	r3,r3,65535
 2004da8:	20c9c83a 	sub	r4,r4,r3
 2004dac:	280cd43a 	srli	r6,r5,16
 2004db0:	4085883a 	add	r2,r8,r2
 2004db4:	2007d43a 	srai	r3,r4,16
 2004db8:	117fffcc 	andi	r5,r2,65535
 2004dbc:	314bc83a 	sub	r5,r6,r5
 2004dc0:	28cb883a 	add	r5,r5,r3
 2004dc4:	8940008d 	sth	r5,2(r17)
 2004dc8:	8900000d 	sth	r4,0(r17)
 2004dcc:	1006d43a 	srli	r3,r2,16
 2004dd0:	282fd43a 	srai	r23,r5,16
 2004dd4:	8c400104 	addi	r17,r17,4
 2004dd8:	b57fdf2e 	bgeu	r22,r21,2004d58 <quorem+0x94>
 2004ddc:	d8c00117 	ldw	r3,4(sp)
 2004de0:	18000f1e 	bne	r3,zero,2004e20 <quorem+0x15c>
 2004de4:	a0800144 	addi	r2,r20,5
 2004de8:	1085883a 	add	r2,r2,r2
 2004dec:	1085883a 	add	r2,r2,r2
 2004df0:	9887883a 	add	r3,r19,r2
 2004df4:	18bfff04 	addi	r2,r3,-4
 2004df8:	e080082e 	bgeu	fp,r2,2004e1c <quorem+0x158>
 2004dfc:	18ffff17 	ldw	r3,-4(r3)
 2004e00:	18000326 	beq	r3,zero,2004e10 <quorem+0x14c>
 2004e04:	00000506 	br	2004e1c <quorem+0x158>
 2004e08:	10c00017 	ldw	r3,0(r2)
 2004e0c:	1800031e 	bne	r3,zero,2004e1c <quorem+0x158>
 2004e10:	10bfff04 	addi	r2,r2,-4
 2004e14:	a53fffc4 	addi	r20,r20,-1
 2004e18:	e0bffb36 	bltu	fp,r2,2004e08 <quorem+0x144>
 2004e1c:	9d000415 	stw	r20,16(r19)
 2004e20:	d9400017 	ldw	r5,0(sp)
 2004e24:	9809883a 	mov	r4,r19
 2004e28:	20083600 	call	2008360 <__mcmp>
 2004e2c:	10002516 	blt	r2,zero,2004ec4 <quorem+0x200>
 2004e30:	94800044 	addi	r18,r18,1
 2004e34:	e007883a 	mov	r3,fp
 2004e38:	000d883a 	mov	r6,zero
 2004e3c:	18800017 	ldw	r2,0(r3)
 2004e40:	82000017 	ldw	r8,0(r16)
 2004e44:	84000104 	addi	r16,r16,4
 2004e48:	11ffffcc 	andi	r7,r2,65535
 2004e4c:	413fffcc 	andi	r4,r8,65535
 2004e50:	398d883a 	add	r6,r7,r6
 2004e54:	310fc83a 	sub	r7,r6,r4
 2004e58:	4010d43a 	srli	r8,r8,16
 2004e5c:	100cd43a 	srli	r6,r2,16
 2004e60:	3809d43a 	srai	r4,r7,16
 2004e64:	19c0000d 	sth	r7,0(r3)
 2004e68:	320dc83a 	sub	r6,r6,r8
 2004e6c:	310d883a 	add	r6,r6,r4
 2004e70:	1980008d 	sth	r6,2(r3)
 2004e74:	300dd43a 	srai	r6,r6,16
 2004e78:	18c00104 	addi	r3,r3,4
 2004e7c:	b43fef2e 	bgeu	r22,r16,2004e3c <quorem+0x178>
 2004e80:	a0800144 	addi	r2,r20,5
 2004e84:	1085883a 	add	r2,r2,r2
 2004e88:	1085883a 	add	r2,r2,r2
 2004e8c:	9885883a 	add	r2,r19,r2
 2004e90:	10c00017 	ldw	r3,0(r2)
 2004e94:	18000b1e 	bne	r3,zero,2004ec4 <quorem+0x200>
 2004e98:	10ffff04 	addi	r3,r2,-4
 2004e9c:	e0c0082e 	bgeu	fp,r3,2004ec0 <quorem+0x1fc>
 2004ea0:	10bfff17 	ldw	r2,-4(r2)
 2004ea4:	10000326 	beq	r2,zero,2004eb4 <quorem+0x1f0>
 2004ea8:	00000506 	br	2004ec0 <quorem+0x1fc>
 2004eac:	18800017 	ldw	r2,0(r3)
 2004eb0:	1000031e 	bne	r2,zero,2004ec0 <quorem+0x1fc>
 2004eb4:	18ffff04 	addi	r3,r3,-4
 2004eb8:	a53fffc4 	addi	r20,r20,-1
 2004ebc:	e0fffb36 	bltu	fp,r3,2004eac <quorem+0x1e8>
 2004ec0:	9d000415 	stw	r20,16(r19)
 2004ec4:	9005883a 	mov	r2,r18
 2004ec8:	dfc00d17 	ldw	ra,52(sp)
 2004ecc:	df000c17 	ldw	fp,48(sp)
 2004ed0:	ddc00b17 	ldw	r23,44(sp)
 2004ed4:	dd800a17 	ldw	r22,40(sp)
 2004ed8:	dd400917 	ldw	r21,36(sp)
 2004edc:	dd000817 	ldw	r20,32(sp)
 2004ee0:	dcc00717 	ldw	r19,28(sp)
 2004ee4:	dc800617 	ldw	r18,24(sp)
 2004ee8:	dc400517 	ldw	r17,20(sp)
 2004eec:	dc000417 	ldw	r16,16(sp)
 2004ef0:	dec00e04 	addi	sp,sp,56
 2004ef4:	f800283a 	ret
 2004ef8:	0005883a 	mov	r2,zero
 2004efc:	003ff206 	br	2004ec8 <quorem+0x204>

02004f00 <_dtoa_r>:
 2004f00:	20801017 	ldw	r2,64(r4)
 2004f04:	deffdf04 	addi	sp,sp,-132
 2004f08:	dcc01a15 	stw	r19,104(sp)
 2004f0c:	dc801915 	stw	r18,100(sp)
 2004f10:	dc401815 	stw	r17,96(sp)
 2004f14:	dc001715 	stw	r16,92(sp)
 2004f18:	dfc02015 	stw	ra,128(sp)
 2004f1c:	df001f15 	stw	fp,124(sp)
 2004f20:	ddc01e15 	stw	r23,120(sp)
 2004f24:	dd801d15 	stw	r22,116(sp)
 2004f28:	dd401c15 	stw	r21,112(sp)
 2004f2c:	dd001b15 	stw	r20,108(sp)
 2004f30:	d9400315 	stw	r5,12(sp)
 2004f34:	d9c00415 	stw	r7,16(sp)
 2004f38:	2021883a 	mov	r16,r4
 2004f3c:	3025883a 	mov	r18,r6
 2004f40:	dcc02317 	ldw	r19,140(sp)
 2004f44:	3023883a 	mov	r17,r6
 2004f48:	10000826 	beq	r2,zero,2004f6c <_dtoa_r+0x6c>
 2004f4c:	20c01117 	ldw	r3,68(r4)
 2004f50:	01800044 	movi	r6,1
 2004f54:	100b883a 	mov	r5,r2
 2004f58:	30cc983a 	sll	r6,r6,r3
 2004f5c:	10c00115 	stw	r3,4(r2)
 2004f60:	11800215 	stw	r6,8(r2)
 2004f64:	2007abc0 	call	2007abc <_Bfree>
 2004f68:	80001015 	stw	zero,64(r16)
 2004f6c:	90002f16 	blt	r18,zero,200502c <_dtoa_r+0x12c>
 2004f70:	98000015 	stw	zero,0(r19)
 2004f74:	90dffc2c 	andhi	r3,r18,32752
 2004f78:	009ffc34 	movhi	r2,32752
 2004f7c:	18801c26 	beq	r3,r2,2004ff0 <_dtoa_r+0xf0>
 2004f80:	d9000317 	ldw	r4,12(sp)
 2004f84:	880b883a 	mov	r5,r17
 2004f88:	000d883a 	mov	r6,zero
 2004f8c:	000f883a 	mov	r7,zero
 2004f90:	200a5bc0 	call	200a5bc <__eqdf2>
 2004f94:	10002c1e 	bne	r2,zero,2005048 <_dtoa_r+0x148>
 2004f98:	d9002217 	ldw	r4,136(sp)
 2004f9c:	d9c02417 	ldw	r7,144(sp)
 2004fa0:	00800044 	movi	r2,1
 2004fa4:	20800015 	stw	r2,0(r4)
 2004fa8:	38019426 	beq	r7,zero,20055fc <_dtoa_r+0x6fc>
 2004fac:	00808074 	movhi	r2,513
 2004fb0:	10be4444 	addi	r2,r2,-1775
 2004fb4:	38800015 	stw	r2,0(r7)
 2004fb8:	15ffffc4 	addi	r23,r2,-1
 2004fbc:	b805883a 	mov	r2,r23
 2004fc0:	dfc02017 	ldw	ra,128(sp)
 2004fc4:	df001f17 	ldw	fp,124(sp)
 2004fc8:	ddc01e17 	ldw	r23,120(sp)
 2004fcc:	dd801d17 	ldw	r22,116(sp)
 2004fd0:	dd401c17 	ldw	r21,112(sp)
 2004fd4:	dd001b17 	ldw	r20,108(sp)
 2004fd8:	dcc01a17 	ldw	r19,104(sp)
 2004fdc:	dc801917 	ldw	r18,100(sp)
 2004fe0:	dc401817 	ldw	r17,96(sp)
 2004fe4:	dc001717 	ldw	r16,92(sp)
 2004fe8:	dec02104 	addi	sp,sp,132
 2004fec:	f800283a 	ret
 2004ff0:	d8c02217 	ldw	r3,136(sp)
 2004ff4:	d9000317 	ldw	r4,12(sp)
 2004ff8:	0089c3c4 	movi	r2,9999
 2004ffc:	18800015 	stw	r2,0(r3)
 2005000:	20016c26 	beq	r4,zero,20055b4 <_dtoa_r+0x6b4>
 2005004:	05c08074 	movhi	r23,513
 2005008:	bdfe5004 	addi	r23,r23,-1728
 200500c:	d9c02417 	ldw	r7,144(sp)
 2005010:	383fea26 	beq	r7,zero,2004fbc <_dtoa_r+0xbc>
 2005014:	b88000c7 	ldb	r2,3(r23)
 2005018:	10016d1e 	bne	r2,zero,20055d0 <_dtoa_r+0x6d0>
 200501c:	b88000c4 	addi	r2,r23,3
 2005020:	d8c02417 	ldw	r3,144(sp)
 2005024:	18800015 	stw	r2,0(r3)
 2005028:	003fe406 	br	2004fbc <_dtoa_r+0xbc>
 200502c:	04600034 	movhi	r17,32768
 2005030:	8c7fffc4 	addi	r17,r17,-1
 2005034:	9462703a 	and	r17,r18,r17
 2005038:	00800044 	movi	r2,1
 200503c:	98800015 	stw	r2,0(r19)
 2005040:	8825883a 	mov	r18,r17
 2005044:	003fcb06 	br	2004f74 <_dtoa_r+0x74>
 2005048:	d9400317 	ldw	r5,12(sp)
 200504c:	9028d53a 	srli	r20,r18,20
 2005050:	d8800204 	addi	r2,sp,8
 2005054:	d8800015 	stw	r2,0(sp)
 2005058:	8009883a 	mov	r4,r16
 200505c:	880d883a 	mov	r6,r17
 2005060:	d9c00104 	addi	r7,sp,4
 2005064:	20087080 	call	2008708 <__d2b>
 2005068:	a501ffcc 	andi	r20,r20,2047
 200506c:	1039883a 	mov	fp,r2
 2005070:	a001591e 	bne	r20,zero,20055d8 <_dtoa_r+0x6d8>
 2005074:	dd400217 	ldw	r21,8(sp)
 2005078:	dd000117 	ldw	r20,4(sp)
 200507c:	00befbc4 	movi	r2,-1041
 2005080:	ad29883a 	add	r20,r21,r20
 2005084:	a082d216 	blt	r20,r2,2005bd0 <_dtoa_r+0xcd0>
 2005088:	d8c00317 	ldw	r3,12(sp)
 200508c:	013f0384 	movi	r4,-1010
 2005090:	2509c83a 	sub	r4,r4,r20
 2005094:	a0810484 	addi	r2,r20,1042
 2005098:	9124983a 	sll	r18,r18,r4
 200509c:	1884d83a 	srl	r2,r3,r2
 20050a0:	9088b03a 	or	r4,r18,r2
 20050a4:	200a9400 	call	200a940 <__floatunsidf>
 20050a8:	1009883a 	mov	r4,r2
 20050ac:	017f8434 	movhi	r5,65040
 20050b0:	00800044 	movi	r2,1
 20050b4:	194b883a 	add	r5,r3,r5
 20050b8:	a53fffc4 	addi	r20,r20,-1
 20050bc:	d8800f15 	stw	r2,60(sp)
 20050c0:	000d883a 	mov	r6,zero
 20050c4:	01cffe34 	movhi	r7,16376
 20050c8:	200a0c40 	call	200a0c4 <__subdf3>
 20050cc:	1009883a 	mov	r4,r2
 20050d0:	180b883a 	mov	r5,r3
 20050d4:	0198dbf4 	movhi	r6,25455
 20050d8:	3190d844 	addi	r6,r6,17249
 20050dc:	01cff4f4 	movhi	r7,16339
 20050e0:	39e1e9c4 	addi	r7,r7,-30809
 20050e4:	200a1240 	call	200a124 <__muldf3>
 20050e8:	180b883a 	mov	r5,r3
 20050ec:	01a2d874 	movhi	r6,35681
 20050f0:	31b22cc4 	addi	r6,r6,-14157
 20050f4:	01cff1f4 	movhi	r7,16327
 20050f8:	39e28a04 	addi	r7,r7,-30168
 20050fc:	1009883a 	mov	r4,r2
 2005100:	200a0700 	call	200a070 <__adddf3>
 2005104:	a009883a 	mov	r4,r20
 2005108:	1027883a 	mov	r19,r2
 200510c:	1825883a 	mov	r18,r3
 2005110:	200a7980 	call	200a798 <__floatsidf>
 2005114:	1009883a 	mov	r4,r2
 2005118:	180b883a 	mov	r5,r3
 200511c:	019427f4 	movhi	r6,20639
 2005120:	319e7ec4 	addi	r6,r6,31227
 2005124:	01cff4f4 	movhi	r7,16339
 2005128:	39d104c4 	addi	r7,r7,17427
 200512c:	200a1240 	call	200a124 <__muldf3>
 2005130:	9809883a 	mov	r4,r19
 2005134:	900b883a 	mov	r5,r18
 2005138:	100d883a 	mov	r6,r2
 200513c:	180f883a 	mov	r7,r3
 2005140:	200a0700 	call	200a070 <__adddf3>
 2005144:	1009883a 	mov	r4,r2
 2005148:	180b883a 	mov	r5,r3
 200514c:	1027883a 	mov	r19,r2
 2005150:	1825883a 	mov	r18,r3
 2005154:	200a86c0 	call	200a86c <__fixdfsi>
 2005158:	9809883a 	mov	r4,r19
 200515c:	900b883a 	mov	r5,r18
 2005160:	000d883a 	mov	r6,zero
 2005164:	000f883a 	mov	r7,zero
 2005168:	d8800615 	stw	r2,24(sp)
 200516c:	200a73c0 	call	200a73c <__ltdf2>
 2005170:	10027e16 	blt	r2,zero,2005b6c <_dtoa_r+0xc6c>
 2005174:	d8c00617 	ldw	r3,24(sp)
 2005178:	00800584 	movi	r2,22
 200517c:	10c26c36 	bltu	r2,r3,2005b30 <_dtoa_r+0xc30>
 2005180:	180490fa 	slli	r2,r3,3
 2005184:	00c08074 	movhi	r3,513
 2005188:	18fe7504 	addi	r3,r3,-1580
 200518c:	d9800317 	ldw	r6,12(sp)
 2005190:	1885883a 	add	r2,r3,r2
 2005194:	11000017 	ldw	r4,0(r2)
 2005198:	11400117 	ldw	r5,4(r2)
 200519c:	880f883a 	mov	r7,r17
 20051a0:	200a6740 	call	200a674 <__gtdf2>
 20051a4:	00828f0e 	bge	zero,r2,2005be4 <_dtoa_r+0xce4>
 20051a8:	d8800617 	ldw	r2,24(sp)
 20051ac:	d8000d15 	stw	zero,52(sp)
 20051b0:	10bfffc4 	addi	r2,r2,-1
 20051b4:	d8800615 	stw	r2,24(sp)
 20051b8:	ad29c83a 	sub	r20,r21,r20
 20051bc:	a53fffc4 	addi	r20,r20,-1
 20051c0:	a0026616 	blt	r20,zero,2005b5c <_dtoa_r+0xc5c>
 20051c4:	dd000715 	stw	r20,28(sp)
 20051c8:	d8000815 	stw	zero,32(sp)
 20051cc:	d8800617 	ldw	r2,24(sp)
 20051d0:	10025a16 	blt	r2,zero,2005b3c <_dtoa_r+0xc3c>
 20051d4:	d8c00717 	ldw	r3,28(sp)
 20051d8:	d8800b15 	stw	r2,44(sp)
 20051dc:	d8000a15 	stw	zero,40(sp)
 20051e0:	1887883a 	add	r3,r3,r2
 20051e4:	d8c00715 	stw	r3,28(sp)
 20051e8:	d9c00417 	ldw	r7,16(sp)
 20051ec:	00800244 	movi	r2,9
 20051f0:	11c10536 	bltu	r2,r7,2005608 <_dtoa_r+0x708>
 20051f4:	00800144 	movi	r2,5
 20051f8:	11c4c60e 	bge	r2,r7,2006514 <_dtoa_r+0x1614>
 20051fc:	39ffff04 	addi	r7,r7,-4
 2005200:	d9c00415 	stw	r7,16(sp)
 2005204:	0027883a 	mov	r19,zero
 2005208:	d9c00417 	ldw	r7,16(sp)
 200520c:	008000c4 	movi	r2,3
 2005210:	3883a226 	beq	r7,r2,200609c <_dtoa_r+0x119c>
 2005214:	11c2bc16 	blt	r2,r7,2005d08 <_dtoa_r+0xe08>
 2005218:	00800084 	movi	r2,2
 200521c:	3880fb1e 	bne	r7,r2,200560c <_dtoa_r+0x70c>
 2005220:	d8000c15 	stw	zero,48(sp)
 2005224:	d9002117 	ldw	r4,132(sp)
 2005228:	0103ae0e 	bge	zero,r4,20060e4 <_dtoa_r+0x11e4>
 200522c:	2025883a 	mov	r18,r4
 2005230:	d9000e15 	stw	r4,56(sp)
 2005234:	d9000915 	stw	r4,36(sp)
 2005238:	80001115 	stw	zero,68(r16)
 200523c:	008005c4 	movi	r2,23
 2005240:	1484b22e 	bgeu	r2,r18,200650c <_dtoa_r+0x160c>
 2005244:	00c00044 	movi	r3,1
 2005248:	00800104 	movi	r2,4
 200524c:	1085883a 	add	r2,r2,r2
 2005250:	11000504 	addi	r4,r2,20
 2005254:	180b883a 	mov	r5,r3
 2005258:	18c00044 	addi	r3,r3,1
 200525c:	913ffb2e 	bgeu	r18,r4,200524c <_dtoa_r+0x34c>
 2005260:	81401115 	stw	r5,68(r16)
 2005264:	8009883a 	mov	r4,r16
 2005268:	2007a140 	call	2007a14 <_Balloc>
 200526c:	102f883a 	mov	r23,r2
 2005270:	80801015 	stw	r2,64(r16)
 2005274:	00800384 	movi	r2,14
 2005278:	1480f036 	bltu	r2,r18,200563c <_dtoa_r+0x73c>
 200527c:	9800ef26 	beq	r19,zero,200563c <_dtoa_r+0x73c>
 2005280:	d8800617 	ldw	r2,24(sp)
 2005284:	00839c0e 	bge	zero,r2,20060f8 <_dtoa_r+0x11f8>
 2005288:	d8c00617 	ldw	r3,24(sp)
 200528c:	108003cc 	andi	r2,r2,15
 2005290:	100490fa 	slli	r2,r2,3
 2005294:	182bd13a 	srai	r21,r3,4
 2005298:	00c08074 	movhi	r3,513
 200529c:	18fe7504 	addi	r3,r3,-1580
 20052a0:	1885883a 	add	r2,r3,r2
 20052a4:	a8c0040c 	andi	r3,r21,16
 20052a8:	12800017 	ldw	r10,0(r2)
 20052ac:	15800117 	ldw	r22,4(r2)
 20052b0:	18038726 	beq	r3,zero,20060d0 <_dtoa_r+0x11d0>
 20052b4:	00808074 	movhi	r2,513
 20052b8:	10be6b04 	addi	r2,r2,-1620
 20052bc:	11800817 	ldw	r6,32(r2)
 20052c0:	11c00917 	ldw	r7,36(r2)
 20052c4:	d9000317 	ldw	r4,12(sp)
 20052c8:	880b883a 	mov	r5,r17
 20052cc:	da801515 	stw	r10,84(sp)
 20052d0:	200a4080 	call	200a408 <__divdf3>
 20052d4:	da801517 	ldw	r10,84(sp)
 20052d8:	d8801015 	stw	r2,64(sp)
 20052dc:	1829883a 	mov	r20,r3
 20052e0:	ad4003cc 	andi	r21,r21,15
 20052e4:	048000c4 	movi	r18,3
 20052e8:	a8001126 	beq	r21,zero,2005330 <_dtoa_r+0x430>
 20052ec:	04c08074 	movhi	r19,513
 20052f0:	9cfe6b04 	addi	r19,r19,-1620
 20052f4:	5005883a 	mov	r2,r10
 20052f8:	b007883a 	mov	r3,r22
 20052fc:	a980004c 	andi	r6,r21,1
 2005300:	1009883a 	mov	r4,r2
 2005304:	a82bd07a 	srai	r21,r21,1
 2005308:	180b883a 	mov	r5,r3
 200530c:	30000426 	beq	r6,zero,2005320 <_dtoa_r+0x420>
 2005310:	99800017 	ldw	r6,0(r19)
 2005314:	99c00117 	ldw	r7,4(r19)
 2005318:	94800044 	addi	r18,r18,1
 200531c:	200a1240 	call	200a124 <__muldf3>
 2005320:	9cc00204 	addi	r19,r19,8
 2005324:	a83ff51e 	bne	r21,zero,20052fc <_dtoa_r+0x3fc>
 2005328:	1015883a 	mov	r10,r2
 200532c:	182d883a 	mov	r22,r3
 2005330:	d9001017 	ldw	r4,64(sp)
 2005334:	a00b883a 	mov	r5,r20
 2005338:	500d883a 	mov	r6,r10
 200533c:	b00f883a 	mov	r7,r22
 2005340:	200a4080 	call	200a408 <__divdf3>
 2005344:	1027883a 	mov	r19,r2
 2005348:	1829883a 	mov	r20,r3
 200534c:	d8c00d17 	ldw	r3,52(sp)
 2005350:	18000626 	beq	r3,zero,200536c <_dtoa_r+0x46c>
 2005354:	9809883a 	mov	r4,r19
 2005358:	a00b883a 	mov	r5,r20
 200535c:	000d883a 	mov	r6,zero
 2005360:	01cffc34 	movhi	r7,16368
 2005364:	200a73c0 	call	200a73c <__ltdf2>
 2005368:	10040e16 	blt	r2,zero,20063a4 <_dtoa_r+0x14a4>
 200536c:	9009883a 	mov	r4,r18
 2005370:	200a7980 	call	200a798 <__floatsidf>
 2005374:	1009883a 	mov	r4,r2
 2005378:	180b883a 	mov	r5,r3
 200537c:	980d883a 	mov	r6,r19
 2005380:	a00f883a 	mov	r7,r20
 2005384:	200a1240 	call	200a124 <__muldf3>
 2005388:	1009883a 	mov	r4,r2
 200538c:	180b883a 	mov	r5,r3
 2005390:	000d883a 	mov	r6,zero
 2005394:	01d00734 	movhi	r7,16412
 2005398:	200a0700 	call	200a070 <__adddf3>
 200539c:	057f3034 	movhi	r21,64704
 20053a0:	1d6b883a 	add	r21,r3,r21
 20053a4:	d8c00917 	ldw	r3,36(sp)
 20053a8:	1025883a 	mov	r18,r2
 20053ac:	18031f26 	beq	r3,zero,200602c <_dtoa_r+0x112c>
 20053b0:	d8800617 	ldw	r2,24(sp)
 20053b4:	dac00917 	ldw	r11,36(sp)
 20053b8:	d8801315 	stw	r2,76(sp)
 20053bc:	d8c00c17 	ldw	r3,48(sp)
 20053c0:	18039026 	beq	r3,zero,2006204 <_dtoa_r+0x1304>
 20053c4:	58bfffc4 	addi	r2,r11,-1
 20053c8:	100490fa 	slli	r2,r2,3
 20053cc:	00c08074 	movhi	r3,513
 20053d0:	18fe7504 	addi	r3,r3,-1580
 20053d4:	0009883a 	mov	r4,zero
 20053d8:	1885883a 	add	r2,r3,r2
 20053dc:	11800017 	ldw	r6,0(r2)
 20053e0:	11c00117 	ldw	r7,4(r2)
 20053e4:	014ff834 	movhi	r5,16352
 20053e8:	dac01615 	stw	r11,88(sp)
 20053ec:	200a4080 	call	200a408 <__divdf3>
 20053f0:	900d883a 	mov	r6,r18
 20053f4:	a80f883a 	mov	r7,r21
 20053f8:	1009883a 	mov	r4,r2
 20053fc:	180b883a 	mov	r5,r3
 2005400:	200a0c40 	call	200a0c4 <__subdf3>
 2005404:	a00b883a 	mov	r5,r20
 2005408:	9809883a 	mov	r4,r19
 200540c:	182b883a 	mov	r21,r3
 2005410:	d8801015 	stw	r2,64(sp)
 2005414:	200a86c0 	call	200a86c <__fixdfsi>
 2005418:	1009883a 	mov	r4,r2
 200541c:	d8801515 	stw	r2,84(sp)
 2005420:	200a7980 	call	200a798 <__floatsidf>
 2005424:	9809883a 	mov	r4,r19
 2005428:	a00b883a 	mov	r5,r20
 200542c:	100d883a 	mov	r6,r2
 2005430:	180f883a 	mov	r7,r3
 2005434:	200a0c40 	call	200a0c4 <__subdf3>
 2005438:	da401517 	ldw	r9,84(sp)
 200543c:	d9001017 	ldw	r4,64(sp)
 2005440:	a80b883a 	mov	r5,r21
 2005444:	4d000c04 	addi	r20,r9,48
 2005448:	bd000005 	stb	r20,0(r23)
 200544c:	100d883a 	mov	r6,r2
 2005450:	180f883a 	mov	r7,r3
 2005454:	bd800044 	addi	r22,r23,1
 2005458:	1025883a 	mov	r18,r2
 200545c:	1827883a 	mov	r19,r3
 2005460:	200a6740 	call	200a674 <__gtdf2>
 2005464:	00842216 	blt	zero,r2,20064f0 <_dtoa_r+0x15f0>
 2005468:	0009883a 	mov	r4,zero
 200546c:	014ffc34 	movhi	r5,16368
 2005470:	900d883a 	mov	r6,r18
 2005474:	980f883a 	mov	r7,r19
 2005478:	200a0c40 	call	200a0c4 <__subdf3>
 200547c:	d9001017 	ldw	r4,64(sp)
 2005480:	a80b883a 	mov	r5,r21
 2005484:	100d883a 	mov	r6,r2
 2005488:	180f883a 	mov	r7,r3
 200548c:	200a6740 	call	200a674 <__gtdf2>
 2005490:	dac01617 	ldw	r11,88(sp)
 2005494:	00841316 	blt	zero,r2,20064e4 <_dtoa_r+0x15e4>
 2005498:	00800044 	movi	r2,1
 200549c:	12c0670e 	bge	r2,r11,200563c <_dtoa_r+0x73c>
 20054a0:	bad7883a 	add	r11,r23,r11
 20054a4:	df001115 	stw	fp,68(sp)
 20054a8:	dc401215 	stw	r17,72(sp)
 20054ac:	5839883a 	mov	fp,r11
 20054b0:	dc401017 	ldw	r17,64(sp)
 20054b4:	00000806 	br	20054d8 <_dtoa_r+0x5d8>
 20054b8:	200a0c40 	call	200a0c4 <__subdf3>
 20054bc:	1009883a 	mov	r4,r2
 20054c0:	180b883a 	mov	r5,r3
 20054c4:	880d883a 	mov	r6,r17
 20054c8:	a80f883a 	mov	r7,r21
 20054cc:	200a73c0 	call	200a73c <__ltdf2>
 20054d0:	1003ee16 	blt	r2,zero,200648c <_dtoa_r+0x158c>
 20054d4:	b703f126 	beq	r22,fp,200649c <_dtoa_r+0x159c>
 20054d8:	8809883a 	mov	r4,r17
 20054dc:	a80b883a 	mov	r5,r21
 20054e0:	000d883a 	mov	r6,zero
 20054e4:	01d00934 	movhi	r7,16420
 20054e8:	200a1240 	call	200a124 <__muldf3>
 20054ec:	000d883a 	mov	r6,zero
 20054f0:	01d00934 	movhi	r7,16420
 20054f4:	9009883a 	mov	r4,r18
 20054f8:	980b883a 	mov	r5,r19
 20054fc:	1023883a 	mov	r17,r2
 2005500:	182b883a 	mov	r21,r3
 2005504:	200a1240 	call	200a124 <__muldf3>
 2005508:	180b883a 	mov	r5,r3
 200550c:	1009883a 	mov	r4,r2
 2005510:	1825883a 	mov	r18,r3
 2005514:	1027883a 	mov	r19,r2
 2005518:	200a86c0 	call	200a86c <__fixdfsi>
 200551c:	1009883a 	mov	r4,r2
 2005520:	1029883a 	mov	r20,r2
 2005524:	200a7980 	call	200a798 <__floatsidf>
 2005528:	9809883a 	mov	r4,r19
 200552c:	900b883a 	mov	r5,r18
 2005530:	100d883a 	mov	r6,r2
 2005534:	180f883a 	mov	r7,r3
 2005538:	200a0c40 	call	200a0c4 <__subdf3>
 200553c:	a5000c04 	addi	r20,r20,48
 2005540:	b5000005 	stb	r20,0(r22)
 2005544:	1009883a 	mov	r4,r2
 2005548:	180b883a 	mov	r5,r3
 200554c:	880d883a 	mov	r6,r17
 2005550:	a80f883a 	mov	r7,r21
 2005554:	1025883a 	mov	r18,r2
 2005558:	1827883a 	mov	r19,r3
 200555c:	200a73c0 	call	200a73c <__ltdf2>
 2005560:	b5800044 	addi	r22,r22,1
 2005564:	0009883a 	mov	r4,zero
 2005568:	014ffc34 	movhi	r5,16368
 200556c:	900d883a 	mov	r6,r18
 2005570:	980f883a 	mov	r7,r19
 2005574:	103fd00e 	bge	r2,zero,20054b8 <_dtoa_r+0x5b8>
 2005578:	d9001317 	ldw	r4,76(sp)
 200557c:	df001117 	ldw	fp,68(sp)
 2005580:	d9000615 	stw	r4,24(sp)
 2005584:	8009883a 	mov	r4,r16
 2005588:	e00b883a 	mov	r5,fp
 200558c:	2007abc0 	call	2007abc <_Bfree>
 2005590:	d9c00617 	ldw	r7,24(sp)
 2005594:	d8c02217 	ldw	r3,136(sp)
 2005598:	d9002417 	ldw	r4,144(sp)
 200559c:	b0000005 	stb	zero,0(r22)
 20055a0:	38800044 	addi	r2,r7,1
 20055a4:	18800015 	stw	r2,0(r3)
 20055a8:	203e8426 	beq	r4,zero,2004fbc <_dtoa_r+0xbc>
 20055ac:	25800015 	stw	r22,0(r4)
 20055b0:	003e8206 	br	2004fbc <_dtoa_r+0xbc>
 20055b4:	00800434 	movhi	r2,16
 20055b8:	10bfffc4 	addi	r2,r2,-1
 20055bc:	90a4703a 	and	r18,r18,r2
 20055c0:	903e901e 	bne	r18,zero,2005004 <_dtoa_r+0x104>
 20055c4:	05c08074 	movhi	r23,513
 20055c8:	bdfe4d04 	addi	r23,r23,-1740
 20055cc:	003e8f06 	br	200500c <_dtoa_r+0x10c>
 20055d0:	b8800204 	addi	r2,r23,8
 20055d4:	003e9206 	br	2005020 <_dtoa_r+0x120>
 20055d8:	01400434 	movhi	r5,16
 20055dc:	297fffc4 	addi	r5,r5,-1
 20055e0:	894a703a 	and	r5,r17,r5
 20055e4:	d9000317 	ldw	r4,12(sp)
 20055e8:	294ffc34 	orhi	r5,r5,16368
 20055ec:	a53f0044 	addi	r20,r20,-1023
 20055f0:	dd400217 	ldw	r21,8(sp)
 20055f4:	d8000f15 	stw	zero,60(sp)
 20055f8:	003eb106 	br	20050c0 <_dtoa_r+0x1c0>
 20055fc:	05c08074 	movhi	r23,513
 2005600:	bdfe4404 	addi	r23,r23,-1776
 2005604:	003e6d06 	br	2004fbc <_dtoa_r+0xbc>
 2005608:	d8000415 	stw	zero,16(sp)
 200560c:	80001115 	stw	zero,68(r16)
 2005610:	8009883a 	mov	r4,r16
 2005614:	000b883a 	mov	r5,zero
 2005618:	2007a140 	call	2007a14 <_Balloc>
 200561c:	01ffffc4 	movi	r7,-1
 2005620:	102f883a 	mov	r23,r2
 2005624:	80801015 	stw	r2,64(r16)
 2005628:	00800044 	movi	r2,1
 200562c:	d9c00915 	stw	r7,36(sp)
 2005630:	d8002115 	stw	zero,132(sp)
 2005634:	d9c00e15 	stw	r7,56(sp)
 2005638:	d8800c15 	stw	r2,48(sp)
 200563c:	d8800117 	ldw	r2,4(sp)
 2005640:	10008b16 	blt	r2,zero,2005870 <_dtoa_r+0x970>
 2005644:	d9000617 	ldw	r4,24(sp)
 2005648:	00c00384 	movi	r3,14
 200564c:	19008816 	blt	r3,r4,2005870 <_dtoa_r+0x970>
 2005650:	200490fa 	slli	r2,r4,3
 2005654:	d9c02117 	ldw	r7,132(sp)
 2005658:	00c08074 	movhi	r3,513
 200565c:	18fe7504 	addi	r3,r3,-1580
 2005660:	1885883a 	add	r2,r3,r2
 2005664:	14800017 	ldw	r18,0(r2)
 2005668:	14c00117 	ldw	r19,4(r2)
 200566c:	3801c916 	blt	r7,zero,2005d94 <_dtoa_r+0xe94>
 2005670:	d9000317 	ldw	r4,12(sp)
 2005674:	900d883a 	mov	r6,r18
 2005678:	980f883a 	mov	r7,r19
 200567c:	880b883a 	mov	r5,r17
 2005680:	200a4080 	call	200a408 <__divdf3>
 2005684:	180b883a 	mov	r5,r3
 2005688:	1009883a 	mov	r4,r2
 200568c:	200a86c0 	call	200a86c <__fixdfsi>
 2005690:	1009883a 	mov	r4,r2
 2005694:	102b883a 	mov	r21,r2
 2005698:	200a7980 	call	200a798 <__floatsidf>
 200569c:	1009883a 	mov	r4,r2
 20056a0:	180b883a 	mov	r5,r3
 20056a4:	900d883a 	mov	r6,r18
 20056a8:	980f883a 	mov	r7,r19
 20056ac:	200a1240 	call	200a124 <__muldf3>
 20056b0:	d9000317 	ldw	r4,12(sp)
 20056b4:	880b883a 	mov	r5,r17
 20056b8:	100d883a 	mov	r6,r2
 20056bc:	180f883a 	mov	r7,r3
 20056c0:	200a0c40 	call	200a0c4 <__subdf3>
 20056c4:	d9c00917 	ldw	r7,36(sp)
 20056c8:	1009883a 	mov	r4,r2
 20056cc:	a8800c04 	addi	r2,r21,48
 20056d0:	b8800005 	stb	r2,0(r23)
 20056d4:	01800044 	movi	r6,1
 20056d8:	180b883a 	mov	r5,r3
 20056dc:	2005883a 	mov	r2,r4
 20056e0:	bd800044 	addi	r22,r23,1
 20056e4:	39803726 	beq	r7,r6,20057c4 <_dtoa_r+0x8c4>
 20056e8:	000d883a 	mov	r6,zero
 20056ec:	01d00934 	movhi	r7,16420
 20056f0:	200a1240 	call	200a124 <__muldf3>
 20056f4:	1009883a 	mov	r4,r2
 20056f8:	180b883a 	mov	r5,r3
 20056fc:	000d883a 	mov	r6,zero
 2005700:	000f883a 	mov	r7,zero
 2005704:	1029883a 	mov	r20,r2
 2005708:	1823883a 	mov	r17,r3
 200570c:	200a5bc0 	call	200a5bc <__eqdf2>
 2005710:	103f9c26 	beq	r2,zero,2005584 <_dtoa_r+0x684>
 2005714:	dd400917 	ldw	r21,36(sp)
 2005718:	dc000415 	stw	r16,16(sp)
 200571c:	00000906 	br	2005744 <_dtoa_r+0x844>
 2005720:	200a1240 	call	200a124 <__muldf3>
 2005724:	1009883a 	mov	r4,r2
 2005728:	180b883a 	mov	r5,r3
 200572c:	000d883a 	mov	r6,zero
 2005730:	000f883a 	mov	r7,zero
 2005734:	1029883a 	mov	r20,r2
 2005738:	1823883a 	mov	r17,r3
 200573c:	200a5bc0 	call	200a5bc <__eqdf2>
 2005740:	10022926 	beq	r2,zero,2005fe8 <_dtoa_r+0x10e8>
 2005744:	900d883a 	mov	r6,r18
 2005748:	980f883a 	mov	r7,r19
 200574c:	a009883a 	mov	r4,r20
 2005750:	880b883a 	mov	r5,r17
 2005754:	200a4080 	call	200a408 <__divdf3>
 2005758:	180b883a 	mov	r5,r3
 200575c:	1009883a 	mov	r4,r2
 2005760:	200a86c0 	call	200a86c <__fixdfsi>
 2005764:	1009883a 	mov	r4,r2
 2005768:	1021883a 	mov	r16,r2
 200576c:	200a7980 	call	200a798 <__floatsidf>
 2005770:	1009883a 	mov	r4,r2
 2005774:	180b883a 	mov	r5,r3
 2005778:	900d883a 	mov	r6,r18
 200577c:	980f883a 	mov	r7,r19
 2005780:	200a1240 	call	200a124 <__muldf3>
 2005784:	a009883a 	mov	r4,r20
 2005788:	880b883a 	mov	r5,r17
 200578c:	100d883a 	mov	r6,r2
 2005790:	180f883a 	mov	r7,r3
 2005794:	200a0c40 	call	200a0c4 <__subdf3>
 2005798:	82400c04 	addi	r9,r16,48
 200579c:	b2400005 	stb	r9,0(r22)
 20057a0:	b5800044 	addi	r22,r22,1
 20057a4:	b5d3c83a 	sub	r9,r22,r23
 20057a8:	000d883a 	mov	r6,zero
 20057ac:	01d00934 	movhi	r7,16420
 20057b0:	1009883a 	mov	r4,r2
 20057b4:	180b883a 	mov	r5,r3
 20057b8:	aa7fd91e 	bne	r21,r9,2005720 <_dtoa_r+0x820>
 20057bc:	802b883a 	mov	r21,r16
 20057c0:	dc000417 	ldw	r16,16(sp)
 20057c4:	1009883a 	mov	r4,r2
 20057c8:	180b883a 	mov	r5,r3
 20057cc:	100d883a 	mov	r6,r2
 20057d0:	180f883a 	mov	r7,r3
 20057d4:	200a0700 	call	200a070 <__adddf3>
 20057d8:	9009883a 	mov	r4,r18
 20057dc:	980b883a 	mov	r5,r19
 20057e0:	100d883a 	mov	r6,r2
 20057e4:	180f883a 	mov	r7,r3
 20057e8:	1023883a 	mov	r17,r2
 20057ec:	1829883a 	mov	r20,r3
 20057f0:	200a73c0 	call	200a73c <__ltdf2>
 20057f4:	10000816 	blt	r2,zero,2005818 <_dtoa_r+0x918>
 20057f8:	9009883a 	mov	r4,r18
 20057fc:	980b883a 	mov	r5,r19
 2005800:	880d883a 	mov	r6,r17
 2005804:	a00f883a 	mov	r7,r20
 2005808:	200a5bc0 	call	200a5bc <__eqdf2>
 200580c:	103f5d1e 	bne	r2,zero,2005584 <_dtoa_r+0x684>
 2005810:	ad40004c 	andi	r21,r21,1
 2005814:	a83f5b26 	beq	r21,zero,2005584 <_dtoa_r+0x684>
 2005818:	b53fffc3 	ldbu	r20,-1(r22)
 200581c:	b0ffff84 	addi	r3,r22,-2
 2005820:	01400e44 	movi	r5,57
 2005824:	00000306 	br	2005834 <_dtoa_r+0x934>
 2005828:	1d000003 	ldbu	r20,0(r3)
 200582c:	102d883a 	mov	r22,r2
 2005830:	18ffffc4 	addi	r3,r3,-1
 2005834:	a1003fcc 	andi	r4,r20,255
 2005838:	2100201c 	xori	r4,r4,128
 200583c:	213fe004 	addi	r4,r4,-128
 2005840:	b0bfffc4 	addi	r2,r22,-1
 2005844:	2142ca1e 	bne	r4,r5,2006370 <_dtoa_r+0x1470>
 2005848:	b8bff71e 	bne	r23,r2,2005828 <_dtoa_r+0x928>
 200584c:	d8800617 	ldw	r2,24(sp)
 2005850:	05000c44 	movi	r20,49
 2005854:	10800044 	addi	r2,r2,1
 2005858:	d8800615 	stw	r2,24(sp)
 200585c:	00800c04 	movi	r2,48
 2005860:	b8800005 	stb	r2,0(r23)
 2005864:	b805883a 	mov	r2,r23
 2005868:	15000005 	stb	r20,0(r2)
 200586c:	003f4506 	br	2005584 <_dtoa_r+0x684>
 2005870:	d9c00c17 	ldw	r7,48(sp)
 2005874:	3800c926 	beq	r7,zero,2005b9c <_dtoa_r+0xc9c>
 2005878:	d9c00417 	ldw	r7,16(sp)
 200587c:	00c00044 	movi	r3,1
 2005880:	19c16c0e 	bge	r3,r7,2005e34 <_dtoa_r+0xf34>
 2005884:	d9000917 	ldw	r4,36(sp)
 2005888:	d9c00a17 	ldw	r7,40(sp)
 200588c:	24ffffc4 	addi	r19,r4,-1
 2005890:	3cc20716 	blt	r7,r19,20060b0 <_dtoa_r+0x11b0>
 2005894:	3ce7c83a 	sub	r19,r7,r19
 2005898:	d9c00917 	ldw	r7,36(sp)
 200589c:	3802ae16 	blt	r7,zero,2006358 <_dtoa_r+0x1458>
 20058a0:	dc800817 	ldw	r18,32(sp)
 20058a4:	d8800917 	ldw	r2,36(sp)
 20058a8:	d8c00817 	ldw	r3,32(sp)
 20058ac:	d9c00717 	ldw	r7,28(sp)
 20058b0:	8009883a 	mov	r4,r16
 20058b4:	1887883a 	add	r3,r3,r2
 20058b8:	388f883a 	add	r7,r7,r2
 20058bc:	01400044 	movi	r5,1
 20058c0:	d8c00815 	stw	r3,32(sp)
 20058c4:	d9c00715 	stw	r7,28(sp)
 20058c8:	2007e440 	call	2007e44 <__i2b>
 20058cc:	102b883a 	mov	r21,r2
 20058d0:	90000a26 	beq	r18,zero,20058fc <_dtoa_r+0x9fc>
 20058d4:	d8800717 	ldw	r2,28(sp)
 20058d8:	0080080e 	bge	zero,r2,20058fc <_dtoa_r+0x9fc>
 20058dc:	90812b16 	blt	r18,r2,2005d8c <_dtoa_r+0xe8c>
 20058e0:	d8c00817 	ldw	r3,32(sp)
 20058e4:	d9000717 	ldw	r4,28(sp)
 20058e8:	90a5c83a 	sub	r18,r18,r2
 20058ec:	1887c83a 	sub	r3,r3,r2
 20058f0:	2089c83a 	sub	r4,r4,r2
 20058f4:	d8c00815 	stw	r3,32(sp)
 20058f8:	d9000715 	stw	r4,28(sp)
 20058fc:	d9c00a17 	ldw	r7,40(sp)
 2005900:	01c0140e 	bge	zero,r7,2005954 <_dtoa_r+0xa54>
 2005904:	d8800c17 	ldw	r2,48(sp)
 2005908:	1001de26 	beq	r2,zero,2006084 <_dtoa_r+0x1184>
 200590c:	04c00e0e 	bge	zero,r19,2005948 <_dtoa_r+0xa48>
 2005910:	a80b883a 	mov	r5,r21
 2005914:	8009883a 	mov	r4,r16
 2005918:	980d883a 	mov	r6,r19
 200591c:	20080d80 	call	20080d8 <__pow5mult>
 2005920:	e00d883a 	mov	r6,fp
 2005924:	8009883a 	mov	r4,r16
 2005928:	100b883a 	mov	r5,r2
 200592c:	102b883a 	mov	r21,r2
 2005930:	2007e800 	call	2007e80 <__multiply>
 2005934:	1029883a 	mov	r20,r2
 2005938:	e00b883a 	mov	r5,fp
 200593c:	8009883a 	mov	r4,r16
 2005940:	2007abc0 	call	2007abc <_Bfree>
 2005944:	a039883a 	mov	fp,r20
 2005948:	d8c00a17 	ldw	r3,40(sp)
 200594c:	1ccdc83a 	sub	r6,r3,r19
 2005950:	3001291e 	bne	r6,zero,2005df8 <_dtoa_r+0xef8>
 2005954:	8009883a 	mov	r4,r16
 2005958:	01400044 	movi	r5,1
 200595c:	2007e440 	call	2007e44 <__i2b>
 2005960:	d9000b17 	ldw	r4,44(sp)
 2005964:	1029883a 	mov	r20,r2
 2005968:	0100050e 	bge	zero,r4,2005980 <_dtoa_r+0xa80>
 200596c:	d9800b17 	ldw	r6,44(sp)
 2005970:	8009883a 	mov	r4,r16
 2005974:	100b883a 	mov	r5,r2
 2005978:	20080d80 	call	20080d8 <__pow5mult>
 200597c:	1029883a 	mov	r20,r2
 2005980:	d9c00417 	ldw	r7,16(sp)
 2005984:	00800044 	movi	r2,1
 2005988:	11c0f00e 	bge	r2,r7,2005d4c <_dtoa_r+0xe4c>
 200598c:	0023883a 	mov	r17,zero
 2005990:	d8800b17 	ldw	r2,44(sp)
 2005994:	1001741e 	bne	r2,zero,2005f68 <_dtoa_r+0x1068>
 2005998:	00800044 	movi	r2,1
 200599c:	d8c00717 	ldw	r3,28(sp)
 20059a0:	10c5883a 	add	r2,r2,r3
 20059a4:	108007cc 	andi	r2,r2,31
 20059a8:	10008026 	beq	r2,zero,2005bac <_dtoa_r+0xcac>
 20059ac:	01000804 	movi	r4,32
 20059b0:	2089c83a 	sub	r4,r4,r2
 20059b4:	00c00104 	movi	r3,4
 20059b8:	1902d00e 	bge	r3,r4,20064fc <_dtoa_r+0x15fc>
 20059bc:	d9000817 	ldw	r4,32(sp)
 20059c0:	d9c00717 	ldw	r7,28(sp)
 20059c4:	00c00704 	movi	r3,28
 20059c8:	1885c83a 	sub	r2,r3,r2
 20059cc:	2089883a 	add	r4,r4,r2
 20059d0:	388f883a 	add	r7,r7,r2
 20059d4:	d9000815 	stw	r4,32(sp)
 20059d8:	90a5883a 	add	r18,r18,r2
 20059dc:	d9c00715 	stw	r7,28(sp)
 20059e0:	d9c00817 	ldw	r7,32(sp)
 20059e4:	01c0050e 	bge	zero,r7,20059fc <_dtoa_r+0xafc>
 20059e8:	e00b883a 	mov	r5,fp
 20059ec:	8009883a 	mov	r4,r16
 20059f0:	380d883a 	mov	r6,r7
 20059f4:	20082040 	call	2008204 <__lshift>
 20059f8:	1039883a 	mov	fp,r2
 20059fc:	d8800717 	ldw	r2,28(sp)
 2005a00:	0080050e 	bge	zero,r2,2005a18 <_dtoa_r+0xb18>
 2005a04:	a00b883a 	mov	r5,r20
 2005a08:	8009883a 	mov	r4,r16
 2005a0c:	100d883a 	mov	r6,r2
 2005a10:	20082040 	call	2008204 <__lshift>
 2005a14:	1029883a 	mov	r20,r2
 2005a18:	d8c00d17 	ldw	r3,52(sp)
 2005a1c:	1801401e 	bne	r3,zero,2005f20 <_dtoa_r+0x1020>
 2005a20:	d8800917 	ldw	r2,36(sp)
 2005a24:	00815a0e 	bge	zero,r2,2005f90 <_dtoa_r+0x1090>
 2005a28:	d8c00c17 	ldw	r3,48(sp)
 2005a2c:	18006f1e 	bne	r3,zero,2005bec <_dtoa_r+0xcec>
 2005a30:	b823883a 	mov	r17,r23
 2005a34:	dc800917 	ldw	r18,36(sp)
 2005a38:	00000206 	br	2005a44 <_dtoa_r+0xb44>
 2005a3c:	2007ae40 	call	2007ae4 <__multadd>
 2005a40:	1039883a 	mov	fp,r2
 2005a44:	e009883a 	mov	r4,fp
 2005a48:	a00b883a 	mov	r5,r20
 2005a4c:	2004cc40 	call	2004cc4 <quorem>
 2005a50:	10800c04 	addi	r2,r2,48
 2005a54:	88800005 	stb	r2,0(r17)
 2005a58:	8c400044 	addi	r17,r17,1
 2005a5c:	8dc7c83a 	sub	r3,r17,r23
 2005a60:	8009883a 	mov	r4,r16
 2005a64:	e00b883a 	mov	r5,fp
 2005a68:	01800284 	movi	r6,10
 2005a6c:	000f883a 	mov	r7,zero
 2005a70:	1cbff216 	blt	r3,r18,2005a3c <_dtoa_r+0xb3c>
 2005a74:	dd800917 	ldw	r22,36(sp)
 2005a78:	1007883a 	mov	r3,r2
 2005a7c:	05823a0e 	bge	zero,r22,2006368 <_dtoa_r+0x1468>
 2005a80:	bdad883a 	add	r22,r23,r22
 2005a84:	0023883a 	mov	r17,zero
 2005a88:	e00b883a 	mov	r5,fp
 2005a8c:	01800044 	movi	r6,1
 2005a90:	8009883a 	mov	r4,r16
 2005a94:	d8c01515 	stw	r3,84(sp)
 2005a98:	20082040 	call	2008204 <__lshift>
 2005a9c:	1009883a 	mov	r4,r2
 2005aa0:	a00b883a 	mov	r5,r20
 2005aa4:	1039883a 	mov	fp,r2
 2005aa8:	20083600 	call	2008360 <__mcmp>
 2005aac:	d8c01517 	ldw	r3,84(sp)
 2005ab0:	0080d60e 	bge	zero,r2,2005e0c <_dtoa_r+0xf0c>
 2005ab4:	b13fffc3 	ldbu	r4,-1(r22)
 2005ab8:	b0ffff84 	addi	r3,r22,-2
 2005abc:	01800e44 	movi	r6,57
 2005ac0:	00000306 	br	2005ad0 <_dtoa_r+0xbd0>
 2005ac4:	19000003 	ldbu	r4,0(r3)
 2005ac8:	102d883a 	mov	r22,r2
 2005acc:	18ffffc4 	addi	r3,r3,-1
 2005ad0:	21403fcc 	andi	r5,r4,255
 2005ad4:	2940201c 	xori	r5,r5,128
 2005ad8:	297fe004 	addi	r5,r5,-128
 2005adc:	b0bfffc4 	addi	r2,r22,-1
 2005ae0:	2981a71e 	bne	r5,r6,2006180 <_dtoa_r+0x1280>
 2005ae4:	b8bff71e 	bne	r23,r2,2005ac4 <_dtoa_r+0xbc4>
 2005ae8:	d8800617 	ldw	r2,24(sp)
 2005aec:	10800044 	addi	r2,r2,1
 2005af0:	d8800615 	stw	r2,24(sp)
 2005af4:	00800c44 	movi	r2,49
 2005af8:	b8800005 	stb	r2,0(r23)
 2005afc:	8009883a 	mov	r4,r16
 2005b00:	a00b883a 	mov	r5,r20
 2005b04:	2007abc0 	call	2007abc <_Bfree>
 2005b08:	a83e9e26 	beq	r21,zero,2005584 <_dtoa_r+0x684>
 2005b0c:	88000426 	beq	r17,zero,2005b20 <_dtoa_r+0xc20>
 2005b10:	8d400326 	beq	r17,r21,2005b20 <_dtoa_r+0xc20>
 2005b14:	8009883a 	mov	r4,r16
 2005b18:	880b883a 	mov	r5,r17
 2005b1c:	2007abc0 	call	2007abc <_Bfree>
 2005b20:	8009883a 	mov	r4,r16
 2005b24:	a80b883a 	mov	r5,r21
 2005b28:	2007abc0 	call	2007abc <_Bfree>
 2005b2c:	003e9506 	br	2005584 <_dtoa_r+0x684>
 2005b30:	00c00044 	movi	r3,1
 2005b34:	d8c00d15 	stw	r3,52(sp)
 2005b38:	003d9f06 	br	20051b8 <_dtoa_r+0x2b8>
 2005b3c:	d9000817 	ldw	r4,32(sp)
 2005b40:	d8800617 	ldw	r2,24(sp)
 2005b44:	d8000b15 	stw	zero,44(sp)
 2005b48:	2089c83a 	sub	r4,r4,r2
 2005b4c:	0087c83a 	sub	r3,zero,r2
 2005b50:	d9000815 	stw	r4,32(sp)
 2005b54:	d8c00a15 	stw	r3,40(sp)
 2005b58:	003da306 	br	20051e8 <_dtoa_r+0x2e8>
 2005b5c:	0529c83a 	sub	r20,zero,r20
 2005b60:	dd000815 	stw	r20,32(sp)
 2005b64:	d8000715 	stw	zero,28(sp)
 2005b68:	003d9806 	br	20051cc <_dtoa_r+0x2cc>
 2005b6c:	d9000617 	ldw	r4,24(sp)
 2005b70:	200a7980 	call	200a798 <__floatsidf>
 2005b74:	1009883a 	mov	r4,r2
 2005b78:	180b883a 	mov	r5,r3
 2005b7c:	980d883a 	mov	r6,r19
 2005b80:	900f883a 	mov	r7,r18
 2005b84:	200a6180 	call	200a618 <__nedf2>
 2005b88:	103d7a26 	beq	r2,zero,2005174 <_dtoa_r+0x274>
 2005b8c:	d8800617 	ldw	r2,24(sp)
 2005b90:	10bfffc4 	addi	r2,r2,-1
 2005b94:	d8800615 	stw	r2,24(sp)
 2005b98:	003d7606 	br	2005174 <_dtoa_r+0x274>
 2005b9c:	dcc00a17 	ldw	r19,40(sp)
 2005ba0:	dc800817 	ldw	r18,32(sp)
 2005ba4:	002b883a 	mov	r21,zero
 2005ba8:	003f4906 	br	20058d0 <_dtoa_r+0x9d0>
 2005bac:	00800704 	movi	r2,28
 2005bb0:	d8c00817 	ldw	r3,32(sp)
 2005bb4:	d9000717 	ldw	r4,28(sp)
 2005bb8:	90a5883a 	add	r18,r18,r2
 2005bbc:	1887883a 	add	r3,r3,r2
 2005bc0:	2089883a 	add	r4,r4,r2
 2005bc4:	d8c00815 	stw	r3,32(sp)
 2005bc8:	d9000715 	stw	r4,28(sp)
 2005bcc:	003f8406 	br	20059e0 <_dtoa_r+0xae0>
 2005bd0:	d9c00317 	ldw	r7,12(sp)
 2005bd4:	013efb84 	movi	r4,-1042
 2005bd8:	2509c83a 	sub	r4,r4,r20
 2005bdc:	3908983a 	sll	r4,r7,r4
 2005be0:	003d3006 	br	20050a4 <_dtoa_r+0x1a4>
 2005be4:	d8000d15 	stw	zero,52(sp)
 2005be8:	003d7306 	br	20051b8 <_dtoa_r+0x2b8>
 2005bec:	0480050e 	bge	zero,r18,2005c04 <_dtoa_r+0xd04>
 2005bf0:	a80b883a 	mov	r5,r21
 2005bf4:	8009883a 	mov	r4,r16
 2005bf8:	900d883a 	mov	r6,r18
 2005bfc:	20082040 	call	2008204 <__lshift>
 2005c00:	102b883a 	mov	r21,r2
 2005c04:	8801611e 	bne	r17,zero,200618c <_dtoa_r+0x128c>
 2005c08:	a827883a 	mov	r19,r21
 2005c0c:	d8c00317 	ldw	r3,12(sp)
 2005c10:	d9000917 	ldw	r4,36(sp)
 2005c14:	b8bfffc4 	addi	r2,r23,-1
 2005c18:	18c0004c 	andi	r3,r3,1
 2005c1c:	1105883a 	add	r2,r2,r4
 2005c20:	b825883a 	mov	r18,r23
 2005c24:	d8800515 	stw	r2,20(sp)
 2005c28:	a823883a 	mov	r17,r21
 2005c2c:	d8c00315 	stw	r3,12(sp)
 2005c30:	ddc00715 	stw	r23,28(sp)
 2005c34:	e009883a 	mov	r4,fp
 2005c38:	a00b883a 	mov	r5,r20
 2005c3c:	2004cc40 	call	2004cc4 <quorem>
 2005c40:	e009883a 	mov	r4,fp
 2005c44:	880b883a 	mov	r5,r17
 2005c48:	102d883a 	mov	r22,r2
 2005c4c:	20083600 	call	2008360 <__mcmp>
 2005c50:	980d883a 	mov	r6,r19
 2005c54:	8009883a 	mov	r4,r16
 2005c58:	a00b883a 	mov	r5,r20
 2005c5c:	102b883a 	mov	r21,r2
 2005c60:	20083b80 	call	20083b8 <__mdiff>
 2005c64:	100d883a 	mov	r6,r2
 2005c68:	10800317 	ldw	r2,12(r2)
 2005c6c:	b5c00c04 	addi	r23,r22,48
 2005c70:	10008c26 	beq	r2,zero,2005ea4 <_dtoa_r+0xfa4>
 2005c74:	8009883a 	mov	r4,r16
 2005c78:	300b883a 	mov	r5,r6
 2005c7c:	2007abc0 	call	2007abc <_Bfree>
 2005c80:	00800044 	movi	r2,1
 2005c84:	a8007116 	blt	r21,zero,2005e4c <_dtoa_r+0xf4c>
 2005c88:	a800041e 	bne	r21,zero,2005c9c <_dtoa_r+0xd9c>
 2005c8c:	d9c00417 	ldw	r7,16(sp)
 2005c90:	3800021e 	bne	r7,zero,2005c9c <_dtoa_r+0xd9c>
 2005c94:	d8c00317 	ldw	r3,12(sp)
 2005c98:	18006c26 	beq	r3,zero,2005e4c <_dtoa_r+0xf4c>
 2005c9c:	00814c16 	blt	zero,r2,20061d0 <_dtoa_r+0x12d0>
 2005ca0:	d8c00517 	ldw	r3,20(sp)
 2005ca4:	95400044 	addi	r21,r18,1
 2005ca8:	95c00005 	stb	r23,0(r18)
 2005cac:	a82d883a 	mov	r22,r21
 2005cb0:	90c14d26 	beq	r18,r3,20061e8 <_dtoa_r+0x12e8>
 2005cb4:	e00b883a 	mov	r5,fp
 2005cb8:	8009883a 	mov	r4,r16
 2005cbc:	01800284 	movi	r6,10
 2005cc0:	000f883a 	mov	r7,zero
 2005cc4:	2007ae40 	call	2007ae4 <__multadd>
 2005cc8:	1039883a 	mov	fp,r2
 2005ccc:	8cc08b26 	beq	r17,r19,2005efc <_dtoa_r+0xffc>
 2005cd0:	880b883a 	mov	r5,r17
 2005cd4:	01800284 	movi	r6,10
 2005cd8:	000f883a 	mov	r7,zero
 2005cdc:	8009883a 	mov	r4,r16
 2005ce0:	2007ae40 	call	2007ae4 <__multadd>
 2005ce4:	980b883a 	mov	r5,r19
 2005ce8:	8009883a 	mov	r4,r16
 2005cec:	01800284 	movi	r6,10
 2005cf0:	000f883a 	mov	r7,zero
 2005cf4:	1023883a 	mov	r17,r2
 2005cf8:	2007ae40 	call	2007ae4 <__multadd>
 2005cfc:	1027883a 	mov	r19,r2
 2005d00:	a825883a 	mov	r18,r21
 2005d04:	003fcb06 	br	2005c34 <_dtoa_r+0xd34>
 2005d08:	d9c00417 	ldw	r7,16(sp)
 2005d0c:	00800104 	movi	r2,4
 2005d10:	3880e426 	beq	r7,r2,20060a4 <_dtoa_r+0x11a4>
 2005d14:	00800144 	movi	r2,5
 2005d18:	38be3c1e 	bne	r7,r2,200560c <_dtoa_r+0x70c>
 2005d1c:	00c00044 	movi	r3,1
 2005d20:	d8c00c15 	stw	r3,48(sp)
 2005d24:	d9c02117 	ldw	r7,132(sp)
 2005d28:	d8800617 	ldw	r2,24(sp)
 2005d2c:	388f883a 	add	r7,r7,r2
 2005d30:	3c800044 	addi	r18,r7,1
 2005d34:	d9c00e15 	stw	r7,56(sp)
 2005d38:	dc800915 	stw	r18,36(sp)
 2005d3c:	04bd3e16 	blt	zero,r18,2005238 <_dtoa_r+0x338>
 2005d40:	80001115 	stw	zero,68(r16)
 2005d44:	000b883a 	mov	r5,zero
 2005d48:	003d4606 	br	2005264 <_dtoa_r+0x364>
 2005d4c:	d8c00317 	ldw	r3,12(sp)
 2005d50:	183f0e1e 	bne	r3,zero,200598c <_dtoa_r+0xa8c>
 2005d54:	00c00434 	movhi	r3,16
 2005d58:	18ffffc4 	addi	r3,r3,-1
 2005d5c:	88c6703a 	and	r3,r17,r3
 2005d60:	183f0a1e 	bne	r3,zero,200598c <_dtoa_r+0xa8c>
 2005d64:	8c5ffc2c 	andhi	r17,r17,32752
 2005d68:	883f0826 	beq	r17,zero,200598c <_dtoa_r+0xa8c>
 2005d6c:	d9000817 	ldw	r4,32(sp)
 2005d70:	d9c00717 	ldw	r7,28(sp)
 2005d74:	1023883a 	mov	r17,r2
 2005d78:	2089883a 	add	r4,r4,r2
 2005d7c:	388f883a 	add	r7,r7,r2
 2005d80:	d9000815 	stw	r4,32(sp)
 2005d84:	d9c00715 	stw	r7,28(sp)
 2005d88:	003f0106 	br	2005990 <_dtoa_r+0xa90>
 2005d8c:	9005883a 	mov	r2,r18
 2005d90:	003ed306 	br	20058e0 <_dtoa_r+0x9e0>
 2005d94:	d8800917 	ldw	r2,36(sp)
 2005d98:	00be3516 	blt	zero,r2,2005670 <_dtoa_r+0x770>
 2005d9c:	1000b61e 	bne	r2,zero,2006078 <_dtoa_r+0x1178>
 2005da0:	9009883a 	mov	r4,r18
 2005da4:	980b883a 	mov	r5,r19
 2005da8:	000d883a 	mov	r6,zero
 2005dac:	01d00534 	movhi	r7,16404
 2005db0:	200a1240 	call	200a124 <__muldf3>
 2005db4:	d9800317 	ldw	r6,12(sp)
 2005db8:	1009883a 	mov	r4,r2
 2005dbc:	180b883a 	mov	r5,r3
 2005dc0:	880f883a 	mov	r7,r17
 2005dc4:	200a6d80 	call	200a6d8 <__gedf2>
 2005dc8:	0029883a 	mov	r20,zero
 2005dcc:	002b883a 	mov	r21,zero
 2005dd0:	10007e16 	blt	r2,zero,2005fcc <_dtoa_r+0x10cc>
 2005dd4:	d8802117 	ldw	r2,132(sp)
 2005dd8:	b82d883a 	mov	r22,r23
 2005ddc:	0084303a 	nor	r2,zero,r2
 2005de0:	d8800615 	stw	r2,24(sp)
 2005de4:	8009883a 	mov	r4,r16
 2005de8:	a00b883a 	mov	r5,r20
 2005dec:	2007abc0 	call	2007abc <_Bfree>
 2005df0:	a83f4b1e 	bne	r21,zero,2005b20 <_dtoa_r+0xc20>
 2005df4:	003de306 	br	2005584 <_dtoa_r+0x684>
 2005df8:	e00b883a 	mov	r5,fp
 2005dfc:	8009883a 	mov	r4,r16
 2005e00:	20080d80 	call	20080d8 <__pow5mult>
 2005e04:	1039883a 	mov	fp,r2
 2005e08:	003ed206 	br	2005954 <_dtoa_r+0xa54>
 2005e0c:	1000021e 	bne	r2,zero,2005e18 <_dtoa_r+0xf18>
 2005e10:	18c0004c 	andi	r3,r3,1
 2005e14:	183f271e 	bne	r3,zero,2005ab4 <_dtoa_r+0xbb4>
 2005e18:	01000c04 	movi	r4,48
 2005e1c:	00000106 	br	2005e24 <_dtoa_r+0xf24>
 2005e20:	102d883a 	mov	r22,r2
 2005e24:	b0bfffc4 	addi	r2,r22,-1
 2005e28:	10c00007 	ldb	r3,0(r2)
 2005e2c:	193ffc26 	beq	r3,r4,2005e20 <_dtoa_r+0xf20>
 2005e30:	003f3206 	br	2005afc <_dtoa_r+0xbfc>
 2005e34:	d8c00f17 	ldw	r3,60(sp)
 2005e38:	18015026 	beq	r3,zero,200637c <_dtoa_r+0x147c>
 2005e3c:	10810cc4 	addi	r2,r2,1075
 2005e40:	dcc00a17 	ldw	r19,40(sp)
 2005e44:	dc800817 	ldw	r18,32(sp)
 2005e48:	003e9706 	br	20058a8 <_dtoa_r+0x9a8>
 2005e4c:	b807883a 	mov	r3,r23
 2005e50:	182b883a 	mov	r21,r3
 2005e54:	ddc00717 	ldw	r23,28(sp)
 2005e58:	00800e0e 	bge	zero,r2,2005e94 <_dtoa_r+0xf94>
 2005e5c:	e00b883a 	mov	r5,fp
 2005e60:	01800044 	movi	r6,1
 2005e64:	8009883a 	mov	r4,r16
 2005e68:	d8c01515 	stw	r3,84(sp)
 2005e6c:	20082040 	call	2008204 <__lshift>
 2005e70:	1009883a 	mov	r4,r2
 2005e74:	a00b883a 	mov	r5,r20
 2005e78:	1039883a 	mov	fp,r2
 2005e7c:	20083600 	call	2008360 <__mcmp>
 2005e80:	d8c01517 	ldw	r3,84(sp)
 2005e84:	0081880e 	bge	zero,r2,20064a8 <_dtoa_r+0x15a8>
 2005e88:	00800e44 	movi	r2,57
 2005e8c:	b0c00c44 	addi	r3,r22,49
 2005e90:	a8816326 	beq	r21,r2,2006420 <_dtoa_r+0x1520>
 2005e94:	90c00005 	stb	r3,0(r18)
 2005e98:	95800044 	addi	r22,r18,1
 2005e9c:	982b883a 	mov	r21,r19
 2005ea0:	003f1606 	br	2005afc <_dtoa_r+0xbfc>
 2005ea4:	300b883a 	mov	r5,r6
 2005ea8:	e009883a 	mov	r4,fp
 2005eac:	d9801515 	stw	r6,84(sp)
 2005eb0:	20083600 	call	2008360 <__mcmp>
 2005eb4:	d9801517 	ldw	r6,84(sp)
 2005eb8:	8009883a 	mov	r4,r16
 2005ebc:	d8801515 	stw	r2,84(sp)
 2005ec0:	300b883a 	mov	r5,r6
 2005ec4:	2007abc0 	call	2007abc <_Bfree>
 2005ec8:	d8801517 	ldw	r2,84(sp)
 2005ecc:	103f6d1e 	bne	r2,zero,2005c84 <_dtoa_r+0xd84>
 2005ed0:	d9c00417 	ldw	r7,16(sp)
 2005ed4:	383f6b1e 	bne	r7,zero,2005c84 <_dtoa_r+0xd84>
 2005ed8:	d8c00317 	ldw	r3,12(sp)
 2005edc:	183f691e 	bne	r3,zero,2005c84 <_dtoa_r+0xd84>
 2005ee0:	b807883a 	mov	r3,r23
 2005ee4:	00800e44 	movi	r2,57
 2005ee8:	ddc00717 	ldw	r23,28(sp)
 2005eec:	18814c26 	beq	r3,r2,2006420 <_dtoa_r+0x1520>
 2005ef0:	057fe80e 	bge	zero,r21,2005e94 <_dtoa_r+0xf94>
 2005ef4:	b0c00c44 	addi	r3,r22,49
 2005ef8:	003fe606 	br	2005e94 <_dtoa_r+0xf94>
 2005efc:	880b883a 	mov	r5,r17
 2005f00:	8009883a 	mov	r4,r16
 2005f04:	01800284 	movi	r6,10
 2005f08:	000f883a 	mov	r7,zero
 2005f0c:	2007ae40 	call	2007ae4 <__multadd>
 2005f10:	1023883a 	mov	r17,r2
 2005f14:	1027883a 	mov	r19,r2
 2005f18:	a825883a 	mov	r18,r21
 2005f1c:	003f4506 	br	2005c34 <_dtoa_r+0xd34>
 2005f20:	e009883a 	mov	r4,fp
 2005f24:	a00b883a 	mov	r5,r20
 2005f28:	20083600 	call	2008360 <__mcmp>
 2005f2c:	103ebc0e 	bge	r2,zero,2005a20 <_dtoa_r+0xb20>
 2005f30:	e00b883a 	mov	r5,fp
 2005f34:	8009883a 	mov	r4,r16
 2005f38:	01800284 	movi	r6,10
 2005f3c:	000f883a 	mov	r7,zero
 2005f40:	2007ae40 	call	2007ae4 <__multadd>
 2005f44:	1039883a 	mov	fp,r2
 2005f48:	d8800617 	ldw	r2,24(sp)
 2005f4c:	d8c00c17 	ldw	r3,48(sp)
 2005f50:	10bfffc4 	addi	r2,r2,-1
 2005f54:	d8800615 	stw	r2,24(sp)
 2005f58:	1801571e 	bne	r3,zero,20064b8 <_dtoa_r+0x15b8>
 2005f5c:	d9c00e17 	ldw	r7,56(sp)
 2005f60:	d9c00915 	stw	r7,36(sp)
 2005f64:	003eae06 	br	2005a20 <_dtoa_r+0xb20>
 2005f68:	a0800417 	ldw	r2,16(r20)
 2005f6c:	10800104 	addi	r2,r2,4
 2005f70:	1085883a 	add	r2,r2,r2
 2005f74:	1085883a 	add	r2,r2,r2
 2005f78:	a085883a 	add	r2,r20,r2
 2005f7c:	11000017 	ldw	r4,0(r2)
 2005f80:	2007d2c0 	call	2007d2c <__hi0bits>
 2005f84:	00c00804 	movi	r3,32
 2005f88:	1885c83a 	sub	r2,r3,r2
 2005f8c:	003e8306 	br	200599c <_dtoa_r+0xa9c>
 2005f90:	d9c00417 	ldw	r7,16(sp)
 2005f94:	00800084 	movi	r2,2
 2005f98:	11fea30e 	bge	r2,r7,2005a28 <_dtoa_r+0xb28>
 2005f9c:	d8800917 	ldw	r2,36(sp)
 2005fa0:	103f8c1e 	bne	r2,zero,2005dd4 <_dtoa_r+0xed4>
 2005fa4:	a00b883a 	mov	r5,r20
 2005fa8:	8009883a 	mov	r4,r16
 2005fac:	01800144 	movi	r6,5
 2005fb0:	000f883a 	mov	r7,zero
 2005fb4:	2007ae40 	call	2007ae4 <__multadd>
 2005fb8:	e009883a 	mov	r4,fp
 2005fbc:	100b883a 	mov	r5,r2
 2005fc0:	1029883a 	mov	r20,r2
 2005fc4:	20083600 	call	2008360 <__mcmp>
 2005fc8:	00bf820e 	bge	zero,r2,2005dd4 <_dtoa_r+0xed4>
 2005fcc:	00800c44 	movi	r2,49
 2005fd0:	b8800005 	stb	r2,0(r23)
 2005fd4:	d8800617 	ldw	r2,24(sp)
 2005fd8:	bd800044 	addi	r22,r23,1
 2005fdc:	10800044 	addi	r2,r2,1
 2005fe0:	d8800615 	stw	r2,24(sp)
 2005fe4:	003f7f06 	br	2005de4 <_dtoa_r+0xee4>
 2005fe8:	dc000417 	ldw	r16,16(sp)
 2005fec:	003d6506 	br	2005584 <_dtoa_r+0x684>
 2005ff0:	9009883a 	mov	r4,r18
 2005ff4:	200a7980 	call	200a798 <__floatsidf>
 2005ff8:	1009883a 	mov	r4,r2
 2005ffc:	180b883a 	mov	r5,r3
 2006000:	980d883a 	mov	r6,r19
 2006004:	a00f883a 	mov	r7,r20
 2006008:	200a1240 	call	200a124 <__muldf3>
 200600c:	1009883a 	mov	r4,r2
 2006010:	180b883a 	mov	r5,r3
 2006014:	000d883a 	mov	r6,zero
 2006018:	01d00734 	movhi	r7,16412
 200601c:	200a0700 	call	200a070 <__adddf3>
 2006020:	057f3034 	movhi	r21,64704
 2006024:	1025883a 	mov	r18,r2
 2006028:	1d6b883a 	add	r21,r3,r21
 200602c:	9809883a 	mov	r4,r19
 2006030:	a00b883a 	mov	r5,r20
 2006034:	000d883a 	mov	r6,zero
 2006038:	01d00534 	movhi	r7,16404
 200603c:	200a0c40 	call	200a0c4 <__subdf3>
 2006040:	1009883a 	mov	r4,r2
 2006044:	180b883a 	mov	r5,r3
 2006048:	900d883a 	mov	r6,r18
 200604c:	a80f883a 	mov	r7,r21
 2006050:	1027883a 	mov	r19,r2
 2006054:	1829883a 	mov	r20,r3
 2006058:	200a6740 	call	200a674 <__gtdf2>
 200605c:	00806616 	blt	zero,r2,20061f8 <_dtoa_r+0x12f8>
 2006060:	a9e0003c 	xorhi	r7,r21,32768
 2006064:	9809883a 	mov	r4,r19
 2006068:	a00b883a 	mov	r5,r20
 200606c:	900d883a 	mov	r6,r18
 2006070:	200a73c0 	call	200a73c <__ltdf2>
 2006074:	103d710e 	bge	r2,zero,200563c <_dtoa_r+0x73c>
 2006078:	0029883a 	mov	r20,zero
 200607c:	002b883a 	mov	r21,zero
 2006080:	003f5406 	br	2005dd4 <_dtoa_r+0xed4>
 2006084:	d9800a17 	ldw	r6,40(sp)
 2006088:	e00b883a 	mov	r5,fp
 200608c:	8009883a 	mov	r4,r16
 2006090:	20080d80 	call	20080d8 <__pow5mult>
 2006094:	1039883a 	mov	fp,r2
 2006098:	003e2e06 	br	2005954 <_dtoa_r+0xa54>
 200609c:	d8000c15 	stw	zero,48(sp)
 20060a0:	003f2006 	br	2005d24 <_dtoa_r+0xe24>
 20060a4:	00800044 	movi	r2,1
 20060a8:	d8800c15 	stw	r2,48(sp)
 20060ac:	003c5d06 	br	2005224 <_dtoa_r+0x324>
 20060b0:	d8c00a17 	ldw	r3,40(sp)
 20060b4:	d9000b17 	ldw	r4,44(sp)
 20060b8:	dcc00a15 	stw	r19,40(sp)
 20060bc:	98c5c83a 	sub	r2,r19,r3
 20060c0:	2089883a 	add	r4,r4,r2
 20060c4:	d9000b15 	stw	r4,44(sp)
 20060c8:	0027883a 	mov	r19,zero
 20060cc:	003df206 	br	2005898 <_dtoa_r+0x998>
 20060d0:	d9000317 	ldw	r4,12(sp)
 20060d4:	8829883a 	mov	r20,r17
 20060d8:	04800084 	movi	r18,2
 20060dc:	d9001015 	stw	r4,64(sp)
 20060e0:	003c8106 	br	20052e8 <_dtoa_r+0x3e8>
 20060e4:	04800044 	movi	r18,1
 20060e8:	dc800e15 	stw	r18,56(sp)
 20060ec:	dc800915 	stw	r18,36(sp)
 20060f0:	dc802115 	stw	r18,132(sp)
 20060f4:	003f1206 	br	2005d40 <_dtoa_r+0xe40>
 20060f8:	d8800617 	ldw	r2,24(sp)
 20060fc:	00abc83a 	sub	r21,zero,r2
 2006100:	a800a426 	beq	r21,zero,2006394 <_dtoa_r+0x1494>
 2006104:	a88003cc 	andi	r2,r21,15
 2006108:	100490fa 	slli	r2,r2,3
 200610c:	00c08074 	movhi	r3,513
 2006110:	18fe7504 	addi	r3,r3,-1580
 2006114:	d9000317 	ldw	r4,12(sp)
 2006118:	1885883a 	add	r2,r3,r2
 200611c:	11800017 	ldw	r6,0(r2)
 2006120:	11c00117 	ldw	r7,4(r2)
 2006124:	a82bd13a 	srai	r21,r21,4
 2006128:	880b883a 	mov	r5,r17
 200612c:	200a1240 	call	200a124 <__muldf3>
 2006130:	1027883a 	mov	r19,r2
 2006134:	1829883a 	mov	r20,r3
 2006138:	a800e826 	beq	r21,zero,20064dc <_dtoa_r+0x15dc>
 200613c:	05808074 	movhi	r22,513
 2006140:	b5be6b04 	addi	r22,r22,-1620
 2006144:	04800084 	movi	r18,2
 2006148:	a980004c 	andi	r6,r21,1
 200614c:	1009883a 	mov	r4,r2
 2006150:	a82bd07a 	srai	r21,r21,1
 2006154:	180b883a 	mov	r5,r3
 2006158:	30000426 	beq	r6,zero,200616c <_dtoa_r+0x126c>
 200615c:	b1800017 	ldw	r6,0(r22)
 2006160:	b1c00117 	ldw	r7,4(r22)
 2006164:	94800044 	addi	r18,r18,1
 2006168:	200a1240 	call	200a124 <__muldf3>
 200616c:	b5800204 	addi	r22,r22,8
 2006170:	a83ff51e 	bne	r21,zero,2006148 <_dtoa_r+0x1248>
 2006174:	1027883a 	mov	r19,r2
 2006178:	1829883a 	mov	r20,r3
 200617c:	003c7306 	br	200534c <_dtoa_r+0x44c>
 2006180:	21000044 	addi	r4,r4,1
 2006184:	11000005 	stb	r4,0(r2)
 2006188:	003e5c06 	br	2005afc <_dtoa_r+0xbfc>
 200618c:	a9400117 	ldw	r5,4(r21)
 2006190:	8009883a 	mov	r4,r16
 2006194:	2007a140 	call	2007a14 <_Balloc>
 2006198:	a9800417 	ldw	r6,16(r21)
 200619c:	11000304 	addi	r4,r2,12
 20061a0:	a9400304 	addi	r5,r21,12
 20061a4:	31800084 	addi	r6,r6,2
 20061a8:	318d883a 	add	r6,r6,r6
 20061ac:	318d883a 	add	r6,r6,r6
 20061b0:	1023883a 	mov	r17,r2
 20061b4:	20024440 	call	2002444 <memcpy>
 20061b8:	8009883a 	mov	r4,r16
 20061bc:	880b883a 	mov	r5,r17
 20061c0:	01800044 	movi	r6,1
 20061c4:	20082040 	call	2008204 <__lshift>
 20061c8:	1027883a 	mov	r19,r2
 20061cc:	003e8f06 	br	2005c0c <_dtoa_r+0xd0c>
 20061d0:	b807883a 	mov	r3,r23
 20061d4:	00800e44 	movi	r2,57
 20061d8:	ddc00717 	ldw	r23,28(sp)
 20061dc:	18809026 	beq	r3,r2,2006420 <_dtoa_r+0x1520>
 20061e0:	18c00044 	addi	r3,r3,1
 20061e4:	003f2b06 	br	2005e94 <_dtoa_r+0xf94>
 20061e8:	b807883a 	mov	r3,r23
 20061ec:	982b883a 	mov	r21,r19
 20061f0:	ddc00717 	ldw	r23,28(sp)
 20061f4:	003e2406 	br	2005a88 <_dtoa_r+0xb88>
 20061f8:	0029883a 	mov	r20,zero
 20061fc:	002b883a 	mov	r21,zero
 2006200:	003f7206 	br	2005fcc <_dtoa_r+0x10cc>
 2006204:	593fffc4 	addi	r4,r11,-1
 2006208:	200490fa 	slli	r2,r4,3
 200620c:	00c08074 	movhi	r3,513
 2006210:	18fe7504 	addi	r3,r3,-1580
 2006214:	d9001015 	stw	r4,64(sp)
 2006218:	1885883a 	add	r2,r3,r2
 200621c:	11000017 	ldw	r4,0(r2)
 2006220:	11400117 	ldw	r5,4(r2)
 2006224:	900d883a 	mov	r6,r18
 2006228:	a80f883a 	mov	r7,r21
 200622c:	dac01615 	stw	r11,88(sp)
 2006230:	200a1240 	call	200a124 <__muldf3>
 2006234:	a00b883a 	mov	r5,r20
 2006238:	9809883a 	mov	r4,r19
 200623c:	d8c01215 	stw	r3,72(sp)
 2006240:	d8801115 	stw	r2,68(sp)
 2006244:	200a86c0 	call	200a86c <__fixdfsi>
 2006248:	1009883a 	mov	r4,r2
 200624c:	1025883a 	mov	r18,r2
 2006250:	200a7980 	call	200a798 <__floatsidf>
 2006254:	9809883a 	mov	r4,r19
 2006258:	a00b883a 	mov	r5,r20
 200625c:	100d883a 	mov	r6,r2
 2006260:	180f883a 	mov	r7,r3
 2006264:	94800c04 	addi	r18,r18,48
 2006268:	200a0c40 	call	200a0c4 <__subdf3>
 200626c:	bc800005 	stb	r18,0(r23)
 2006270:	dac01617 	ldw	r11,88(sp)
 2006274:	102b883a 	mov	r21,r2
 2006278:	00800044 	movi	r2,1
 200627c:	bd800044 	addi	r22,r23,1
 2006280:	1815883a 	mov	r10,r3
 2006284:	58802226 	beq	r11,r2,2006310 <_dtoa_r+0x1410>
 2006288:	bad7883a 	add	r11,r23,r11
 200628c:	dc001415 	stw	r16,80(sp)
 2006290:	a805883a 	mov	r2,r21
 2006294:	b027883a 	mov	r19,r22
 2006298:	5821883a 	mov	r16,r11
 200629c:	882b883a 	mov	r21,r17
 20062a0:	000d883a 	mov	r6,zero
 20062a4:	01d00934 	movhi	r7,16420
 20062a8:	1009883a 	mov	r4,r2
 20062ac:	180b883a 	mov	r5,r3
 20062b0:	200a1240 	call	200a124 <__muldf3>
 20062b4:	180b883a 	mov	r5,r3
 20062b8:	1009883a 	mov	r4,r2
 20062bc:	1829883a 	mov	r20,r3
 20062c0:	1023883a 	mov	r17,r2
 20062c4:	200a86c0 	call	200a86c <__fixdfsi>
 20062c8:	1009883a 	mov	r4,r2
 20062cc:	1025883a 	mov	r18,r2
 20062d0:	200a7980 	call	200a798 <__floatsidf>
 20062d4:	8809883a 	mov	r4,r17
 20062d8:	a00b883a 	mov	r5,r20
 20062dc:	100d883a 	mov	r6,r2
 20062e0:	180f883a 	mov	r7,r3
 20062e4:	94800c04 	addi	r18,r18,48
 20062e8:	200a0c40 	call	200a0c4 <__subdf3>
 20062ec:	9cc00044 	addi	r19,r19,1
 20062f0:	9cbfffc5 	stb	r18,-1(r19)
 20062f4:	9c3fea1e 	bne	r19,r16,20062a0 <_dtoa_r+0x13a0>
 20062f8:	1815883a 	mov	r10,r3
 20062fc:	d8c01017 	ldw	r3,64(sp)
 2006300:	dc001417 	ldw	r16,80(sp)
 2006304:	a823883a 	mov	r17,r21
 2006308:	b0ed883a 	add	r22,r22,r3
 200630c:	102b883a 	mov	r21,r2
 2006310:	d9001117 	ldw	r4,68(sp)
 2006314:	d9401217 	ldw	r5,72(sp)
 2006318:	000d883a 	mov	r6,zero
 200631c:	01cff834 	movhi	r7,16352
 2006320:	da801515 	stw	r10,84(sp)
 2006324:	200a0700 	call	200a070 <__adddf3>
 2006328:	da801517 	ldw	r10,84(sp)
 200632c:	1009883a 	mov	r4,r2
 2006330:	180b883a 	mov	r5,r3
 2006334:	500f883a 	mov	r7,r10
 2006338:	a80d883a 	mov	r6,r21
 200633c:	200a73c0 	call	200a73c <__ltdf2>
 2006340:	da801517 	ldw	r10,84(sp)
 2006344:	10003b0e 	bge	r2,zero,2006434 <_dtoa_r+0x1534>
 2006348:	d9c01317 	ldw	r7,76(sp)
 200634c:	b53fffc3 	ldbu	r20,-1(r22)
 2006350:	d9c00615 	stw	r7,24(sp)
 2006354:	003d3106 	br	200581c <_dtoa_r+0x91c>
 2006358:	d8800817 	ldw	r2,32(sp)
 200635c:	11e5c83a 	sub	r18,r2,r7
 2006360:	0005883a 	mov	r2,zero
 2006364:	003d5006 	br	20058a8 <_dtoa_r+0x9a8>
 2006368:	05800044 	movi	r22,1
 200636c:	003dc406 	br	2005a80 <_dtoa_r+0xb80>
 2006370:	a5000044 	addi	r20,r20,1
 2006374:	15000005 	stb	r20,0(r2)
 2006378:	003c8206 	br	2005584 <_dtoa_r+0x684>
 200637c:	d8800217 	ldw	r2,8(sp)
 2006380:	00c00d84 	movi	r3,54
 2006384:	dcc00a17 	ldw	r19,40(sp)
 2006388:	1885c83a 	sub	r2,r3,r2
 200638c:	dc800817 	ldw	r18,32(sp)
 2006390:	003d4506 	br	20058a8 <_dtoa_r+0x9a8>
 2006394:	dcc00317 	ldw	r19,12(sp)
 2006398:	8829883a 	mov	r20,r17
 200639c:	04800084 	movi	r18,2
 20063a0:	003bea06 	br	200534c <_dtoa_r+0x44c>
 20063a4:	d9000917 	ldw	r4,36(sp)
 20063a8:	203f1126 	beq	r4,zero,2005ff0 <_dtoa_r+0x10f0>
 20063ac:	d9c00e17 	ldw	r7,56(sp)
 20063b0:	01fca20e 	bge	zero,r7,200563c <_dtoa_r+0x73c>
 20063b4:	a00b883a 	mov	r5,r20
 20063b8:	9809883a 	mov	r4,r19
 20063bc:	000d883a 	mov	r6,zero
 20063c0:	01d00934 	movhi	r7,16420
 20063c4:	200a1240 	call	200a124 <__muldf3>
 20063c8:	91000044 	addi	r4,r18,1
 20063cc:	1027883a 	mov	r19,r2
 20063d0:	1829883a 	mov	r20,r3
 20063d4:	200a7980 	call	200a798 <__floatsidf>
 20063d8:	9809883a 	mov	r4,r19
 20063dc:	a00b883a 	mov	r5,r20
 20063e0:	100d883a 	mov	r6,r2
 20063e4:	180f883a 	mov	r7,r3
 20063e8:	200a1240 	call	200a124 <__muldf3>
 20063ec:	1009883a 	mov	r4,r2
 20063f0:	180b883a 	mov	r5,r3
 20063f4:	000d883a 	mov	r6,zero
 20063f8:	01d00734 	movhi	r7,16412
 20063fc:	200a0700 	call	200a070 <__adddf3>
 2006400:	1025883a 	mov	r18,r2
 2006404:	d8800617 	ldw	r2,24(sp)
 2006408:	057f3034 	movhi	r21,64704
 200640c:	1d6b883a 	add	r21,r3,r21
 2006410:	10bfffc4 	addi	r2,r2,-1
 2006414:	d8801315 	stw	r2,76(sp)
 2006418:	dac00e17 	ldw	r11,56(sp)
 200641c:	003be706 	br	20053bc <_dtoa_r+0x4bc>
 2006420:	01000e44 	movi	r4,57
 2006424:	91000005 	stb	r4,0(r18)
 2006428:	95800044 	addi	r22,r18,1
 200642c:	982b883a 	mov	r21,r19
 2006430:	003da106 	br	2005ab8 <_dtoa_r+0xbb8>
 2006434:	d9801117 	ldw	r6,68(sp)
 2006438:	d9c01217 	ldw	r7,72(sp)
 200643c:	0009883a 	mov	r4,zero
 2006440:	014ff834 	movhi	r5,16352
 2006444:	da801515 	stw	r10,84(sp)
 2006448:	200a0c40 	call	200a0c4 <__subdf3>
 200644c:	da801517 	ldw	r10,84(sp)
 2006450:	1009883a 	mov	r4,r2
 2006454:	180b883a 	mov	r5,r3
 2006458:	a80d883a 	mov	r6,r21
 200645c:	500f883a 	mov	r7,r10
 2006460:	200a6740 	call	200a674 <__gtdf2>
 2006464:	00bc750e 	bge	zero,r2,200563c <_dtoa_r+0x73c>
 2006468:	01000c04 	movi	r4,48
 200646c:	00000106 	br	2006474 <_dtoa_r+0x1574>
 2006470:	102d883a 	mov	r22,r2
 2006474:	b0bfffc4 	addi	r2,r22,-1
 2006478:	10c00007 	ldb	r3,0(r2)
 200647c:	193ffc26 	beq	r3,r4,2006470 <_dtoa_r+0x1570>
 2006480:	d8801317 	ldw	r2,76(sp)
 2006484:	d8800615 	stw	r2,24(sp)
 2006488:	003c3e06 	br	2005584 <_dtoa_r+0x684>
 200648c:	d9001317 	ldw	r4,76(sp)
 2006490:	df001117 	ldw	fp,68(sp)
 2006494:	d9000615 	stw	r4,24(sp)
 2006498:	003ce006 	br	200581c <_dtoa_r+0x91c>
 200649c:	df001117 	ldw	fp,68(sp)
 20064a0:	dc401217 	ldw	r17,72(sp)
 20064a4:	003c6506 	br	200563c <_dtoa_r+0x73c>
 20064a8:	103e7a1e 	bne	r2,zero,2005e94 <_dtoa_r+0xf94>
 20064ac:	1880004c 	andi	r2,r3,1
 20064b0:	103e7826 	beq	r2,zero,2005e94 <_dtoa_r+0xf94>
 20064b4:	003e7406 	br	2005e88 <_dtoa_r+0xf88>
 20064b8:	8009883a 	mov	r4,r16
 20064bc:	a80b883a 	mov	r5,r21
 20064c0:	01800284 	movi	r6,10
 20064c4:	000f883a 	mov	r7,zero
 20064c8:	2007ae40 	call	2007ae4 <__multadd>
 20064cc:	d9000e17 	ldw	r4,56(sp)
 20064d0:	102b883a 	mov	r21,r2
 20064d4:	d9000915 	stw	r4,36(sp)
 20064d8:	003d5106 	br	2005a20 <_dtoa_r+0xb20>
 20064dc:	04800084 	movi	r18,2
 20064e0:	003b9a06 	br	200534c <_dtoa_r+0x44c>
 20064e4:	d8c01317 	ldw	r3,76(sp)
 20064e8:	d8c00615 	stw	r3,24(sp)
 20064ec:	003ccb06 	br	200581c <_dtoa_r+0x91c>
 20064f0:	d8c01317 	ldw	r3,76(sp)
 20064f4:	d8c00615 	stw	r3,24(sp)
 20064f8:	003c2206 	br	2005584 <_dtoa_r+0x684>
 20064fc:	20fd3826 	beq	r4,r3,20059e0 <_dtoa_r+0xae0>
 2006500:	00c00f04 	movi	r3,60
 2006504:	1885c83a 	sub	r2,r3,r2
 2006508:	003da906 	br	2005bb0 <_dtoa_r+0xcb0>
 200650c:	000b883a 	mov	r5,zero
 2006510:	003b5406 	br	2005264 <_dtoa_r+0x364>
 2006514:	04c00044 	movi	r19,1
 2006518:	003b3b06 	br	2005208 <_dtoa_r+0x308>

0200651c <_fflush_r>:
 200651c:	defffb04 	addi	sp,sp,-20
 2006520:	dcc00315 	stw	r19,12(sp)
 2006524:	dc400115 	stw	r17,4(sp)
 2006528:	dfc00415 	stw	ra,16(sp)
 200652c:	dc800215 	stw	r18,8(sp)
 2006530:	dc000015 	stw	r16,0(sp)
 2006534:	2027883a 	mov	r19,r4
 2006538:	2823883a 	mov	r17,r5
 200653c:	20000226 	beq	r4,zero,2006548 <_fflush_r+0x2c>
 2006540:	20800e17 	ldw	r2,56(r4)
 2006544:	10005726 	beq	r2,zero,20066a4 <_fflush_r+0x188>
 2006548:	8880030b 	ldhu	r2,12(r17)
 200654c:	10c0020c 	andi	r3,r2,8
 2006550:	18ffffcc 	andi	r3,r3,65535
 2006554:	18e0001c 	xori	r3,r3,32768
 2006558:	18e00004 	addi	r3,r3,-32768
 200655c:	1800311e 	bne	r3,zero,2006624 <_fflush_r+0x108>
 2006560:	89000117 	ldw	r4,4(r17)
 2006564:	10c20014 	ori	r3,r2,2048
 2006568:	88c0030d 	sth	r3,12(r17)
 200656c:	180b883a 	mov	r5,r3
 2006570:	0100520e 	bge	zero,r4,20066bc <_fflush_r+0x1a0>
 2006574:	88c00a17 	ldw	r3,40(r17)
 2006578:	18002226 	beq	r3,zero,2006604 <_fflush_r+0xe8>
 200657c:	1084000c 	andi	r2,r2,4096
 2006580:	10bfffcc 	andi	r2,r2,65535
 2006584:	10a0001c 	xori	r2,r2,32768
 2006588:	10a00004 	addi	r2,r2,-32768
 200658c:	10004e26 	beq	r2,zero,20066c8 <_fflush_r+0x1ac>
 2006590:	8c001417 	ldw	r16,80(r17)
 2006594:	2940010c 	andi	r5,r5,4
 2006598:	297fffcc 	andi	r5,r5,65535
 200659c:	2960001c 	xori	r5,r5,32768
 20065a0:	29600004 	addi	r5,r5,-32768
 20065a4:	28000626 	beq	r5,zero,20065c0 <_fflush_r+0xa4>
 20065a8:	89000117 	ldw	r4,4(r17)
 20065ac:	88800c17 	ldw	r2,48(r17)
 20065b0:	8121c83a 	sub	r16,r16,r4
 20065b4:	10000226 	beq	r2,zero,20065c0 <_fflush_r+0xa4>
 20065b8:	88800f17 	ldw	r2,60(r17)
 20065bc:	80a1c83a 	sub	r16,r16,r2
 20065c0:	89400717 	ldw	r5,28(r17)
 20065c4:	9809883a 	mov	r4,r19
 20065c8:	800d883a 	mov	r6,r16
 20065cc:	000f883a 	mov	r7,zero
 20065d0:	183ee83a 	callr	r3
 20065d4:	8080281e 	bne	r16,r2,2006678 <_fflush_r+0x15c>
 20065d8:	8880030b 	ldhu	r2,12(r17)
 20065dc:	88c00417 	ldw	r3,16(r17)
 20065e0:	88000115 	stw	zero,4(r17)
 20065e4:	113dffcc 	andi	r4,r2,63487
 20065e8:	1084000c 	andi	r2,r2,4096
 20065ec:	10bfffcc 	andi	r2,r2,65535
 20065f0:	10a0001c 	xori	r2,r2,32768
 20065f4:	8900030d 	sth	r4,12(r17)
 20065f8:	88c00015 	stw	r3,0(r17)
 20065fc:	10a00004 	addi	r2,r2,-32768
 2006600:	10002c1e 	bne	r2,zero,20066b4 <_fflush_r+0x198>
 2006604:	0005883a 	mov	r2,zero
 2006608:	dfc00417 	ldw	ra,16(sp)
 200660c:	dcc00317 	ldw	r19,12(sp)
 2006610:	dc800217 	ldw	r18,8(sp)
 2006614:	dc400117 	ldw	r17,4(sp)
 2006618:	dc000017 	ldw	r16,0(sp)
 200661c:	dec00504 	addi	sp,sp,20
 2006620:	f800283a 	ret
 2006624:	8c800417 	ldw	r18,16(r17)
 2006628:	903ff626 	beq	r18,zero,2006604 <_fflush_r+0xe8>
 200662c:	8c000017 	ldw	r16,0(r17)
 2006630:	108000cc 	andi	r2,r2,3
 2006634:	8c800015 	stw	r18,0(r17)
 2006638:	84a1c83a 	sub	r16,r16,r18
 200663c:	10001b1e 	bne	r2,zero,20066ac <_fflush_r+0x190>
 2006640:	88800517 	ldw	r2,20(r17)
 2006644:	88800215 	stw	r2,8(r17)
 2006648:	04000316 	blt	zero,r16,2006658 <_fflush_r+0x13c>
 200664c:	003fed06 	br	2006604 <_fflush_r+0xe8>
 2006650:	90a5883a 	add	r18,r18,r2
 2006654:	043feb0e 	bge	zero,r16,2006604 <_fflush_r+0xe8>
 2006658:	88800917 	ldw	r2,36(r17)
 200665c:	89400717 	ldw	r5,28(r17)
 2006660:	800f883a 	mov	r7,r16
 2006664:	900d883a 	mov	r6,r18
 2006668:	9809883a 	mov	r4,r19
 200666c:	103ee83a 	callr	r2
 2006670:	80a1c83a 	sub	r16,r16,r2
 2006674:	00bff616 	blt	zero,r2,2006650 <_fflush_r+0x134>
 2006678:	88c0030b 	ldhu	r3,12(r17)
 200667c:	00bfffc4 	movi	r2,-1
 2006680:	18c01014 	ori	r3,r3,64
 2006684:	88c0030d 	sth	r3,12(r17)
 2006688:	dfc00417 	ldw	ra,16(sp)
 200668c:	dcc00317 	ldw	r19,12(sp)
 2006690:	dc800217 	ldw	r18,8(sp)
 2006694:	dc400117 	ldw	r17,4(sp)
 2006698:	dc000017 	ldw	r16,0(sp)
 200669c:	dec00504 	addi	sp,sp,20
 20066a0:	f800283a 	ret
 20066a4:	20067d80 	call	20067d8 <__sinit>
 20066a8:	003fa706 	br	2006548 <_fflush_r+0x2c>
 20066ac:	0005883a 	mov	r2,zero
 20066b0:	003fe406 	br	2006644 <_fflush_r+0x128>
 20066b4:	8c001415 	stw	r16,80(r17)
 20066b8:	003fd206 	br	2006604 <_fflush_r+0xe8>
 20066bc:	88c00f17 	ldw	r3,60(r17)
 20066c0:	00ffac16 	blt	zero,r3,2006574 <_fflush_r+0x58>
 20066c4:	003fcf06 	br	2006604 <_fflush_r+0xe8>
 20066c8:	89400717 	ldw	r5,28(r17)
 20066cc:	9809883a 	mov	r4,r19
 20066d0:	000d883a 	mov	r6,zero
 20066d4:	01c00044 	movi	r7,1
 20066d8:	183ee83a 	callr	r3
 20066dc:	1021883a 	mov	r16,r2
 20066e0:	00bfffc4 	movi	r2,-1
 20066e4:	80800326 	beq	r16,r2,20066f4 <_fflush_r+0x1d8>
 20066e8:	8940030b 	ldhu	r5,12(r17)
 20066ec:	88c00a17 	ldw	r3,40(r17)
 20066f0:	003fa806 	br	2006594 <_fflush_r+0x78>
 20066f4:	98c00017 	ldw	r3,0(r19)
 20066f8:	00800744 	movi	r2,29
 20066fc:	18bfde1e 	bne	r3,r2,2006678 <_fflush_r+0x15c>
 2006700:	003fc006 	br	2006604 <_fflush_r+0xe8>

02006704 <fflush>:
 2006704:	200b883a 	mov	r5,r4
 2006708:	20000426 	beq	r4,zero,200671c <fflush+0x18>
 200670c:	00808074 	movhi	r2,513
 2006710:	1085b204 	addi	r2,r2,5832
 2006714:	11000017 	ldw	r4,0(r2)
 2006718:	200651c1 	jmpi	200651c <_fflush_r>
 200671c:	00808074 	movhi	r2,513
 2006720:	1085b104 	addi	r2,r2,5828
 2006724:	11000017 	ldw	r4,0(r2)
 2006728:	01408034 	movhi	r5,512
 200672c:	29594704 	addi	r5,r5,25884
 2006730:	20074501 	jmpi	2007450 <_fwalk_reent>

02006734 <__fp_lock>:
 2006734:	0005883a 	mov	r2,zero
 2006738:	f800283a 	ret

0200673c <__fp_unlock>:
 200673c:	0005883a 	mov	r2,zero
 2006740:	f800283a 	ret

02006744 <_cleanup_r>:
 2006744:	01408074 	movhi	r5,513
 2006748:	2965b804 	addi	r5,r5,-26912
 200674c:	20073a81 	jmpi	20073a8 <_fwalk>

02006750 <__sfmoreglue>:
 2006750:	defffc04 	addi	sp,sp,-16
 2006754:	dc800215 	stw	r18,8(sp)
 2006758:	2825883a 	mov	r18,r5
 200675c:	dc000015 	stw	r16,0(sp)
 2006760:	01401704 	movi	r5,92
 2006764:	2021883a 	mov	r16,r4
 2006768:	9009883a 	mov	r4,r18
 200676c:	dfc00315 	stw	ra,12(sp)
 2006770:	dc400115 	stw	r17,4(sp)
 2006774:	20012bc0 	call	20012bc <__mulsi3>
 2006778:	8009883a 	mov	r4,r16
 200677c:	11400304 	addi	r5,r2,12
 2006780:	1023883a 	mov	r17,r2
 2006784:	2001cc00 	call	2001cc0 <_malloc_r>
 2006788:	1021883a 	mov	r16,r2
 200678c:	10000726 	beq	r2,zero,20067ac <__sfmoreglue+0x5c>
 2006790:	11000304 	addi	r4,r2,12
 2006794:	10000015 	stw	zero,0(r2)
 2006798:	14800115 	stw	r18,4(r2)
 200679c:	11000215 	stw	r4,8(r2)
 20067a0:	000b883a 	mov	r5,zero
 20067a4:	880d883a 	mov	r6,r17
 20067a8:	20079380 	call	2007938 <memset>
 20067ac:	8005883a 	mov	r2,r16
 20067b0:	dfc00317 	ldw	ra,12(sp)
 20067b4:	dc800217 	ldw	r18,8(sp)
 20067b8:	dc400117 	ldw	r17,4(sp)
 20067bc:	dc000017 	ldw	r16,0(sp)
 20067c0:	dec00404 	addi	sp,sp,16
 20067c4:	f800283a 	ret

020067c8 <_cleanup>:
 20067c8:	00808074 	movhi	r2,513
 20067cc:	1085b104 	addi	r2,r2,5828
 20067d0:	11000017 	ldw	r4,0(r2)
 20067d4:	20067441 	jmpi	2006744 <_cleanup_r>

020067d8 <__sinit>:
 20067d8:	20800e17 	ldw	r2,56(r4)
 20067dc:	1000401e 	bne	r2,zero,20068e0 <__sinit+0x108>
 20067e0:	21400117 	ldw	r5,4(r4)
 20067e4:	01808034 	movhi	r6,512
 20067e8:	3199d104 	addi	r6,r6,26436
 20067ec:	20c00217 	ldw	r3,8(r4)
 20067f0:	21800f15 	stw	r6,60(r4)
 20067f4:	2080bb04 	addi	r2,r4,748
 20067f8:	02400044 	movi	r9,1
 20067fc:	018000c4 	movi	r6,3
 2006800:	2180b915 	stw	r6,740(r4)
 2006804:	2080ba15 	stw	r2,744(r4)
 2006808:	22400e15 	stw	r9,56(r4)
 200680c:	20800317 	ldw	r2,12(r4)
 2006810:	2000b815 	stw	zero,736(r4)
 2006814:	02008034 	movhi	r8,512
 2006818:	420a7804 	addi	r8,r8,10720
 200681c:	01c08034 	movhi	r7,512
 2006820:	39ca8d04 	addi	r7,r7,10804
 2006824:	01808034 	movhi	r6,512
 2006828:	318aaf04 	addi	r6,r6,10940
 200682c:	01008034 	movhi	r4,512
 2006830:	210ac604 	addi	r4,r4,11032
 2006834:	02800104 	movi	r10,4
 2006838:	28000015 	stw	zero,0(r5)
 200683c:	28000115 	stw	zero,4(r5)
 2006840:	28000215 	stw	zero,8(r5)
 2006844:	2a80030d 	sth	r10,12(r5)
 2006848:	2800038d 	sth	zero,14(r5)
 200684c:	28000415 	stw	zero,16(r5)
 2006850:	28000515 	stw	zero,20(r5)
 2006854:	28000615 	stw	zero,24(r5)
 2006858:	29400715 	stw	r5,28(r5)
 200685c:	2a000815 	stw	r8,32(r5)
 2006860:	29c00915 	stw	r7,36(r5)
 2006864:	29800a15 	stw	r6,40(r5)
 2006868:	29000b15 	stw	r4,44(r5)
 200686c:	01400284 	movi	r5,10
 2006870:	18000015 	stw	zero,0(r3)
 2006874:	18000115 	stw	zero,4(r3)
 2006878:	18000215 	stw	zero,8(r3)
 200687c:	1940030d 	sth	r5,12(r3)
 2006880:	1a40038d 	sth	r9,14(r3)
 2006884:	18000415 	stw	zero,16(r3)
 2006888:	18000515 	stw	zero,20(r3)
 200688c:	18000615 	stw	zero,24(r3)
 2006890:	18c00715 	stw	r3,28(r3)
 2006894:	1a000815 	stw	r8,32(r3)
 2006898:	19c00915 	stw	r7,36(r3)
 200689c:	19800a15 	stw	r6,40(r3)
 20068a0:	19000b15 	stw	r4,44(r3)
 20068a4:	00c00484 	movi	r3,18
 20068a8:	10c0030d 	sth	r3,12(r2)
 20068ac:	00c00084 	movi	r3,2
 20068b0:	10000015 	stw	zero,0(r2)
 20068b4:	10000115 	stw	zero,4(r2)
 20068b8:	10000215 	stw	zero,8(r2)
 20068bc:	10c0038d 	sth	r3,14(r2)
 20068c0:	10000415 	stw	zero,16(r2)
 20068c4:	10000515 	stw	zero,20(r2)
 20068c8:	10000615 	stw	zero,24(r2)
 20068cc:	10800715 	stw	r2,28(r2)
 20068d0:	12000815 	stw	r8,32(r2)
 20068d4:	11c00915 	stw	r7,36(r2)
 20068d8:	11800a15 	stw	r6,40(r2)
 20068dc:	11000b15 	stw	r4,44(r2)
 20068e0:	f800283a 	ret

020068e4 <__sfp>:
 20068e4:	defffc04 	addi	sp,sp,-16
 20068e8:	00808074 	movhi	r2,513
 20068ec:	1085b104 	addi	r2,r2,5828
 20068f0:	dc400115 	stw	r17,4(sp)
 20068f4:	14400017 	ldw	r17,0(r2)
 20068f8:	dc800215 	stw	r18,8(sp)
 20068fc:	dfc00315 	stw	ra,12(sp)
 2006900:	88800e17 	ldw	r2,56(r17)
 2006904:	dc000015 	stw	r16,0(sp)
 2006908:	2025883a 	mov	r18,r4
 200690c:	10002826 	beq	r2,zero,20069b0 <__sfp+0xcc>
 2006910:	8c40b804 	addi	r17,r17,736
 2006914:	043fffc4 	movi	r16,-1
 2006918:	89400117 	ldw	r5,4(r17)
 200691c:	88800217 	ldw	r2,8(r17)
 2006920:	297fffc4 	addi	r5,r5,-1
 2006924:	28000a16 	blt	r5,zero,2006950 <__sfp+0x6c>
 2006928:	10c0030f 	ldh	r3,12(r2)
 200692c:	18000c26 	beq	r3,zero,2006960 <__sfp+0x7c>
 2006930:	10c01a04 	addi	r3,r2,104
 2006934:	00000206 	br	2006940 <__sfp+0x5c>
 2006938:	19bfe90f 	ldh	r6,-92(r3)
 200693c:	30000826 	beq	r6,zero,2006960 <__sfp+0x7c>
 2006940:	297fffc4 	addi	r5,r5,-1
 2006944:	18bffd04 	addi	r2,r3,-12
 2006948:	18c01704 	addi	r3,r3,92
 200694c:	2c3ffa1e 	bne	r5,r16,2006938 <__sfp+0x54>
 2006950:	88800017 	ldw	r2,0(r17)
 2006954:	10001926 	beq	r2,zero,20069bc <__sfp+0xd8>
 2006958:	1023883a 	mov	r17,r2
 200695c:	003fee06 	br	2006918 <__sfp+0x34>
 2006960:	00ffffc4 	movi	r3,-1
 2006964:	10c0038d 	sth	r3,14(r2)
 2006968:	00c00044 	movi	r3,1
 200696c:	10c0030d 	sth	r3,12(r2)
 2006970:	10000015 	stw	zero,0(r2)
 2006974:	10000215 	stw	zero,8(r2)
 2006978:	10000115 	stw	zero,4(r2)
 200697c:	10000415 	stw	zero,16(r2)
 2006980:	10000515 	stw	zero,20(r2)
 2006984:	10000615 	stw	zero,24(r2)
 2006988:	10000c15 	stw	zero,48(r2)
 200698c:	10000d15 	stw	zero,52(r2)
 2006990:	10001115 	stw	zero,68(r2)
 2006994:	10001215 	stw	zero,72(r2)
 2006998:	dfc00317 	ldw	ra,12(sp)
 200699c:	dc800217 	ldw	r18,8(sp)
 20069a0:	dc400117 	ldw	r17,4(sp)
 20069a4:	dc000017 	ldw	r16,0(sp)
 20069a8:	dec00404 	addi	sp,sp,16
 20069ac:	f800283a 	ret
 20069b0:	8809883a 	mov	r4,r17
 20069b4:	20067d80 	call	20067d8 <__sinit>
 20069b8:	003fd506 	br	2006910 <__sfp+0x2c>
 20069bc:	9009883a 	mov	r4,r18
 20069c0:	01400104 	movi	r5,4
 20069c4:	20067500 	call	2006750 <__sfmoreglue>
 20069c8:	88800015 	stw	r2,0(r17)
 20069cc:	103fe21e 	bne	r2,zero,2006958 <__sfp+0x74>
 20069d0:	00800304 	movi	r2,12
 20069d4:	90800015 	stw	r2,0(r18)
 20069d8:	0005883a 	mov	r2,zero
 20069dc:	003fee06 	br	2006998 <__sfp+0xb4>

020069e0 <__sfp_lock_acquire>:
 20069e0:	f800283a 	ret

020069e4 <__sfp_lock_release>:
 20069e4:	f800283a 	ret

020069e8 <__sinit_lock_acquire>:
 20069e8:	f800283a 	ret

020069ec <__sinit_lock_release>:
 20069ec:	f800283a 	ret

020069f0 <__fp_lock_all>:
 20069f0:	00808074 	movhi	r2,513
 20069f4:	1085b204 	addi	r2,r2,5832
 20069f8:	11000017 	ldw	r4,0(r2)
 20069fc:	01408034 	movhi	r5,512
 2006a00:	2959cd04 	addi	r5,r5,26420
 2006a04:	20073a81 	jmpi	20073a8 <_fwalk>

02006a08 <__fp_unlock_all>:
 2006a08:	00808074 	movhi	r2,513
 2006a0c:	1085b204 	addi	r2,r2,5832
 2006a10:	11000017 	ldw	r4,0(r2)
 2006a14:	01408034 	movhi	r5,512
 2006a18:	2959cf04 	addi	r5,r5,26428
 2006a1c:	20073a81 	jmpi	20073a8 <_fwalk>

02006a20 <__sflags>:
 2006a20:	28800007 	ldb	r2,0(r5)
 2006a24:	00c01c84 	movi	r3,114
 2006a28:	10c01826 	beq	r2,r3,2006a8c <__sflags+0x6c>
 2006a2c:	00c01dc4 	movi	r3,119
 2006a30:	10c01226 	beq	r2,r3,2006a7c <__sflags+0x5c>
 2006a34:	00c01844 	movi	r3,97
 2006a38:	10c00426 	beq	r2,r3,2006a4c <__sflags+0x2c>
 2006a3c:	00800584 	movi	r2,22
 2006a40:	20800015 	stw	r2,0(r4)
 2006a44:	0005883a 	mov	r2,zero
 2006a48:	f800283a 	ret
 2006a4c:	01c08204 	movi	r7,520
 2006a50:	01000044 	movi	r4,1
 2006a54:	00804204 	movi	r2,264
 2006a58:	28c00047 	ldb	r3,1(r5)
 2006a5c:	18000426 	beq	r3,zero,2006a70 <__sflags+0x50>
 2006a60:	02000ac4 	movi	r8,43
 2006a64:	1a000d26 	beq	r3,r8,2006a9c <__sflags+0x7c>
 2006a68:	28c00087 	ldb	r3,2(r5)
 2006a6c:	1a000b26 	beq	r3,r8,2006a9c <__sflags+0x7c>
 2006a70:	21c8b03a 	or	r4,r4,r7
 2006a74:	31000015 	stw	r4,0(r6)
 2006a78:	f800283a 	ret
 2006a7c:	01c18004 	movi	r7,1536
 2006a80:	01000044 	movi	r4,1
 2006a84:	00800204 	movi	r2,8
 2006a88:	003ff306 	br	2006a58 <__sflags+0x38>
 2006a8c:	000f883a 	mov	r7,zero
 2006a90:	0009883a 	mov	r4,zero
 2006a94:	00800104 	movi	r2,4
 2006a98:	003fef06 	br	2006a58 <__sflags+0x38>
 2006a9c:	00fff8c4 	movi	r3,-29
 2006aa0:	01000084 	movi	r4,2
 2006aa4:	10c4703a 	and	r2,r2,r3
 2006aa8:	21c8b03a 	or	r4,r4,r7
 2006aac:	10800414 	ori	r2,r2,16
 2006ab0:	31000015 	stw	r4,0(r6)
 2006ab4:	f800283a 	ret

02006ab8 <_malloc_trim_r>:
 2006ab8:	defffb04 	addi	sp,sp,-20
 2006abc:	dcc00315 	stw	r19,12(sp)
 2006ac0:	dc800215 	stw	r18,8(sp)
 2006ac4:	dc400115 	stw	r17,4(sp)
 2006ac8:	dc000015 	stw	r16,0(sp)
 2006acc:	2827883a 	mov	r19,r5
 2006ad0:	dfc00415 	stw	ra,16(sp)
 2006ad4:	04408074 	movhi	r17,513
 2006ad8:	8c7fc504 	addi	r17,r17,-236
 2006adc:	2021883a 	mov	r16,r4
 2006ae0:	200b5700 	call	200b570 <__malloc_lock>
 2006ae4:	88800217 	ldw	r2,8(r17)
 2006ae8:	14800117 	ldw	r18,4(r2)
 2006aec:	00bfff04 	movi	r2,-4
 2006af0:	90a4703a 	and	r18,r18,r2
 2006af4:	9083fbc4 	addi	r2,r18,4079
 2006af8:	14e7c83a 	sub	r19,r2,r19
 2006afc:	9826d33a 	srli	r19,r19,12
 2006b00:	0083ffc4 	movi	r2,4095
 2006b04:	9cffffc4 	addi	r19,r19,-1
 2006b08:	9826933a 	slli	r19,r19,12
 2006b0c:	14c0060e 	bge	r2,r19,2006b28 <_malloc_trim_r+0x70>
 2006b10:	8009883a 	mov	r4,r16
 2006b14:	000b883a 	mov	r5,zero
 2006b18:	200297c0 	call	200297c <_sbrk_r>
 2006b1c:	88c00217 	ldw	r3,8(r17)
 2006b20:	1c87883a 	add	r3,r3,r18
 2006b24:	10c00a26 	beq	r2,r3,2006b50 <_malloc_trim_r+0x98>
 2006b28:	8009883a 	mov	r4,r16
 2006b2c:	200b5900 	call	200b590 <__malloc_unlock>
 2006b30:	0005883a 	mov	r2,zero
 2006b34:	dfc00417 	ldw	ra,16(sp)
 2006b38:	dcc00317 	ldw	r19,12(sp)
 2006b3c:	dc800217 	ldw	r18,8(sp)
 2006b40:	dc400117 	ldw	r17,4(sp)
 2006b44:	dc000017 	ldw	r16,0(sp)
 2006b48:	dec00504 	addi	sp,sp,20
 2006b4c:	f800283a 	ret
 2006b50:	8009883a 	mov	r4,r16
 2006b54:	04cbc83a 	sub	r5,zero,r19
 2006b58:	200297c0 	call	200297c <_sbrk_r>
 2006b5c:	00ffffc4 	movi	r3,-1
 2006b60:	10c01326 	beq	r2,r3,2006bb0 <_malloc_trim_r+0xf8>
 2006b64:	00808074 	movhi	r2,513
 2006b68:	1085d604 	addi	r2,r2,5976
 2006b6c:	11000017 	ldw	r4,0(r2)
 2006b70:	88c00217 	ldw	r3,8(r17)
 2006b74:	94e5c83a 	sub	r18,r18,r19
 2006b78:	94800054 	ori	r18,r18,1
 2006b7c:	24e7c83a 	sub	r19,r4,r19
 2006b80:	1c800115 	stw	r18,4(r3)
 2006b84:	8009883a 	mov	r4,r16
 2006b88:	14c00015 	stw	r19,0(r2)
 2006b8c:	200b5900 	call	200b590 <__malloc_unlock>
 2006b90:	00800044 	movi	r2,1
 2006b94:	dfc00417 	ldw	ra,16(sp)
 2006b98:	dcc00317 	ldw	r19,12(sp)
 2006b9c:	dc800217 	ldw	r18,8(sp)
 2006ba0:	dc400117 	ldw	r17,4(sp)
 2006ba4:	dc000017 	ldw	r16,0(sp)
 2006ba8:	dec00504 	addi	sp,sp,20
 2006bac:	f800283a 	ret
 2006bb0:	8009883a 	mov	r4,r16
 2006bb4:	000b883a 	mov	r5,zero
 2006bb8:	200297c0 	call	200297c <_sbrk_r>
 2006bbc:	88c00217 	ldw	r3,8(r17)
 2006bc0:	014003c4 	movi	r5,15
 2006bc4:	10c9c83a 	sub	r4,r2,r3
 2006bc8:	293fd70e 	bge	r5,r4,2006b28 <_malloc_trim_r+0x70>
 2006bcc:	01408074 	movhi	r5,513
 2006bd0:	2945b304 	addi	r5,r5,5836
 2006bd4:	29400017 	ldw	r5,0(r5)
 2006bd8:	21000054 	ori	r4,r4,1
 2006bdc:	19000115 	stw	r4,4(r3)
 2006be0:	1145c83a 	sub	r2,r2,r5
 2006be4:	01408074 	movhi	r5,513
 2006be8:	2945d604 	addi	r5,r5,5976
 2006bec:	28800015 	stw	r2,0(r5)
 2006bf0:	003fcd06 	br	2006b28 <_malloc_trim_r+0x70>

02006bf4 <_free_r>:
 2006bf4:	defffd04 	addi	sp,sp,-12
 2006bf8:	dc400115 	stw	r17,4(sp)
 2006bfc:	dc000015 	stw	r16,0(sp)
 2006c00:	dfc00215 	stw	ra,8(sp)
 2006c04:	2821883a 	mov	r16,r5
 2006c08:	2023883a 	mov	r17,r4
 2006c0c:	28004b26 	beq	r5,zero,2006d3c <_free_r+0x148>
 2006c10:	200b5700 	call	200b570 <__malloc_lock>
 2006c14:	823fff17 	ldw	r8,-4(r16)
 2006c18:	00bfff84 	movi	r2,-2
 2006c1c:	81bffe04 	addi	r6,r16,-8
 2006c20:	4084703a 	and	r2,r8,r2
 2006c24:	3087883a 	add	r3,r6,r2
 2006c28:	01408074 	movhi	r5,513
 2006c2c:	297fc504 	addi	r5,r5,-236
 2006c30:	1a400117 	ldw	r9,4(r3)
 2006c34:	29000217 	ldw	r4,8(r5)
 2006c38:	01ffff04 	movi	r7,-4
 2006c3c:	49ce703a 	and	r7,r9,r7
 2006c40:	20c06526 	beq	r4,r3,2006dd8 <_free_r+0x1e4>
 2006c44:	19c00115 	stw	r7,4(r3)
 2006c48:	4200004c 	andi	r8,r8,1
 2006c4c:	40003026 	beq	r8,zero,2006d10 <_free_r+0x11c>
 2006c50:	0009883a 	mov	r4,zero
 2006c54:	19d1883a 	add	r8,r3,r7
 2006c58:	42000117 	ldw	r8,4(r8)
 2006c5c:	4200004c 	andi	r8,r8,1
 2006c60:	4000061e 	bne	r8,zero,2006c7c <_free_r+0x88>
 2006c64:	11c5883a 	add	r2,r2,r7
 2006c68:	19c00217 	ldw	r7,8(r3)
 2006c6c:	20004e26 	beq	r4,zero,2006da8 <_free_r+0x1b4>
 2006c70:	18c00317 	ldw	r3,12(r3)
 2006c74:	38c00315 	stw	r3,12(r7)
 2006c78:	19c00215 	stw	r7,8(r3)
 2006c7c:	11c00054 	ori	r7,r2,1
 2006c80:	3087883a 	add	r3,r6,r2
 2006c84:	31c00115 	stw	r7,4(r6)
 2006c88:	18800015 	stw	r2,0(r3)
 2006c8c:	20001a1e 	bne	r4,zero,2006cf8 <_free_r+0x104>
 2006c90:	00c07fc4 	movi	r3,511
 2006c94:	18802e2e 	bgeu	r3,r2,2006d50 <_free_r+0x15c>
 2006c98:	1006d27a 	srli	r3,r2,9
 2006c9c:	01000104 	movi	r4,4
 2006ca0:	20c06636 	bltu	r4,r3,2006e3c <_free_r+0x248>
 2006ca4:	1008d1ba 	srli	r4,r2,6
 2006ca8:	21000e04 	addi	r4,r4,56
 2006cac:	210f883a 	add	r7,r4,r4
 2006cb0:	39cf883a 	add	r7,r7,r7
 2006cb4:	39cf883a 	add	r7,r7,r7
 2006cb8:	29cf883a 	add	r7,r5,r7
 2006cbc:	38c00217 	ldw	r3,8(r7)
 2006cc0:	01408074 	movhi	r5,513
 2006cc4:	297fc504 	addi	r5,r5,-236
 2006cc8:	19c06126 	beq	r3,r7,2006e50 <_free_r+0x25c>
 2006ccc:	013fff04 	movi	r4,-4
 2006cd0:	19400117 	ldw	r5,4(r3)
 2006cd4:	290a703a 	and	r5,r5,r4
 2006cd8:	1140022e 	bgeu	r2,r5,2006ce4 <_free_r+0xf0>
 2006cdc:	18c00217 	ldw	r3,8(r3)
 2006ce0:	38fffb1e 	bne	r7,r3,2006cd0 <_free_r+0xdc>
 2006ce4:	18800317 	ldw	r2,12(r3)
 2006ce8:	30800315 	stw	r2,12(r6)
 2006cec:	30c00215 	stw	r3,8(r6)
 2006cf0:	11800215 	stw	r6,8(r2)
 2006cf4:	19800315 	stw	r6,12(r3)
 2006cf8:	8809883a 	mov	r4,r17
 2006cfc:	dfc00217 	ldw	ra,8(sp)
 2006d00:	dc400117 	ldw	r17,4(sp)
 2006d04:	dc000017 	ldw	r16,0(sp)
 2006d08:	dec00304 	addi	sp,sp,12
 2006d0c:	200b5901 	jmpi	200b590 <__malloc_unlock>
 2006d10:	813ffe17 	ldw	r4,-8(r16)
 2006d14:	2a400204 	addi	r9,r5,8
 2006d18:	310dc83a 	sub	r6,r6,r4
 2006d1c:	32000217 	ldw	r8,8(r6)
 2006d20:	1105883a 	add	r2,r2,r4
 2006d24:	42404326 	beq	r8,r9,2006e34 <_free_r+0x240>
 2006d28:	32400317 	ldw	r9,12(r6)
 2006d2c:	0009883a 	mov	r4,zero
 2006d30:	42400315 	stw	r9,12(r8)
 2006d34:	4a000215 	stw	r8,8(r9)
 2006d38:	003fc606 	br	2006c54 <_free_r+0x60>
 2006d3c:	dfc00217 	ldw	ra,8(sp)
 2006d40:	dc400117 	ldw	r17,4(sp)
 2006d44:	dc000017 	ldw	r16,0(sp)
 2006d48:	dec00304 	addi	sp,sp,12
 2006d4c:	f800283a 	ret
 2006d50:	1004d0fa 	srli	r2,r2,3
 2006d54:	02000044 	movi	r8,1
 2006d58:	29c00117 	ldw	r7,4(r5)
 2006d5c:	1087883a 	add	r3,r2,r2
 2006d60:	18c7883a 	add	r3,r3,r3
 2006d64:	1005d0ba 	srai	r2,r2,2
 2006d68:	18c7883a 	add	r3,r3,r3
 2006d6c:	28c7883a 	add	r3,r5,r3
 2006d70:	19000217 	ldw	r4,8(r3)
 2006d74:	4084983a 	sll	r2,r8,r2
 2006d78:	30c00315 	stw	r3,12(r6)
 2006d7c:	31000215 	stw	r4,8(r6)
 2006d80:	11c4b03a 	or	r2,r2,r7
 2006d84:	21800315 	stw	r6,12(r4)
 2006d88:	8809883a 	mov	r4,r17
 2006d8c:	28800115 	stw	r2,4(r5)
 2006d90:	19800215 	stw	r6,8(r3)
 2006d94:	dfc00217 	ldw	ra,8(sp)
 2006d98:	dc400117 	ldw	r17,4(sp)
 2006d9c:	dc000017 	ldw	r16,0(sp)
 2006da0:	dec00304 	addi	sp,sp,12
 2006da4:	200b5901 	jmpi	200b590 <__malloc_unlock>
 2006da8:	02008074 	movhi	r8,513
 2006dac:	423fc704 	addi	r8,r8,-228
 2006db0:	3a3faf1e 	bne	r7,r8,2006c70 <_free_r+0x7c>
 2006db4:	29800515 	stw	r6,20(r5)
 2006db8:	29800415 	stw	r6,16(r5)
 2006dbc:	11000054 	ori	r4,r2,1
 2006dc0:	3087883a 	add	r3,r6,r2
 2006dc4:	31c00315 	stw	r7,12(r6)
 2006dc8:	31c00215 	stw	r7,8(r6)
 2006dcc:	31000115 	stw	r4,4(r6)
 2006dd0:	18800015 	stw	r2,0(r3)
 2006dd4:	003fc806 	br	2006cf8 <_free_r+0x104>
 2006dd8:	4200004c 	andi	r8,r8,1
 2006ddc:	3885883a 	add	r2,r7,r2
 2006de0:	4000071e 	bne	r8,zero,2006e00 <_free_r+0x20c>
 2006de4:	81fffe17 	ldw	r7,-8(r16)
 2006de8:	31cdc83a 	sub	r6,r6,r7
 2006dec:	30c00317 	ldw	r3,12(r6)
 2006df0:	31000217 	ldw	r4,8(r6)
 2006df4:	11c5883a 	add	r2,r2,r7
 2006df8:	20c00315 	stw	r3,12(r4)
 2006dfc:	19000215 	stw	r4,8(r3)
 2006e00:	00c08074 	movhi	r3,513
 2006e04:	18c5b404 	addi	r3,r3,5840
 2006e08:	18c00017 	ldw	r3,0(r3)
 2006e0c:	11000054 	ori	r4,r2,1
 2006e10:	31000115 	stw	r4,4(r6)
 2006e14:	29800215 	stw	r6,8(r5)
 2006e18:	10ffb736 	bltu	r2,r3,2006cf8 <_free_r+0x104>
 2006e1c:	00808074 	movhi	r2,513
 2006e20:	1085ca04 	addi	r2,r2,5928
 2006e24:	11400017 	ldw	r5,0(r2)
 2006e28:	8809883a 	mov	r4,r17
 2006e2c:	2006ab80 	call	2006ab8 <_malloc_trim_r>
 2006e30:	003fb106 	br	2006cf8 <_free_r+0x104>
 2006e34:	01000044 	movi	r4,1
 2006e38:	003f8606 	br	2006c54 <_free_r+0x60>
 2006e3c:	01000504 	movi	r4,20
 2006e40:	20c00b36 	bltu	r4,r3,2006e70 <_free_r+0x27c>
 2006e44:	190016c4 	addi	r4,r3,91
 2006e48:	210f883a 	add	r7,r4,r4
 2006e4c:	003f9806 	br	2006cb0 <_free_r+0xbc>
 2006e50:	2009d0ba 	srai	r4,r4,2
 2006e54:	00800044 	movi	r2,1
 2006e58:	29c00117 	ldw	r7,4(r5)
 2006e5c:	1108983a 	sll	r4,r2,r4
 2006e60:	1805883a 	mov	r2,r3
 2006e64:	21c8b03a 	or	r4,r4,r7
 2006e68:	29000115 	stw	r4,4(r5)
 2006e6c:	003f9e06 	br	2006ce8 <_free_r+0xf4>
 2006e70:	01001504 	movi	r4,84
 2006e74:	20c00436 	bltu	r4,r3,2006e88 <_free_r+0x294>
 2006e78:	1008d33a 	srli	r4,r2,12
 2006e7c:	21001b84 	addi	r4,r4,110
 2006e80:	210f883a 	add	r7,r4,r4
 2006e84:	003f8a06 	br	2006cb0 <_free_r+0xbc>
 2006e88:	01005504 	movi	r4,340
 2006e8c:	20c00436 	bltu	r4,r3,2006ea0 <_free_r+0x2ac>
 2006e90:	1008d3fa 	srli	r4,r2,15
 2006e94:	21001dc4 	addi	r4,r4,119
 2006e98:	210f883a 	add	r7,r4,r4
 2006e9c:	003f8406 	br	2006cb0 <_free_r+0xbc>
 2006ea0:	01015504 	movi	r4,1364
 2006ea4:	20c00436 	bltu	r4,r3,2006eb8 <_free_r+0x2c4>
 2006ea8:	1008d4ba 	srli	r4,r2,18
 2006eac:	21001f04 	addi	r4,r4,124
 2006eb0:	210f883a 	add	r7,r4,r4
 2006eb4:	003f7e06 	br	2006cb0 <_free_r+0xbc>
 2006eb8:	01c03f04 	movi	r7,252
 2006ebc:	01001f84 	movi	r4,126
 2006ec0:	003f7b06 	br	2006cb0 <_free_r+0xbc>

02006ec4 <__sfvwrite_r>:
 2006ec4:	30800217 	ldw	r2,8(r6)
 2006ec8:	defff504 	addi	sp,sp,-44
 2006ecc:	dd400615 	stw	r21,24(sp)
 2006ed0:	dd000515 	stw	r20,20(sp)
 2006ed4:	dc000115 	stw	r16,4(sp)
 2006ed8:	dfc00a15 	stw	ra,40(sp)
 2006edc:	df000915 	stw	fp,36(sp)
 2006ee0:	ddc00815 	stw	r23,32(sp)
 2006ee4:	dd800715 	stw	r22,28(sp)
 2006ee8:	dcc00415 	stw	r19,16(sp)
 2006eec:	dc800315 	stw	r18,12(sp)
 2006ef0:	dc400215 	stw	r17,8(sp)
 2006ef4:	3029883a 	mov	r20,r6
 2006ef8:	202b883a 	mov	r21,r4
 2006efc:	2821883a 	mov	r16,r5
 2006f00:	10002126 	beq	r2,zero,2006f88 <__sfvwrite_r+0xc4>
 2006f04:	2880030b 	ldhu	r2,12(r5)
 2006f08:	10c0020c 	andi	r3,r2,8
 2006f0c:	18ffffcc 	andi	r3,r3,65535
 2006f10:	18e0001c 	xori	r3,r3,32768
 2006f14:	18e00004 	addi	r3,r3,-32768
 2006f18:	18002826 	beq	r3,zero,2006fbc <__sfvwrite_r+0xf8>
 2006f1c:	28c00417 	ldw	r3,16(r5)
 2006f20:	18002626 	beq	r3,zero,2006fbc <__sfvwrite_r+0xf8>
 2006f24:	10c0008c 	andi	r3,r2,2
 2006f28:	18ffffcc 	andi	r3,r3,65535
 2006f2c:	18e0001c 	xori	r3,r3,32768
 2006f30:	18e00004 	addi	r3,r3,-32768
 2006f34:	a4400017 	ldw	r17,0(r20)
 2006f38:	18002b26 	beq	r3,zero,2006fe8 <__sfvwrite_r+0x124>
 2006f3c:	0027883a 	mov	r19,zero
 2006f40:	0025883a 	mov	r18,zero
 2006f44:	05810004 	movi	r22,1024
 2006f48:	980d883a 	mov	r6,r19
 2006f4c:	a809883a 	mov	r4,r21
 2006f50:	90004f26 	beq	r18,zero,2007090 <__sfvwrite_r+0x1cc>
 2006f54:	900f883a 	mov	r7,r18
 2006f58:	81400717 	ldw	r5,28(r16)
 2006f5c:	b480012e 	bgeu	r22,r18,2006f64 <__sfvwrite_r+0xa0>
 2006f60:	01c10004 	movi	r7,1024
 2006f64:	80800917 	ldw	r2,36(r16)
 2006f68:	103ee83a 	callr	r2
 2006f6c:	0080540e 	bge	zero,r2,20070c0 <__sfvwrite_r+0x1fc>
 2006f70:	a0c00217 	ldw	r3,8(r20)
 2006f74:	98a7883a 	add	r19,r19,r2
 2006f78:	90a5c83a 	sub	r18,r18,r2
 2006f7c:	1885c83a 	sub	r2,r3,r2
 2006f80:	a0800215 	stw	r2,8(r20)
 2006f84:	103ff01e 	bne	r2,zero,2006f48 <__sfvwrite_r+0x84>
 2006f88:	0005883a 	mov	r2,zero
 2006f8c:	dfc00a17 	ldw	ra,40(sp)
 2006f90:	df000917 	ldw	fp,36(sp)
 2006f94:	ddc00817 	ldw	r23,32(sp)
 2006f98:	dd800717 	ldw	r22,28(sp)
 2006f9c:	dd400617 	ldw	r21,24(sp)
 2006fa0:	dd000517 	ldw	r20,20(sp)
 2006fa4:	dcc00417 	ldw	r19,16(sp)
 2006fa8:	dc800317 	ldw	r18,12(sp)
 2006fac:	dc400217 	ldw	r17,8(sp)
 2006fb0:	dc000117 	ldw	r16,4(sp)
 2006fb4:	dec00b04 	addi	sp,sp,44
 2006fb8:	f800283a 	ret
 2006fbc:	a809883a 	mov	r4,r21
 2006fc0:	800b883a 	mov	r5,r16
 2006fc4:	2004aec0 	call	2004aec <__swsetup_r>
 2006fc8:	1000f01e 	bne	r2,zero,200738c <__sfvwrite_r+0x4c8>
 2006fcc:	8080030b 	ldhu	r2,12(r16)
 2006fd0:	a4400017 	ldw	r17,0(r20)
 2006fd4:	10c0008c 	andi	r3,r2,2
 2006fd8:	18ffffcc 	andi	r3,r3,65535
 2006fdc:	18e0001c 	xori	r3,r3,32768
 2006fe0:	18e00004 	addi	r3,r3,-32768
 2006fe4:	183fd51e 	bne	r3,zero,2006f3c <__sfvwrite_r+0x78>
 2006fe8:	10c0004c 	andi	r3,r2,1
 2006fec:	002d883a 	mov	r22,zero
 2006ff0:	1800381e 	bne	r3,zero,20070d4 <__sfvwrite_r+0x210>
 2006ff4:	0025883a 	mov	r18,zero
 2006ff8:	90002126 	beq	r18,zero,2007080 <__sfvwrite_r+0x1bc>
 2006ffc:	10c0800c 	andi	r3,r2,512
 2007000:	18ffffcc 	andi	r3,r3,65535
 2007004:	18e0001c 	xori	r3,r3,32768
 2007008:	18e00004 	addi	r3,r3,-32768
 200700c:	84c00217 	ldw	r19,8(r16)
 2007010:	18006b26 	beq	r3,zero,20071c0 <__sfvwrite_r+0x2fc>
 2007014:	980f883a 	mov	r7,r19
 2007018:	94c08636 	bltu	r18,r19,2007234 <__sfvwrite_r+0x370>
 200701c:	10c1200c 	andi	r3,r2,1152
 2007020:	18009f1e 	bne	r3,zero,20072a0 <__sfvwrite_r+0x3dc>
 2007024:	81000017 	ldw	r4,0(r16)
 2007028:	982f883a 	mov	r23,r19
 200702c:	9039883a 	mov	fp,r18
 2007030:	9027883a 	mov	r19,r18
 2007034:	380d883a 	mov	r6,r7
 2007038:	b00b883a 	mov	r5,r22
 200703c:	d9c00015 	stw	r7,0(sp)
 2007040:	20077ac0 	call	20077ac <memmove>
 2007044:	d9c00017 	ldw	r7,0(sp)
 2007048:	81000217 	ldw	r4,8(r16)
 200704c:	80800017 	ldw	r2,0(r16)
 2007050:	25efc83a 	sub	r23,r4,r23
 2007054:	11cf883a 	add	r7,r2,r7
 2007058:	85c00215 	stw	r23,8(r16)
 200705c:	81c00015 	stw	r7,0(r16)
 2007060:	a0800217 	ldw	r2,8(r20)
 2007064:	b72d883a 	add	r22,r22,fp
 2007068:	9725c83a 	sub	r18,r18,fp
 200706c:	14e7c83a 	sub	r19,r2,r19
 2007070:	a4c00215 	stw	r19,8(r20)
 2007074:	983fc426 	beq	r19,zero,2006f88 <__sfvwrite_r+0xc4>
 2007078:	8080030b 	ldhu	r2,12(r16)
 200707c:	903fdf1e 	bne	r18,zero,2006ffc <__sfvwrite_r+0x138>
 2007080:	8d800017 	ldw	r22,0(r17)
 2007084:	8c800117 	ldw	r18,4(r17)
 2007088:	8c400204 	addi	r17,r17,8
 200708c:	003fda06 	br	2006ff8 <__sfvwrite_r+0x134>
 2007090:	8cc00017 	ldw	r19,0(r17)
 2007094:	8c800117 	ldw	r18,4(r17)
 2007098:	8c400204 	addi	r17,r17,8
 200709c:	003faa06 	br	2006f48 <__sfvwrite_r+0x84>
 20070a0:	2008c7c0 	call	2008c7c <_realloc_r>
 20070a4:	102f883a 	mov	r23,r2
 20070a8:	10009f1e 	bne	r2,zero,2007328 <__sfvwrite_r+0x464>
 20070ac:	81400417 	ldw	r5,16(r16)
 20070b0:	a809883a 	mov	r4,r21
 20070b4:	2006bf40 	call	2006bf4 <_free_r>
 20070b8:	00800304 	movi	r2,12
 20070bc:	a8800015 	stw	r2,0(r21)
 20070c0:	80c0030b 	ldhu	r3,12(r16)
 20070c4:	00bfffc4 	movi	r2,-1
 20070c8:	18c01014 	ori	r3,r3,64
 20070cc:	80c0030d 	sth	r3,12(r16)
 20070d0:	003fae06 	br	2006f8c <__sfvwrite_r+0xc8>
 20070d4:	0007883a 	mov	r3,zero
 20070d8:	0039883a 	mov	fp,zero
 20070dc:	0025883a 	mov	r18,zero
 20070e0:	90001e26 	beq	r18,zero,200715c <__sfvwrite_r+0x298>
 20070e4:	18006526 	beq	r3,zero,200727c <__sfvwrite_r+0x3b8>
 20070e8:	b02f883a 	mov	r23,r22
 20070ec:	9580012e 	bgeu	r18,r22,20070f4 <__sfvwrite_r+0x230>
 20070f0:	902f883a 	mov	r23,r18
 20070f4:	81000017 	ldw	r4,0(r16)
 20070f8:	80800417 	ldw	r2,16(r16)
 20070fc:	84c00217 	ldw	r19,8(r16)
 2007100:	81c00517 	ldw	r7,20(r16)
 2007104:	1100022e 	bgeu	r2,r4,2007110 <__sfvwrite_r+0x24c>
 2007108:	99e7883a 	add	r19,r19,r7
 200710c:	9dc01816 	blt	r19,r23,2007170 <__sfvwrite_r+0x2ac>
 2007110:	b9c03b16 	blt	r23,r7,2007200 <__sfvwrite_r+0x33c>
 2007114:	80800917 	ldw	r2,36(r16)
 2007118:	81400717 	ldw	r5,28(r16)
 200711c:	a809883a 	mov	r4,r21
 2007120:	d8c00015 	stw	r3,0(sp)
 2007124:	e00d883a 	mov	r6,fp
 2007128:	103ee83a 	callr	r2
 200712c:	1027883a 	mov	r19,r2
 2007130:	d8c00017 	ldw	r3,0(sp)
 2007134:	00bfe20e 	bge	zero,r2,20070c0 <__sfvwrite_r+0x1fc>
 2007138:	b4edc83a 	sub	r22,r22,r19
 200713c:	b0001a26 	beq	r22,zero,20071a8 <__sfvwrite_r+0x2e4>
 2007140:	a0800217 	ldw	r2,8(r20)
 2007144:	e4f9883a 	add	fp,fp,r19
 2007148:	94e5c83a 	sub	r18,r18,r19
 200714c:	14e7c83a 	sub	r19,r2,r19
 2007150:	a4c00215 	stw	r19,8(r20)
 2007154:	983f8c26 	beq	r19,zero,2006f88 <__sfvwrite_r+0xc4>
 2007158:	903fe21e 	bne	r18,zero,20070e4 <__sfvwrite_r+0x220>
 200715c:	8f000017 	ldw	fp,0(r17)
 2007160:	8c800117 	ldw	r18,4(r17)
 2007164:	0007883a 	mov	r3,zero
 2007168:	8c400204 	addi	r17,r17,8
 200716c:	003fdc06 	br	20070e0 <__sfvwrite_r+0x21c>
 2007170:	e00b883a 	mov	r5,fp
 2007174:	980d883a 	mov	r6,r19
 2007178:	d8c00015 	stw	r3,0(sp)
 200717c:	20077ac0 	call	20077ac <memmove>
 2007180:	80800017 	ldw	r2,0(r16)
 2007184:	a809883a 	mov	r4,r21
 2007188:	800b883a 	mov	r5,r16
 200718c:	14c5883a 	add	r2,r2,r19
 2007190:	80800015 	stw	r2,0(r16)
 2007194:	200651c0 	call	200651c <_fflush_r>
 2007198:	d8c00017 	ldw	r3,0(sp)
 200719c:	103fc81e 	bne	r2,zero,20070c0 <__sfvwrite_r+0x1fc>
 20071a0:	b4edc83a 	sub	r22,r22,r19
 20071a4:	b03fe61e 	bne	r22,zero,2007140 <__sfvwrite_r+0x27c>
 20071a8:	a809883a 	mov	r4,r21
 20071ac:	800b883a 	mov	r5,r16
 20071b0:	200651c0 	call	200651c <_fflush_r>
 20071b4:	103fc21e 	bne	r2,zero,20070c0 <__sfvwrite_r+0x1fc>
 20071b8:	0007883a 	mov	r3,zero
 20071bc:	003fe006 	br	2007140 <__sfvwrite_r+0x27c>
 20071c0:	81000017 	ldw	r4,0(r16)
 20071c4:	80800417 	ldw	r2,16(r16)
 20071c8:	1100022e 	bgeu	r2,r4,20071d4 <__sfvwrite_r+0x310>
 20071cc:	9839883a 	mov	fp,r19
 20071d0:	9c806036 	bltu	r19,r18,2007354 <__sfvwrite_r+0x490>
 20071d4:	81c00517 	ldw	r7,20(r16)
 20071d8:	91c01c36 	bltu	r18,r7,200724c <__sfvwrite_r+0x388>
 20071dc:	80800917 	ldw	r2,36(r16)
 20071e0:	81400717 	ldw	r5,28(r16)
 20071e4:	a809883a 	mov	r4,r21
 20071e8:	b00d883a 	mov	r6,r22
 20071ec:	103ee83a 	callr	r2
 20071f0:	1027883a 	mov	r19,r2
 20071f4:	00bfb20e 	bge	zero,r2,20070c0 <__sfvwrite_r+0x1fc>
 20071f8:	1039883a 	mov	fp,r2
 20071fc:	003f9806 	br	2007060 <__sfvwrite_r+0x19c>
 2007200:	b80d883a 	mov	r6,r23
 2007204:	e00b883a 	mov	r5,fp
 2007208:	d8c00015 	stw	r3,0(sp)
 200720c:	20077ac0 	call	20077ac <memmove>
 2007210:	80800217 	ldw	r2,8(r16)
 2007214:	81000017 	ldw	r4,0(r16)
 2007218:	b827883a 	mov	r19,r23
 200721c:	15c5c83a 	sub	r2,r2,r23
 2007220:	25ef883a 	add	r23,r4,r23
 2007224:	80800215 	stw	r2,8(r16)
 2007228:	85c00015 	stw	r23,0(r16)
 200722c:	d8c00017 	ldw	r3,0(sp)
 2007230:	003fc106 	br	2007138 <__sfvwrite_r+0x274>
 2007234:	81000017 	ldw	r4,0(r16)
 2007238:	902f883a 	mov	r23,r18
 200723c:	9039883a 	mov	fp,r18
 2007240:	9027883a 	mov	r19,r18
 2007244:	900f883a 	mov	r7,r18
 2007248:	003f7a06 	br	2007034 <__sfvwrite_r+0x170>
 200724c:	b00b883a 	mov	r5,r22
 2007250:	900d883a 	mov	r6,r18
 2007254:	20077ac0 	call	20077ac <memmove>
 2007258:	80c00217 	ldw	r3,8(r16)
 200725c:	80800017 	ldw	r2,0(r16)
 2007260:	9027883a 	mov	r19,r18
 2007264:	1c87c83a 	sub	r3,r3,r18
 2007268:	1485883a 	add	r2,r2,r18
 200726c:	80c00215 	stw	r3,8(r16)
 2007270:	80800015 	stw	r2,0(r16)
 2007274:	9039883a 	mov	fp,r18
 2007278:	003f7906 	br	2007060 <__sfvwrite_r+0x19c>
 200727c:	e009883a 	mov	r4,fp
 2007280:	01400284 	movi	r5,10
 2007284:	900d883a 	mov	r6,r18
 2007288:	20076b40 	call	20076b4 <memchr>
 200728c:	10003c26 	beq	r2,zero,2007380 <__sfvwrite_r+0x4bc>
 2007290:	15800044 	addi	r22,r2,1
 2007294:	b72dc83a 	sub	r22,r22,fp
 2007298:	00c00044 	movi	r3,1
 200729c:	003f9206 	br	20070e8 <__sfvwrite_r+0x224>
 20072a0:	81000517 	ldw	r4,20(r16)
 20072a4:	81400417 	ldw	r5,16(r16)
 20072a8:	80c00017 	ldw	r3,0(r16)
 20072ac:	210d883a 	add	r6,r4,r4
 20072b0:	3109883a 	add	r4,r6,r4
 20072b4:	2026d7fa 	srli	r19,r4,31
 20072b8:	1979c83a 	sub	fp,r3,r5
 20072bc:	e1800044 	addi	r6,fp,1
 20072c0:	9909883a 	add	r4,r19,r4
 20072c4:	2027d07a 	srai	r19,r4,1
 20072c8:	3489883a 	add	r4,r6,r18
 20072cc:	980d883a 	mov	r6,r19
 20072d0:	9900022e 	bgeu	r19,r4,20072dc <__sfvwrite_r+0x418>
 20072d4:	2027883a 	mov	r19,r4
 20072d8:	200d883a 	mov	r6,r4
 20072dc:	1081000c 	andi	r2,r2,1024
 20072e0:	10bfffcc 	andi	r2,r2,65535
 20072e4:	10a0001c 	xori	r2,r2,32768
 20072e8:	10a00004 	addi	r2,r2,-32768
 20072ec:	a809883a 	mov	r4,r21
 20072f0:	103f6b26 	beq	r2,zero,20070a0 <__sfvwrite_r+0x1dc>
 20072f4:	300b883a 	mov	r5,r6
 20072f8:	2001cc00 	call	2001cc0 <_malloc_r>
 20072fc:	102f883a 	mov	r23,r2
 2007300:	103f6d26 	beq	r2,zero,20070b8 <__sfvwrite_r+0x1f4>
 2007304:	81400417 	ldw	r5,16(r16)
 2007308:	1009883a 	mov	r4,r2
 200730c:	e00d883a 	mov	r6,fp
 2007310:	20024440 	call	2002444 <memcpy>
 2007314:	8080030b 	ldhu	r2,12(r16)
 2007318:	00fedfc4 	movi	r3,-1153
 200731c:	10c4703a 	and	r2,r2,r3
 2007320:	10802014 	ori	r2,r2,128
 2007324:	8080030d 	sth	r2,12(r16)
 2007328:	bf09883a 	add	r4,r23,fp
 200732c:	9f07c83a 	sub	r3,r19,fp
 2007330:	85c00415 	stw	r23,16(r16)
 2007334:	84c00515 	stw	r19,20(r16)
 2007338:	81000015 	stw	r4,0(r16)
 200733c:	902f883a 	mov	r23,r18
 2007340:	80c00215 	stw	r3,8(r16)
 2007344:	9039883a 	mov	fp,r18
 2007348:	9027883a 	mov	r19,r18
 200734c:	900f883a 	mov	r7,r18
 2007350:	003f3806 	br	2007034 <__sfvwrite_r+0x170>
 2007354:	b00b883a 	mov	r5,r22
 2007358:	980d883a 	mov	r6,r19
 200735c:	20077ac0 	call	20077ac <memmove>
 2007360:	80800017 	ldw	r2,0(r16)
 2007364:	a809883a 	mov	r4,r21
 2007368:	800b883a 	mov	r5,r16
 200736c:	14c5883a 	add	r2,r2,r19
 2007370:	80800015 	stw	r2,0(r16)
 2007374:	200651c0 	call	200651c <_fflush_r>
 2007378:	103f3926 	beq	r2,zero,2007060 <__sfvwrite_r+0x19c>
 200737c:	003f5006 	br	20070c0 <__sfvwrite_r+0x1fc>
 2007380:	95800044 	addi	r22,r18,1
 2007384:	00c00044 	movi	r3,1
 2007388:	003f5706 	br	20070e8 <__sfvwrite_r+0x224>
 200738c:	80c0030b 	ldhu	r3,12(r16)
 2007390:	00bfffc4 	movi	r2,-1
 2007394:	18c01014 	ori	r3,r3,64
 2007398:	80c0030d 	sth	r3,12(r16)
 200739c:	00c00244 	movi	r3,9
 20073a0:	a8c00015 	stw	r3,0(r21)
 20073a4:	003ef906 	br	2006f8c <__sfvwrite_r+0xc8>

020073a8 <_fwalk>:
 20073a8:	defff904 	addi	sp,sp,-28
 20073ac:	dcc00315 	stw	r19,12(sp)
 20073b0:	24c0b804 	addi	r19,r4,736
 20073b4:	dd400515 	stw	r21,20(sp)
 20073b8:	dd000415 	stw	r20,16(sp)
 20073bc:	dfc00615 	stw	ra,24(sp)
 20073c0:	dc800215 	stw	r18,8(sp)
 20073c4:	dc400115 	stw	r17,4(sp)
 20073c8:	dc000015 	stw	r16,0(sp)
 20073cc:	282b883a 	mov	r21,r5
 20073d0:	0029883a 	mov	r20,zero
 20073d4:	20069e00 	call	20069e0 <__sfp_lock_acquire>
 20073d8:	98001226 	beq	r19,zero,2007424 <_fwalk+0x7c>
 20073dc:	04bfffc4 	movi	r18,-1
 20073e0:	9c400117 	ldw	r17,4(r19)
 20073e4:	9c000217 	ldw	r16,8(r19)
 20073e8:	8c7fffc4 	addi	r17,r17,-1
 20073ec:	88000b16 	blt	r17,zero,200741c <_fwalk+0x74>
 20073f0:	84000304 	addi	r16,r16,12
 20073f4:	80c0000f 	ldh	r3,0(r16)
 20073f8:	8c7fffc4 	addi	r17,r17,-1
 20073fc:	813ffd04 	addi	r4,r16,-12
 2007400:	18000426 	beq	r3,zero,2007414 <_fwalk+0x6c>
 2007404:	80c0008f 	ldh	r3,2(r16)
 2007408:	1c800226 	beq	r3,r18,2007414 <_fwalk+0x6c>
 200740c:	a83ee83a 	callr	r21
 2007410:	a0a8b03a 	or	r20,r20,r2
 2007414:	84001704 	addi	r16,r16,92
 2007418:	8cbff61e 	bne	r17,r18,20073f4 <_fwalk+0x4c>
 200741c:	9cc00017 	ldw	r19,0(r19)
 2007420:	983fef1e 	bne	r19,zero,20073e0 <_fwalk+0x38>
 2007424:	20069e40 	call	20069e4 <__sfp_lock_release>
 2007428:	a005883a 	mov	r2,r20
 200742c:	dfc00617 	ldw	ra,24(sp)
 2007430:	dd400517 	ldw	r21,20(sp)
 2007434:	dd000417 	ldw	r20,16(sp)
 2007438:	dcc00317 	ldw	r19,12(sp)
 200743c:	dc800217 	ldw	r18,8(sp)
 2007440:	dc400117 	ldw	r17,4(sp)
 2007444:	dc000017 	ldw	r16,0(sp)
 2007448:	dec00704 	addi	sp,sp,28
 200744c:	f800283a 	ret

02007450 <_fwalk_reent>:
 2007450:	defff804 	addi	sp,sp,-32
 2007454:	dcc00315 	stw	r19,12(sp)
 2007458:	24c0b804 	addi	r19,r4,736
 200745c:	dd800615 	stw	r22,24(sp)
 2007460:	dd400515 	stw	r21,20(sp)
 2007464:	dd000415 	stw	r20,16(sp)
 2007468:	dfc00715 	stw	ra,28(sp)
 200746c:	dc800215 	stw	r18,8(sp)
 2007470:	dc400115 	stw	r17,4(sp)
 2007474:	dc000015 	stw	r16,0(sp)
 2007478:	2029883a 	mov	r20,r4
 200747c:	282b883a 	mov	r21,r5
 2007480:	002d883a 	mov	r22,zero
 2007484:	20069e00 	call	20069e0 <__sfp_lock_acquire>
 2007488:	98001326 	beq	r19,zero,20074d8 <_fwalk_reent+0x88>
 200748c:	04bfffc4 	movi	r18,-1
 2007490:	9c400117 	ldw	r17,4(r19)
 2007494:	9c000217 	ldw	r16,8(r19)
 2007498:	8c7fffc4 	addi	r17,r17,-1
 200749c:	88000c16 	blt	r17,zero,20074d0 <_fwalk_reent+0x80>
 20074a0:	84000304 	addi	r16,r16,12
 20074a4:	80c0000f 	ldh	r3,0(r16)
 20074a8:	8c7fffc4 	addi	r17,r17,-1
 20074ac:	817ffd04 	addi	r5,r16,-12
 20074b0:	18000526 	beq	r3,zero,20074c8 <_fwalk_reent+0x78>
 20074b4:	80c0008f 	ldh	r3,2(r16)
 20074b8:	a009883a 	mov	r4,r20
 20074bc:	1c800226 	beq	r3,r18,20074c8 <_fwalk_reent+0x78>
 20074c0:	a83ee83a 	callr	r21
 20074c4:	b0acb03a 	or	r22,r22,r2
 20074c8:	84001704 	addi	r16,r16,92
 20074cc:	8cbff51e 	bne	r17,r18,20074a4 <_fwalk_reent+0x54>
 20074d0:	9cc00017 	ldw	r19,0(r19)
 20074d4:	983fee1e 	bne	r19,zero,2007490 <_fwalk_reent+0x40>
 20074d8:	20069e40 	call	20069e4 <__sfp_lock_release>
 20074dc:	b005883a 	mov	r2,r22
 20074e0:	dfc00717 	ldw	ra,28(sp)
 20074e4:	dd800617 	ldw	r22,24(sp)
 20074e8:	dd400517 	ldw	r21,20(sp)
 20074ec:	dd000417 	ldw	r20,16(sp)
 20074f0:	dcc00317 	ldw	r19,12(sp)
 20074f4:	dc800217 	ldw	r18,8(sp)
 20074f8:	dc400117 	ldw	r17,4(sp)
 20074fc:	dc000017 	ldw	r16,0(sp)
 2007500:	dec00804 	addi	sp,sp,32
 2007504:	f800283a 	ret

02007508 <_isatty_r>:
 2007508:	defffd04 	addi	sp,sp,-12
 200750c:	dc400115 	stw	r17,4(sp)
 2007510:	dc000015 	stw	r16,0(sp)
 2007514:	2023883a 	mov	r17,r4
 2007518:	04008074 	movhi	r16,513
 200751c:	8405c704 	addi	r16,r16,5916
 2007520:	2809883a 	mov	r4,r5
 2007524:	dfc00215 	stw	ra,8(sp)
 2007528:	80000015 	stw	zero,0(r16)
 200752c:	200b3300 	call	200b330 <isatty>
 2007530:	00ffffc4 	movi	r3,-1
 2007534:	10c00526 	beq	r2,r3,200754c <_isatty_r+0x44>
 2007538:	dfc00217 	ldw	ra,8(sp)
 200753c:	dc400117 	ldw	r17,4(sp)
 2007540:	dc000017 	ldw	r16,0(sp)
 2007544:	dec00304 	addi	sp,sp,12
 2007548:	f800283a 	ret
 200754c:	80c00017 	ldw	r3,0(r16)
 2007550:	183ff926 	beq	r3,zero,2007538 <_isatty_r+0x30>
 2007554:	88c00015 	stw	r3,0(r17)
 2007558:	dfc00217 	ldw	ra,8(sp)
 200755c:	dc400117 	ldw	r17,4(sp)
 2007560:	dc000017 	ldw	r16,0(sp)
 2007564:	dec00304 	addi	sp,sp,12
 2007568:	f800283a 	ret

0200756c <_setlocale_r>:
 200756c:	defffc04 	addi	sp,sp,-16
 2007570:	dc800215 	stw	r18,8(sp)
 2007574:	dc400115 	stw	r17,4(sp)
 2007578:	dc000015 	stw	r16,0(sp)
 200757c:	dfc00315 	stw	ra,12(sp)
 2007580:	3021883a 	mov	r16,r6
 2007584:	2023883a 	mov	r17,r4
 2007588:	2825883a 	mov	r18,r5
 200758c:	30001626 	beq	r6,zero,20075e8 <_setlocale_r+0x7c>
 2007590:	3009883a 	mov	r4,r6
 2007594:	01408074 	movhi	r5,513
 2007598:	297e3204 	addi	r5,r5,-1848
 200759c:	20092dc0 	call	20092dc <strcmp>
 20075a0:	10000a1e 	bne	r2,zero,20075cc <_setlocale_r+0x60>
 20075a4:	8c800c15 	stw	r18,48(r17)
 20075a8:	8c000d15 	stw	r16,52(r17)
 20075ac:	00808074 	movhi	r2,513
 20075b0:	10be3204 	addi	r2,r2,-1848
 20075b4:	dfc00317 	ldw	ra,12(sp)
 20075b8:	dc800217 	ldw	r18,8(sp)
 20075bc:	dc400117 	ldw	r17,4(sp)
 20075c0:	dc000017 	ldw	r16,0(sp)
 20075c4:	dec00404 	addi	sp,sp,16
 20075c8:	f800283a 	ret
 20075cc:	8009883a 	mov	r4,r16
 20075d0:	01408074 	movhi	r5,513
 20075d4:	297e3c04 	addi	r5,r5,-1808
 20075d8:	20092dc0 	call	20092dc <strcmp>
 20075dc:	103ff126 	beq	r2,zero,20075a4 <_setlocale_r+0x38>
 20075e0:	0005883a 	mov	r2,zero
 20075e4:	003ff306 	br	20075b4 <_setlocale_r+0x48>
 20075e8:	00808074 	movhi	r2,513
 20075ec:	10be3204 	addi	r2,r2,-1848
 20075f0:	dfc00317 	ldw	ra,12(sp)
 20075f4:	dc800217 	ldw	r18,8(sp)
 20075f8:	dc400117 	ldw	r17,4(sp)
 20075fc:	dc000017 	ldw	r16,0(sp)
 2007600:	dec00404 	addi	sp,sp,16
 2007604:	f800283a 	ret

02007608 <__locale_charset>:
 2007608:	00808074 	movhi	r2,513
 200760c:	10be5104 	addi	r2,r2,-1724
 2007610:	f800283a 	ret

02007614 <_localeconv_r>:
 2007614:	00808074 	movhi	r2,513
 2007618:	10be5504 	addi	r2,r2,-1708
 200761c:	f800283a 	ret

02007620 <setlocale>:
 2007620:	00c08074 	movhi	r3,513
 2007624:	18c5b204 	addi	r3,r3,5832
 2007628:	2005883a 	mov	r2,r4
 200762c:	19000017 	ldw	r4,0(r3)
 2007630:	280d883a 	mov	r6,r5
 2007634:	100b883a 	mov	r5,r2
 2007638:	200756c1 	jmpi	200756c <_setlocale_r>

0200763c <localeconv>:
 200763c:	00808074 	movhi	r2,513
 2007640:	10be5504 	addi	r2,r2,-1708
 2007644:	f800283a 	ret

02007648 <_lseek_r>:
 2007648:	defffd04 	addi	sp,sp,-12
 200764c:	dc400115 	stw	r17,4(sp)
 2007650:	dc000015 	stw	r16,0(sp)
 2007654:	2023883a 	mov	r17,r4
 2007658:	04008074 	movhi	r16,513
 200765c:	8405c704 	addi	r16,r16,5916
 2007660:	2809883a 	mov	r4,r5
 2007664:	300b883a 	mov	r5,r6
 2007668:	380d883a 	mov	r6,r7
 200766c:	dfc00215 	stw	ra,8(sp)
 2007670:	80000015 	stw	zero,0(r16)
 2007674:	200b4240 	call	200b424 <lseek>
 2007678:	00ffffc4 	movi	r3,-1
 200767c:	10c00526 	beq	r2,r3,2007694 <_lseek_r+0x4c>
 2007680:	dfc00217 	ldw	ra,8(sp)
 2007684:	dc400117 	ldw	r17,4(sp)
 2007688:	dc000017 	ldw	r16,0(sp)
 200768c:	dec00304 	addi	sp,sp,12
 2007690:	f800283a 	ret
 2007694:	80c00017 	ldw	r3,0(r16)
 2007698:	183ff926 	beq	r3,zero,2007680 <_lseek_r+0x38>
 200769c:	88c00015 	stw	r3,0(r17)
 20076a0:	dfc00217 	ldw	ra,8(sp)
 20076a4:	dc400117 	ldw	r17,4(sp)
 20076a8:	dc000017 	ldw	r16,0(sp)
 20076ac:	dec00304 	addi	sp,sp,12
 20076b0:	f800283a 	ret

020076b4 <memchr>:
 20076b4:	008000c4 	movi	r2,3
 20076b8:	29403fcc 	andi	r5,r5,255
 20076bc:	1180282e 	bgeu	r2,r6,2007760 <memchr+0xac>
 20076c0:	2086703a 	and	r3,r4,r2
 20076c4:	1800351e 	bne	r3,zero,200779c <memchr+0xe8>
 20076c8:	2816923a 	slli	r11,r5,8
 20076cc:	2093883a 	add	r9,r4,r2
 20076d0:	22000084 	addi	r8,r4,2
 20076d4:	5957883a 	add	r11,r11,r5
 20076d8:	5816923a 	slli	r11,r11,8
 20076dc:	20c00044 	addi	r3,r4,1
 20076e0:	037fbff4 	movhi	r13,65279
 20076e4:	6b7fbfc4 	addi	r13,r13,-257
 20076e8:	5957883a 	add	r11,r11,r5
 20076ec:	5816923a 	slli	r11,r11,8
 20076f0:	03202074 	movhi	r12,32897
 20076f4:	63202004 	addi	r12,r12,-32640
 20076f8:	101d883a 	mov	r14,r2
 20076fc:	5957883a 	add	r11,r11,r5
 2007700:	21c00017 	ldw	r7,0(r4)
 2007704:	31bfff04 	addi	r6,r6,-4
 2007708:	1805883a 	mov	r2,r3
 200770c:	3acef03a 	xor	r7,r7,r11
 2007710:	3b55883a 	add	r10,r7,r13
 2007714:	01ce303a 	nor	r7,zero,r7
 2007718:	51ce703a 	and	r7,r10,r7
 200771c:	3b0e703a 	and	r7,r7,r12
 2007720:	38000a26 	beq	r7,zero,200774c <memchr+0x98>
 2007724:	21c00003 	ldbu	r7,0(r4)
 2007728:	39401e26 	beq	r7,r5,20077a4 <memchr+0xf0>
 200772c:	19c00003 	ldbu	r7,0(r3)
 2007730:	39401926 	beq	r7,r5,2007798 <memchr+0xe4>
 2007734:	41c00003 	ldbu	r7,0(r8)
 2007738:	4005883a 	mov	r2,r8
 200773c:	39401626 	beq	r7,r5,2007798 <memchr+0xe4>
 2007740:	49c00003 	ldbu	r7,0(r9)
 2007744:	4805883a 	mov	r2,r9
 2007748:	39401326 	beq	r7,r5,2007798 <memchr+0xe4>
 200774c:	21000104 	addi	r4,r4,4
 2007750:	4a400104 	addi	r9,r9,4
 2007754:	42000104 	addi	r8,r8,4
 2007758:	18c00104 	addi	r3,r3,4
 200775c:	71bfe836 	bltu	r14,r6,2007700 <memchr+0x4c>
 2007760:	2005883a 	mov	r2,r4
 2007764:	30000a26 	beq	r6,zero,2007790 <memchr+0xdc>
 2007768:	10c00003 	ldbu	r3,0(r2)
 200776c:	19400a26 	beq	r3,r5,2007798 <memchr+0xe4>
 2007770:	10c00044 	addi	r3,r2,1
 2007774:	118d883a 	add	r6,r2,r6
 2007778:	00000306 	br	2007788 <memchr+0xd4>
 200777c:	11000003 	ldbu	r4,0(r2)
 2007780:	18c00044 	addi	r3,r3,1
 2007784:	21400426 	beq	r4,r5,2007798 <memchr+0xe4>
 2007788:	1805883a 	mov	r2,r3
 200778c:	19bffb1e 	bne	r3,r6,200777c <memchr+0xc8>
 2007790:	0005883a 	mov	r2,zero
 2007794:	f800283a 	ret
 2007798:	f800283a 	ret
 200779c:	2005883a 	mov	r2,r4
 20077a0:	003ff106 	br	2007768 <memchr+0xb4>
 20077a4:	2005883a 	mov	r2,r4
 20077a8:	f800283a 	ret

020077ac <memmove>:
 20077ac:	defffb04 	addi	sp,sp,-20
 20077b0:	dc000015 	stw	r16,0(sp)
 20077b4:	dfc00415 	stw	ra,16(sp)
 20077b8:	dcc00315 	stw	r19,12(sp)
 20077bc:	dc800215 	stw	r18,8(sp)
 20077c0:	dc400115 	stw	r17,4(sp)
 20077c4:	2021883a 	mov	r16,r4
 20077c8:	300f883a 	mov	r7,r6
 20077cc:	2900122e 	bgeu	r5,r4,2007818 <memmove+0x6c>
 20077d0:	2987883a 	add	r3,r5,r6
 20077d4:	20c0102e 	bgeu	r4,r3,2007818 <memmove+0x6c>
 20077d8:	218b883a 	add	r5,r4,r6
 20077dc:	1989c83a 	sub	r4,r3,r6
 20077e0:	30000526 	beq	r6,zero,20077f8 <memmove+0x4c>
 20077e4:	18ffffc4 	addi	r3,r3,-1
 20077e8:	18800003 	ldbu	r2,0(r3)
 20077ec:	297fffc4 	addi	r5,r5,-1
 20077f0:	28800005 	stb	r2,0(r5)
 20077f4:	193ffb1e 	bne	r3,r4,20077e4 <memmove+0x38>
 20077f8:	8005883a 	mov	r2,r16
 20077fc:	dfc00417 	ldw	ra,16(sp)
 2007800:	dcc00317 	ldw	r19,12(sp)
 2007804:	dc800217 	ldw	r18,8(sp)
 2007808:	dc400117 	ldw	r17,4(sp)
 200780c:	dc000017 	ldw	r16,0(sp)
 2007810:	dec00504 	addi	sp,sp,20
 2007814:	f800283a 	ret
 2007818:	008003c4 	movi	r2,15
 200781c:	1180422e 	bgeu	r2,r6,2007928 <memmove+0x17c>
 2007820:	2c04b03a 	or	r2,r5,r16
 2007824:	108000cc 	andi	r2,r2,3
 2007828:	10003f1e 	bne	r2,zero,2007928 <memmove+0x17c>
 200782c:	32bffc04 	addi	r10,r6,-16
 2007830:	5014d13a 	srli	r10,r10,4
 2007834:	81000404 	addi	r4,r16,16
 2007838:	8007883a 	mov	r3,r16
 200783c:	5004913a 	slli	r2,r10,4
 2007840:	280f883a 	mov	r7,r5
 2007844:	2089883a 	add	r4,r4,r2
 2007848:	38800017 	ldw	r2,0(r7)
 200784c:	18c00404 	addi	r3,r3,16
 2007850:	39c00404 	addi	r7,r7,16
 2007854:	18bffc15 	stw	r2,-16(r3)
 2007858:	38bffd17 	ldw	r2,-12(r7)
 200785c:	18bffd15 	stw	r2,-12(r3)
 2007860:	38bffe17 	ldw	r2,-8(r7)
 2007864:	18bffe15 	stw	r2,-8(r3)
 2007868:	38bfff17 	ldw	r2,-4(r7)
 200786c:	18bfff15 	stw	r2,-4(r3)
 2007870:	193ff51e 	bne	r3,r4,2007848 <memmove+0x9c>
 2007874:	52800044 	addi	r10,r10,1
 2007878:	5014913a 	slli	r10,r10,4
 200787c:	31c003cc 	andi	r7,r6,15
 2007880:	008000c4 	movi	r2,3
 2007884:	8287883a 	add	r3,r16,r10
 2007888:	2a95883a 	add	r10,r5,r10
 200788c:	11c0282e 	bgeu	r2,r7,2007930 <memmove+0x184>
 2007890:	3c7fff04 	addi	r17,r7,-4
 2007894:	8808d0ba 	srli	r4,r17,2
 2007898:	1a400104 	addi	r9,r3,4
 200789c:	180d883a 	mov	r6,r3
 20078a0:	2105883a 	add	r2,r4,r4
 20078a4:	1085883a 	add	r2,r2,r2
 20078a8:	4893883a 	add	r9,r9,r2
 20078ac:	5005883a 	mov	r2,r10
 20078b0:	12000017 	ldw	r8,0(r2)
 20078b4:	31800104 	addi	r6,r6,4
 20078b8:	10800104 	addi	r2,r2,4
 20078bc:	323fff15 	stw	r8,-4(r6)
 20078c0:	327ffb1e 	bne	r6,r9,20078b0 <memmove+0x104>
 20078c4:	20800044 	addi	r2,r4,1
 20078c8:	1085883a 	add	r2,r2,r2
 20078cc:	1085883a 	add	r2,r2,r2
 20078d0:	017fff04 	movi	r5,-4
 20078d4:	18a5883a 	add	r18,r3,r2
 20078d8:	50a7883a 	add	r19,r10,r2
 20078dc:	20012bc0 	call	20012bc <__mulsi3>
 20078e0:	144f883a 	add	r7,r2,r17
 20078e4:	980b883a 	mov	r5,r19
 20078e8:	9007883a 	mov	r3,r18
 20078ec:	383fc226 	beq	r7,zero,20077f8 <memmove+0x4c>
 20078f0:	19cf883a 	add	r7,r3,r7
 20078f4:	29800003 	ldbu	r6,0(r5)
 20078f8:	18c00044 	addi	r3,r3,1
 20078fc:	29400044 	addi	r5,r5,1
 2007900:	19bfffc5 	stb	r6,-1(r3)
 2007904:	19fffb1e 	bne	r3,r7,20078f4 <memmove+0x148>
 2007908:	8005883a 	mov	r2,r16
 200790c:	dfc00417 	ldw	ra,16(sp)
 2007910:	dcc00317 	ldw	r19,12(sp)
 2007914:	dc800217 	ldw	r18,8(sp)
 2007918:	dc400117 	ldw	r17,4(sp)
 200791c:	dc000017 	ldw	r16,0(sp)
 2007920:	dec00504 	addi	sp,sp,20
 2007924:	f800283a 	ret
 2007928:	8007883a 	mov	r3,r16
 200792c:	003fef06 	br	20078ec <memmove+0x140>
 2007930:	500b883a 	mov	r5,r10
 2007934:	003fed06 	br	20078ec <memmove+0x140>

02007938 <memset>:
 2007938:	00c000c4 	movi	r3,3
 200793c:	2005883a 	mov	r2,r4
 2007940:	29403fcc 	andi	r5,r5,255
 2007944:	19802d2e 	bgeu	r3,r6,20079fc <memset+0xc4>
 2007948:	20c6703a 	and	r3,r4,r3
 200794c:	18002e1e 	bne	r3,zero,2007a08 <memset+0xd0>
 2007950:	2806923a 	slli	r3,r5,8
 2007954:	010003c4 	movi	r4,15
 2007958:	3011883a 	mov	r8,r6
 200795c:	1946b03a 	or	r3,r3,r5
 2007960:	180e943a 	slli	r7,r3,16
 2007964:	38ceb03a 	or	r7,r7,r3
 2007968:	1007883a 	mov	r3,r2
 200796c:	21800f2e 	bgeu	r4,r6,20079ac <memset+0x74>
 2007970:	19c00015 	stw	r7,0(r3)
 2007974:	19c00115 	stw	r7,4(r3)
 2007978:	19c00215 	stw	r7,8(r3)
 200797c:	19c00315 	stw	r7,12(r3)
 2007980:	423ffc04 	addi	r8,r8,-16
 2007984:	18c00404 	addi	r3,r3,16
 2007988:	223ff936 	bltu	r4,r8,2007970 <memset+0x38>
 200798c:	30fffc04 	addi	r3,r6,-16
 2007990:	1806d13a 	srli	r3,r3,4
 2007994:	318003cc 	andi	r6,r6,15
 2007998:	010000c4 	movi	r4,3
 200799c:	18c00044 	addi	r3,r3,1
 20079a0:	1806913a 	slli	r3,r3,4
 20079a4:	10c7883a 	add	r3,r2,r3
 20079a8:	21800e2e 	bgeu	r4,r6,20079e4 <memset+0xac>
 20079ac:	1813883a 	mov	r9,r3
 20079b0:	3011883a 	mov	r8,r6
 20079b4:	010000c4 	movi	r4,3
 20079b8:	49c00015 	stw	r7,0(r9)
 20079bc:	423fff04 	addi	r8,r8,-4
 20079c0:	4a400104 	addi	r9,r9,4
 20079c4:	223ffc36 	bltu	r4,r8,20079b8 <memset+0x80>
 20079c8:	313fff04 	addi	r4,r6,-4
 20079cc:	2008d0ba 	srli	r4,r4,2
 20079d0:	318000cc 	andi	r6,r6,3
 20079d4:	21000044 	addi	r4,r4,1
 20079d8:	2109883a 	add	r4,r4,r4
 20079dc:	2109883a 	add	r4,r4,r4
 20079e0:	1907883a 	add	r3,r3,r4
 20079e4:	30000a26 	beq	r6,zero,2007a10 <memset+0xd8>
 20079e8:	198d883a 	add	r6,r3,r6
 20079ec:	19400005 	stb	r5,0(r3)
 20079f0:	18c00044 	addi	r3,r3,1
 20079f4:	19bffd1e 	bne	r3,r6,20079ec <memset+0xb4>
 20079f8:	f800283a 	ret
 20079fc:	2007883a 	mov	r3,r4
 2007a00:	303ff91e 	bne	r6,zero,20079e8 <memset+0xb0>
 2007a04:	00000206 	br	2007a10 <memset+0xd8>
 2007a08:	2007883a 	mov	r3,r4
 2007a0c:	003ff606 	br	20079e8 <memset+0xb0>
 2007a10:	f800283a 	ret

02007a14 <_Balloc>:
 2007a14:	20801317 	ldw	r2,76(r4)
 2007a18:	defffc04 	addi	sp,sp,-16
 2007a1c:	dc400115 	stw	r17,4(sp)
 2007a20:	dc000015 	stw	r16,0(sp)
 2007a24:	dfc00315 	stw	ra,12(sp)
 2007a28:	dc800215 	stw	r18,8(sp)
 2007a2c:	2023883a 	mov	r17,r4
 2007a30:	2821883a 	mov	r16,r5
 2007a34:	10000f26 	beq	r2,zero,2007a74 <_Balloc+0x60>
 2007a38:	8407883a 	add	r3,r16,r16
 2007a3c:	18c7883a 	add	r3,r3,r3
 2007a40:	10c7883a 	add	r3,r2,r3
 2007a44:	18800017 	ldw	r2,0(r3)
 2007a48:	10001126 	beq	r2,zero,2007a90 <_Balloc+0x7c>
 2007a4c:	11000017 	ldw	r4,0(r2)
 2007a50:	19000015 	stw	r4,0(r3)
 2007a54:	10000415 	stw	zero,16(r2)
 2007a58:	10000315 	stw	zero,12(r2)
 2007a5c:	dfc00317 	ldw	ra,12(sp)
 2007a60:	dc800217 	ldw	r18,8(sp)
 2007a64:	dc400117 	ldw	r17,4(sp)
 2007a68:	dc000017 	ldw	r16,0(sp)
 2007a6c:	dec00404 	addi	sp,sp,16
 2007a70:	f800283a 	ret
 2007a74:	01400104 	movi	r5,4
 2007a78:	01800404 	movi	r6,16
 2007a7c:	20094d80 	call	20094d8 <_calloc_r>
 2007a80:	88801315 	stw	r2,76(r17)
 2007a84:	103fec1e 	bne	r2,zero,2007a38 <_Balloc+0x24>
 2007a88:	0005883a 	mov	r2,zero
 2007a8c:	003ff306 	br	2007a5c <_Balloc+0x48>
 2007a90:	01400044 	movi	r5,1
 2007a94:	2c24983a 	sll	r18,r5,r16
 2007a98:	8809883a 	mov	r4,r17
 2007a9c:	91800144 	addi	r6,r18,5
 2007aa0:	318d883a 	add	r6,r6,r6
 2007aa4:	318d883a 	add	r6,r6,r6
 2007aa8:	20094d80 	call	20094d8 <_calloc_r>
 2007aac:	103ff626 	beq	r2,zero,2007a88 <_Balloc+0x74>
 2007ab0:	14000115 	stw	r16,4(r2)
 2007ab4:	14800215 	stw	r18,8(r2)
 2007ab8:	003fe606 	br	2007a54 <_Balloc+0x40>

02007abc <_Bfree>:
 2007abc:	28000826 	beq	r5,zero,2007ae0 <_Bfree+0x24>
 2007ac0:	28c00117 	ldw	r3,4(r5)
 2007ac4:	20801317 	ldw	r2,76(r4)
 2007ac8:	18c7883a 	add	r3,r3,r3
 2007acc:	18c7883a 	add	r3,r3,r3
 2007ad0:	10c5883a 	add	r2,r2,r3
 2007ad4:	10c00017 	ldw	r3,0(r2)
 2007ad8:	28c00015 	stw	r3,0(r5)
 2007adc:	11400015 	stw	r5,0(r2)
 2007ae0:	f800283a 	ret

02007ae4 <__multadd>:
 2007ae4:	defff604 	addi	sp,sp,-40
 2007ae8:	dd400515 	stw	r21,20(sp)
 2007aec:	2d400417 	ldw	r21,16(r5)
 2007af0:	df000815 	stw	fp,32(sp)
 2007af4:	ddc00715 	stw	r23,28(sp)
 2007af8:	dd800615 	stw	r22,24(sp)
 2007afc:	dd000415 	stw	r20,16(sp)
 2007b00:	dc400115 	stw	r17,4(sp)
 2007b04:	dc000015 	stw	r16,0(sp)
 2007b08:	dfc00915 	stw	ra,36(sp)
 2007b0c:	dcc00315 	stw	r19,12(sp)
 2007b10:	dc800215 	stw	r18,8(sp)
 2007b14:	282d883a 	mov	r22,r5
 2007b18:	202f883a 	mov	r23,r4
 2007b1c:	3029883a 	mov	r20,r6
 2007b20:	3839883a 	mov	fp,r7
 2007b24:	2c000504 	addi	r16,r5,20
 2007b28:	0023883a 	mov	r17,zero
 2007b2c:	84c00017 	ldw	r19,0(r16)
 2007b30:	a00b883a 	mov	r5,r20
 2007b34:	8c400044 	addi	r17,r17,1
 2007b38:	993fffcc 	andi	r4,r19,65535
 2007b3c:	20012bc0 	call	20012bc <__mulsi3>
 2007b40:	1725883a 	add	r18,r2,fp
 2007b44:	9808d43a 	srli	r4,r19,16
 2007b48:	9026d43a 	srli	r19,r18,16
 2007b4c:	a00b883a 	mov	r5,r20
 2007b50:	20012bc0 	call	20012bc <__mulsi3>
 2007b54:	988f883a 	add	r7,r19,r2
 2007b58:	3804943a 	slli	r2,r7,16
 2007b5c:	94bfffcc 	andi	r18,r18,65535
 2007b60:	3838d43a 	srli	fp,r7,16
 2007b64:	14a5883a 	add	r18,r2,r18
 2007b68:	84800015 	stw	r18,0(r16)
 2007b6c:	84000104 	addi	r16,r16,4
 2007b70:	8d7fee16 	blt	r17,r21,2007b2c <__multadd+0x48>
 2007b74:	e0000926 	beq	fp,zero,2007b9c <__multadd+0xb8>
 2007b78:	b0800217 	ldw	r2,8(r22)
 2007b7c:	a880140e 	bge	r21,r2,2007bd0 <__multadd+0xec>
 2007b80:	a8800144 	addi	r2,r21,5
 2007b84:	1085883a 	add	r2,r2,r2
 2007b88:	1085883a 	add	r2,r2,r2
 2007b8c:	b085883a 	add	r2,r22,r2
 2007b90:	ad400044 	addi	r21,r21,1
 2007b94:	17000015 	stw	fp,0(r2)
 2007b98:	b5400415 	stw	r21,16(r22)
 2007b9c:	b005883a 	mov	r2,r22
 2007ba0:	dfc00917 	ldw	ra,36(sp)
 2007ba4:	df000817 	ldw	fp,32(sp)
 2007ba8:	ddc00717 	ldw	r23,28(sp)
 2007bac:	dd800617 	ldw	r22,24(sp)
 2007bb0:	dd400517 	ldw	r21,20(sp)
 2007bb4:	dd000417 	ldw	r20,16(sp)
 2007bb8:	dcc00317 	ldw	r19,12(sp)
 2007bbc:	dc800217 	ldw	r18,8(sp)
 2007bc0:	dc400117 	ldw	r17,4(sp)
 2007bc4:	dc000017 	ldw	r16,0(sp)
 2007bc8:	dec00a04 	addi	sp,sp,40
 2007bcc:	f800283a 	ret
 2007bd0:	b1400117 	ldw	r5,4(r22)
 2007bd4:	b809883a 	mov	r4,r23
 2007bd8:	29400044 	addi	r5,r5,1
 2007bdc:	2007a140 	call	2007a14 <_Balloc>
 2007be0:	b1800417 	ldw	r6,16(r22)
 2007be4:	b1400304 	addi	r5,r22,12
 2007be8:	11000304 	addi	r4,r2,12
 2007bec:	31800084 	addi	r6,r6,2
 2007bf0:	318d883a 	add	r6,r6,r6
 2007bf4:	318d883a 	add	r6,r6,r6
 2007bf8:	1021883a 	mov	r16,r2
 2007bfc:	20024440 	call	2002444 <memcpy>
 2007c00:	b0c00117 	ldw	r3,4(r22)
 2007c04:	b8801317 	ldw	r2,76(r23)
 2007c08:	18c7883a 	add	r3,r3,r3
 2007c0c:	18c7883a 	add	r3,r3,r3
 2007c10:	10c5883a 	add	r2,r2,r3
 2007c14:	10c00017 	ldw	r3,0(r2)
 2007c18:	b0c00015 	stw	r3,0(r22)
 2007c1c:	15800015 	stw	r22,0(r2)
 2007c20:	802d883a 	mov	r22,r16
 2007c24:	003fd606 	br	2007b80 <__multadd+0x9c>

02007c28 <__s2b>:
 2007c28:	defff904 	addi	sp,sp,-28
 2007c2c:	dd000415 	stw	r20,16(sp)
 2007c30:	dc400115 	stw	r17,4(sp)
 2007c34:	2829883a 	mov	r20,r5
 2007c38:	2023883a 	mov	r17,r4
 2007c3c:	01400244 	movi	r5,9
 2007c40:	39000204 	addi	r4,r7,8
 2007c44:	dcc00315 	stw	r19,12(sp)
 2007c48:	dc800215 	stw	r18,8(sp)
 2007c4c:	dfc00615 	stw	ra,24(sp)
 2007c50:	dd400515 	stw	r21,20(sp)
 2007c54:	dc000015 	stw	r16,0(sp)
 2007c58:	3825883a 	mov	r18,r7
 2007c5c:	3027883a 	mov	r19,r6
 2007c60:	20012000 	call	2001200 <__divsi3>
 2007c64:	00c00044 	movi	r3,1
 2007c68:	000b883a 	mov	r5,zero
 2007c6c:	1880030e 	bge	r3,r2,2007c7c <__s2b+0x54>
 2007c70:	18c7883a 	add	r3,r3,r3
 2007c74:	29400044 	addi	r5,r5,1
 2007c78:	18bffd16 	blt	r3,r2,2007c70 <__s2b+0x48>
 2007c7c:	8809883a 	mov	r4,r17
 2007c80:	2007a140 	call	2007a14 <_Balloc>
 2007c84:	d8c00717 	ldw	r3,28(sp)
 2007c88:	10c00515 	stw	r3,20(r2)
 2007c8c:	00c00044 	movi	r3,1
 2007c90:	10c00415 	stw	r3,16(r2)
 2007c94:	00c00244 	movi	r3,9
 2007c98:	1cc0210e 	bge	r3,r19,2007d20 <__s2b+0xf8>
 2007c9c:	a0eb883a 	add	r21,r20,r3
 2007ca0:	a821883a 	mov	r16,r21
 2007ca4:	a4e9883a 	add	r20,r20,r19
 2007ca8:	81c00007 	ldb	r7,0(r16)
 2007cac:	8809883a 	mov	r4,r17
 2007cb0:	84000044 	addi	r16,r16,1
 2007cb4:	100b883a 	mov	r5,r2
 2007cb8:	01800284 	movi	r6,10
 2007cbc:	39fff404 	addi	r7,r7,-48
 2007cc0:	2007ae40 	call	2007ae4 <__multadd>
 2007cc4:	853ff81e 	bne	r16,r20,2007ca8 <__s2b+0x80>
 2007cc8:	ace1883a 	add	r16,r21,r19
 2007ccc:	843ffe04 	addi	r16,r16,-8
 2007cd0:	9c800a0e 	bge	r19,r18,2007cfc <__s2b+0xd4>
 2007cd4:	94e5c83a 	sub	r18,r18,r19
 2007cd8:	84a5883a 	add	r18,r16,r18
 2007cdc:	81c00007 	ldb	r7,0(r16)
 2007ce0:	8809883a 	mov	r4,r17
 2007ce4:	84000044 	addi	r16,r16,1
 2007ce8:	100b883a 	mov	r5,r2
 2007cec:	01800284 	movi	r6,10
 2007cf0:	39fff404 	addi	r7,r7,-48
 2007cf4:	2007ae40 	call	2007ae4 <__multadd>
 2007cf8:	84bff81e 	bne	r16,r18,2007cdc <__s2b+0xb4>
 2007cfc:	dfc00617 	ldw	ra,24(sp)
 2007d00:	dd400517 	ldw	r21,20(sp)
 2007d04:	dd000417 	ldw	r20,16(sp)
 2007d08:	dcc00317 	ldw	r19,12(sp)
 2007d0c:	dc800217 	ldw	r18,8(sp)
 2007d10:	dc400117 	ldw	r17,4(sp)
 2007d14:	dc000017 	ldw	r16,0(sp)
 2007d18:	dec00704 	addi	sp,sp,28
 2007d1c:	f800283a 	ret
 2007d20:	a4000284 	addi	r16,r20,10
 2007d24:	1827883a 	mov	r19,r3
 2007d28:	003fe906 	br	2007cd0 <__s2b+0xa8>

02007d2c <__hi0bits>:
 2007d2c:	20bfffec 	andhi	r2,r4,65535
 2007d30:	1000141e 	bne	r2,zero,2007d84 <__hi0bits+0x58>
 2007d34:	2008943a 	slli	r4,r4,16
 2007d38:	00800404 	movi	r2,16
 2007d3c:	20ffc02c 	andhi	r3,r4,65280
 2007d40:	1800021e 	bne	r3,zero,2007d4c <__hi0bits+0x20>
 2007d44:	2008923a 	slli	r4,r4,8
 2007d48:	10800204 	addi	r2,r2,8
 2007d4c:	20fc002c 	andhi	r3,r4,61440
 2007d50:	1800021e 	bne	r3,zero,2007d5c <__hi0bits+0x30>
 2007d54:	2008913a 	slli	r4,r4,4
 2007d58:	10800104 	addi	r2,r2,4
 2007d5c:	20f0002c 	andhi	r3,r4,49152
 2007d60:	1800031e 	bne	r3,zero,2007d70 <__hi0bits+0x44>
 2007d64:	2109883a 	add	r4,r4,r4
 2007d68:	10800084 	addi	r2,r2,2
 2007d6c:	2109883a 	add	r4,r4,r4
 2007d70:	20000316 	blt	r4,zero,2007d80 <__hi0bits+0x54>
 2007d74:	2110002c 	andhi	r4,r4,16384
 2007d78:	2000041e 	bne	r4,zero,2007d8c <__hi0bits+0x60>
 2007d7c:	00800804 	movi	r2,32
 2007d80:	f800283a 	ret
 2007d84:	0005883a 	mov	r2,zero
 2007d88:	003fec06 	br	2007d3c <__hi0bits+0x10>
 2007d8c:	10800044 	addi	r2,r2,1
 2007d90:	f800283a 	ret

02007d94 <__lo0bits>:
 2007d94:	20c00017 	ldw	r3,0(r4)
 2007d98:	188001cc 	andi	r2,r3,7
 2007d9c:	10000826 	beq	r2,zero,2007dc0 <__lo0bits+0x2c>
 2007da0:	1880004c 	andi	r2,r3,1
 2007da4:	1000211e 	bne	r2,zero,2007e2c <__lo0bits+0x98>
 2007da8:	1880008c 	andi	r2,r3,2
 2007dac:	1000211e 	bne	r2,zero,2007e34 <__lo0bits+0xa0>
 2007db0:	1806d0ba 	srli	r3,r3,2
 2007db4:	00800084 	movi	r2,2
 2007db8:	20c00015 	stw	r3,0(r4)
 2007dbc:	f800283a 	ret
 2007dc0:	18bfffcc 	andi	r2,r3,65535
 2007dc4:	10001326 	beq	r2,zero,2007e14 <__lo0bits+0x80>
 2007dc8:	0005883a 	mov	r2,zero
 2007dcc:	19403fcc 	andi	r5,r3,255
 2007dd0:	2800021e 	bne	r5,zero,2007ddc <__lo0bits+0x48>
 2007dd4:	1806d23a 	srli	r3,r3,8
 2007dd8:	10800204 	addi	r2,r2,8
 2007ddc:	194003cc 	andi	r5,r3,15
 2007de0:	2800021e 	bne	r5,zero,2007dec <__lo0bits+0x58>
 2007de4:	1806d13a 	srli	r3,r3,4
 2007de8:	10800104 	addi	r2,r2,4
 2007dec:	194000cc 	andi	r5,r3,3
 2007df0:	2800021e 	bne	r5,zero,2007dfc <__lo0bits+0x68>
 2007df4:	1806d0ba 	srli	r3,r3,2
 2007df8:	10800084 	addi	r2,r2,2
 2007dfc:	1940004c 	andi	r5,r3,1
 2007e00:	2800081e 	bne	r5,zero,2007e24 <__lo0bits+0x90>
 2007e04:	1806d07a 	srli	r3,r3,1
 2007e08:	1800051e 	bne	r3,zero,2007e20 <__lo0bits+0x8c>
 2007e0c:	00800804 	movi	r2,32
 2007e10:	f800283a 	ret
 2007e14:	1806d43a 	srli	r3,r3,16
 2007e18:	00800404 	movi	r2,16
 2007e1c:	003feb06 	br	2007dcc <__lo0bits+0x38>
 2007e20:	10800044 	addi	r2,r2,1
 2007e24:	20c00015 	stw	r3,0(r4)
 2007e28:	f800283a 	ret
 2007e2c:	0005883a 	mov	r2,zero
 2007e30:	f800283a 	ret
 2007e34:	1806d07a 	srli	r3,r3,1
 2007e38:	00800044 	movi	r2,1
 2007e3c:	20c00015 	stw	r3,0(r4)
 2007e40:	f800283a 	ret

02007e44 <__i2b>:
 2007e44:	defffd04 	addi	sp,sp,-12
 2007e48:	dc000015 	stw	r16,0(sp)
 2007e4c:	04000044 	movi	r16,1
 2007e50:	dc400115 	stw	r17,4(sp)
 2007e54:	2823883a 	mov	r17,r5
 2007e58:	800b883a 	mov	r5,r16
 2007e5c:	dfc00215 	stw	ra,8(sp)
 2007e60:	2007a140 	call	2007a14 <_Balloc>
 2007e64:	14400515 	stw	r17,20(r2)
 2007e68:	14000415 	stw	r16,16(r2)
 2007e6c:	dfc00217 	ldw	ra,8(sp)
 2007e70:	dc400117 	ldw	r17,4(sp)
 2007e74:	dc000017 	ldw	r16,0(sp)
 2007e78:	dec00304 	addi	sp,sp,12
 2007e7c:	f800283a 	ret

02007e80 <__multiply>:
 2007e80:	defff004 	addi	sp,sp,-64
 2007e84:	dc800815 	stw	r18,32(sp)
 2007e88:	dc400715 	stw	r17,28(sp)
 2007e8c:	34800417 	ldw	r18,16(r6)
 2007e90:	2c400417 	ldw	r17,16(r5)
 2007e94:	ddc00d15 	stw	r23,52(sp)
 2007e98:	dc000615 	stw	r16,24(sp)
 2007e9c:	dfc00f15 	stw	ra,60(sp)
 2007ea0:	df000e15 	stw	fp,56(sp)
 2007ea4:	dd800c15 	stw	r22,48(sp)
 2007ea8:	dd400b15 	stw	r21,44(sp)
 2007eac:	dd000a15 	stw	r20,40(sp)
 2007eb0:	dcc00915 	stw	r19,36(sp)
 2007eb4:	2821883a 	mov	r16,r5
 2007eb8:	302f883a 	mov	r23,r6
 2007ebc:	8c80050e 	bge	r17,r18,2007ed4 <__multiply+0x54>
 2007ec0:	8807883a 	mov	r3,r17
 2007ec4:	3021883a 	mov	r16,r6
 2007ec8:	9023883a 	mov	r17,r18
 2007ecc:	282f883a 	mov	r23,r5
 2007ed0:	1825883a 	mov	r18,r3
 2007ed4:	80800217 	ldw	r2,8(r16)
 2007ed8:	8c87883a 	add	r3,r17,r18
 2007edc:	d8c00115 	stw	r3,4(sp)
 2007ee0:	81400117 	ldw	r5,4(r16)
 2007ee4:	10c0010e 	bge	r2,r3,2007eec <__multiply+0x6c>
 2007ee8:	29400044 	addi	r5,r5,1
 2007eec:	2007a140 	call	2007a14 <_Balloc>
 2007ef0:	d8c00117 	ldw	r3,4(sp)
 2007ef4:	d8800515 	stw	r2,20(sp)
 2007ef8:	14c00504 	addi	r19,r2,20
 2007efc:	1d400144 	addi	r21,r3,5
 2007f00:	ad6b883a 	add	r21,r21,r21
 2007f04:	ad6b883a 	add	r21,r21,r21
 2007f08:	156b883a 	add	r21,r2,r21
 2007f0c:	dd400215 	stw	r21,8(sp)
 2007f10:	9805883a 	mov	r2,r19
 2007f14:	9d40042e 	bgeu	r19,r21,2007f28 <__multiply+0xa8>
 2007f18:	d8c00217 	ldw	r3,8(sp)
 2007f1c:	10000015 	stw	zero,0(r2)
 2007f20:	10800104 	addi	r2,r2,4
 2007f24:	10fffc36 	bltu	r2,r3,2007f18 <__multiply+0x98>
 2007f28:	94800144 	addi	r18,r18,5
 2007f2c:	94a5883a 	add	r18,r18,r18
 2007f30:	94ad883a 	add	r22,r18,r18
 2007f34:	8c400144 	addi	r17,r17,5
 2007f38:	8c63883a 	add	r17,r17,r17
 2007f3c:	bdad883a 	add	r22,r23,r22
 2007f40:	80c00504 	addi	r3,r16,20
 2007f44:	8c63883a 	add	r17,r17,r17
 2007f48:	bc800504 	addi	r18,r23,20
 2007f4c:	dd800315 	stw	r22,12(sp)
 2007f50:	d8c00415 	stw	r3,16(sp)
 2007f54:	dcc00015 	stw	r19,0(sp)
 2007f58:	8463883a 	add	r17,r16,r17
 2007f5c:	9580412e 	bgeu	r18,r22,2008064 <__multiply+0x1e4>
 2007f60:	90800017 	ldw	r2,0(r18)
 2007f64:	173fffcc 	andi	fp,r2,65535
 2007f68:	e0001a26 	beq	fp,zero,2007fd4 <__multiply+0x154>
 2007f6c:	dd000017 	ldw	r20,0(sp)
 2007f70:	dd800417 	ldw	r22,16(sp)
 2007f74:	002b883a 	mov	r21,zero
 2007f78:	b4c00017 	ldw	r19,0(r22)
 2007f7c:	a4000017 	ldw	r16,0(r20)
 2007f80:	e00b883a 	mov	r5,fp
 2007f84:	993fffcc 	andi	r4,r19,65535
 2007f88:	20012bc0 	call	20012bc <__mulsi3>
 2007f8c:	9808d43a 	srli	r4,r19,16
 2007f90:	817fffcc 	andi	r5,r16,65535
 2007f94:	1145883a 	add	r2,r2,r5
 2007f98:	e00b883a 	mov	r5,fp
 2007f9c:	1567883a 	add	r19,r2,r21
 2007fa0:	8020d43a 	srli	r16,r16,16
 2007fa4:	20012bc0 	call	20012bc <__mulsi3>
 2007fa8:	9808d43a 	srli	r4,r19,16
 2007fac:	1405883a 	add	r2,r2,r16
 2007fb0:	a4c0000d 	sth	r19,0(r20)
 2007fb4:	110f883a 	add	r7,r2,r4
 2007fb8:	a1c0008d 	sth	r7,2(r20)
 2007fbc:	b5800104 	addi	r22,r22,4
 2007fc0:	382ad43a 	srli	r21,r7,16
 2007fc4:	a5000104 	addi	r20,r20,4
 2007fc8:	b47feb36 	bltu	r22,r17,2007f78 <__multiply+0xf8>
 2007fcc:	a5400015 	stw	r21,0(r20)
 2007fd0:	90800017 	ldw	r2,0(r18)
 2007fd4:	1038d43a 	srli	fp,r2,16
 2007fd8:	e0001c26 	beq	fp,zero,200804c <__multiply+0x1cc>
 2007fdc:	d8c00017 	ldw	r3,0(sp)
 2007fe0:	dd000417 	ldw	r20,16(sp)
 2007fe4:	002b883a 	mov	r21,zero
 2007fe8:	1d800017 	ldw	r22,0(r3)
 2007fec:	182f883a 	mov	r23,r3
 2007ff0:	b021883a 	mov	r16,r22
 2007ff4:	a4c00017 	ldw	r19,0(r20)
 2007ff8:	8020d43a 	srli	r16,r16,16
 2007ffc:	e00b883a 	mov	r5,fp
 2008000:	993fffcc 	andi	r4,r19,65535
 2008004:	20012bc0 	call	20012bc <__mulsi3>
 2008008:	1405883a 	add	r2,r2,r16
 200800c:	9808d43a 	srli	r4,r19,16
 2008010:	156b883a 	add	r21,r2,r21
 2008014:	bdc00104 	addi	r23,r23,4
 2008018:	bdbfff0d 	sth	r22,-4(r23)
 200801c:	bd7fff8d 	sth	r21,-2(r23)
 2008020:	bc000017 	ldw	r16,0(r23)
 2008024:	e00b883a 	mov	r5,fp
 2008028:	20012bc0 	call	20012bc <__mulsi3>
 200802c:	a80ed43a 	srli	r7,r21,16
 2008030:	813fffcc 	andi	r4,r16,65535
 2008034:	2085883a 	add	r2,r4,r2
 2008038:	11ed883a 	add	r22,r2,r7
 200803c:	a5000104 	addi	r20,r20,4
 2008040:	b02ad43a 	srli	r21,r22,16
 2008044:	a47feb36 	bltu	r20,r17,2007ff4 <__multiply+0x174>
 2008048:	bd800015 	stw	r22,0(r23)
 200804c:	d8c00017 	ldw	r3,0(sp)
 2008050:	94800104 	addi	r18,r18,4
 2008054:	18c00104 	addi	r3,r3,4
 2008058:	d8c00015 	stw	r3,0(sp)
 200805c:	d8c00317 	ldw	r3,12(sp)
 2008060:	90ffbf36 	bltu	r18,r3,2007f60 <__multiply+0xe0>
 2008064:	d8c00117 	ldw	r3,4(sp)
 2008068:	00c00c0e 	bge	zero,r3,200809c <__multiply+0x21c>
 200806c:	d8c00217 	ldw	r3,8(sp)
 2008070:	18bfff17 	ldw	r2,-4(r3)
 2008074:	1d7fff04 	addi	r21,r3,-4
 2008078:	10000326 	beq	r2,zero,2008088 <__multiply+0x208>
 200807c:	00000706 	br	200809c <__multiply+0x21c>
 2008080:	a8800017 	ldw	r2,0(r21)
 2008084:	1000051e 	bne	r2,zero,200809c <__multiply+0x21c>
 2008088:	d8c00117 	ldw	r3,4(sp)
 200808c:	ad7fff04 	addi	r21,r21,-4
 2008090:	18ffffc4 	addi	r3,r3,-1
 2008094:	d8c00115 	stw	r3,4(sp)
 2008098:	183ff91e 	bne	r3,zero,2008080 <__multiply+0x200>
 200809c:	d8800517 	ldw	r2,20(sp)
 20080a0:	d8c00117 	ldw	r3,4(sp)
 20080a4:	10c00415 	stw	r3,16(r2)
 20080a8:	dfc00f17 	ldw	ra,60(sp)
 20080ac:	df000e17 	ldw	fp,56(sp)
 20080b0:	ddc00d17 	ldw	r23,52(sp)
 20080b4:	dd800c17 	ldw	r22,48(sp)
 20080b8:	dd400b17 	ldw	r21,44(sp)
 20080bc:	dd000a17 	ldw	r20,40(sp)
 20080c0:	dcc00917 	ldw	r19,36(sp)
 20080c4:	dc800817 	ldw	r18,32(sp)
 20080c8:	dc400717 	ldw	r17,28(sp)
 20080cc:	dc000617 	ldw	r16,24(sp)
 20080d0:	dec01004 	addi	sp,sp,64
 20080d4:	f800283a 	ret

020080d8 <__pow5mult>:
 20080d8:	defffb04 	addi	sp,sp,-20
 20080dc:	dcc00315 	stw	r19,12(sp)
 20080e0:	dc800215 	stw	r18,8(sp)
 20080e4:	dc000015 	stw	r16,0(sp)
 20080e8:	dfc00415 	stw	ra,16(sp)
 20080ec:	dc400115 	stw	r17,4(sp)
 20080f0:	308000cc 	andi	r2,r6,3
 20080f4:	3021883a 	mov	r16,r6
 20080f8:	2027883a 	mov	r19,r4
 20080fc:	2825883a 	mov	r18,r5
 2008100:	10002e1e 	bne	r2,zero,20081bc <__pow5mult+0xe4>
 2008104:	8021d0ba 	srai	r16,r16,2
 2008108:	80001a26 	beq	r16,zero,2008174 <__pow5mult+0x9c>
 200810c:	9c401217 	ldw	r17,72(r19)
 2008110:	8800061e 	bne	r17,zero,200812c <__pow5mult+0x54>
 2008114:	00003406 	br	20081e8 <__pow5mult+0x110>
 2008118:	8021d07a 	srai	r16,r16,1
 200811c:	80001526 	beq	r16,zero,2008174 <__pow5mult+0x9c>
 2008120:	88c00017 	ldw	r3,0(r17)
 2008124:	18001b26 	beq	r3,zero,2008194 <__pow5mult+0xbc>
 2008128:	1823883a 	mov	r17,r3
 200812c:	80c0004c 	andi	r3,r16,1
 2008130:	183ff926 	beq	r3,zero,2008118 <__pow5mult+0x40>
 2008134:	900b883a 	mov	r5,r18
 2008138:	880d883a 	mov	r6,r17
 200813c:	9809883a 	mov	r4,r19
 2008140:	2007e800 	call	2007e80 <__multiply>
 2008144:	90001b26 	beq	r18,zero,20081b4 <__pow5mult+0xdc>
 2008148:	91000117 	ldw	r4,4(r18)
 200814c:	98c01317 	ldw	r3,76(r19)
 2008150:	8021d07a 	srai	r16,r16,1
 2008154:	2109883a 	add	r4,r4,r4
 2008158:	2109883a 	add	r4,r4,r4
 200815c:	1907883a 	add	r3,r3,r4
 2008160:	19000017 	ldw	r4,0(r3)
 2008164:	91000015 	stw	r4,0(r18)
 2008168:	1c800015 	stw	r18,0(r3)
 200816c:	1025883a 	mov	r18,r2
 2008170:	803feb1e 	bne	r16,zero,2008120 <__pow5mult+0x48>
 2008174:	9005883a 	mov	r2,r18
 2008178:	dfc00417 	ldw	ra,16(sp)
 200817c:	dcc00317 	ldw	r19,12(sp)
 2008180:	dc800217 	ldw	r18,8(sp)
 2008184:	dc400117 	ldw	r17,4(sp)
 2008188:	dc000017 	ldw	r16,0(sp)
 200818c:	dec00504 	addi	sp,sp,20
 2008190:	f800283a 	ret
 2008194:	880b883a 	mov	r5,r17
 2008198:	880d883a 	mov	r6,r17
 200819c:	9809883a 	mov	r4,r19
 20081a0:	2007e800 	call	2007e80 <__multiply>
 20081a4:	88800015 	stw	r2,0(r17)
 20081a8:	10000015 	stw	zero,0(r2)
 20081ac:	1023883a 	mov	r17,r2
 20081b0:	003fde06 	br	200812c <__pow5mult+0x54>
 20081b4:	1025883a 	mov	r18,r2
 20081b8:	003fd706 	br	2008118 <__pow5mult+0x40>
 20081bc:	10bfffc4 	addi	r2,r2,-1
 20081c0:	1085883a 	add	r2,r2,r2
 20081c4:	00c08074 	movhi	r3,513
 20081c8:	18fea704 	addi	r3,r3,-1380
 20081cc:	1085883a 	add	r2,r2,r2
 20081d0:	1885883a 	add	r2,r3,r2
 20081d4:	11800017 	ldw	r6,0(r2)
 20081d8:	000f883a 	mov	r7,zero
 20081dc:	2007ae40 	call	2007ae4 <__multadd>
 20081e0:	1025883a 	mov	r18,r2
 20081e4:	003fc706 	br	2008104 <__pow5mult+0x2c>
 20081e8:	9809883a 	mov	r4,r19
 20081ec:	01409c44 	movi	r5,625
 20081f0:	2007e440 	call	2007e44 <__i2b>
 20081f4:	98801215 	stw	r2,72(r19)
 20081f8:	1023883a 	mov	r17,r2
 20081fc:	10000015 	stw	zero,0(r2)
 2008200:	003fca06 	br	200812c <__pow5mult+0x54>

02008204 <__lshift>:
 2008204:	defff904 	addi	sp,sp,-28
 2008208:	dd400515 	stw	r21,20(sp)
 200820c:	dc400115 	stw	r17,4(sp)
 2008210:	2d400417 	ldw	r21,16(r5)
 2008214:	3023d17a 	srai	r17,r6,5
 2008218:	28800217 	ldw	r2,8(r5)
 200821c:	dd000415 	stw	r20,16(sp)
 2008220:	8d6b883a 	add	r21,r17,r21
 2008224:	dcc00315 	stw	r19,12(sp)
 2008228:	dc800215 	stw	r18,8(sp)
 200822c:	dc000015 	stw	r16,0(sp)
 2008230:	dfc00615 	stw	ra,24(sp)
 2008234:	ac000044 	addi	r16,r21,1
 2008238:	2825883a 	mov	r18,r5
 200823c:	3029883a 	mov	r20,r6
 2008240:	2027883a 	mov	r19,r4
 2008244:	29400117 	ldw	r5,4(r5)
 2008248:	1400030e 	bge	r2,r16,2008258 <__lshift+0x54>
 200824c:	1085883a 	add	r2,r2,r2
 2008250:	29400044 	addi	r5,r5,1
 2008254:	143ffd16 	blt	r2,r16,200824c <__lshift+0x48>
 2008258:	9809883a 	mov	r4,r19
 200825c:	2007a140 	call	2007a14 <_Balloc>
 2008260:	10c00504 	addi	r3,r2,20
 2008264:	0440090e 	bge	zero,r17,200828c <__lshift+0x88>
 2008268:	000f883a 	mov	r7,zero
 200826c:	18000015 	stw	zero,0(r3)
 2008270:	39c00044 	addi	r7,r7,1
 2008274:	18c00104 	addi	r3,r3,4
 2008278:	3c7ffc1e 	bne	r7,r17,200826c <__lshift+0x68>
 200827c:	38c00144 	addi	r3,r7,5
 2008280:	18c7883a 	add	r3,r3,r3
 2008284:	18c7883a 	add	r3,r3,r3
 2008288:	10c7883a 	add	r3,r2,r3
 200828c:	92000417 	ldw	r8,16(r18)
 2008290:	a18007cc 	andi	r6,r20,31
 2008294:	91c00504 	addi	r7,r18,20
 2008298:	42000144 	addi	r8,r8,5
 200829c:	4211883a 	add	r8,r8,r8
 20082a0:	4211883a 	add	r8,r8,r8
 20082a4:	9211883a 	add	r8,r18,r8
 20082a8:	30002226 	beq	r6,zero,2008334 <__lshift+0x130>
 20082ac:	02800804 	movi	r10,32
 20082b0:	5195c83a 	sub	r10,r10,r6
 20082b4:	000b883a 	mov	r5,zero
 20082b8:	3a400017 	ldw	r9,0(r7)
 20082bc:	18c00104 	addi	r3,r3,4
 20082c0:	39c00104 	addi	r7,r7,4
 20082c4:	4992983a 	sll	r9,r9,r6
 20082c8:	2a4ab03a 	or	r5,r5,r9
 20082cc:	197fff15 	stw	r5,-4(r3)
 20082d0:	397fff17 	ldw	r5,-4(r7)
 20082d4:	2a8ad83a 	srl	r5,r5,r10
 20082d8:	3a3ff736 	bltu	r7,r8,20082b8 <__lshift+0xb4>
 20082dc:	19400015 	stw	r5,0(r3)
 20082e0:	28000126 	beq	r5,zero,20082e8 <__lshift+0xe4>
 20082e4:	ac000084 	addi	r16,r21,2
 20082e8:	91000117 	ldw	r4,4(r18)
 20082ec:	98c01317 	ldw	r3,76(r19)
 20082f0:	843fffc4 	addi	r16,r16,-1
 20082f4:	2109883a 	add	r4,r4,r4
 20082f8:	2109883a 	add	r4,r4,r4
 20082fc:	1907883a 	add	r3,r3,r4
 2008300:	19000017 	ldw	r4,0(r3)
 2008304:	14000415 	stw	r16,16(r2)
 2008308:	91000015 	stw	r4,0(r18)
 200830c:	1c800015 	stw	r18,0(r3)
 2008310:	dfc00617 	ldw	ra,24(sp)
 2008314:	dd400517 	ldw	r21,20(sp)
 2008318:	dd000417 	ldw	r20,16(sp)
 200831c:	dcc00317 	ldw	r19,12(sp)
 2008320:	dc800217 	ldw	r18,8(sp)
 2008324:	dc400117 	ldw	r17,4(sp)
 2008328:	dc000017 	ldw	r16,0(sp)
 200832c:	dec00704 	addi	sp,sp,28
 2008330:	f800283a 	ret
 2008334:	39400017 	ldw	r5,0(r7)
 2008338:	18c00104 	addi	r3,r3,4
 200833c:	39c00104 	addi	r7,r7,4
 2008340:	197fff15 	stw	r5,-4(r3)
 2008344:	3a3fe82e 	bgeu	r7,r8,20082e8 <__lshift+0xe4>
 2008348:	39400017 	ldw	r5,0(r7)
 200834c:	18c00104 	addi	r3,r3,4
 2008350:	39c00104 	addi	r7,r7,4
 2008354:	197fff15 	stw	r5,-4(r3)
 2008358:	3a3ff636 	bltu	r7,r8,2008334 <__lshift+0x130>
 200835c:	003fe206 	br	20082e8 <__lshift+0xe4>

02008360 <__mcmp>:
 2008360:	20800417 	ldw	r2,16(r4)
 2008364:	28c00417 	ldw	r3,16(r5)
 2008368:	10c5c83a 	sub	r2,r2,r3
 200836c:	10000f1e 	bne	r2,zero,20083ac <__mcmp+0x4c>
 2008370:	18c00144 	addi	r3,r3,5
 2008374:	18c7883a 	add	r3,r3,r3
 2008378:	18c7883a 	add	r3,r3,r3
 200837c:	21c00504 	addi	r7,r4,20
 2008380:	28cb883a 	add	r5,r5,r3
 2008384:	20c9883a 	add	r4,r4,r3
 2008388:	213fff04 	addi	r4,r4,-4
 200838c:	297fff04 	addi	r5,r5,-4
 2008390:	21800017 	ldw	r6,0(r4)
 2008394:	28c00017 	ldw	r3,0(r5)
 2008398:	30c0021e 	bne	r6,r3,20083a4 <__mcmp+0x44>
 200839c:	393ffa36 	bltu	r7,r4,2008388 <__mcmp+0x28>
 20083a0:	f800283a 	ret
 20083a4:	30c00236 	bltu	r6,r3,20083b0 <__mcmp+0x50>
 20083a8:	00800044 	movi	r2,1
 20083ac:	f800283a 	ret
 20083b0:	00bfffc4 	movi	r2,-1
 20083b4:	f800283a 	ret

020083b8 <__mdiff>:
 20083b8:	defffb04 	addi	sp,sp,-20
 20083bc:	dc000015 	stw	r16,0(sp)
 20083c0:	2821883a 	mov	r16,r5
 20083c4:	dc800215 	stw	r18,8(sp)
 20083c8:	300b883a 	mov	r5,r6
 20083cc:	2025883a 	mov	r18,r4
 20083d0:	8009883a 	mov	r4,r16
 20083d4:	dc400115 	stw	r17,4(sp)
 20083d8:	dfc00415 	stw	ra,16(sp)
 20083dc:	dcc00315 	stw	r19,12(sp)
 20083e0:	3023883a 	mov	r17,r6
 20083e4:	20083600 	call	2008360 <__mcmp>
 20083e8:	10005026 	beq	r2,zero,200852c <__mdiff+0x174>
 20083ec:	10004a16 	blt	r2,zero,2008518 <__mdiff+0x160>
 20083f0:	0027883a 	mov	r19,zero
 20083f4:	81400117 	ldw	r5,4(r16)
 20083f8:	9009883a 	mov	r4,r18
 20083fc:	2007a140 	call	2007a14 <_Balloc>
 2008400:	82400417 	ldw	r9,16(r16)
 2008404:	89800417 	ldw	r6,16(r17)
 2008408:	14c00315 	stw	r19,12(r2)
 200840c:	4b800144 	addi	r14,r9,5
 2008410:	31800144 	addi	r6,r6,5
 2008414:	739d883a 	add	r14,r14,r14
 2008418:	318d883a 	add	r6,r6,r6
 200841c:	739d883a 	add	r14,r14,r14
 2008420:	318d883a 	add	r6,r6,r6
 2008424:	81c00504 	addi	r7,r16,20
 2008428:	839d883a 	add	r14,r16,r14
 200842c:	8a000504 	addi	r8,r17,20
 2008430:	898d883a 	add	r6,r17,r6
 2008434:	10c00504 	addi	r3,r2,20
 2008438:	0009883a 	mov	r4,zero
 200843c:	3b000017 	ldw	r12,0(r7)
 2008440:	42c00017 	ldw	r11,0(r8)
 2008444:	42000104 	addi	r8,r8,4
 2008448:	62bfffcc 	andi	r10,r12,65535
 200844c:	5b7fffcc 	andi	r13,r11,65535
 2008450:	5109883a 	add	r4,r10,r4
 2008454:	2355c83a 	sub	r10,r4,r13
 2008458:	5816d43a 	srli	r11,r11,16
 200845c:	6008d43a 	srli	r4,r12,16
 2008460:	501bd43a 	srai	r13,r10,16
 2008464:	1a80000d 	sth	r10,0(r3)
 2008468:	22c9c83a 	sub	r4,r4,r11
 200846c:	2349883a 	add	r4,r4,r13
 2008470:	1900008d 	sth	r4,2(r3)
 2008474:	39c00104 	addi	r7,r7,4
 2008478:	2009d43a 	srai	r4,r4,16
 200847c:	18c00104 	addi	r3,r3,4
 2008480:	41bfee36 	bltu	r8,r6,200843c <__mdiff+0x84>
 2008484:	180b883a 	mov	r5,r3
 2008488:	3815883a 	mov	r10,r7
 200848c:	3b80132e 	bgeu	r7,r14,20084dc <__mdiff+0x124>
 2008490:	3a000017 	ldw	r8,0(r7)
 2008494:	18c00104 	addi	r3,r3,4
 2008498:	39c00104 	addi	r7,r7,4
 200849c:	41bfffcc 	andi	r6,r8,65535
 20084a0:	310d883a 	add	r6,r6,r4
 20084a4:	3009d43a 	srai	r4,r6,16
 20084a8:	4010d43a 	srli	r8,r8,16
 20084ac:	19bfff0d 	sth	r6,-4(r3)
 20084b0:	2209883a 	add	r4,r4,r8
 20084b4:	193fff8d 	sth	r4,-2(r3)
 20084b8:	2009d43a 	srai	r4,r4,16
 20084bc:	3bbff436 	bltu	r7,r14,2008490 <__mdiff+0xd8>
 20084c0:	0286303a 	nor	r3,zero,r10
 20084c4:	1b87883a 	add	r3,r3,r14
 20084c8:	1806d0ba 	srli	r3,r3,2
 20084cc:	18c00044 	addi	r3,r3,1
 20084d0:	18c7883a 	add	r3,r3,r3
 20084d4:	18c7883a 	add	r3,r3,r3
 20084d8:	28c7883a 	add	r3,r5,r3
 20084dc:	193fff17 	ldw	r4,-4(r3)
 20084e0:	18ffff04 	addi	r3,r3,-4
 20084e4:	2000041e 	bne	r4,zero,20084f8 <__mdiff+0x140>
 20084e8:	18ffff04 	addi	r3,r3,-4
 20084ec:	19000017 	ldw	r4,0(r3)
 20084f0:	4a7fffc4 	addi	r9,r9,-1
 20084f4:	203ffc26 	beq	r4,zero,20084e8 <__mdiff+0x130>
 20084f8:	12400415 	stw	r9,16(r2)
 20084fc:	dfc00417 	ldw	ra,16(sp)
 2008500:	dcc00317 	ldw	r19,12(sp)
 2008504:	dc800217 	ldw	r18,8(sp)
 2008508:	dc400117 	ldw	r17,4(sp)
 200850c:	dc000017 	ldw	r16,0(sp)
 2008510:	dec00504 	addi	sp,sp,20
 2008514:	f800283a 	ret
 2008518:	8005883a 	mov	r2,r16
 200851c:	04c00044 	movi	r19,1
 2008520:	8821883a 	mov	r16,r17
 2008524:	1023883a 	mov	r17,r2
 2008528:	003fb206 	br	20083f4 <__mdiff+0x3c>
 200852c:	9009883a 	mov	r4,r18
 2008530:	000b883a 	mov	r5,zero
 2008534:	2007a140 	call	2007a14 <_Balloc>
 2008538:	00c00044 	movi	r3,1
 200853c:	10c00415 	stw	r3,16(r2)
 2008540:	10000515 	stw	zero,20(r2)
 2008544:	dfc00417 	ldw	ra,16(sp)
 2008548:	dcc00317 	ldw	r19,12(sp)
 200854c:	dc800217 	ldw	r18,8(sp)
 2008550:	dc400117 	ldw	r17,4(sp)
 2008554:	dc000017 	ldw	r16,0(sp)
 2008558:	dec00504 	addi	sp,sp,20
 200855c:	f800283a 	ret

02008560 <__ulp>:
 2008560:	295ffc2c 	andhi	r5,r5,32752
 2008564:	00bf3034 	movhi	r2,64704
 2008568:	2887883a 	add	r3,r5,r2
 200856c:	00c0020e 	bge	zero,r3,2008578 <__ulp+0x18>
 2008570:	0005883a 	mov	r2,zero
 2008574:	f800283a 	ret
 2008578:	00c7c83a 	sub	r3,zero,r3
 200857c:	1805d53a 	srai	r2,r3,20
 2008580:	00c004c4 	movi	r3,19
 2008584:	18800a0e 	bge	r3,r2,20085b0 <__ulp+0x50>
 2008588:	01000c84 	movi	r4,50
 200858c:	0007883a 	mov	r3,zero
 2008590:	20800516 	blt	r4,r2,20085a8 <__ulp+0x48>
 2008594:	01000cc4 	movi	r4,51
 2008598:	2085c83a 	sub	r2,r4,r2
 200859c:	01000044 	movi	r4,1
 20085a0:	2084983a 	sll	r2,r4,r2
 20085a4:	f800283a 	ret
 20085a8:	00800044 	movi	r2,1
 20085ac:	f800283a 	ret
 20085b0:	00c00234 	movhi	r3,8
 20085b4:	1887d83a 	sra	r3,r3,r2
 20085b8:	0005883a 	mov	r2,zero
 20085bc:	f800283a 	ret

020085c0 <__b2d>:
 20085c0:	defffa04 	addi	sp,sp,-24
 20085c4:	dc000015 	stw	r16,0(sp)
 20085c8:	24000417 	ldw	r16,16(r4)
 20085cc:	dc400115 	stw	r17,4(sp)
 20085d0:	dcc00315 	stw	r19,12(sp)
 20085d4:	84000144 	addi	r16,r16,5
 20085d8:	8421883a 	add	r16,r16,r16
 20085dc:	8421883a 	add	r16,r16,r16
 20085e0:	2421883a 	add	r16,r4,r16
 20085e4:	847fff17 	ldw	r17,-4(r16)
 20085e8:	24c00504 	addi	r19,r4,20
 20085ec:	dd000415 	stw	r20,16(sp)
 20085f0:	8809883a 	mov	r4,r17
 20085f4:	dc800215 	stw	r18,8(sp)
 20085f8:	2829883a 	mov	r20,r5
 20085fc:	dfc00515 	stw	ra,20(sp)
 2008600:	2007d2c0 	call	2007d2c <__hi0bits>
 2008604:	00c00804 	movi	r3,32
 2008608:	1887c83a 	sub	r3,r3,r2
 200860c:	a0c00015 	stw	r3,0(r20)
 2008610:	00c00284 	movi	r3,10
 2008614:	84bfff04 	addi	r18,r16,-4
 2008618:	18801216 	blt	r3,r2,2008664 <__b2d+0xa4>
 200861c:	010002c4 	movi	r4,11
 2008620:	2089c83a 	sub	r4,r4,r2
 2008624:	8906d83a 	srl	r3,r17,r4
 2008628:	18cffc34 	orhi	r3,r3,16368
 200862c:	9c80322e 	bgeu	r19,r18,20086f8 <__b2d+0x138>
 2008630:	817ffe17 	ldw	r5,-8(r16)
 2008634:	2908d83a 	srl	r4,r5,r4
 2008638:	10800544 	addi	r2,r2,21
 200863c:	88a2983a 	sll	r17,r17,r2
 2008640:	2444b03a 	or	r2,r4,r17
 2008644:	dfc00517 	ldw	ra,20(sp)
 2008648:	dd000417 	ldw	r20,16(sp)
 200864c:	dcc00317 	ldw	r19,12(sp)
 2008650:	dc800217 	ldw	r18,8(sp)
 2008654:	dc400117 	ldw	r17,4(sp)
 2008658:	dc000017 	ldw	r16,0(sp)
 200865c:	dec00604 	addi	sp,sp,24
 2008660:	f800283a 	ret
 2008664:	9c801636 	bltu	r19,r18,20086c0 <__b2d+0x100>
 2008668:	113ffd44 	addi	r4,r2,-11
 200866c:	000b883a 	mov	r5,zero
 2008670:	20001726 	beq	r4,zero,20086d0 <__b2d+0x110>
 2008674:	00c00ac4 	movi	r3,43
 2008678:	1885c83a 	sub	r2,r3,r2
 200867c:	8906983a 	sll	r3,r17,r4
 2008680:	288cd83a 	srl	r6,r5,r2
 2008684:	18cffc34 	orhi	r3,r3,16368
 2008688:	1986b03a 	or	r3,r3,r6
 200868c:	9c801c2e 	bgeu	r19,r18,2008700 <__b2d+0x140>
 2008690:	91bfff17 	ldw	r6,-4(r18)
 2008694:	3084d83a 	srl	r2,r6,r2
 2008698:	2908983a 	sll	r4,r5,r4
 200869c:	1104b03a 	or	r2,r2,r4
 20086a0:	dfc00517 	ldw	ra,20(sp)
 20086a4:	dd000417 	ldw	r20,16(sp)
 20086a8:	dcc00317 	ldw	r19,12(sp)
 20086ac:	dc800217 	ldw	r18,8(sp)
 20086b0:	dc400117 	ldw	r17,4(sp)
 20086b4:	dc000017 	ldw	r16,0(sp)
 20086b8:	dec00604 	addi	sp,sp,24
 20086bc:	f800283a 	ret
 20086c0:	113ffd44 	addi	r4,r2,-11
 20086c4:	84bffe04 	addi	r18,r16,-8
 20086c8:	817ffe17 	ldw	r5,-8(r16)
 20086cc:	203fe91e 	bne	r4,zero,2008674 <__b2d+0xb4>
 20086d0:	88cffc34 	orhi	r3,r17,16368
 20086d4:	2805883a 	mov	r2,r5
 20086d8:	dfc00517 	ldw	ra,20(sp)
 20086dc:	dd000417 	ldw	r20,16(sp)
 20086e0:	dcc00317 	ldw	r19,12(sp)
 20086e4:	dc800217 	ldw	r18,8(sp)
 20086e8:	dc400117 	ldw	r17,4(sp)
 20086ec:	dc000017 	ldw	r16,0(sp)
 20086f0:	dec00604 	addi	sp,sp,24
 20086f4:	f800283a 	ret
 20086f8:	0009883a 	mov	r4,zero
 20086fc:	003fce06 	br	2008638 <__b2d+0x78>
 2008700:	0005883a 	mov	r2,zero
 2008704:	003fe406 	br	2008698 <__b2d+0xd8>

02008708 <__d2b>:
 2008708:	defff804 	addi	sp,sp,-32
 200870c:	dc400315 	stw	r17,12(sp)
 2008710:	3023883a 	mov	r17,r6
 2008714:	dc800415 	stw	r18,16(sp)
 2008718:	8824907a 	slli	r18,r17,1
 200871c:	dcc00515 	stw	r19,20(sp)
 2008720:	2827883a 	mov	r19,r5
 2008724:	9024d57a 	srli	r18,r18,21
 2008728:	01400044 	movi	r5,1
 200872c:	dd000615 	stw	r20,24(sp)
 2008730:	dc000215 	stw	r16,8(sp)
 2008734:	dfc00715 	stw	ra,28(sp)
 2008738:	3829883a 	mov	r20,r7
 200873c:	2007a140 	call	2007a14 <_Balloc>
 2008740:	1021883a 	mov	r16,r2
 2008744:	00800434 	movhi	r2,16
 2008748:	10bfffc4 	addi	r2,r2,-1
 200874c:	88a2703a 	and	r17,r17,r2
 2008750:	90000126 	beq	r18,zero,2008758 <__d2b+0x50>
 2008754:	8c400434 	orhi	r17,r17,16
 2008758:	dc400015 	stw	r17,0(sp)
 200875c:	98002226 	beq	r19,zero,20087e8 <__d2b+0xe0>
 2008760:	d9000104 	addi	r4,sp,4
 2008764:	dcc00115 	stw	r19,4(sp)
 2008768:	2007d940 	call	2007d94 <__lo0bits>
 200876c:	d8c00017 	ldw	r3,0(sp)
 2008770:	10002d1e 	bne	r2,zero,2008828 <__d2b+0x120>
 2008774:	d9000117 	ldw	r4,4(sp)
 2008778:	81000515 	stw	r4,20(r16)
 200877c:	1823003a 	cmpeq	r17,r3,zero
 2008780:	01000084 	movi	r4,2
 2008784:	2463c83a 	sub	r17,r4,r17
 2008788:	80c00615 	stw	r3,24(r16)
 200878c:	84400415 	stw	r17,16(r16)
 2008790:	90001d1e 	bne	r18,zero,2008808 <__d2b+0x100>
 2008794:	88c00104 	addi	r3,r17,4
 2008798:	18c7883a 	add	r3,r3,r3
 200879c:	18c7883a 	add	r3,r3,r3
 20087a0:	80c7883a 	add	r3,r16,r3
 20087a4:	19000017 	ldw	r4,0(r3)
 20087a8:	10bef384 	addi	r2,r2,-1074
 20087ac:	a0800015 	stw	r2,0(r20)
 20087b0:	2007d2c0 	call	2007d2c <__hi0bits>
 20087b4:	8822917a 	slli	r17,r17,5
 20087b8:	d8c00817 	ldw	r3,32(sp)
 20087bc:	8885c83a 	sub	r2,r17,r2
 20087c0:	18800015 	stw	r2,0(r3)
 20087c4:	8005883a 	mov	r2,r16
 20087c8:	dfc00717 	ldw	ra,28(sp)
 20087cc:	dd000617 	ldw	r20,24(sp)
 20087d0:	dcc00517 	ldw	r19,20(sp)
 20087d4:	dc800417 	ldw	r18,16(sp)
 20087d8:	dc400317 	ldw	r17,12(sp)
 20087dc:	dc000217 	ldw	r16,8(sp)
 20087e0:	dec00804 	addi	sp,sp,32
 20087e4:	f800283a 	ret
 20087e8:	d809883a 	mov	r4,sp
 20087ec:	2007d940 	call	2007d94 <__lo0bits>
 20087f0:	d8c00017 	ldw	r3,0(sp)
 20087f4:	04400044 	movi	r17,1
 20087f8:	84400415 	stw	r17,16(r16)
 20087fc:	80c00515 	stw	r3,20(r16)
 2008800:	10800804 	addi	r2,r2,32
 2008804:	903fe326 	beq	r18,zero,2008794 <__d2b+0x8c>
 2008808:	00c00d44 	movi	r3,53
 200880c:	94bef344 	addi	r18,r18,-1075
 2008810:	90a5883a 	add	r18,r18,r2
 2008814:	1885c83a 	sub	r2,r3,r2
 2008818:	d8c00817 	ldw	r3,32(sp)
 200881c:	a4800015 	stw	r18,0(r20)
 2008820:	18800015 	stw	r2,0(r3)
 2008824:	003fe706 	br	20087c4 <__d2b+0xbc>
 2008828:	01000804 	movi	r4,32
 200882c:	2089c83a 	sub	r4,r4,r2
 2008830:	1908983a 	sll	r4,r3,r4
 2008834:	d9400117 	ldw	r5,4(sp)
 2008838:	1886d83a 	srl	r3,r3,r2
 200883c:	2148b03a 	or	r4,r4,r5
 2008840:	81000515 	stw	r4,20(r16)
 2008844:	d8c00015 	stw	r3,0(sp)
 2008848:	003fcc06 	br	200877c <__d2b+0x74>

0200884c <__ratio>:
 200884c:	defff904 	addi	sp,sp,-28
 2008850:	dc400315 	stw	r17,12(sp)
 2008854:	2823883a 	mov	r17,r5
 2008858:	d9400104 	addi	r5,sp,4
 200885c:	dfc00615 	stw	ra,24(sp)
 2008860:	dcc00515 	stw	r19,20(sp)
 2008864:	dc800415 	stw	r18,16(sp)
 2008868:	2027883a 	mov	r19,r4
 200886c:	dc000215 	stw	r16,8(sp)
 2008870:	20085c00 	call	20085c0 <__b2d>
 2008874:	8809883a 	mov	r4,r17
 2008878:	d80b883a 	mov	r5,sp
 200887c:	1025883a 	mov	r18,r2
 2008880:	1821883a 	mov	r16,r3
 2008884:	20085c00 	call	20085c0 <__b2d>
 2008888:	99400417 	ldw	r5,16(r19)
 200888c:	89000417 	ldw	r4,16(r17)
 2008890:	d9800117 	ldw	r6,4(sp)
 2008894:	2909c83a 	sub	r4,r5,r4
 2008898:	d9400017 	ldw	r5,0(sp)
 200889c:	2008917a 	slli	r4,r4,5
 20088a0:	314bc83a 	sub	r5,r6,r5
 20088a4:	290b883a 	add	r5,r5,r4
 20088a8:	01400e0e 	bge	zero,r5,20088e4 <__ratio+0x98>
 20088ac:	280a953a 	slli	r5,r5,20
 20088b0:	2c21883a 	add	r16,r5,r16
 20088b4:	9009883a 	mov	r4,r18
 20088b8:	800b883a 	mov	r5,r16
 20088bc:	100d883a 	mov	r6,r2
 20088c0:	180f883a 	mov	r7,r3
 20088c4:	200a4080 	call	200a408 <__divdf3>
 20088c8:	dfc00617 	ldw	ra,24(sp)
 20088cc:	dcc00517 	ldw	r19,20(sp)
 20088d0:	dc800417 	ldw	r18,16(sp)
 20088d4:	dc400317 	ldw	r17,12(sp)
 20088d8:	dc000217 	ldw	r16,8(sp)
 20088dc:	dec00704 	addi	sp,sp,28
 20088e0:	f800283a 	ret
 20088e4:	280a953a 	slli	r5,r5,20
 20088e8:	1947c83a 	sub	r3,r3,r5
 20088ec:	003ff106 	br	20088b4 <__ratio+0x68>

020088f0 <_mprec_log10>:
 20088f0:	defffe04 	addi	sp,sp,-8
 20088f4:	dc000015 	stw	r16,0(sp)
 20088f8:	dfc00115 	stw	ra,4(sp)
 20088fc:	008005c4 	movi	r2,23
 2008900:	2021883a 	mov	r16,r4
 2008904:	11000d0e 	bge	r2,r4,200893c <_mprec_log10+0x4c>
 2008908:	0005883a 	mov	r2,zero
 200890c:	00cffc34 	movhi	r3,16368
 2008910:	843fffc4 	addi	r16,r16,-1
 2008914:	1009883a 	mov	r4,r2
 2008918:	180b883a 	mov	r5,r3
 200891c:	000d883a 	mov	r6,zero
 2008920:	01d00934 	movhi	r7,16420
 2008924:	200a1240 	call	200a124 <__muldf3>
 2008928:	803ff91e 	bne	r16,zero,2008910 <_mprec_log10+0x20>
 200892c:	dfc00117 	ldw	ra,4(sp)
 2008930:	dc000017 	ldw	r16,0(sp)
 2008934:	dec00204 	addi	sp,sp,8
 2008938:	f800283a 	ret
 200893c:	202090fa 	slli	r16,r4,3
 2008940:	00808074 	movhi	r2,513
 2008944:	10be7504 	addi	r2,r2,-1580
 2008948:	1421883a 	add	r16,r2,r16
 200894c:	80800017 	ldw	r2,0(r16)
 2008950:	80c00117 	ldw	r3,4(r16)
 2008954:	dfc00117 	ldw	ra,4(sp)
 2008958:	dc000017 	ldw	r16,0(sp)
 200895c:	dec00204 	addi	sp,sp,8
 2008960:	f800283a 	ret

02008964 <__copybits>:
 2008964:	297fffc4 	addi	r5,r5,-1
 2008968:	31c00417 	ldw	r7,16(r6)
 200896c:	2811d17a 	srai	r8,r5,5
 2008970:	30800504 	addi	r2,r6,20
 2008974:	39c00144 	addi	r7,r7,5
 2008978:	42000044 	addi	r8,r8,1
 200897c:	39cf883a 	add	r7,r7,r7
 2008980:	4211883a 	add	r8,r8,r8
 2008984:	39cf883a 	add	r7,r7,r7
 2008988:	4211883a 	add	r8,r8,r8
 200898c:	31cf883a 	add	r7,r6,r7
 2008990:	2211883a 	add	r8,r4,r8
 2008994:	11c00d2e 	bgeu	r2,r7,20089cc <__copybits+0x68>
 2008998:	2007883a 	mov	r3,r4
 200899c:	11400017 	ldw	r5,0(r2)
 20089a0:	18c00104 	addi	r3,r3,4
 20089a4:	10800104 	addi	r2,r2,4
 20089a8:	197fff15 	stw	r5,-4(r3)
 20089ac:	11fffb36 	bltu	r2,r7,200899c <__copybits+0x38>
 20089b0:	3985c83a 	sub	r2,r7,r6
 20089b4:	10bffac4 	addi	r2,r2,-21
 20089b8:	1004d0ba 	srli	r2,r2,2
 20089bc:	10800044 	addi	r2,r2,1
 20089c0:	1085883a 	add	r2,r2,r2
 20089c4:	1085883a 	add	r2,r2,r2
 20089c8:	2089883a 	add	r4,r4,r2
 20089cc:	2200032e 	bgeu	r4,r8,20089dc <__copybits+0x78>
 20089d0:	20000015 	stw	zero,0(r4)
 20089d4:	21000104 	addi	r4,r4,4
 20089d8:	223ffd36 	bltu	r4,r8,20089d0 <__copybits+0x6c>
 20089dc:	f800283a 	ret

020089e0 <__any_on>:
 20089e0:	21800417 	ldw	r6,16(r4)
 20089e4:	2805d17a 	srai	r2,r5,5
 20089e8:	20c00504 	addi	r3,r4,20
 20089ec:	30800f0e 	bge	r6,r2,2008a2c <__any_on+0x4c>
 20089f0:	3005883a 	mov	r2,r6
 20089f4:	10800144 	addi	r2,r2,5
 20089f8:	1085883a 	add	r2,r2,r2
 20089fc:	1085883a 	add	r2,r2,r2
 2008a00:	2089883a 	add	r4,r4,r2
 2008a04:	1900152e 	bgeu	r3,r4,2008a5c <__any_on+0x7c>
 2008a08:	20bfff17 	ldw	r2,-4(r4)
 2008a0c:	213fff04 	addi	r4,r4,-4
 2008a10:	1000041e 	bne	r2,zero,2008a24 <__any_on+0x44>
 2008a14:	1900112e 	bgeu	r3,r4,2008a5c <__any_on+0x7c>
 2008a18:	213fff04 	addi	r4,r4,-4
 2008a1c:	20800017 	ldw	r2,0(r4)
 2008a20:	103ffc26 	beq	r2,zero,2008a14 <__any_on+0x34>
 2008a24:	00800044 	movi	r2,1
 2008a28:	f800283a 	ret
 2008a2c:	11bff10e 	bge	r2,r6,20089f4 <__any_on+0x14>
 2008a30:	294007cc 	andi	r5,r5,31
 2008a34:	283fef26 	beq	r5,zero,20089f4 <__any_on+0x14>
 2008a38:	11800144 	addi	r6,r2,5
 2008a3c:	318d883a 	add	r6,r6,r6
 2008a40:	318d883a 	add	r6,r6,r6
 2008a44:	218d883a 	add	r6,r4,r6
 2008a48:	31800017 	ldw	r6,0(r6)
 2008a4c:	314ed83a 	srl	r7,r6,r5
 2008a50:	394a983a 	sll	r5,r7,r5
 2008a54:	29bff31e 	bne	r5,r6,2008a24 <__any_on+0x44>
 2008a58:	003fe606 	br	20089f4 <__any_on+0x14>
 2008a5c:	0005883a 	mov	r2,zero
 2008a60:	f800283a 	ret

02008a64 <_putc_r>:
 2008a64:	defffc04 	addi	sp,sp,-16
 2008a68:	dc000215 	stw	r16,8(sp)
 2008a6c:	dfc00315 	stw	ra,12(sp)
 2008a70:	2021883a 	mov	r16,r4
 2008a74:	20000226 	beq	r4,zero,2008a80 <_putc_r+0x1c>
 2008a78:	20800e17 	ldw	r2,56(r4)
 2008a7c:	10001d26 	beq	r2,zero,2008af4 <_putc_r+0x90>
 2008a80:	30800217 	ldw	r2,8(r6)
 2008a84:	10bfffc4 	addi	r2,r2,-1
 2008a88:	30800215 	stw	r2,8(r6)
 2008a8c:	10000a16 	blt	r2,zero,2008ab8 <_putc_r+0x54>
 2008a90:	30800017 	ldw	r2,0(r6)
 2008a94:	11400005 	stb	r5,0(r2)
 2008a98:	30800017 	ldw	r2,0(r6)
 2008a9c:	10c00044 	addi	r3,r2,1
 2008aa0:	10800003 	ldbu	r2,0(r2)
 2008aa4:	30c00015 	stw	r3,0(r6)
 2008aa8:	dfc00317 	ldw	ra,12(sp)
 2008aac:	dc000217 	ldw	r16,8(sp)
 2008ab0:	dec00404 	addi	sp,sp,16
 2008ab4:	f800283a 	ret
 2008ab8:	30c00617 	ldw	r3,24(r6)
 2008abc:	10c01316 	blt	r2,r3,2008b0c <_putc_r+0xa8>
 2008ac0:	30800017 	ldw	r2,0(r6)
 2008ac4:	01000284 	movi	r4,10
 2008ac8:	11400005 	stb	r5,0(r2)
 2008acc:	30c00017 	ldw	r3,0(r6)
 2008ad0:	19400003 	ldbu	r5,0(r3)
 2008ad4:	29000d26 	beq	r5,r4,2008b0c <_putc_r+0xa8>
 2008ad8:	18c00044 	addi	r3,r3,1
 2008adc:	2805883a 	mov	r2,r5
 2008ae0:	30c00015 	stw	r3,0(r6)
 2008ae4:	dfc00317 	ldw	ra,12(sp)
 2008ae8:	dc000217 	ldw	r16,8(sp)
 2008aec:	dec00404 	addi	sp,sp,16
 2008af0:	f800283a 	ret
 2008af4:	d9400015 	stw	r5,0(sp)
 2008af8:	d9800115 	stw	r6,4(sp)
 2008afc:	20067d80 	call	20067d8 <__sinit>
 2008b00:	d9800117 	ldw	r6,4(sp)
 2008b04:	d9400017 	ldw	r5,0(sp)
 2008b08:	003fdd06 	br	2008a80 <_putc_r+0x1c>
 2008b0c:	8009883a 	mov	r4,r16
 2008b10:	dfc00317 	ldw	ra,12(sp)
 2008b14:	dc000217 	ldw	r16,8(sp)
 2008b18:	dec00404 	addi	sp,sp,16
 2008b1c:	20093801 	jmpi	2009380 <__swbuf_r>

02008b20 <putc>:
 2008b20:	defffc04 	addi	sp,sp,-16
 2008b24:	dc400115 	stw	r17,4(sp)
 2008b28:	04408074 	movhi	r17,513
 2008b2c:	8c45b204 	addi	r17,r17,5832
 2008b30:	88800017 	ldw	r2,0(r17)
 2008b34:	dc800215 	stw	r18,8(sp)
 2008b38:	dc000015 	stw	r16,0(sp)
 2008b3c:	dfc00315 	stw	ra,12(sp)
 2008b40:	2025883a 	mov	r18,r4
 2008b44:	2821883a 	mov	r16,r5
 2008b48:	10000226 	beq	r2,zero,2008b54 <putc+0x34>
 2008b4c:	10c00e17 	ldw	r3,56(r2)
 2008b50:	18002126 	beq	r3,zero,2008bd8 <putc+0xb8>
 2008b54:	80800217 	ldw	r2,8(r16)
 2008b58:	10bfffc4 	addi	r2,r2,-1
 2008b5c:	80800215 	stw	r2,8(r16)
 2008b60:	10000c16 	blt	r2,zero,2008b94 <putc+0x74>
 2008b64:	80800017 	ldw	r2,0(r16)
 2008b68:	14800005 	stb	r18,0(r2)
 2008b6c:	80800017 	ldw	r2,0(r16)
 2008b70:	10c00044 	addi	r3,r2,1
 2008b74:	10800003 	ldbu	r2,0(r2)
 2008b78:	80c00015 	stw	r3,0(r16)
 2008b7c:	dfc00317 	ldw	ra,12(sp)
 2008b80:	dc800217 	ldw	r18,8(sp)
 2008b84:	dc400117 	ldw	r17,4(sp)
 2008b88:	dc000017 	ldw	r16,0(sp)
 2008b8c:	dec00404 	addi	sp,sp,16
 2008b90:	f800283a 	ret
 2008b94:	80c00617 	ldw	r3,24(r16)
 2008b98:	10c01216 	blt	r2,r3,2008be4 <putc+0xc4>
 2008b9c:	80800017 	ldw	r2,0(r16)
 2008ba0:	01000284 	movi	r4,10
 2008ba4:	14800005 	stb	r18,0(r2)
 2008ba8:	80c00017 	ldw	r3,0(r16)
 2008bac:	19400003 	ldbu	r5,0(r3)
 2008bb0:	29001526 	beq	r5,r4,2008c08 <putc+0xe8>
 2008bb4:	18c00044 	addi	r3,r3,1
 2008bb8:	2805883a 	mov	r2,r5
 2008bbc:	80c00015 	stw	r3,0(r16)
 2008bc0:	dfc00317 	ldw	ra,12(sp)
 2008bc4:	dc800217 	ldw	r18,8(sp)
 2008bc8:	dc400117 	ldw	r17,4(sp)
 2008bcc:	dc000017 	ldw	r16,0(sp)
 2008bd0:	dec00404 	addi	sp,sp,16
 2008bd4:	f800283a 	ret
 2008bd8:	1009883a 	mov	r4,r2
 2008bdc:	20067d80 	call	20067d8 <__sinit>
 2008be0:	003fdc06 	br	2008b54 <putc+0x34>
 2008be4:	89000017 	ldw	r4,0(r17)
 2008be8:	900b883a 	mov	r5,r18
 2008bec:	800d883a 	mov	r6,r16
 2008bf0:	dfc00317 	ldw	ra,12(sp)
 2008bf4:	dc800217 	ldw	r18,8(sp)
 2008bf8:	dc400117 	ldw	r17,4(sp)
 2008bfc:	dc000017 	ldw	r16,0(sp)
 2008c00:	dec00404 	addi	sp,sp,16
 2008c04:	20093801 	jmpi	2009380 <__swbuf_r>
 2008c08:	89000017 	ldw	r4,0(r17)
 2008c0c:	003ff706 	br	2008bec <putc+0xcc>

02008c10 <_read_r>:
 2008c10:	defffd04 	addi	sp,sp,-12
 2008c14:	dc400115 	stw	r17,4(sp)
 2008c18:	dc000015 	stw	r16,0(sp)
 2008c1c:	2023883a 	mov	r17,r4
 2008c20:	04008074 	movhi	r16,513
 2008c24:	8405c704 	addi	r16,r16,5916
 2008c28:	2809883a 	mov	r4,r5
 2008c2c:	300b883a 	mov	r5,r6
 2008c30:	380d883a 	mov	r6,r7
 2008c34:	dfc00215 	stw	ra,8(sp)
 2008c38:	80000015 	stw	zero,0(r16)
 2008c3c:	200b8980 	call	200b898 <read>
 2008c40:	00ffffc4 	movi	r3,-1
 2008c44:	10c00526 	beq	r2,r3,2008c5c <_read_r+0x4c>
 2008c48:	dfc00217 	ldw	ra,8(sp)
 2008c4c:	dc400117 	ldw	r17,4(sp)
 2008c50:	dc000017 	ldw	r16,0(sp)
 2008c54:	dec00304 	addi	sp,sp,12
 2008c58:	f800283a 	ret
 2008c5c:	80c00017 	ldw	r3,0(r16)
 2008c60:	183ff926 	beq	r3,zero,2008c48 <_read_r+0x38>
 2008c64:	88c00015 	stw	r3,0(r17)
 2008c68:	dfc00217 	ldw	ra,8(sp)
 2008c6c:	dc400117 	ldw	r17,4(sp)
 2008c70:	dc000017 	ldw	r16,0(sp)
 2008c74:	dec00304 	addi	sp,sp,12
 2008c78:	f800283a 	ret

02008c7c <_realloc_r>:
 2008c7c:	defff504 	addi	sp,sp,-44
 2008c80:	dd400615 	stw	r21,24(sp)
 2008c84:	dc800315 	stw	r18,12(sp)
 2008c88:	dc000115 	stw	r16,4(sp)
 2008c8c:	dfc00a15 	stw	ra,40(sp)
 2008c90:	df000915 	stw	fp,36(sp)
 2008c94:	ddc00815 	stw	r23,32(sp)
 2008c98:	dd800715 	stw	r22,28(sp)
 2008c9c:	dd000515 	stw	r20,20(sp)
 2008ca0:	dcc00415 	stw	r19,16(sp)
 2008ca4:	dc400215 	stw	r17,8(sp)
 2008ca8:	2821883a 	mov	r16,r5
 2008cac:	202b883a 	mov	r21,r4
 2008cb0:	3025883a 	mov	r18,r6
 2008cb4:	28009626 	beq	r5,zero,2008f10 <_realloc_r+0x294>
 2008cb8:	200b5700 	call	200b570 <__malloc_lock>
 2008cbc:	80bfff17 	ldw	r2,-4(r16)
 2008cc0:	04ffff04 	movi	r19,-4
 2008cc4:	90c002c4 	addi	r3,r18,11
 2008cc8:	01000584 	movi	r4,22
 2008ccc:	85bffe04 	addi	r22,r16,-8
 2008cd0:	14e6703a 	and	r19,r2,r19
 2008cd4:	20c0372e 	bgeu	r4,r3,2008db4 <_realloc_r+0x138>
 2008cd8:	047ffe04 	movi	r17,-8
 2008cdc:	1c62703a 	and	r17,r3,r17
 2008ce0:	8807883a 	mov	r3,r17
 2008ce4:	88005a16 	blt	r17,zero,2008e50 <_realloc_r+0x1d4>
 2008ce8:	8c805936 	bltu	r17,r18,2008e50 <_realloc_r+0x1d4>
 2008cec:	98c0340e 	bge	r19,r3,2008dc0 <_realloc_r+0x144>
 2008cf0:	07008074 	movhi	fp,513
 2008cf4:	e73fc504 	addi	fp,fp,-236
 2008cf8:	e1400217 	ldw	r5,8(fp)
 2008cfc:	b4c9883a 	add	r4,r22,r19
 2008d00:	29009026 	beq	r5,r4,2008f44 <_realloc_r+0x2c8>
 2008d04:	21800117 	ldw	r6,4(r4)
 2008d08:	01ffff84 	movi	r7,-2
 2008d0c:	31ce703a 	and	r7,r6,r7
 2008d10:	21cf883a 	add	r7,r4,r7
 2008d14:	39c00117 	ldw	r7,4(r7)
 2008d18:	39c0004c 	andi	r7,r7,1
 2008d1c:	38004326 	beq	r7,zero,2008e2c <_realloc_r+0x1b0>
 2008d20:	000d883a 	mov	r6,zero
 2008d24:	0009883a 	mov	r4,zero
 2008d28:	1080004c 	andi	r2,r2,1
 2008d2c:	10005a1e 	bne	r2,zero,2008e98 <_realloc_r+0x21c>
 2008d30:	85fffe17 	ldw	r23,-8(r16)
 2008d34:	00bfff04 	movi	r2,-4
 2008d38:	b5efc83a 	sub	r23,r22,r23
 2008d3c:	b9c00117 	ldw	r7,4(r23)
 2008d40:	388e703a 	and	r7,r7,r2
 2008d44:	3ccf883a 	add	r7,r7,r19
 2008d48:	20005226 	beq	r4,zero,2008e94 <_realloc_r+0x218>
 2008d4c:	31e9883a 	add	r20,r6,r7
 2008d50:	2140c726 	beq	r4,r5,2009070 <_realloc_r+0x3f4>
 2008d54:	a0c04f16 	blt	r20,r3,2008e94 <_realloc_r+0x218>
 2008d58:	20800317 	ldw	r2,12(r4)
 2008d5c:	20c00217 	ldw	r3,8(r4)
 2008d60:	99bfff04 	addi	r6,r19,-4
 2008d64:	01000904 	movi	r4,36
 2008d68:	18800315 	stw	r2,12(r3)
 2008d6c:	10c00215 	stw	r3,8(r2)
 2008d70:	b8c00217 	ldw	r3,8(r23)
 2008d74:	b8800317 	ldw	r2,12(r23)
 2008d78:	bc800204 	addi	r18,r23,8
 2008d7c:	18800315 	stw	r2,12(r3)
 2008d80:	10c00215 	stw	r3,8(r2)
 2008d84:	2180ed36 	bltu	r4,r6,200913c <_realloc_r+0x4c0>
 2008d88:	008004c4 	movi	r2,19
 2008d8c:	11809b2e 	bgeu	r2,r6,2008ffc <_realloc_r+0x380>
 2008d90:	80800017 	ldw	r2,0(r16)
 2008d94:	b8800215 	stw	r2,8(r23)
 2008d98:	80800117 	ldw	r2,4(r16)
 2008d9c:	b8800315 	stw	r2,12(r23)
 2008da0:	008006c4 	movi	r2,27
 2008da4:	1180f936 	bltu	r2,r6,200918c <_realloc_r+0x510>
 2008da8:	b8800404 	addi	r2,r23,16
 2008dac:	80c00204 	addi	r3,r16,8
 2008db0:	00009406 	br	2009004 <_realloc_r+0x388>
 2008db4:	00c00404 	movi	r3,16
 2008db8:	1823883a 	mov	r17,r3
 2008dbc:	003fca06 	br	2008ce8 <_realloc_r+0x6c>
 2008dc0:	9829883a 	mov	r20,r19
 2008dc4:	a447c83a 	sub	r3,r20,r17
 2008dc8:	010003c4 	movi	r4,15
 2008dcc:	1080004c 	andi	r2,r2,1
 2008dd0:	20c02336 	bltu	r4,r3,2008e60 <_realloc_r+0x1e4>
 2008dd4:	1504b03a 	or	r2,r2,r20
 2008dd8:	b0800115 	stw	r2,4(r22)
 2008ddc:	b52d883a 	add	r22,r22,r20
 2008de0:	b0800117 	ldw	r2,4(r22)
 2008de4:	10800054 	ori	r2,r2,1
 2008de8:	b0800115 	stw	r2,4(r22)
 2008dec:	a809883a 	mov	r4,r21
 2008df0:	200b5900 	call	200b590 <__malloc_unlock>
 2008df4:	8025883a 	mov	r18,r16
 2008df8:	9005883a 	mov	r2,r18
 2008dfc:	dfc00a17 	ldw	ra,40(sp)
 2008e00:	df000917 	ldw	fp,36(sp)
 2008e04:	ddc00817 	ldw	r23,32(sp)
 2008e08:	dd800717 	ldw	r22,28(sp)
 2008e0c:	dd400617 	ldw	r21,24(sp)
 2008e10:	dd000517 	ldw	r20,20(sp)
 2008e14:	dcc00417 	ldw	r19,16(sp)
 2008e18:	dc800317 	ldw	r18,12(sp)
 2008e1c:	dc400217 	ldw	r17,8(sp)
 2008e20:	dc000117 	ldw	r16,4(sp)
 2008e24:	dec00b04 	addi	sp,sp,44
 2008e28:	f800283a 	ret
 2008e2c:	01ffff04 	movi	r7,-4
 2008e30:	31cc703a 	and	r6,r6,r7
 2008e34:	34e9883a 	add	r20,r6,r19
 2008e38:	a0ffbb16 	blt	r20,r3,2008d28 <_realloc_r+0xac>
 2008e3c:	20c00317 	ldw	r3,12(r4)
 2008e40:	21000217 	ldw	r4,8(r4)
 2008e44:	20c00315 	stw	r3,12(r4)
 2008e48:	19000215 	stw	r4,8(r3)
 2008e4c:	003fdd06 	br	2008dc4 <_realloc_r+0x148>
 2008e50:	00800304 	movi	r2,12
 2008e54:	a8800015 	stw	r2,0(r21)
 2008e58:	0025883a 	mov	r18,zero
 2008e5c:	003fe606 	br	2008df8 <_realloc_r+0x17c>
 2008e60:	1444b03a 	or	r2,r2,r17
 2008e64:	b0800115 	stw	r2,4(r22)
 2008e68:	b44b883a 	add	r5,r22,r17
 2008e6c:	18800054 	ori	r2,r3,1
 2008e70:	28800115 	stw	r2,4(r5)
 2008e74:	28c7883a 	add	r3,r5,r3
 2008e78:	18800117 	ldw	r2,4(r3)
 2008e7c:	a809883a 	mov	r4,r21
 2008e80:	29400204 	addi	r5,r5,8
 2008e84:	10800054 	ori	r2,r2,1
 2008e88:	18800115 	stw	r2,4(r3)
 2008e8c:	2006bf40 	call	2006bf4 <_free_r>
 2008e90:	003fd606 	br	2008dec <_realloc_r+0x170>
 2008e94:	38c0330e 	bge	r7,r3,2008f64 <_realloc_r+0x2e8>
 2008e98:	900b883a 	mov	r5,r18
 2008e9c:	a809883a 	mov	r4,r21
 2008ea0:	2001cc00 	call	2001cc0 <_malloc_r>
 2008ea4:	1025883a 	mov	r18,r2
 2008ea8:	10001626 	beq	r2,zero,2008f04 <_realloc_r+0x288>
 2008eac:	80bfff17 	ldw	r2,-4(r16)
 2008eb0:	00ffff84 	movi	r3,-2
 2008eb4:	913ffe04 	addi	r4,r18,-8
 2008eb8:	10c6703a 	and	r3,r2,r3
 2008ebc:	b0c7883a 	add	r3,r22,r3
 2008ec0:	20c09926 	beq	r4,r3,2009128 <_realloc_r+0x4ac>
 2008ec4:	99bfff04 	addi	r6,r19,-4
 2008ec8:	00800904 	movi	r2,36
 2008ecc:	11806436 	bltu	r2,r6,2009060 <_realloc_r+0x3e4>
 2008ed0:	00c004c4 	movi	r3,19
 2008ed4:	19804036 	bltu	r3,r6,2008fd8 <_realloc_r+0x35c>
 2008ed8:	9005883a 	mov	r2,r18
 2008edc:	8007883a 	mov	r3,r16
 2008ee0:	19000017 	ldw	r4,0(r3)
 2008ee4:	11000015 	stw	r4,0(r2)
 2008ee8:	19000117 	ldw	r4,4(r3)
 2008eec:	11000115 	stw	r4,4(r2)
 2008ef0:	18c00217 	ldw	r3,8(r3)
 2008ef4:	10c00215 	stw	r3,8(r2)
 2008ef8:	a809883a 	mov	r4,r21
 2008efc:	800b883a 	mov	r5,r16
 2008f00:	2006bf40 	call	2006bf4 <_free_r>
 2008f04:	a809883a 	mov	r4,r21
 2008f08:	200b5900 	call	200b590 <__malloc_unlock>
 2008f0c:	003fba06 	br	2008df8 <_realloc_r+0x17c>
 2008f10:	300b883a 	mov	r5,r6
 2008f14:	dfc00a17 	ldw	ra,40(sp)
 2008f18:	df000917 	ldw	fp,36(sp)
 2008f1c:	ddc00817 	ldw	r23,32(sp)
 2008f20:	dd800717 	ldw	r22,28(sp)
 2008f24:	dd400617 	ldw	r21,24(sp)
 2008f28:	dd000517 	ldw	r20,20(sp)
 2008f2c:	dcc00417 	ldw	r19,16(sp)
 2008f30:	dc800317 	ldw	r18,12(sp)
 2008f34:	dc400217 	ldw	r17,8(sp)
 2008f38:	dc000117 	ldw	r16,4(sp)
 2008f3c:	dec00b04 	addi	sp,sp,44
 2008f40:	2001cc01 	jmpi	2001cc0 <_malloc_r>
 2008f44:	29800117 	ldw	r6,4(r5)
 2008f48:	013fff04 	movi	r4,-4
 2008f4c:	89c00404 	addi	r7,r17,16
 2008f50:	310c703a 	and	r6,r6,r4
 2008f54:	34c9883a 	add	r4,r6,r19
 2008f58:	21c0340e 	bge	r4,r7,200902c <_realloc_r+0x3b0>
 2008f5c:	2809883a 	mov	r4,r5
 2008f60:	003f7106 	br	2008d28 <_realloc_r+0xac>
 2008f64:	b8800317 	ldw	r2,12(r23)
 2008f68:	b8c00217 	ldw	r3,8(r23)
 2008f6c:	99bfff04 	addi	r6,r19,-4
 2008f70:	01000904 	movi	r4,36
 2008f74:	18800315 	stw	r2,12(r3)
 2008f78:	10c00215 	stw	r3,8(r2)
 2008f7c:	bc800204 	addi	r18,r23,8
 2008f80:	21807836 	bltu	r4,r6,2009164 <_realloc_r+0x4e8>
 2008f84:	008004c4 	movi	r2,19
 2008f88:	1180732e 	bgeu	r2,r6,2009158 <_realloc_r+0x4dc>
 2008f8c:	80800017 	ldw	r2,0(r16)
 2008f90:	b8800215 	stw	r2,8(r23)
 2008f94:	80800117 	ldw	r2,4(r16)
 2008f98:	b8800315 	stw	r2,12(r23)
 2008f9c:	008006c4 	movi	r2,27
 2008fa0:	11808936 	bltu	r2,r6,20091c8 <_realloc_r+0x54c>
 2008fa4:	b8800404 	addi	r2,r23,16
 2008fa8:	80c00204 	addi	r3,r16,8
 2008fac:	19000017 	ldw	r4,0(r3)
 2008fb0:	9021883a 	mov	r16,r18
 2008fb4:	3829883a 	mov	r20,r7
 2008fb8:	11000015 	stw	r4,0(r2)
 2008fbc:	19000117 	ldw	r4,4(r3)
 2008fc0:	b82d883a 	mov	r22,r23
 2008fc4:	11000115 	stw	r4,4(r2)
 2008fc8:	18c00217 	ldw	r3,8(r3)
 2008fcc:	10c00215 	stw	r3,8(r2)
 2008fd0:	b8800117 	ldw	r2,4(r23)
 2008fd4:	003f7b06 	br	2008dc4 <_realloc_r+0x148>
 2008fd8:	80c00017 	ldw	r3,0(r16)
 2008fdc:	90c00015 	stw	r3,0(r18)
 2008fe0:	80c00117 	ldw	r3,4(r16)
 2008fe4:	90c00115 	stw	r3,4(r18)
 2008fe8:	00c006c4 	movi	r3,27
 2008fec:	19804636 	bltu	r3,r6,2009108 <_realloc_r+0x48c>
 2008ff0:	90800204 	addi	r2,r18,8
 2008ff4:	80c00204 	addi	r3,r16,8
 2008ff8:	003fb906 	br	2008ee0 <_realloc_r+0x264>
 2008ffc:	9005883a 	mov	r2,r18
 2009000:	8007883a 	mov	r3,r16
 2009004:	19000017 	ldw	r4,0(r3)
 2009008:	9021883a 	mov	r16,r18
 200900c:	b82d883a 	mov	r22,r23
 2009010:	11000015 	stw	r4,0(r2)
 2009014:	19000117 	ldw	r4,4(r3)
 2009018:	11000115 	stw	r4,4(r2)
 200901c:	18c00217 	ldw	r3,8(r3)
 2009020:	10c00215 	stw	r3,8(r2)
 2009024:	b8800117 	ldw	r2,4(r23)
 2009028:	003f6606 	br	2008dc4 <_realloc_r+0x148>
 200902c:	2445c83a 	sub	r2,r4,r17
 2009030:	b46d883a 	add	r22,r22,r17
 2009034:	10800054 	ori	r2,r2,1
 2009038:	b0800115 	stw	r2,4(r22)
 200903c:	80bfff17 	ldw	r2,-4(r16)
 2009040:	a809883a 	mov	r4,r21
 2009044:	e5800215 	stw	r22,8(fp)
 2009048:	1080004c 	andi	r2,r2,1
 200904c:	88a2b03a 	or	r17,r17,r2
 2009050:	847fff15 	stw	r17,-4(r16)
 2009054:	200b5900 	call	200b590 <__malloc_unlock>
 2009058:	8025883a 	mov	r18,r16
 200905c:	003f6606 	br	2008df8 <_realloc_r+0x17c>
 2009060:	9009883a 	mov	r4,r18
 2009064:	800b883a 	mov	r5,r16
 2009068:	20077ac0 	call	20077ac <memmove>
 200906c:	003fa206 	br	2008ef8 <_realloc_r+0x27c>
 2009070:	88800404 	addi	r2,r17,16
 2009074:	a0bf8716 	blt	r20,r2,2008e94 <_realloc_r+0x218>
 2009078:	b8800317 	ldw	r2,12(r23)
 200907c:	b8c00217 	ldw	r3,8(r23)
 2009080:	99bfff04 	addi	r6,r19,-4
 2009084:	01000904 	movi	r4,36
 2009088:	18800315 	stw	r2,12(r3)
 200908c:	10c00215 	stw	r3,8(r2)
 2009090:	bc800204 	addi	r18,r23,8
 2009094:	21806536 	bltu	r4,r6,200922c <_realloc_r+0x5b0>
 2009098:	008004c4 	movi	r2,19
 200909c:	1180592e 	bgeu	r2,r6,2009204 <_realloc_r+0x588>
 20090a0:	80800017 	ldw	r2,0(r16)
 20090a4:	b8800215 	stw	r2,8(r23)
 20090a8:	80800117 	ldw	r2,4(r16)
 20090ac:	b8800315 	stw	r2,12(r23)
 20090b0:	008006c4 	movi	r2,27
 20090b4:	11806136 	bltu	r2,r6,200923c <_realloc_r+0x5c0>
 20090b8:	b8800404 	addi	r2,r23,16
 20090bc:	80c00204 	addi	r3,r16,8
 20090c0:	19000017 	ldw	r4,0(r3)
 20090c4:	11000015 	stw	r4,0(r2)
 20090c8:	19000117 	ldw	r4,4(r3)
 20090cc:	11000115 	stw	r4,4(r2)
 20090d0:	18c00217 	ldw	r3,8(r3)
 20090d4:	10c00215 	stw	r3,8(r2)
 20090d8:	a447c83a 	sub	r3,r20,r17
 20090dc:	bc45883a 	add	r2,r23,r17
 20090e0:	18c00054 	ori	r3,r3,1
 20090e4:	10c00115 	stw	r3,4(r2)
 20090e8:	b8c00117 	ldw	r3,4(r23)
 20090ec:	e0800215 	stw	r2,8(fp)
 20090f0:	a809883a 	mov	r4,r21
 20090f4:	1880004c 	andi	r2,r3,1
 20090f8:	88a2b03a 	or	r17,r17,r2
 20090fc:	bc400115 	stw	r17,4(r23)
 2009100:	200b5900 	call	200b590 <__malloc_unlock>
 2009104:	003f3c06 	br	2008df8 <_realloc_r+0x17c>
 2009108:	80c00217 	ldw	r3,8(r16)
 200910c:	90c00215 	stw	r3,8(r18)
 2009110:	80c00317 	ldw	r3,12(r16)
 2009114:	90c00315 	stw	r3,12(r18)
 2009118:	30802426 	beq	r6,r2,20091ac <_realloc_r+0x530>
 200911c:	90800404 	addi	r2,r18,16
 2009120:	80c00404 	addi	r3,r16,16
 2009124:	003f6e06 	br	2008ee0 <_realloc_r+0x264>
 2009128:	953fff17 	ldw	r20,-4(r18)
 200912c:	00ffff04 	movi	r3,-4
 2009130:	a0e8703a 	and	r20,r20,r3
 2009134:	a4e9883a 	add	r20,r20,r19
 2009138:	003f2206 	br	2008dc4 <_realloc_r+0x148>
 200913c:	800b883a 	mov	r5,r16
 2009140:	9009883a 	mov	r4,r18
 2009144:	20077ac0 	call	20077ac <memmove>
 2009148:	9021883a 	mov	r16,r18
 200914c:	b8800117 	ldw	r2,4(r23)
 2009150:	b82d883a 	mov	r22,r23
 2009154:	003f1b06 	br	2008dc4 <_realloc_r+0x148>
 2009158:	9005883a 	mov	r2,r18
 200915c:	8007883a 	mov	r3,r16
 2009160:	003f9206 	br	2008fac <_realloc_r+0x330>
 2009164:	800b883a 	mov	r5,r16
 2009168:	9009883a 	mov	r4,r18
 200916c:	d9c00015 	stw	r7,0(sp)
 2009170:	20077ac0 	call	20077ac <memmove>
 2009174:	d9c00017 	ldw	r7,0(sp)
 2009178:	9021883a 	mov	r16,r18
 200917c:	b8800117 	ldw	r2,4(r23)
 2009180:	3829883a 	mov	r20,r7
 2009184:	b82d883a 	mov	r22,r23
 2009188:	003f0e06 	br	2008dc4 <_realloc_r+0x148>
 200918c:	80800217 	ldw	r2,8(r16)
 2009190:	b8800415 	stw	r2,16(r23)
 2009194:	80800317 	ldw	r2,12(r16)
 2009198:	b8800515 	stw	r2,20(r23)
 200919c:	31001226 	beq	r6,r4,20091e8 <_realloc_r+0x56c>
 20091a0:	b8800604 	addi	r2,r23,24
 20091a4:	80c00404 	addi	r3,r16,16
 20091a8:	003f9606 	br	2009004 <_realloc_r+0x388>
 20091ac:	81000417 	ldw	r4,16(r16)
 20091b0:	90800604 	addi	r2,r18,24
 20091b4:	80c00604 	addi	r3,r16,24
 20091b8:	91000415 	stw	r4,16(r18)
 20091bc:	81000517 	ldw	r4,20(r16)
 20091c0:	91000515 	stw	r4,20(r18)
 20091c4:	003f4606 	br	2008ee0 <_realloc_r+0x264>
 20091c8:	80800217 	ldw	r2,8(r16)
 20091cc:	b8800415 	stw	r2,16(r23)
 20091d0:	80800317 	ldw	r2,12(r16)
 20091d4:	b8800515 	stw	r2,20(r23)
 20091d8:	31000d26 	beq	r6,r4,2009210 <_realloc_r+0x594>
 20091dc:	b8800604 	addi	r2,r23,24
 20091e0:	80c00404 	addi	r3,r16,16
 20091e4:	003f7106 	br	2008fac <_realloc_r+0x330>
 20091e8:	81000417 	ldw	r4,16(r16)
 20091ec:	b8800804 	addi	r2,r23,32
 20091f0:	80c00604 	addi	r3,r16,24
 20091f4:	b9000615 	stw	r4,24(r23)
 20091f8:	81000517 	ldw	r4,20(r16)
 20091fc:	b9000715 	stw	r4,28(r23)
 2009200:	003f8006 	br	2009004 <_realloc_r+0x388>
 2009204:	9005883a 	mov	r2,r18
 2009208:	8007883a 	mov	r3,r16
 200920c:	003fac06 	br	20090c0 <_realloc_r+0x444>
 2009210:	81000417 	ldw	r4,16(r16)
 2009214:	b8800804 	addi	r2,r23,32
 2009218:	80c00604 	addi	r3,r16,24
 200921c:	b9000615 	stw	r4,24(r23)
 2009220:	81000517 	ldw	r4,20(r16)
 2009224:	b9000715 	stw	r4,28(r23)
 2009228:	003f6006 	br	2008fac <_realloc_r+0x330>
 200922c:	9009883a 	mov	r4,r18
 2009230:	800b883a 	mov	r5,r16
 2009234:	20077ac0 	call	20077ac <memmove>
 2009238:	003fa706 	br	20090d8 <_realloc_r+0x45c>
 200923c:	80800217 	ldw	r2,8(r16)
 2009240:	b8800415 	stw	r2,16(r23)
 2009244:	80800317 	ldw	r2,12(r16)
 2009248:	b8800515 	stw	r2,20(r23)
 200924c:	31000326 	beq	r6,r4,200925c <_realloc_r+0x5e0>
 2009250:	b8800604 	addi	r2,r23,24
 2009254:	80c00404 	addi	r3,r16,16
 2009258:	003f9906 	br	20090c0 <_realloc_r+0x444>
 200925c:	81000417 	ldw	r4,16(r16)
 2009260:	b8800804 	addi	r2,r23,32
 2009264:	80c00604 	addi	r3,r16,24
 2009268:	b9000615 	stw	r4,24(r23)
 200926c:	81000517 	ldw	r4,20(r16)
 2009270:	b9000715 	stw	r4,28(r23)
 2009274:	003f9206 	br	20090c0 <_realloc_r+0x444>

02009278 <__isinfd>:
 2009278:	0105c83a 	sub	r2,zero,r4
 200927c:	1108b03a 	or	r4,r2,r4
 2009280:	2004d7fa 	srli	r2,r4,31
 2009284:	00e00034 	movhi	r3,32768
 2009288:	18ffffc4 	addi	r3,r3,-1
 200928c:	28ca703a 	and	r5,r5,r3
 2009290:	1144b03a 	or	r2,r2,r5
 2009294:	00dffc34 	movhi	r3,32752
 2009298:	1885c83a 	sub	r2,r3,r2
 200929c:	0087c83a 	sub	r3,zero,r2
 20092a0:	1884b03a 	or	r2,r3,r2
 20092a4:	1005d7fa 	srai	r2,r2,31
 20092a8:	10800044 	addi	r2,r2,1
 20092ac:	f800283a 	ret

020092b0 <__isnand>:
 20092b0:	0105c83a 	sub	r2,zero,r4
 20092b4:	1108b03a 	or	r4,r2,r4
 20092b8:	2004d7fa 	srli	r2,r4,31
 20092bc:	00e00034 	movhi	r3,32768
 20092c0:	18ffffc4 	addi	r3,r3,-1
 20092c4:	28ca703a 	and	r5,r5,r3
 20092c8:	1144b03a 	or	r2,r2,r5
 20092cc:	00dffc34 	movhi	r3,32752
 20092d0:	1885c83a 	sub	r2,r3,r2
 20092d4:	1004d7fa 	srli	r2,r2,31
 20092d8:	f800283a 	ret

020092dc <strcmp>:
 20092dc:	2904b03a 	or	r2,r5,r4
 20092e0:	108000cc 	andi	r2,r2,3
 20092e4:	1000171e 	bne	r2,zero,2009344 <strcmp+0x68>
 20092e8:	20800017 	ldw	r2,0(r4)
 20092ec:	28c00017 	ldw	r3,0(r5)
 20092f0:	10c0141e 	bne	r2,r3,2009344 <strcmp+0x68>
 20092f4:	027fbff4 	movhi	r9,65279
 20092f8:	4a7fbfc4 	addi	r9,r9,-257
 20092fc:	1247883a 	add	r3,r2,r9
 2009300:	0084303a 	nor	r2,zero,r2
 2009304:	1884703a 	and	r2,r3,r2
 2009308:	02202074 	movhi	r8,32897
 200930c:	42202004 	addi	r8,r8,-32640
 2009310:	1204703a 	and	r2,r2,r8
 2009314:	10000226 	beq	r2,zero,2009320 <strcmp+0x44>
 2009318:	00001706 	br	2009378 <strcmp+0x9c>
 200931c:	3000161e 	bne	r6,zero,2009378 <strcmp+0x9c>
 2009320:	21000104 	addi	r4,r4,4
 2009324:	20800017 	ldw	r2,0(r4)
 2009328:	29400104 	addi	r5,r5,4
 200932c:	28c00017 	ldw	r3,0(r5)
 2009330:	124f883a 	add	r7,r2,r9
 2009334:	008c303a 	nor	r6,zero,r2
 2009338:	398c703a 	and	r6,r7,r6
 200933c:	320c703a 	and	r6,r6,r8
 2009340:	10fff626 	beq	r2,r3,200931c <strcmp+0x40>
 2009344:	20800007 	ldb	r2,0(r4)
 2009348:	1000051e 	bne	r2,zero,2009360 <strcmp+0x84>
 200934c:	00000606 	br	2009368 <strcmp+0x8c>
 2009350:	21000044 	addi	r4,r4,1
 2009354:	20800007 	ldb	r2,0(r4)
 2009358:	29400044 	addi	r5,r5,1
 200935c:	10000226 	beq	r2,zero,2009368 <strcmp+0x8c>
 2009360:	28c00007 	ldb	r3,0(r5)
 2009364:	10fffa26 	beq	r2,r3,2009350 <strcmp+0x74>
 2009368:	20c00003 	ldbu	r3,0(r4)
 200936c:	28800003 	ldbu	r2,0(r5)
 2009370:	1885c83a 	sub	r2,r3,r2
 2009374:	f800283a 	ret
 2009378:	0005883a 	mov	r2,zero
 200937c:	f800283a 	ret

02009380 <__swbuf_r>:
 2009380:	defffc04 	addi	sp,sp,-16
 2009384:	dc800215 	stw	r18,8(sp)
 2009388:	dc400115 	stw	r17,4(sp)
 200938c:	dc000015 	stw	r16,0(sp)
 2009390:	dfc00315 	stw	ra,12(sp)
 2009394:	2023883a 	mov	r17,r4
 2009398:	2825883a 	mov	r18,r5
 200939c:	3021883a 	mov	r16,r6
 20093a0:	20000226 	beq	r4,zero,20093ac <__swbuf_r+0x2c>
 20093a4:	20800e17 	ldw	r2,56(r4)
 20093a8:	10003b26 	beq	r2,zero,2009498 <__swbuf_r+0x118>
 20093ac:	8080030b 	ldhu	r2,12(r16)
 20093b0:	80c00617 	ldw	r3,24(r16)
 20093b4:	1080020c 	andi	r2,r2,8
 20093b8:	10bfffcc 	andi	r2,r2,65535
 20093bc:	10a0001c 	xori	r2,r2,32768
 20093c0:	80c00215 	stw	r3,8(r16)
 20093c4:	10a00004 	addi	r2,r2,-32768
 20093c8:	10002226 	beq	r2,zero,2009454 <__swbuf_r+0xd4>
 20093cc:	80800417 	ldw	r2,16(r16)
 20093d0:	10002026 	beq	r2,zero,2009454 <__swbuf_r+0xd4>
 20093d4:	80c00017 	ldw	r3,0(r16)
 20093d8:	81000517 	ldw	r4,20(r16)
 20093dc:	94803fcc 	andi	r18,r18,255
 20093e0:	1885c83a 	sub	r2,r3,r2
 20093e4:	1100250e 	bge	r2,r4,200947c <__swbuf_r+0xfc>
 20093e8:	10800044 	addi	r2,r2,1
 20093ec:	81400217 	ldw	r5,8(r16)
 20093f0:	19000044 	addi	r4,r3,1
 20093f4:	297fffc4 	addi	r5,r5,-1
 20093f8:	81400215 	stw	r5,8(r16)
 20093fc:	1c800005 	stb	r18,0(r3)
 2009400:	80c00517 	ldw	r3,20(r16)
 2009404:	81000015 	stw	r4,0(r16)
 2009408:	18800c26 	beq	r3,r2,200943c <__swbuf_r+0xbc>
 200940c:	8080030b 	ldhu	r2,12(r16)
 2009410:	1080004c 	andi	r2,r2,1
 2009414:	10000226 	beq	r2,zero,2009420 <__swbuf_r+0xa0>
 2009418:	00800284 	movi	r2,10
 200941c:	90800726 	beq	r18,r2,200943c <__swbuf_r+0xbc>
 2009420:	9005883a 	mov	r2,r18
 2009424:	dfc00317 	ldw	ra,12(sp)
 2009428:	dc800217 	ldw	r18,8(sp)
 200942c:	dc400117 	ldw	r17,4(sp)
 2009430:	dc000017 	ldw	r16,0(sp)
 2009434:	dec00404 	addi	sp,sp,16
 2009438:	f800283a 	ret
 200943c:	8809883a 	mov	r4,r17
 2009440:	800b883a 	mov	r5,r16
 2009444:	200651c0 	call	200651c <_fflush_r>
 2009448:	103ff526 	beq	r2,zero,2009420 <__swbuf_r+0xa0>
 200944c:	04bfffc4 	movi	r18,-1
 2009450:	003ff306 	br	2009420 <__swbuf_r+0xa0>
 2009454:	8809883a 	mov	r4,r17
 2009458:	800b883a 	mov	r5,r16
 200945c:	2004aec0 	call	2004aec <__swsetup_r>
 2009460:	10000f1e 	bne	r2,zero,20094a0 <__swbuf_r+0x120>
 2009464:	80800417 	ldw	r2,16(r16)
 2009468:	80c00017 	ldw	r3,0(r16)
 200946c:	81000517 	ldw	r4,20(r16)
 2009470:	94803fcc 	andi	r18,r18,255
 2009474:	1885c83a 	sub	r2,r3,r2
 2009478:	113fdb16 	blt	r2,r4,20093e8 <__swbuf_r+0x68>
 200947c:	8809883a 	mov	r4,r17
 2009480:	800b883a 	mov	r5,r16
 2009484:	200651c0 	call	200651c <_fflush_r>
 2009488:	103ff01e 	bne	r2,zero,200944c <__swbuf_r+0xcc>
 200948c:	80c00017 	ldw	r3,0(r16)
 2009490:	00800044 	movi	r2,1
 2009494:	003fd506 	br	20093ec <__swbuf_r+0x6c>
 2009498:	20067d80 	call	20067d8 <__sinit>
 200949c:	003fc306 	br	20093ac <__swbuf_r+0x2c>
 20094a0:	8080030b 	ldhu	r2,12(r16)
 20094a4:	04bfffc4 	movi	r18,-1
 20094a8:	10801014 	ori	r2,r2,64
 20094ac:	8080030d 	sth	r2,12(r16)
 20094b0:	00800244 	movi	r2,9
 20094b4:	88800015 	stw	r2,0(r17)
 20094b8:	003fd906 	br	2009420 <__swbuf_r+0xa0>

020094bc <__swbuf>:
 20094bc:	00c08074 	movhi	r3,513
 20094c0:	18c5b204 	addi	r3,r3,5832
 20094c4:	2005883a 	mov	r2,r4
 20094c8:	19000017 	ldw	r4,0(r3)
 20094cc:	280d883a 	mov	r6,r5
 20094d0:	100b883a 	mov	r5,r2
 20094d4:	20093801 	jmpi	2009380 <__swbuf_r>

020094d8 <_calloc_r>:
 20094d8:	defffe04 	addi	sp,sp,-8
 20094dc:	dc000015 	stw	r16,0(sp)
 20094e0:	2021883a 	mov	r16,r4
 20094e4:	3009883a 	mov	r4,r6
 20094e8:	dfc00115 	stw	ra,4(sp)
 20094ec:	20012bc0 	call	20012bc <__mulsi3>
 20094f0:	8009883a 	mov	r4,r16
 20094f4:	100b883a 	mov	r5,r2
 20094f8:	2001cc00 	call	2001cc0 <_malloc_r>
 20094fc:	1021883a 	mov	r16,r2
 2009500:	10000c26 	beq	r2,zero,2009534 <_calloc_r+0x5c>
 2009504:	11bfff17 	ldw	r6,-4(r2)
 2009508:	00ffff04 	movi	r3,-4
 200950c:	00800904 	movi	r2,36
 2009510:	30cc703a 	and	r6,r6,r3
 2009514:	30cd883a 	add	r6,r6,r3
 2009518:	11801436 	bltu	r2,r6,200956c <_calloc_r+0x94>
 200951c:	00c004c4 	movi	r3,19
 2009520:	19800936 	bltu	r3,r6,2009548 <_calloc_r+0x70>
 2009524:	8005883a 	mov	r2,r16
 2009528:	10000015 	stw	zero,0(r2)
 200952c:	10000115 	stw	zero,4(r2)
 2009530:	10000215 	stw	zero,8(r2)
 2009534:	8005883a 	mov	r2,r16
 2009538:	dfc00117 	ldw	ra,4(sp)
 200953c:	dc000017 	ldw	r16,0(sp)
 2009540:	dec00204 	addi	sp,sp,8
 2009544:	f800283a 	ret
 2009548:	80000015 	stw	zero,0(r16)
 200954c:	80000115 	stw	zero,4(r16)
 2009550:	00c006c4 	movi	r3,27
 2009554:	19800d2e 	bgeu	r3,r6,200958c <_calloc_r+0xb4>
 2009558:	80000215 	stw	zero,8(r16)
 200955c:	80000315 	stw	zero,12(r16)
 2009560:	30800c26 	beq	r6,r2,2009594 <_calloc_r+0xbc>
 2009564:	80800404 	addi	r2,r16,16
 2009568:	003fef06 	br	2009528 <_calloc_r+0x50>
 200956c:	8009883a 	mov	r4,r16
 2009570:	000b883a 	mov	r5,zero
 2009574:	20079380 	call	2007938 <memset>
 2009578:	8005883a 	mov	r2,r16
 200957c:	dfc00117 	ldw	ra,4(sp)
 2009580:	dc000017 	ldw	r16,0(sp)
 2009584:	dec00204 	addi	sp,sp,8
 2009588:	f800283a 	ret
 200958c:	80800204 	addi	r2,r16,8
 2009590:	003fe506 	br	2009528 <_calloc_r+0x50>
 2009594:	80000415 	stw	zero,16(r16)
 2009598:	80000515 	stw	zero,20(r16)
 200959c:	80800604 	addi	r2,r16,24
 20095a0:	003fe106 	br	2009528 <_calloc_r+0x50>

020095a4 <_fclose_r>:
 20095a4:	defffc04 	addi	sp,sp,-16
 20095a8:	dc400115 	stw	r17,4(sp)
 20095ac:	dc000015 	stw	r16,0(sp)
 20095b0:	dfc00315 	stw	ra,12(sp)
 20095b4:	dc800215 	stw	r18,8(sp)
 20095b8:	2821883a 	mov	r16,r5
 20095bc:	2023883a 	mov	r17,r4
 20095c0:	28003426 	beq	r5,zero,2009694 <_fclose_r+0xf0>
 20095c4:	20069e00 	call	20069e0 <__sfp_lock_acquire>
 20095c8:	88000226 	beq	r17,zero,20095d4 <_fclose_r+0x30>
 20095cc:	88800e17 	ldw	r2,56(r17)
 20095d0:	10003826 	beq	r2,zero,20096b4 <_fclose_r+0x110>
 20095d4:	8080030f 	ldh	r2,12(r16)
 20095d8:	10002526 	beq	r2,zero,2009670 <_fclose_r+0xcc>
 20095dc:	8809883a 	mov	r4,r17
 20095e0:	800b883a 	mov	r5,r16
 20095e4:	200651c0 	call	200651c <_fflush_r>
 20095e8:	1025883a 	mov	r18,r2
 20095ec:	80800b17 	ldw	r2,44(r16)
 20095f0:	10000426 	beq	r2,zero,2009604 <_fclose_r+0x60>
 20095f4:	81400717 	ldw	r5,28(r16)
 20095f8:	8809883a 	mov	r4,r17
 20095fc:	103ee83a 	callr	r2
 2009600:	10003516 	blt	r2,zero,20096d8 <_fclose_r+0x134>
 2009604:	8080030b 	ldhu	r2,12(r16)
 2009608:	1080200c 	andi	r2,r2,128
 200960c:	10bfffcc 	andi	r2,r2,65535
 2009610:	10a0001c 	xori	r2,r2,32768
 2009614:	10a00004 	addi	r2,r2,-32768
 2009618:	10002b1e 	bne	r2,zero,20096c8 <_fclose_r+0x124>
 200961c:	81400c17 	ldw	r5,48(r16)
 2009620:	28000526 	beq	r5,zero,2009638 <_fclose_r+0x94>
 2009624:	80801004 	addi	r2,r16,64
 2009628:	28800226 	beq	r5,r2,2009634 <_fclose_r+0x90>
 200962c:	8809883a 	mov	r4,r17
 2009630:	2006bf40 	call	2006bf4 <_free_r>
 2009634:	80000c15 	stw	zero,48(r16)
 2009638:	81401117 	ldw	r5,68(r16)
 200963c:	28000326 	beq	r5,zero,200964c <_fclose_r+0xa8>
 2009640:	8809883a 	mov	r4,r17
 2009644:	2006bf40 	call	2006bf4 <_free_r>
 2009648:	80001115 	stw	zero,68(r16)
 200964c:	8000030d 	sth	zero,12(r16)
 2009650:	20069e40 	call	20069e4 <__sfp_lock_release>
 2009654:	9005883a 	mov	r2,r18
 2009658:	dfc00317 	ldw	ra,12(sp)
 200965c:	dc800217 	ldw	r18,8(sp)
 2009660:	dc400117 	ldw	r17,4(sp)
 2009664:	dc000017 	ldw	r16,0(sp)
 2009668:	dec00404 	addi	sp,sp,16
 200966c:	f800283a 	ret
 2009670:	20069e40 	call	20069e4 <__sfp_lock_release>
 2009674:	0025883a 	mov	r18,zero
 2009678:	9005883a 	mov	r2,r18
 200967c:	dfc00317 	ldw	ra,12(sp)
 2009680:	dc800217 	ldw	r18,8(sp)
 2009684:	dc400117 	ldw	r17,4(sp)
 2009688:	dc000017 	ldw	r16,0(sp)
 200968c:	dec00404 	addi	sp,sp,16
 2009690:	f800283a 	ret
 2009694:	0025883a 	mov	r18,zero
 2009698:	9005883a 	mov	r2,r18
 200969c:	dfc00317 	ldw	ra,12(sp)
 20096a0:	dc800217 	ldw	r18,8(sp)
 20096a4:	dc400117 	ldw	r17,4(sp)
 20096a8:	dc000017 	ldw	r16,0(sp)
 20096ac:	dec00404 	addi	sp,sp,16
 20096b0:	f800283a 	ret
 20096b4:	8809883a 	mov	r4,r17
 20096b8:	20067d80 	call	20067d8 <__sinit>
 20096bc:	8080030f 	ldh	r2,12(r16)
 20096c0:	103fc61e 	bne	r2,zero,20095dc <_fclose_r+0x38>
 20096c4:	003fea06 	br	2009670 <_fclose_r+0xcc>
 20096c8:	81400417 	ldw	r5,16(r16)
 20096cc:	8809883a 	mov	r4,r17
 20096d0:	2006bf40 	call	2006bf4 <_free_r>
 20096d4:	003fd106 	br	200961c <_fclose_r+0x78>
 20096d8:	04bfffc4 	movi	r18,-1
 20096dc:	003fc906 	br	2009604 <_fclose_r+0x60>

020096e0 <fclose>:
 20096e0:	00808074 	movhi	r2,513
 20096e4:	1085b204 	addi	r2,r2,5832
 20096e8:	200b883a 	mov	r5,r4
 20096ec:	11000017 	ldw	r4,0(r2)
 20096f0:	20095a41 	jmpi	20095a4 <_fclose_r>

020096f4 <__umoddi3>:
 20096f4:	defff304 	addi	sp,sp,-52
 20096f8:	dd000715 	stw	r20,28(sp)
 20096fc:	dcc00615 	stw	r19,24(sp)
 2009700:	dc800515 	stw	r18,20(sp)
 2009704:	dc400415 	stw	r17,16(sp)
 2009708:	dc000315 	stw	r16,12(sp)
 200970c:	dfc00c15 	stw	ra,48(sp)
 2009710:	df000b15 	stw	fp,44(sp)
 2009714:	ddc00a15 	stw	r23,40(sp)
 2009718:	dd800915 	stw	r22,36(sp)
 200971c:	dd400815 	stw	r21,32(sp)
 2009720:	2025883a 	mov	r18,r4
 2009724:	2823883a 	mov	r17,r5
 2009728:	3021883a 	mov	r16,r6
 200972c:	2027883a 	mov	r19,r4
 2009730:	2829883a 	mov	r20,r5
 2009734:	38003a1e 	bne	r7,zero,2009820 <__umoddi3+0x12c>
 2009738:	2980522e 	bgeu	r5,r6,2009884 <__umoddi3+0x190>
 200973c:	00bfffd4 	movui	r2,65535
 2009740:	1180a436 	bltu	r2,r6,20099d4 <__umoddi3+0x2e0>
 2009744:	00803fc4 	movi	r2,255
 2009748:	11816036 	bltu	r2,r6,2009ccc <__umoddi3+0x5d8>
 200974c:	0005883a 	mov	r2,zero
 2009750:	0009883a 	mov	r4,zero
 2009754:	3084d83a 	srl	r2,r6,r2
 2009758:	00c08074 	movhi	r3,513
 200975c:	18fdf204 	addi	r3,r3,-2104
 2009760:	05400804 	movi	r21,32
 2009764:	1885883a 	add	r2,r3,r2
 2009768:	10800003 	ldbu	r2,0(r2)
 200976c:	1109883a 	add	r4,r2,r4
 2009770:	a92bc83a 	sub	r21,r21,r4
 2009774:	a8010e26 	beq	r21,zero,2009bb0 <__umoddi3+0x4bc>
 2009778:	8d62983a 	sll	r17,r17,r21
 200977c:	9108d83a 	srl	r4,r18,r4
 2009780:	3560983a 	sll	r16,r6,r21
 2009784:	9566983a 	sll	r19,r18,r21
 2009788:	8928b03a 	or	r20,r17,r4
 200978c:	8022d43a 	srli	r17,r16,16
 2009790:	a009883a 	mov	r4,r20
 2009794:	84bfffcc 	andi	r18,r16,65535
 2009798:	880b883a 	mov	r5,r17
 200979c:	20012b40 	call	20012b4 <__umodsi3>
 20097a0:	a009883a 	mov	r4,r20
 20097a4:	880b883a 	mov	r5,r17
 20097a8:	102d883a 	mov	r22,r2
 20097ac:	20012ac0 	call	20012ac <__udivsi3>
 20097b0:	1009883a 	mov	r4,r2
 20097b4:	900b883a 	mov	r5,r18
 20097b8:	20012bc0 	call	20012bc <__mulsi3>
 20097bc:	1009883a 	mov	r4,r2
 20097c0:	b006943a 	slli	r3,r22,16
 20097c4:	9804d43a 	srli	r2,r19,16
 20097c8:	1886b03a 	or	r3,r3,r2
 20097cc:	1900042e 	bgeu	r3,r4,20097e0 <__umoddi3+0xec>
 20097d0:	1c07883a 	add	r3,r3,r16
 20097d4:	1c000236 	bltu	r3,r16,20097e0 <__umoddi3+0xec>
 20097d8:	1900012e 	bgeu	r3,r4,20097e0 <__umoddi3+0xec>
 20097dc:	1c07883a 	add	r3,r3,r16
 20097e0:	1929c83a 	sub	r20,r3,r4
 20097e4:	a009883a 	mov	r4,r20
 20097e8:	880b883a 	mov	r5,r17
 20097ec:	20012b40 	call	20012b4 <__umodsi3>
 20097f0:	102d883a 	mov	r22,r2
 20097f4:	a009883a 	mov	r4,r20
 20097f8:	880b883a 	mov	r5,r17
 20097fc:	b02c943a 	slli	r22,r22,16
 2009800:	20012ac0 	call	20012ac <__udivsi3>
 2009804:	1009883a 	mov	r4,r2
 2009808:	900b883a 	mov	r5,r18
 200980c:	9cffffcc 	andi	r19,r19,65535
 2009810:	20012bc0 	call	20012bc <__mulsi3>
 2009814:	b4e6b03a 	or	r19,r22,r19
 2009818:	9880572e 	bgeu	r19,r2,2009978 <__umoddi3+0x284>
 200981c:	00005206 	br	2009968 <__umoddi3+0x274>
 2009820:	29c05936 	bltu	r5,r7,2009988 <__umoddi3+0x294>
 2009824:	00bfffd4 	movui	r2,65535
 2009828:	11c0652e 	bgeu	r2,r7,20099c0 <__umoddi3+0x2cc>
 200982c:	00804034 	movhi	r2,256
 2009830:	10bfffc4 	addi	r2,r2,-1
 2009834:	11c11936 	bltu	r2,r7,2009c9c <__umoddi3+0x5a8>
 2009838:	00c00404 	movi	r3,16
 200983c:	1827883a 	mov	r19,r3
 2009840:	38c6d83a 	srl	r3,r7,r3
 2009844:	01008074 	movhi	r4,513
 2009848:	213df204 	addi	r4,r4,-2104
 200984c:	04000804 	movi	r16,32
 2009850:	20c7883a 	add	r3,r4,r3
 2009854:	18800003 	ldbu	r2,0(r3)
 2009858:	14e7883a 	add	r19,r2,r19
 200985c:	84e1c83a 	sub	r16,r16,r19
 2009860:	8000671e 	bne	r16,zero,2009a00 <__umoddi3+0x30c>
 2009864:	3c400136 	bltu	r7,r17,200986c <__umoddi3+0x178>
 2009868:	91812536 	bltu	r18,r6,2009d00 <__umoddi3+0x60c>
 200986c:	9185c83a 	sub	r2,r18,r6
 2009870:	89e3c83a 	sub	r17,r17,r7
 2009874:	90a5803a 	cmpltu	r18,r18,r2
 2009878:	8ca9c83a 	sub	r20,r17,r18
 200987c:	a007883a 	mov	r3,r20
 2009880:	00004306 	br	2009990 <__umoddi3+0x29c>
 2009884:	3000041e 	bne	r6,zero,2009898 <__umoddi3+0x1a4>
 2009888:	01000044 	movi	r4,1
 200988c:	000b883a 	mov	r5,zero
 2009890:	20012ac0 	call	20012ac <__udivsi3>
 2009894:	1021883a 	mov	r16,r2
 2009898:	00bfffd4 	movui	r2,65535
 200989c:	1400532e 	bgeu	r2,r16,20099ec <__umoddi3+0x2f8>
 20098a0:	00804034 	movhi	r2,256
 20098a4:	10bfffc4 	addi	r2,r2,-1
 20098a8:	14010536 	bltu	r2,r16,2009cc0 <__umoddi3+0x5cc>
 20098ac:	00800404 	movi	r2,16
 20098b0:	1007883a 	mov	r3,r2
 20098b4:	8084d83a 	srl	r2,r16,r2
 20098b8:	01008074 	movhi	r4,513
 20098bc:	213df204 	addi	r4,r4,-2104
 20098c0:	05400804 	movi	r21,32
 20098c4:	2085883a 	add	r2,r4,r2
 20098c8:	10800003 	ldbu	r2,0(r2)
 20098cc:	10c7883a 	add	r3,r2,r3
 20098d0:	a8ebc83a 	sub	r21,r21,r3
 20098d4:	a800b81e 	bne	r21,zero,2009bb8 <__umoddi3+0x4c4>
 20098d8:	8028d43a 	srli	r20,r16,16
 20098dc:	8c23c83a 	sub	r17,r17,r16
 20098e0:	85bfffcc 	andi	r22,r16,65535
 20098e4:	8809883a 	mov	r4,r17
 20098e8:	a00b883a 	mov	r5,r20
 20098ec:	20012b40 	call	20012b4 <__umodsi3>
 20098f0:	8809883a 	mov	r4,r17
 20098f4:	a00b883a 	mov	r5,r20
 20098f8:	1025883a 	mov	r18,r2
 20098fc:	20012ac0 	call	20012ac <__udivsi3>
 2009900:	1009883a 	mov	r4,r2
 2009904:	b00b883a 	mov	r5,r22
 2009908:	20012bc0 	call	20012bc <__mulsi3>
 200990c:	1009883a 	mov	r4,r2
 2009910:	9006943a 	slli	r3,r18,16
 2009914:	9804d43a 	srli	r2,r19,16
 2009918:	1886b03a 	or	r3,r3,r2
 200991c:	1900032e 	bgeu	r3,r4,200992c <__umoddi3+0x238>
 2009920:	1c07883a 	add	r3,r3,r16
 2009924:	1c000136 	bltu	r3,r16,200992c <__umoddi3+0x238>
 2009928:	1900f336 	bltu	r3,r4,2009cf8 <__umoddi3+0x604>
 200992c:	1923c83a 	sub	r17,r3,r4
 2009930:	8809883a 	mov	r4,r17
 2009934:	a00b883a 	mov	r5,r20
 2009938:	20012b40 	call	20012b4 <__umodsi3>
 200993c:	102f883a 	mov	r23,r2
 2009940:	8809883a 	mov	r4,r17
 2009944:	a00b883a 	mov	r5,r20
 2009948:	b82e943a 	slli	r23,r23,16
 200994c:	20012ac0 	call	20012ac <__udivsi3>
 2009950:	1009883a 	mov	r4,r2
 2009954:	b00b883a 	mov	r5,r22
 2009958:	9cffffcc 	andi	r19,r19,65535
 200995c:	20012bc0 	call	20012bc <__mulsi3>
 2009960:	bce6b03a 	or	r19,r23,r19
 2009964:	9880042e 	bgeu	r19,r2,2009978 <__umoddi3+0x284>
 2009968:	9c27883a 	add	r19,r19,r16
 200996c:	9c000236 	bltu	r19,r16,2009978 <__umoddi3+0x284>
 2009970:	9880012e 	bgeu	r19,r2,2009978 <__umoddi3+0x284>
 2009974:	9c27883a 	add	r19,r19,r16
 2009978:	9885c83a 	sub	r2,r19,r2
 200997c:	1544d83a 	srl	r2,r2,r21
 2009980:	0007883a 	mov	r3,zero
 2009984:	00000206 	br	2009990 <__umoddi3+0x29c>
 2009988:	2005883a 	mov	r2,r4
 200998c:	2807883a 	mov	r3,r5
 2009990:	dfc00c17 	ldw	ra,48(sp)
 2009994:	df000b17 	ldw	fp,44(sp)
 2009998:	ddc00a17 	ldw	r23,40(sp)
 200999c:	dd800917 	ldw	r22,36(sp)
 20099a0:	dd400817 	ldw	r21,32(sp)
 20099a4:	dd000717 	ldw	r20,28(sp)
 20099a8:	dcc00617 	ldw	r19,24(sp)
 20099ac:	dc800517 	ldw	r18,20(sp)
 20099b0:	dc400417 	ldw	r17,16(sp)
 20099b4:	dc000317 	ldw	r16,12(sp)
 20099b8:	dec00d04 	addi	sp,sp,52
 20099bc:	f800283a 	ret
 20099c0:	00803fc4 	movi	r2,255
 20099c4:	11c0b236 	bltu	r2,r7,2009c90 <__umoddi3+0x59c>
 20099c8:	0007883a 	mov	r3,zero
 20099cc:	0027883a 	mov	r19,zero
 20099d0:	003f9b06 	br	2009840 <__umoddi3+0x14c>
 20099d4:	00804034 	movhi	r2,256
 20099d8:	10bfffc4 	addi	r2,r2,-1
 20099dc:	1180b236 	bltu	r2,r6,2009ca8 <__umoddi3+0x5b4>
 20099e0:	00800404 	movi	r2,16
 20099e4:	1009883a 	mov	r4,r2
 20099e8:	003f5a06 	br	2009754 <__umoddi3+0x60>
 20099ec:	00803fc4 	movi	r2,255
 20099f0:	1400b036 	bltu	r2,r16,2009cb4 <__umoddi3+0x5c0>
 20099f4:	0005883a 	mov	r2,zero
 20099f8:	0007883a 	mov	r3,zero
 20099fc:	003fad06 	br	20098b4 <__umoddi3+0x1c0>
 2009a00:	34c4d83a 	srl	r2,r6,r19
 2009a04:	3c0e983a 	sll	r7,r7,r16
 2009a08:	8cf8d83a 	srl	fp,r17,r19
 2009a0c:	8c22983a 	sll	r17,r17,r16
 2009a10:	38a8b03a 	or	r20,r7,r2
 2009a14:	a02ad43a 	srli	r21,r20,16
 2009a18:	94c4d83a 	srl	r2,r18,r19
 2009a1c:	e009883a 	mov	r4,fp
 2009a20:	a80b883a 	mov	r5,r21
 2009a24:	342c983a 	sll	r22,r6,r16
 2009a28:	88a2b03a 	or	r17,r17,r2
 2009a2c:	20012b40 	call	20012b4 <__umodsi3>
 2009a30:	e009883a 	mov	r4,fp
 2009a34:	a80b883a 	mov	r5,r21
 2009a38:	a5ffffcc 	andi	r23,r20,65535
 2009a3c:	d8800215 	stw	r2,8(sp)
 2009a40:	20012ac0 	call	20012ac <__udivsi3>
 2009a44:	1009883a 	mov	r4,r2
 2009a48:	b80b883a 	mov	r5,r23
 2009a4c:	1039883a 	mov	fp,r2
 2009a50:	20012bc0 	call	20012bc <__mulsi3>
 2009a54:	d8c00217 	ldw	r3,8(sp)
 2009a58:	1009883a 	mov	r4,r2
 2009a5c:	8804d43a 	srli	r2,r17,16
 2009a60:	1806943a 	slli	r3,r3,16
 2009a64:	9424983a 	sll	r18,r18,r16
 2009a68:	1886b03a 	or	r3,r3,r2
 2009a6c:	1900042e 	bgeu	r3,r4,2009a80 <__umoddi3+0x38c>
 2009a70:	1d07883a 	add	r3,r3,r20
 2009a74:	e0bfffc4 	addi	r2,fp,-1
 2009a78:	1d009b2e 	bgeu	r3,r20,2009ce8 <__umoddi3+0x5f4>
 2009a7c:	1039883a 	mov	fp,r2
 2009a80:	1907c83a 	sub	r3,r3,r4
 2009a84:	1809883a 	mov	r4,r3
 2009a88:	a80b883a 	mov	r5,r21
 2009a8c:	d8c00215 	stw	r3,8(sp)
 2009a90:	20012b40 	call	20012b4 <__umodsi3>
 2009a94:	d8c00217 	ldw	r3,8(sp)
 2009a98:	a80b883a 	mov	r5,r21
 2009a9c:	d8800015 	stw	r2,0(sp)
 2009aa0:	1809883a 	mov	r4,r3
 2009aa4:	20012ac0 	call	20012ac <__udivsi3>
 2009aa8:	1009883a 	mov	r4,r2
 2009aac:	b80b883a 	mov	r5,r23
 2009ab0:	102b883a 	mov	r21,r2
 2009ab4:	20012bc0 	call	20012bc <__mulsi3>
 2009ab8:	d9c00017 	ldw	r7,0(sp)
 2009abc:	8c7fffcc 	andi	r17,r17,65535
 2009ac0:	380e943a 	slli	r7,r7,16
 2009ac4:	3c4eb03a 	or	r7,r7,r17
 2009ac8:	3880042e 	bgeu	r7,r2,2009adc <__umoddi3+0x3e8>
 2009acc:	3d0f883a 	add	r7,r7,r20
 2009ad0:	a8ffffc4 	addi	r3,r21,-1
 2009ad4:	3d00802e 	bgeu	r7,r20,2009cd8 <__umoddi3+0x5e4>
 2009ad8:	182b883a 	mov	r21,r3
 2009adc:	e038943a 	slli	fp,fp,16
 2009ae0:	b010d43a 	srli	r8,r22,16
 2009ae4:	b1bfffcc 	andi	r6,r22,65535
 2009ae8:	af2ab03a 	or	r21,r21,fp
 2009aec:	a82ed43a 	srli	r23,r21,16
 2009af0:	ad7fffcc 	andi	r21,r21,65535
 2009af4:	300b883a 	mov	r5,r6
 2009af8:	a809883a 	mov	r4,r21
 2009afc:	38a3c83a 	sub	r17,r7,r2
 2009b00:	d9800115 	stw	r6,4(sp)
 2009b04:	da000015 	stw	r8,0(sp)
 2009b08:	20012bc0 	call	20012bc <__mulsi3>
 2009b0c:	da000017 	ldw	r8,0(sp)
 2009b10:	a809883a 	mov	r4,r21
 2009b14:	1039883a 	mov	fp,r2
 2009b18:	400b883a 	mov	r5,r8
 2009b1c:	da000215 	stw	r8,8(sp)
 2009b20:	20012bc0 	call	20012bc <__mulsi3>
 2009b24:	d9800117 	ldw	r6,4(sp)
 2009b28:	b809883a 	mov	r4,r23
 2009b2c:	d8800015 	stw	r2,0(sp)
 2009b30:	300b883a 	mov	r5,r6
 2009b34:	20012bc0 	call	20012bc <__mulsi3>
 2009b38:	d8c00217 	ldw	r3,8(sp)
 2009b3c:	b809883a 	mov	r4,r23
 2009b40:	102b883a 	mov	r21,r2
 2009b44:	180b883a 	mov	r5,r3
 2009b48:	20012bc0 	call	20012bc <__mulsi3>
 2009b4c:	d9c00017 	ldw	r7,0(sp)
 2009b50:	1007883a 	mov	r3,r2
 2009b54:	e004d43a 	srli	r2,fp,16
 2009b58:	a9c9883a 	add	r4,r21,r7
 2009b5c:	2089883a 	add	r4,r4,r2
 2009b60:	2540022e 	bgeu	r4,r21,2009b6c <__umoddi3+0x478>
 2009b64:	00800074 	movhi	r2,1
 2009b68:	1887883a 	add	r3,r3,r2
 2009b6c:	2004d43a 	srli	r2,r4,16
 2009b70:	2008943a 	slli	r4,r4,16
 2009b74:	e73fffcc 	andi	fp,fp,65535
 2009b78:	1887883a 	add	r3,r3,r2
 2009b7c:	2709883a 	add	r4,r4,fp
 2009b80:	88c03d36 	bltu	r17,r3,2009c78 <__umoddi3+0x584>
 2009b84:	88c06126 	beq	r17,r3,2009d0c <__umoddi3+0x618>
 2009b88:	88c7c83a 	sub	r3,r17,r3
 2009b8c:	202d883a 	mov	r22,r4
 2009b90:	95adc83a 	sub	r22,r18,r22
 2009b94:	95a5803a 	cmpltu	r18,r18,r22
 2009b98:	1c87c83a 	sub	r3,r3,r18
 2009b9c:	1cc4983a 	sll	r2,r3,r19
 2009ba0:	b42cd83a 	srl	r22,r22,r16
 2009ba4:	1c06d83a 	srl	r3,r3,r16
 2009ba8:	1584b03a 	or	r2,r2,r22
 2009bac:	003f7806 	br	2009990 <__umoddi3+0x29c>
 2009bb0:	002b883a 	mov	r21,zero
 2009bb4:	003ef506 	br	200978c <__umoddi3+0x98>
 2009bb8:	8560983a 	sll	r16,r16,r21
 2009bbc:	88e6d83a 	srl	r19,r17,r3
 2009bc0:	90c6d83a 	srl	r3,r18,r3
 2009bc4:	8028d43a 	srli	r20,r16,16
 2009bc8:	8d62983a 	sll	r17,r17,r21
 2009bcc:	9809883a 	mov	r4,r19
 2009bd0:	a00b883a 	mov	r5,r20
 2009bd4:	88eeb03a 	or	r23,r17,r3
 2009bd8:	20012b40 	call	20012b4 <__umodsi3>
 2009bdc:	9809883a 	mov	r4,r19
 2009be0:	a00b883a 	mov	r5,r20
 2009be4:	1023883a 	mov	r17,r2
 2009be8:	85bfffcc 	andi	r22,r16,65535
 2009bec:	20012ac0 	call	20012ac <__udivsi3>
 2009bf0:	1009883a 	mov	r4,r2
 2009bf4:	b00b883a 	mov	r5,r22
 2009bf8:	20012bc0 	call	20012bc <__mulsi3>
 2009bfc:	1007883a 	mov	r3,r2
 2009c00:	8808943a 	slli	r4,r17,16
 2009c04:	b804d43a 	srli	r2,r23,16
 2009c08:	9566983a 	sll	r19,r18,r21
 2009c0c:	2088b03a 	or	r4,r4,r2
 2009c10:	20c0042e 	bgeu	r4,r3,2009c24 <__umoddi3+0x530>
 2009c14:	2409883a 	add	r4,r4,r16
 2009c18:	24000236 	bltu	r4,r16,2009c24 <__umoddi3+0x530>
 2009c1c:	20c0012e 	bgeu	r4,r3,2009c24 <__umoddi3+0x530>
 2009c20:	2409883a 	add	r4,r4,r16
 2009c24:	20e5c83a 	sub	r18,r4,r3
 2009c28:	9009883a 	mov	r4,r18
 2009c2c:	a00b883a 	mov	r5,r20
 2009c30:	20012b40 	call	20012b4 <__umodsi3>
 2009c34:	1023883a 	mov	r17,r2
 2009c38:	9009883a 	mov	r4,r18
 2009c3c:	a00b883a 	mov	r5,r20
 2009c40:	8822943a 	slli	r17,r17,16
 2009c44:	20012ac0 	call	20012ac <__udivsi3>
 2009c48:	1009883a 	mov	r4,r2
 2009c4c:	b00b883a 	mov	r5,r22
 2009c50:	bdffffcc 	andi	r23,r23,65535
 2009c54:	20012bc0 	call	20012bc <__mulsi3>
 2009c58:	8de2b03a 	or	r17,r17,r23
 2009c5c:	8880042e 	bgeu	r17,r2,2009c70 <__umoddi3+0x57c>
 2009c60:	8c23883a 	add	r17,r17,r16
 2009c64:	8c000236 	bltu	r17,r16,2009c70 <__umoddi3+0x57c>
 2009c68:	8880012e 	bgeu	r17,r2,2009c70 <__umoddi3+0x57c>
 2009c6c:	8c23883a 	add	r17,r17,r16
 2009c70:	88a3c83a 	sub	r17,r17,r2
 2009c74:	003f1b06 	br	20098e4 <__umoddi3+0x1f0>
 2009c78:	25adc83a 	sub	r22,r4,r22
 2009c7c:	1d07c83a 	sub	r3,r3,r20
 2009c80:	2589803a 	cmpltu	r4,r4,r22
 2009c84:	1907c83a 	sub	r3,r3,r4
 2009c88:	88c7c83a 	sub	r3,r17,r3
 2009c8c:	003fc006 	br	2009b90 <__umoddi3+0x49c>
 2009c90:	00c00204 	movi	r3,8
 2009c94:	1827883a 	mov	r19,r3
 2009c98:	003ee906 	br	2009840 <__umoddi3+0x14c>
 2009c9c:	00c00604 	movi	r3,24
 2009ca0:	1827883a 	mov	r19,r3
 2009ca4:	003ee606 	br	2009840 <__umoddi3+0x14c>
 2009ca8:	00800604 	movi	r2,24
 2009cac:	1009883a 	mov	r4,r2
 2009cb0:	003ea806 	br	2009754 <__umoddi3+0x60>
 2009cb4:	00800204 	movi	r2,8
 2009cb8:	1007883a 	mov	r3,r2
 2009cbc:	003efd06 	br	20098b4 <__umoddi3+0x1c0>
 2009cc0:	00800604 	movi	r2,24
 2009cc4:	1007883a 	mov	r3,r2
 2009cc8:	003efa06 	br	20098b4 <__umoddi3+0x1c0>
 2009ccc:	00800204 	movi	r2,8
 2009cd0:	1009883a 	mov	r4,r2
 2009cd4:	003e9f06 	br	2009754 <__umoddi3+0x60>
 2009cd8:	38bf7f2e 	bgeu	r7,r2,2009ad8 <__umoddi3+0x3e4>
 2009cdc:	ad7fff84 	addi	r21,r21,-2
 2009ce0:	3d0f883a 	add	r7,r7,r20
 2009ce4:	003f7d06 	br	2009adc <__umoddi3+0x3e8>
 2009ce8:	193f642e 	bgeu	r3,r4,2009a7c <__umoddi3+0x388>
 2009cec:	e73fff84 	addi	fp,fp,-2
 2009cf0:	1d07883a 	add	r3,r3,r20
 2009cf4:	003f6206 	br	2009a80 <__umoddi3+0x38c>
 2009cf8:	1c07883a 	add	r3,r3,r16
 2009cfc:	003f0b06 	br	200992c <__umoddi3+0x238>
 2009d00:	9005883a 	mov	r2,r18
 2009d04:	a007883a 	mov	r3,r20
 2009d08:	003f2106 	br	2009990 <__umoddi3+0x29c>
 2009d0c:	913fda36 	bltu	r18,r4,2009c78 <__umoddi3+0x584>
 2009d10:	202d883a 	mov	r22,r4
 2009d14:	0007883a 	mov	r3,zero
 2009d18:	003f9d06 	br	2009b90 <__umoddi3+0x49c>

02009d1c <_fpadd_parts>:
 2009d1c:	2005883a 	mov	r2,r4
 2009d20:	21000017 	ldw	r4,0(r4)
 2009d24:	01c00044 	movi	r7,1
 2009d28:	3900622e 	bgeu	r7,r4,2009eb4 <_fpadd_parts+0x198>
 2009d2c:	28c00017 	ldw	r3,0(r5)
 2009d30:	38c05f2e 	bgeu	r7,r3,2009eb0 <_fpadd_parts+0x194>
 2009d34:	01c00104 	movi	r7,4
 2009d38:	21c0c626 	beq	r4,r7,200a054 <_fpadd_parts+0x338>
 2009d3c:	19c05c26 	beq	r3,r7,2009eb0 <_fpadd_parts+0x194>
 2009d40:	01c00084 	movi	r7,2
 2009d44:	19c06b26 	beq	r3,r7,2009ef4 <_fpadd_parts+0x1d8>
 2009d48:	21c05926 	beq	r4,r7,2009eb0 <_fpadd_parts+0x194>
 2009d4c:	11c00217 	ldw	r7,8(r2)
 2009d50:	2ac00217 	ldw	r11,8(r5)
 2009d54:	13000317 	ldw	r12,12(r2)
 2009d58:	13400417 	ldw	r13,16(r2)
 2009d5c:	3ac9c83a 	sub	r4,r7,r11
 2009d60:	2a000317 	ldw	r8,12(r5)
 2009d64:	2a400417 	ldw	r9,16(r5)
 2009d68:	2015883a 	mov	r10,r4
 2009d6c:	20007516 	blt	r4,zero,2009f44 <_fpadd_parts+0x228>
 2009d70:	00c00fc4 	movi	r3,63
 2009d74:	1a805016 	blt	r3,r10,2009eb8 <_fpadd_parts+0x19c>
 2009d78:	0100870e 	bge	zero,r4,2009f98 <_fpadd_parts+0x27c>
 2009d7c:	50fff804 	addi	r3,r10,-32
 2009d80:	18009916 	blt	r3,zero,2009fe8 <_fpadd_parts+0x2cc>
 2009d84:	48d6d83a 	srl	r11,r9,r3
 2009d88:	001d883a 	mov	r14,zero
 2009d8c:	18009e16 	blt	r3,zero,200a008 <_fpadd_parts+0x2ec>
 2009d90:	01000044 	movi	r4,1
 2009d94:	20c6983a 	sll	r3,r4,r3
 2009d98:	0015883a 	mov	r10,zero
 2009d9c:	513fffc4 	addi	r4,r10,-1
 2009da0:	2295403a 	cmpgeu	r10,r4,r10
 2009da4:	1a87c83a 	sub	r3,r3,r10
 2009da8:	1a52703a 	and	r9,r3,r9
 2009dac:	2210703a 	and	r8,r4,r8
 2009db0:	4250b03a 	or	r8,r8,r9
 2009db4:	4010c03a 	cmpne	r8,r8,zero
 2009db8:	42d0b03a 	or	r8,r8,r11
 2009dbc:	7013883a 	mov	r9,r14
 2009dc0:	11000117 	ldw	r4,4(r2)
 2009dc4:	28800117 	ldw	r2,4(r5)
 2009dc8:	20804126 	beq	r4,r2,2009ed0 <_fpadd_parts+0x1b4>
 2009dcc:	20006326 	beq	r4,zero,2009f5c <_fpadd_parts+0x240>
 2009dd0:	4305c83a 	sub	r2,r8,r12
 2009dd4:	4091803a 	cmpltu	r8,r8,r2
 2009dd8:	4b47c83a 	sub	r3,r9,r13
 2009ddc:	1a07c83a 	sub	r3,r3,r8
 2009de0:	18006316 	blt	r3,zero,2009f70 <_fpadd_parts+0x254>
 2009de4:	30000115 	stw	zero,4(r6)
 2009de8:	31c00215 	stw	r7,8(r6)
 2009dec:	30800315 	stw	r2,12(r6)
 2009df0:	30c00415 	stw	r3,16(r6)
 2009df4:	11ffffc4 	addi	r7,r2,-1
 2009df8:	388b403a 	cmpgeu	r5,r7,r2
 2009dfc:	194bc83a 	sub	r5,r3,r5
 2009e00:	01040034 	movhi	r4,4096
 2009e04:	213fffc4 	addi	r4,r4,-1
 2009e08:	21401736 	bltu	r4,r5,2009e68 <_fpadd_parts+0x14c>
 2009e0c:	29008226 	beq	r5,r4,200a018 <_fpadd_parts+0x2fc>
 2009e10:	31400217 	ldw	r5,8(r6)
 2009e14:	02840034 	movhi	r10,4096
 2009e18:	52bfffc4 	addi	r10,r10,-1
 2009e1c:	033fff84 	movi	r12,-2
 2009e20:	297fffc4 	addi	r5,r5,-1
 2009e24:	00000106 	br	2009e2c <_fpadd_parts+0x110>
 2009e28:	3a804a26 	beq	r7,r10,2009f54 <_fpadd_parts+0x238>
 2009e2c:	1089883a 	add	r4,r2,r2
 2009e30:	2091803a 	cmpltu	r8,r4,r2
 2009e34:	18c7883a 	add	r3,r3,r3
 2009e38:	227fffc4 	addi	r9,r4,-1
 2009e3c:	40d1883a 	add	r8,r8,r3
 2009e40:	490f403a 	cmpgeu	r7,r9,r4
 2009e44:	41cfc83a 	sub	r7,r8,r7
 2009e48:	2817883a 	mov	r11,r5
 2009e4c:	2005883a 	mov	r2,r4
 2009e50:	4007883a 	mov	r3,r8
 2009e54:	297fffc4 	addi	r5,r5,-1
 2009e58:	51fff32e 	bgeu	r10,r7,2009e28 <_fpadd_parts+0x10c>
 2009e5c:	31000315 	stw	r4,12(r6)
 2009e60:	32000415 	stw	r8,16(r6)
 2009e64:	32c00215 	stw	r11,8(r6)
 2009e68:	010000c4 	movi	r4,3
 2009e6c:	31000015 	stw	r4,0(r6)
 2009e70:	01080034 	movhi	r4,8192
 2009e74:	213fffc4 	addi	r4,r4,-1
 2009e78:	20c00b2e 	bgeu	r4,r3,2009ea8 <_fpadd_parts+0x18c>
 2009e7c:	180e97fa 	slli	r7,r3,31
 2009e80:	1008d07a 	srli	r4,r2,1
 2009e84:	31400217 	ldw	r5,8(r6)
 2009e88:	1806d07a 	srli	r3,r3,1
 2009e8c:	1080004c 	andi	r2,r2,1
 2009e90:	3908b03a 	or	r4,r7,r4
 2009e94:	1108b03a 	or	r4,r2,r4
 2009e98:	29400044 	addi	r5,r5,1
 2009e9c:	31000315 	stw	r4,12(r6)
 2009ea0:	30c00415 	stw	r3,16(r6)
 2009ea4:	31400215 	stw	r5,8(r6)
 2009ea8:	3005883a 	mov	r2,r6
 2009eac:	f800283a 	ret
 2009eb0:	2805883a 	mov	r2,r5
 2009eb4:	f800283a 	ret
 2009eb8:	59c01e0e 	bge	r11,r7,2009f34 <_fpadd_parts+0x218>
 2009ebc:	11000117 	ldw	r4,4(r2)
 2009ec0:	28800117 	ldw	r2,4(r5)
 2009ec4:	0011883a 	mov	r8,zero
 2009ec8:	0013883a 	mov	r9,zero
 2009ecc:	20bfbf1e 	bne	r4,r2,2009dcc <_fpadd_parts+0xb0>
 2009ed0:	4305883a 	add	r2,r8,r12
 2009ed4:	1207803a 	cmpltu	r3,r2,r8
 2009ed8:	4b53883a 	add	r9,r9,r13
 2009edc:	1a47883a 	add	r3,r3,r9
 2009ee0:	31000115 	stw	r4,4(r6)
 2009ee4:	31c00215 	stw	r7,8(r6)
 2009ee8:	30800315 	stw	r2,12(r6)
 2009eec:	30c00415 	stw	r3,16(r6)
 2009ef0:	003fdd06 	br	2009e68 <_fpadd_parts+0x14c>
 2009ef4:	20ffef1e 	bne	r4,r3,2009eb4 <_fpadd_parts+0x198>
 2009ef8:	31000015 	stw	r4,0(r6)
 2009efc:	10c00117 	ldw	r3,4(r2)
 2009f00:	30c00115 	stw	r3,4(r6)
 2009f04:	10c00217 	ldw	r3,8(r2)
 2009f08:	11000117 	ldw	r4,4(r2)
 2009f0c:	29400117 	ldw	r5,4(r5)
 2009f10:	30c00215 	stw	r3,8(r6)
 2009f14:	10c00317 	ldw	r3,12(r2)
 2009f18:	2908703a 	and	r4,r5,r4
 2009f1c:	30c00315 	stw	r3,12(r6)
 2009f20:	10c00417 	ldw	r3,16(r2)
 2009f24:	31000115 	stw	r4,4(r6)
 2009f28:	3005883a 	mov	r2,r6
 2009f2c:	30c00415 	stw	r3,16(r6)
 2009f30:	f800283a 	ret
 2009f34:	580f883a 	mov	r7,r11
 2009f38:	0019883a 	mov	r12,zero
 2009f3c:	001b883a 	mov	r13,zero
 2009f40:	003f9f06 	br	2009dc0 <_fpadd_parts+0xa4>
 2009f44:	0115c83a 	sub	r10,zero,r4
 2009f48:	00c00fc4 	movi	r3,63
 2009f4c:	1abfda16 	blt	r3,r10,2009eb8 <_fpadd_parts+0x19c>
 2009f50:	003f8906 	br	2009d78 <_fpadd_parts+0x5c>
 2009f54:	627fb52e 	bgeu	r12,r9,2009e2c <_fpadd_parts+0x110>
 2009f58:	003fc006 	br	2009e5c <_fpadd_parts+0x140>
 2009f5c:	6205c83a 	sub	r2,r12,r8
 2009f60:	6099803a 	cmpltu	r12,r12,r2
 2009f64:	6a47c83a 	sub	r3,r13,r9
 2009f68:	1b07c83a 	sub	r3,r3,r12
 2009f6c:	183f9d0e 	bge	r3,zero,2009de4 <_fpadd_parts+0xc8>
 2009f70:	0085c83a 	sub	r2,zero,r2
 2009f74:	1008c03a 	cmpne	r4,r2,zero
 2009f78:	00c7c83a 	sub	r3,zero,r3
 2009f7c:	1907c83a 	sub	r3,r3,r4
 2009f80:	01000044 	movi	r4,1
 2009f84:	31000115 	stw	r4,4(r6)
 2009f88:	31c00215 	stw	r7,8(r6)
 2009f8c:	30800315 	stw	r2,12(r6)
 2009f90:	30c00415 	stw	r3,16(r6)
 2009f94:	003f9706 	br	2009df4 <_fpadd_parts+0xd8>
 2009f98:	203f8926 	beq	r4,zero,2009dc0 <_fpadd_parts+0xa4>
 2009f9c:	50fff804 	addi	r3,r10,-32
 2009fa0:	3a8f883a 	add	r7,r7,r10
 2009fa4:	18002316 	blt	r3,zero,200a034 <_fpadd_parts+0x318>
 2009fa8:	68d6d83a 	srl	r11,r13,r3
 2009fac:	001d883a 	mov	r14,zero
 2009fb0:	18001c16 	blt	r3,zero,200a024 <_fpadd_parts+0x308>
 2009fb4:	01000044 	movi	r4,1
 2009fb8:	20c6983a 	sll	r3,r4,r3
 2009fbc:	0015883a 	mov	r10,zero
 2009fc0:	513fffc4 	addi	r4,r10,-1
 2009fc4:	2295403a 	cmpgeu	r10,r4,r10
 2009fc8:	1a87c83a 	sub	r3,r3,r10
 2009fcc:	1b5a703a 	and	r13,r3,r13
 2009fd0:	2318703a 	and	r12,r4,r12
 2009fd4:	6358b03a 	or	r12,r12,r13
 2009fd8:	6018c03a 	cmpne	r12,r12,zero
 2009fdc:	62d8b03a 	or	r12,r12,r11
 2009fe0:	701b883a 	mov	r13,r14
 2009fe4:	003f7606 	br	2009dc0 <_fpadd_parts+0xa4>
 2009fe8:	4808907a 	slli	r4,r9,1
 2009fec:	02c007c4 	movi	r11,31
 2009ff0:	5a97c83a 	sub	r11,r11,r10
 2009ff4:	22c8983a 	sll	r4,r4,r11
 2009ff8:	4296d83a 	srl	r11,r8,r10
 2009ffc:	4a9cd83a 	srl	r14,r9,r10
 200a000:	22d6b03a 	or	r11,r4,r11
 200a004:	003f6106 	br	2009d8c <_fpadd_parts+0x70>
 200a008:	00c00044 	movi	r3,1
 200a00c:	1a94983a 	sll	r10,r3,r10
 200a010:	0007883a 	mov	r3,zero
 200a014:	003f6106 	br	2009d9c <_fpadd_parts+0x80>
 200a018:	013fff84 	movi	r4,-2
 200a01c:	21ff7c2e 	bgeu	r4,r7,2009e10 <_fpadd_parts+0xf4>
 200a020:	003f9106 	br	2009e68 <_fpadd_parts+0x14c>
 200a024:	00c00044 	movi	r3,1
 200a028:	1a94983a 	sll	r10,r3,r10
 200a02c:	0007883a 	mov	r3,zero
 200a030:	003fe306 	br	2009fc0 <_fpadd_parts+0x2a4>
 200a034:	6816907a 	slli	r11,r13,1
 200a038:	010007c4 	movi	r4,31
 200a03c:	2289c83a 	sub	r4,r4,r10
 200a040:	5908983a 	sll	r4,r11,r4
 200a044:	6296d83a 	srl	r11,r12,r10
 200a048:	6a9cd83a 	srl	r14,r13,r10
 200a04c:	22d6b03a 	or	r11,r4,r11
 200a050:	003fd706 	br	2009fb0 <_fpadd_parts+0x294>
 200a054:	193f971e 	bne	r3,r4,2009eb4 <_fpadd_parts+0x198>
 200a058:	11000117 	ldw	r4,4(r2)
 200a05c:	28c00117 	ldw	r3,4(r5)
 200a060:	20ff9426 	beq	r4,r3,2009eb4 <_fpadd_parts+0x198>
 200a064:	00808074 	movhi	r2,513
 200a068:	10beaa04 	addi	r2,r2,-1368
 200a06c:	f800283a 	ret

0200a070 <__adddf3>:
 200a070:	deffec04 	addi	sp,sp,-80
 200a074:	d9001115 	stw	r4,68(sp)
 200a078:	d9401215 	stw	r5,72(sp)
 200a07c:	d9001104 	addi	r4,sp,68
 200a080:	d9400a04 	addi	r5,sp,40
 200a084:	dfc01315 	stw	ra,76(sp)
 200a088:	d9c01015 	stw	r7,64(sp)
 200a08c:	d9800f15 	stw	r6,60(sp)
 200a090:	200ae3c0 	call	200ae3c <__unpack_d>
 200a094:	d9000f04 	addi	r4,sp,60
 200a098:	d9400504 	addi	r5,sp,20
 200a09c:	200ae3c0 	call	200ae3c <__unpack_d>
 200a0a0:	d9000a04 	addi	r4,sp,40
 200a0a4:	d9400504 	addi	r5,sp,20
 200a0a8:	d80d883a 	mov	r6,sp
 200a0ac:	2009d1c0 	call	2009d1c <_fpadd_parts>
 200a0b0:	1009883a 	mov	r4,r2
 200a0b4:	200ac180 	call	200ac18 <__pack_d>
 200a0b8:	dfc01317 	ldw	ra,76(sp)
 200a0bc:	dec01404 	addi	sp,sp,80
 200a0c0:	f800283a 	ret

0200a0c4 <__subdf3>:
 200a0c4:	deffec04 	addi	sp,sp,-80
 200a0c8:	d9001115 	stw	r4,68(sp)
 200a0cc:	d9401215 	stw	r5,72(sp)
 200a0d0:	d9001104 	addi	r4,sp,68
 200a0d4:	d9400a04 	addi	r5,sp,40
 200a0d8:	dfc01315 	stw	ra,76(sp)
 200a0dc:	d9c01015 	stw	r7,64(sp)
 200a0e0:	d9800f15 	stw	r6,60(sp)
 200a0e4:	200ae3c0 	call	200ae3c <__unpack_d>
 200a0e8:	d9000f04 	addi	r4,sp,60
 200a0ec:	d9400504 	addi	r5,sp,20
 200a0f0:	200ae3c0 	call	200ae3c <__unpack_d>
 200a0f4:	d8800617 	ldw	r2,24(sp)
 200a0f8:	d9000a04 	addi	r4,sp,40
 200a0fc:	d9400504 	addi	r5,sp,20
 200a100:	d80d883a 	mov	r6,sp
 200a104:	1080005c 	xori	r2,r2,1
 200a108:	d8800615 	stw	r2,24(sp)
 200a10c:	2009d1c0 	call	2009d1c <_fpadd_parts>
 200a110:	1009883a 	mov	r4,r2
 200a114:	200ac180 	call	200ac18 <__pack_d>
 200a118:	dfc01317 	ldw	ra,76(sp)
 200a11c:	dec01404 	addi	sp,sp,80
 200a120:	f800283a 	ret

0200a124 <__muldf3>:
 200a124:	deffe404 	addi	sp,sp,-112
 200a128:	d9001115 	stw	r4,68(sp)
 200a12c:	d9401215 	stw	r5,72(sp)
 200a130:	d9001104 	addi	r4,sp,68
 200a134:	d9400a04 	addi	r5,sp,40
 200a138:	dfc01b15 	stw	ra,108(sp)
 200a13c:	d9800f15 	stw	r6,60(sp)
 200a140:	d9c01015 	stw	r7,64(sp)
 200a144:	ddc01a15 	stw	r23,104(sp)
 200a148:	dd801915 	stw	r22,100(sp)
 200a14c:	dd401815 	stw	r21,96(sp)
 200a150:	dd001715 	stw	r20,92(sp)
 200a154:	dcc01615 	stw	r19,88(sp)
 200a158:	dc801515 	stw	r18,84(sp)
 200a15c:	dc401415 	stw	r17,80(sp)
 200a160:	dc001315 	stw	r16,76(sp)
 200a164:	200ae3c0 	call	200ae3c <__unpack_d>
 200a168:	d9000f04 	addi	r4,sp,60
 200a16c:	d9400504 	addi	r5,sp,20
 200a170:	200ae3c0 	call	200ae3c <__unpack_d>
 200a174:	d8c00a17 	ldw	r3,40(sp)
 200a178:	00800044 	movi	r2,1
 200a17c:	10c01136 	bltu	r2,r3,200a1c4 <__muldf3+0xa0>
 200a180:	d8c00b17 	ldw	r3,44(sp)
 200a184:	d8800617 	ldw	r2,24(sp)
 200a188:	d9000a04 	addi	r4,sp,40
 200a18c:	1884c03a 	cmpne	r2,r3,r2
 200a190:	d8800b15 	stw	r2,44(sp)
 200a194:	200ac180 	call	200ac18 <__pack_d>
 200a198:	dfc01b17 	ldw	ra,108(sp)
 200a19c:	ddc01a17 	ldw	r23,104(sp)
 200a1a0:	dd801917 	ldw	r22,100(sp)
 200a1a4:	dd401817 	ldw	r21,96(sp)
 200a1a8:	dd001717 	ldw	r20,92(sp)
 200a1ac:	dcc01617 	ldw	r19,88(sp)
 200a1b0:	dc801517 	ldw	r18,84(sp)
 200a1b4:	dc401417 	ldw	r17,80(sp)
 200a1b8:	dc001317 	ldw	r16,76(sp)
 200a1bc:	dec01c04 	addi	sp,sp,112
 200a1c0:	f800283a 	ret
 200a1c4:	d9000517 	ldw	r4,20(sp)
 200a1c8:	11000636 	bltu	r2,r4,200a1e4 <__muldf3+0xc0>
 200a1cc:	d8800617 	ldw	r2,24(sp)
 200a1d0:	d8c00b17 	ldw	r3,44(sp)
 200a1d4:	d9000504 	addi	r4,sp,20
 200a1d8:	1884c03a 	cmpne	r2,r3,r2
 200a1dc:	d8800615 	stw	r2,24(sp)
 200a1e0:	003fec06 	br	200a194 <__muldf3+0x70>
 200a1e4:	00800104 	movi	r2,4
 200a1e8:	1880051e 	bne	r3,r2,200a200 <__muldf3+0xdc>
 200a1ec:	00800084 	movi	r2,2
 200a1f0:	20bfe31e 	bne	r4,r2,200a180 <__muldf3+0x5c>
 200a1f4:	01008074 	movhi	r4,513
 200a1f8:	213eaa04 	addi	r4,r4,-1368
 200a1fc:	003fe506 	br	200a194 <__muldf3+0x70>
 200a200:	2080031e 	bne	r4,r2,200a210 <__muldf3+0xec>
 200a204:	00800084 	movi	r2,2
 200a208:	18bffa26 	beq	r3,r2,200a1f4 <__muldf3+0xd0>
 200a20c:	003fef06 	br	200a1cc <__muldf3+0xa8>
 200a210:	00800084 	movi	r2,2
 200a214:	18bfda26 	beq	r3,r2,200a180 <__muldf3+0x5c>
 200a218:	20bfec26 	beq	r4,r2,200a1cc <__muldf3+0xa8>
 200a21c:	dc000d17 	ldw	r16,52(sp)
 200a220:	dd000817 	ldw	r20,32(sp)
 200a224:	dc800917 	ldw	r18,36(sp)
 200a228:	8009883a 	mov	r4,r16
 200a22c:	000b883a 	mov	r5,zero
 200a230:	a00d883a 	mov	r6,r20
 200a234:	000f883a 	mov	r7,zero
 200a238:	200aa5c0 	call	200aa5c <__muldi3>
 200a23c:	dc400e17 	ldw	r17,56(sp)
 200a240:	9009883a 	mov	r4,r18
 200a244:	800d883a 	mov	r6,r16
 200a248:	000b883a 	mov	r5,zero
 200a24c:	000f883a 	mov	r7,zero
 200a250:	102f883a 	mov	r23,r2
 200a254:	1827883a 	mov	r19,r3
 200a258:	200aa5c0 	call	200aa5c <__muldi3>
 200a25c:	900d883a 	mov	r6,r18
 200a260:	8809883a 	mov	r4,r17
 200a264:	000b883a 	mov	r5,zero
 200a268:	000f883a 	mov	r7,zero
 200a26c:	102b883a 	mov	r21,r2
 200a270:	1821883a 	mov	r16,r3
 200a274:	200aa5c0 	call	200aa5c <__muldi3>
 200a278:	8809883a 	mov	r4,r17
 200a27c:	000b883a 	mov	r5,zero
 200a280:	a00d883a 	mov	r6,r20
 200a284:	000f883a 	mov	r7,zero
 200a288:	102d883a 	mov	r22,r2
 200a28c:	1825883a 	mov	r18,r3
 200a290:	200aa5c0 	call	200aa5c <__muldi3>
 200a294:	154b883a 	add	r5,r2,r21
 200a298:	2889803a 	cmpltu	r4,r5,r2
 200a29c:	1c07883a 	add	r3,r3,r16
 200a2a0:	20c9883a 	add	r4,r4,r3
 200a2a4:	24004b36 	bltu	r4,r16,200a3d4 <__muldf3+0x2b0>
 200a2a8:	8100011e 	bne	r16,r4,200a2b0 <__muldf3+0x18c>
 200a2ac:	2d404936 	bltu	r5,r21,200a3d4 <__muldf3+0x2b0>
 200a2b0:	0011883a 	mov	r8,zero
 200a2b4:	0007883a 	mov	r3,zero
 200a2b8:	2ccb883a 	add	r5,r5,r19
 200a2bc:	b80d883a 	mov	r6,r23
 200a2c0:	2cc0012e 	bgeu	r5,r19,200a2c8 <__muldf3+0x1a4>
 200a2c4:	02000044 	movi	r8,1
 200a2c8:	258f883a 	add	r7,r4,r22
 200a2cc:	3909803a 	cmpltu	r4,r7,r4
 200a2d0:	da400c17 	ldw	r9,48(sp)
 200a2d4:	2489883a 	add	r4,r4,r18
 200a2d8:	d8800717 	ldw	r2,28(sp)
 200a2dc:	20c9883a 	add	r4,r4,r3
 200a2e0:	da800b17 	ldw	r10,44(sp)
 200a2e4:	d8c00617 	ldw	r3,24(sp)
 200a2e8:	3a11883a 	add	r8,r7,r8
 200a2ec:	4885883a 	add	r2,r9,r2
 200a2f0:	50c6c03a 	cmpne	r3,r10,r3
 200a2f4:	41cf803a 	cmpltu	r7,r8,r7
 200a2f8:	12400104 	addi	r9,r2,4
 200a2fc:	d8c00115 	stw	r3,4(sp)
 200a300:	3909883a 	add	r4,r7,r4
 200a304:	da400215 	stw	r9,8(sp)
 200a308:	03480034 	movhi	r13,8192
 200a30c:	6b7fffc4 	addi	r13,r13,-1
 200a310:	4007883a 	mov	r3,r8
 200a314:	6900102e 	bgeu	r13,r4,200a358 <__muldf3+0x234>
 200a318:	10800144 	addi	r2,r2,5
 200a31c:	180ed07a 	srli	r7,r3,1
 200a320:	18c0004c 	andi	r3,r3,1
 200a324:	201097fa 	slli	r8,r4,31
 200a328:	281697fa 	slli	r11,r5,31
 200a32c:	2008d07a 	srli	r4,r4,1
 200a330:	3014d07a 	srli	r10,r6,1
 200a334:	2812d07a 	srli	r9,r5,1
 200a338:	1019883a 	mov	r12,r2
 200a33c:	18000226 	beq	r3,zero,200a348 <__muldf3+0x224>
 200a340:	5a8cb03a 	or	r6,r11,r10
 200a344:	49600034 	orhi	r5,r9,32768
 200a348:	41c6b03a 	or	r3,r8,r7
 200a34c:	10800044 	addi	r2,r2,1
 200a350:	693ff236 	bltu	r13,r4,200a31c <__muldf3+0x1f8>
 200a354:	db000215 	stw	r12,8(sp)
 200a358:	03440034 	movhi	r13,4096
 200a35c:	6b7fffc4 	addi	r13,r13,-1
 200a360:	69001336 	bltu	r13,r4,200a3b0 <__muldf3+0x28c>
 200a364:	d8800217 	ldw	r2,8(sp)
 200a368:	10bfffc4 	addi	r2,r2,-1
 200a36c:	18d3883a 	add	r9,r3,r3
 200a370:	48c7803a 	cmpltu	r3,r9,r3
 200a374:	2109883a 	add	r4,r4,r4
 200a378:	190f883a 	add	r7,r3,r4
 200a37c:	3191883a 	add	r8,r6,r6
 200a380:	4197803a 	cmpltu	r11,r8,r6
 200a384:	2955883a 	add	r10,r5,r5
 200a388:	1019883a 	mov	r12,r2
 200a38c:	4807883a 	mov	r3,r9
 200a390:	3809883a 	mov	r4,r7
 200a394:	2800010e 	bge	r5,zero,200a39c <__muldf3+0x278>
 200a398:	48c00054 	ori	r3,r9,1
 200a39c:	400d883a 	mov	r6,r8
 200a3a0:	5a8b883a 	add	r5,r11,r10
 200a3a4:	10bfffc4 	addi	r2,r2,-1
 200a3a8:	69fff02e 	bgeu	r13,r7,200a36c <__muldf3+0x248>
 200a3ac:	db000215 	stw	r12,8(sp)
 200a3b0:	18803fcc 	andi	r2,r3,255
 200a3b4:	01c02004 	movi	r7,128
 200a3b8:	11c00926 	beq	r2,r7,200a3e0 <__muldf3+0x2bc>
 200a3bc:	008000c4 	movi	r2,3
 200a3c0:	d9000415 	stw	r4,16(sp)
 200a3c4:	d8c00315 	stw	r3,12(sp)
 200a3c8:	d8800015 	stw	r2,0(sp)
 200a3cc:	d809883a 	mov	r4,sp
 200a3d0:	003f7006 	br	200a194 <__muldf3+0x70>
 200a3d4:	0011883a 	mov	r8,zero
 200a3d8:	00c00044 	movi	r3,1
 200a3dc:	003fb606 	br	200a2b8 <__muldf3+0x194>
 200a3e0:	19c0400c 	andi	r7,r3,256
 200a3e4:	383ff51e 	bne	r7,zero,200a3bc <__muldf3+0x298>
 200a3e8:	314ab03a 	or	r5,r6,r5
 200a3ec:	283ff326 	beq	r5,zero,200a3bc <__muldf3+0x298>
 200a3f0:	1885883a 	add	r2,r3,r2
 200a3f4:	10cb803a 	cmpltu	r5,r2,r3
 200a3f8:	00ffc004 	movi	r3,-256
 200a3fc:	10c6703a 	and	r3,r2,r3
 200a400:	2909883a 	add	r4,r5,r4
 200a404:	003fed06 	br	200a3bc <__muldf3+0x298>

0200a408 <__divdf3>:
 200a408:	defff104 	addi	sp,sp,-60
 200a40c:	d9000c15 	stw	r4,48(sp)
 200a410:	d9400d15 	stw	r5,52(sp)
 200a414:	d9000c04 	addi	r4,sp,48
 200a418:	d9400504 	addi	r5,sp,20
 200a41c:	dfc00e15 	stw	ra,56(sp)
 200a420:	d9800a15 	stw	r6,40(sp)
 200a424:	d9c00b15 	stw	r7,44(sp)
 200a428:	200ae3c0 	call	200ae3c <__unpack_d>
 200a42c:	d9000a04 	addi	r4,sp,40
 200a430:	d80b883a 	mov	r5,sp
 200a434:	200ae3c0 	call	200ae3c <__unpack_d>
 200a438:	d8c00517 	ldw	r3,20(sp)
 200a43c:	00800044 	movi	r2,1
 200a440:	10c00536 	bltu	r2,r3,200a458 <__divdf3+0x50>
 200a444:	d9000504 	addi	r4,sp,20
 200a448:	200ac180 	call	200ac18 <__pack_d>
 200a44c:	dfc00e17 	ldw	ra,56(sp)
 200a450:	dec00f04 	addi	sp,sp,60
 200a454:	f800283a 	ret
 200a458:	d9000017 	ldw	r4,0(sp)
 200a45c:	11000536 	bltu	r2,r4,200a474 <__divdf3+0x6c>
 200a460:	d809883a 	mov	r4,sp
 200a464:	200ac180 	call	200ac18 <__pack_d>
 200a468:	dfc00e17 	ldw	ra,56(sp)
 200a46c:	dec00f04 	addi	sp,sp,60
 200a470:	f800283a 	ret
 200a474:	d9800617 	ldw	r6,24(sp)
 200a478:	d9400117 	ldw	r5,4(sp)
 200a47c:	00800104 	movi	r2,4
 200a480:	314af03a 	xor	r5,r6,r5
 200a484:	d9400615 	stw	r5,24(sp)
 200a488:	18800226 	beq	r3,r2,200a494 <__divdf3+0x8c>
 200a48c:	01400084 	movi	r5,2
 200a490:	1940041e 	bne	r3,r5,200a4a4 <__divdf3+0x9c>
 200a494:	193feb1e 	bne	r3,r4,200a444 <__divdf3+0x3c>
 200a498:	01008074 	movhi	r4,513
 200a49c:	213eaa04 	addi	r4,r4,-1368
 200a4a0:	003fe906 	br	200a448 <__divdf3+0x40>
 200a4a4:	20803326 	beq	r4,r2,200a574 <__divdf3+0x16c>
 200a4a8:	21403726 	beq	r4,r5,200a588 <__divdf3+0x180>
 200a4ac:	d8800217 	ldw	r2,8(sp)
 200a4b0:	d9000717 	ldw	r4,28(sp)
 200a4b4:	d8c00917 	ldw	r3,36(sp)
 200a4b8:	da000417 	ldw	r8,16(sp)
 200a4bc:	2089c83a 	sub	r4,r4,r2
 200a4c0:	d9000715 	stw	r4,28(sp)
 200a4c4:	d8800817 	ldw	r2,32(sp)
 200a4c8:	dbc00317 	ldw	r15,12(sp)
 200a4cc:	1a000236 	bltu	r3,r8,200a4d8 <__divdf3+0xd0>
 200a4d0:	40c0081e 	bne	r8,r3,200a4f4 <__divdf3+0xec>
 200a4d4:	13c0072e 	bgeu	r2,r15,200a4f4 <__divdf3+0xec>
 200a4d8:	108b883a 	add	r5,r2,r2
 200a4dc:	288d803a 	cmpltu	r6,r5,r2
 200a4e0:	18c7883a 	add	r3,r3,r3
 200a4e4:	213fffc4 	addi	r4,r4,-1
 200a4e8:	2805883a 	mov	r2,r5
 200a4ec:	30c7883a 	add	r3,r6,r3
 200a4f0:	d9000715 	stw	r4,28(sp)
 200a4f4:	01400f44 	movi	r5,61
 200a4f8:	000f883a 	mov	r7,zero
 200a4fc:	01040034 	movhi	r4,4096
 200a500:	0019883a 	mov	r12,zero
 200a504:	001b883a 	mov	r13,zero
 200a508:	201697fa 	slli	r11,r4,31
 200a50c:	3814d07a 	srli	r10,r7,1
 200a510:	297fffc4 	addi	r5,r5,-1
 200a514:	1a000936 	bltu	r3,r8,200a53c <__divdf3+0x134>
 200a518:	13cdc83a 	sub	r6,r2,r15
 200a51c:	1193803a 	cmpltu	r9,r2,r6
 200a520:	1a1dc83a 	sub	r14,r3,r8
 200a524:	40c0011e 	bne	r8,r3,200a52c <__divdf3+0x124>
 200a528:	13c00436 	bltu	r2,r15,200a53c <__divdf3+0x134>
 200a52c:	3005883a 	mov	r2,r6
 200a530:	7247c83a 	sub	r3,r14,r9
 200a534:	61d8b03a 	or	r12,r12,r7
 200a538:	691ab03a 	or	r13,r13,r4
 200a53c:	108d883a 	add	r6,r2,r2
 200a540:	3093803a 	cmpltu	r9,r6,r2
 200a544:	18c7883a 	add	r3,r3,r3
 200a548:	5a8eb03a 	or	r7,r11,r10
 200a54c:	2008d07a 	srli	r4,r4,1
 200a550:	3005883a 	mov	r2,r6
 200a554:	48c7883a 	add	r3,r9,r3
 200a558:	283feb1e 	bne	r5,zero,200a508 <__divdf3+0x100>
 200a55c:	61003fcc 	andi	r4,r12,255
 200a560:	01402004 	movi	r5,128
 200a564:	21400b26 	beq	r4,r5,200a594 <__divdf3+0x18c>
 200a568:	db000815 	stw	r12,32(sp)
 200a56c:	db400915 	stw	r13,36(sp)
 200a570:	003fb406 	br	200a444 <__divdf3+0x3c>
 200a574:	d8000815 	stw	zero,32(sp)
 200a578:	d8000915 	stw	zero,36(sp)
 200a57c:	d8000715 	stw	zero,28(sp)
 200a580:	d9000504 	addi	r4,sp,20
 200a584:	003fb006 	br	200a448 <__divdf3+0x40>
 200a588:	d8800515 	stw	r2,20(sp)
 200a58c:	d9000504 	addi	r4,sp,20
 200a590:	003fad06 	br	200a448 <__divdf3+0x40>
 200a594:	6140400c 	andi	r5,r12,256
 200a598:	283ff31e 	bne	r5,zero,200a568 <__divdf3+0x160>
 200a59c:	30c4b03a 	or	r2,r6,r3
 200a5a0:	103ff126 	beq	r2,zero,200a568 <__divdf3+0x160>
 200a5a4:	6109883a 	add	r4,r12,r4
 200a5a8:	2305803a 	cmpltu	r2,r4,r12
 200a5ac:	033fc004 	movi	r12,-256
 200a5b0:	2318703a 	and	r12,r4,r12
 200a5b4:	135b883a 	add	r13,r2,r13
 200a5b8:	003feb06 	br	200a568 <__divdf3+0x160>

0200a5bc <__eqdf2>:
 200a5bc:	defff104 	addi	sp,sp,-60
 200a5c0:	d9000c15 	stw	r4,48(sp)
 200a5c4:	d9400d15 	stw	r5,52(sp)
 200a5c8:	d9000c04 	addi	r4,sp,48
 200a5cc:	d9400504 	addi	r5,sp,20
 200a5d0:	dfc00e15 	stw	ra,56(sp)
 200a5d4:	d9800a15 	stw	r6,40(sp)
 200a5d8:	d9c00b15 	stw	r7,44(sp)
 200a5dc:	200ae3c0 	call	200ae3c <__unpack_d>
 200a5e0:	d9000a04 	addi	r4,sp,40
 200a5e4:	d80b883a 	mov	r5,sp
 200a5e8:	200ae3c0 	call	200ae3c <__unpack_d>
 200a5ec:	d8c00517 	ldw	r3,20(sp)
 200a5f0:	00800044 	movi	r2,1
 200a5f4:	10c0052e 	bgeu	r2,r3,200a60c <__eqdf2+0x50>
 200a5f8:	d8c00017 	ldw	r3,0(sp)
 200a5fc:	10c0032e 	bgeu	r2,r3,200a60c <__eqdf2+0x50>
 200a600:	d9000504 	addi	r4,sp,20
 200a604:	d80b883a 	mov	r5,sp
 200a608:	200af400 	call	200af40 <__fpcmp_parts_d>
 200a60c:	dfc00e17 	ldw	ra,56(sp)
 200a610:	dec00f04 	addi	sp,sp,60
 200a614:	f800283a 	ret

0200a618 <__nedf2>:
 200a618:	defff104 	addi	sp,sp,-60
 200a61c:	d9000c15 	stw	r4,48(sp)
 200a620:	d9400d15 	stw	r5,52(sp)
 200a624:	d9000c04 	addi	r4,sp,48
 200a628:	d9400504 	addi	r5,sp,20
 200a62c:	dfc00e15 	stw	ra,56(sp)
 200a630:	d9800a15 	stw	r6,40(sp)
 200a634:	d9c00b15 	stw	r7,44(sp)
 200a638:	200ae3c0 	call	200ae3c <__unpack_d>
 200a63c:	d9000a04 	addi	r4,sp,40
 200a640:	d80b883a 	mov	r5,sp
 200a644:	200ae3c0 	call	200ae3c <__unpack_d>
 200a648:	d8c00517 	ldw	r3,20(sp)
 200a64c:	00800044 	movi	r2,1
 200a650:	10c0052e 	bgeu	r2,r3,200a668 <__nedf2+0x50>
 200a654:	d8c00017 	ldw	r3,0(sp)
 200a658:	10c0032e 	bgeu	r2,r3,200a668 <__nedf2+0x50>
 200a65c:	d9000504 	addi	r4,sp,20
 200a660:	d80b883a 	mov	r5,sp
 200a664:	200af400 	call	200af40 <__fpcmp_parts_d>
 200a668:	dfc00e17 	ldw	ra,56(sp)
 200a66c:	dec00f04 	addi	sp,sp,60
 200a670:	f800283a 	ret

0200a674 <__gtdf2>:
 200a674:	defff104 	addi	sp,sp,-60
 200a678:	d9000c15 	stw	r4,48(sp)
 200a67c:	d9400d15 	stw	r5,52(sp)
 200a680:	d9000c04 	addi	r4,sp,48
 200a684:	d9400504 	addi	r5,sp,20
 200a688:	dfc00e15 	stw	ra,56(sp)
 200a68c:	d9800a15 	stw	r6,40(sp)
 200a690:	d9c00b15 	stw	r7,44(sp)
 200a694:	200ae3c0 	call	200ae3c <__unpack_d>
 200a698:	d9000a04 	addi	r4,sp,40
 200a69c:	d80b883a 	mov	r5,sp
 200a6a0:	200ae3c0 	call	200ae3c <__unpack_d>
 200a6a4:	d8c00517 	ldw	r3,20(sp)
 200a6a8:	00800044 	movi	r2,1
 200a6ac:	10c0082e 	bgeu	r2,r3,200a6d0 <__gtdf2+0x5c>
 200a6b0:	d8c00017 	ldw	r3,0(sp)
 200a6b4:	10c0062e 	bgeu	r2,r3,200a6d0 <__gtdf2+0x5c>
 200a6b8:	d9000504 	addi	r4,sp,20
 200a6bc:	d80b883a 	mov	r5,sp
 200a6c0:	200af400 	call	200af40 <__fpcmp_parts_d>
 200a6c4:	dfc00e17 	ldw	ra,56(sp)
 200a6c8:	dec00f04 	addi	sp,sp,60
 200a6cc:	f800283a 	ret
 200a6d0:	00bfffc4 	movi	r2,-1
 200a6d4:	003ffb06 	br	200a6c4 <__gtdf2+0x50>

0200a6d8 <__gedf2>:
 200a6d8:	defff104 	addi	sp,sp,-60
 200a6dc:	d9000c15 	stw	r4,48(sp)
 200a6e0:	d9400d15 	stw	r5,52(sp)
 200a6e4:	d9000c04 	addi	r4,sp,48
 200a6e8:	d9400504 	addi	r5,sp,20
 200a6ec:	dfc00e15 	stw	ra,56(sp)
 200a6f0:	d9800a15 	stw	r6,40(sp)
 200a6f4:	d9c00b15 	stw	r7,44(sp)
 200a6f8:	200ae3c0 	call	200ae3c <__unpack_d>
 200a6fc:	d9000a04 	addi	r4,sp,40
 200a700:	d80b883a 	mov	r5,sp
 200a704:	200ae3c0 	call	200ae3c <__unpack_d>
 200a708:	d8c00517 	ldw	r3,20(sp)
 200a70c:	00800044 	movi	r2,1
 200a710:	10c0082e 	bgeu	r2,r3,200a734 <__gedf2+0x5c>
 200a714:	d8c00017 	ldw	r3,0(sp)
 200a718:	10c0062e 	bgeu	r2,r3,200a734 <__gedf2+0x5c>
 200a71c:	d9000504 	addi	r4,sp,20
 200a720:	d80b883a 	mov	r5,sp
 200a724:	200af400 	call	200af40 <__fpcmp_parts_d>
 200a728:	dfc00e17 	ldw	ra,56(sp)
 200a72c:	dec00f04 	addi	sp,sp,60
 200a730:	f800283a 	ret
 200a734:	00bfffc4 	movi	r2,-1
 200a738:	003ffb06 	br	200a728 <__gedf2+0x50>

0200a73c <__ltdf2>:
 200a73c:	defff104 	addi	sp,sp,-60
 200a740:	d9000c15 	stw	r4,48(sp)
 200a744:	d9400d15 	stw	r5,52(sp)
 200a748:	d9000c04 	addi	r4,sp,48
 200a74c:	d9400504 	addi	r5,sp,20
 200a750:	dfc00e15 	stw	ra,56(sp)
 200a754:	d9800a15 	stw	r6,40(sp)
 200a758:	d9c00b15 	stw	r7,44(sp)
 200a75c:	200ae3c0 	call	200ae3c <__unpack_d>
 200a760:	d9000a04 	addi	r4,sp,40
 200a764:	d80b883a 	mov	r5,sp
 200a768:	200ae3c0 	call	200ae3c <__unpack_d>
 200a76c:	d8c00517 	ldw	r3,20(sp)
 200a770:	00800044 	movi	r2,1
 200a774:	10c0052e 	bgeu	r2,r3,200a78c <__ltdf2+0x50>
 200a778:	d8c00017 	ldw	r3,0(sp)
 200a77c:	10c0032e 	bgeu	r2,r3,200a78c <__ltdf2+0x50>
 200a780:	d9000504 	addi	r4,sp,20
 200a784:	d80b883a 	mov	r5,sp
 200a788:	200af400 	call	200af40 <__fpcmp_parts_d>
 200a78c:	dfc00e17 	ldw	ra,56(sp)
 200a790:	dec00f04 	addi	sp,sp,60
 200a794:	f800283a 	ret

0200a798 <__floatsidf>:
 200a798:	2004d7fa 	srli	r2,r4,31
 200a79c:	defff904 	addi	sp,sp,-28
 200a7a0:	00c000c4 	movi	r3,3
 200a7a4:	dfc00615 	stw	ra,24(sp)
 200a7a8:	dc000515 	stw	r16,20(sp)
 200a7ac:	d8c00015 	stw	r3,0(sp)
 200a7b0:	d8800115 	stw	r2,4(sp)
 200a7b4:	2000081e 	bne	r4,zero,200a7d8 <__floatsidf+0x40>
 200a7b8:	00800084 	movi	r2,2
 200a7bc:	d8800015 	stw	r2,0(sp)
 200a7c0:	d809883a 	mov	r4,sp
 200a7c4:	200ac180 	call	200ac18 <__pack_d>
 200a7c8:	dfc00617 	ldw	ra,24(sp)
 200a7cc:	dc000517 	ldw	r16,20(sp)
 200a7d0:	dec00704 	addi	sp,sp,28
 200a7d4:	f800283a 	ret
 200a7d8:	00c00f04 	movi	r3,60
 200a7dc:	d8c00215 	stw	r3,8(sp)
 200a7e0:	10000f1e 	bne	r2,zero,200a820 <__floatsidf+0x88>
 200a7e4:	2021883a 	mov	r16,r4
 200a7e8:	8009883a 	mov	r4,r16
 200a7ec:	200ab6c0 	call	200ab6c <__clzsi2>
 200a7f0:	11000744 	addi	r4,r2,29
 200a7f4:	0100110e 	bge	zero,r4,200a83c <__floatsidf+0xa4>
 200a7f8:	10ffff44 	addi	r3,r2,-3
 200a7fc:	18001216 	blt	r3,zero,200a848 <__floatsidf+0xb0>
 200a800:	80c6983a 	sll	r3,r16,r3
 200a804:	0009883a 	mov	r4,zero
 200a808:	014007c4 	movi	r5,31
 200a80c:	2885c83a 	sub	r2,r5,r2
 200a810:	d9000315 	stw	r4,12(sp)
 200a814:	d8c00415 	stw	r3,16(sp)
 200a818:	d8800215 	stw	r2,8(sp)
 200a81c:	003fe806 	br	200a7c0 <__floatsidf+0x28>
 200a820:	00a00034 	movhi	r2,32768
 200a824:	20800e26 	beq	r4,r2,200a860 <__floatsidf+0xc8>
 200a828:	0121c83a 	sub	r16,zero,r4
 200a82c:	8009883a 	mov	r4,r16
 200a830:	200ab6c0 	call	200ab6c <__clzsi2>
 200a834:	11000744 	addi	r4,r2,29
 200a838:	013fef16 	blt	zero,r4,200a7f8 <__floatsidf+0x60>
 200a83c:	dc000315 	stw	r16,12(sp)
 200a840:	d8000415 	stw	zero,16(sp)
 200a844:	003fde06 	br	200a7c0 <__floatsidf+0x28>
 200a848:	800ad07a 	srli	r5,r16,1
 200a84c:	00c007c4 	movi	r3,31
 200a850:	1907c83a 	sub	r3,r3,r4
 200a854:	28c6d83a 	srl	r3,r5,r3
 200a858:	8108983a 	sll	r4,r16,r4
 200a85c:	003fea06 	br	200a808 <__floatsidf+0x70>
 200a860:	0005883a 	mov	r2,zero
 200a864:	00f07834 	movhi	r3,49632
 200a868:	003fd706 	br	200a7c8 <__floatsidf+0x30>

0200a86c <__fixdfsi>:
 200a86c:	defff804 	addi	sp,sp,-32
 200a870:	d9000515 	stw	r4,20(sp)
 200a874:	d9400615 	stw	r5,24(sp)
 200a878:	d9000504 	addi	r4,sp,20
 200a87c:	d80b883a 	mov	r5,sp
 200a880:	dfc00715 	stw	ra,28(sp)
 200a884:	200ae3c0 	call	200ae3c <__unpack_d>
 200a888:	d8800017 	ldw	r2,0(sp)
 200a88c:	00c00084 	movi	r3,2
 200a890:	10c01c26 	beq	r2,r3,200a904 <__fixdfsi+0x98>
 200a894:	00c00044 	movi	r3,1
 200a898:	18801a2e 	bgeu	r3,r2,200a904 <__fixdfsi+0x98>
 200a89c:	00c00104 	movi	r3,4
 200a8a0:	10c01126 	beq	r2,r3,200a8e8 <__fixdfsi+0x7c>
 200a8a4:	d8800217 	ldw	r2,8(sp)
 200a8a8:	10001616 	blt	r2,zero,200a904 <__fixdfsi+0x98>
 200a8ac:	00c00784 	movi	r3,30
 200a8b0:	18800d16 	blt	r3,r2,200a8e8 <__fixdfsi+0x7c>
 200a8b4:	00c00f04 	movi	r3,60
 200a8b8:	1885c83a 	sub	r2,r3,r2
 200a8bc:	10fff804 	addi	r3,r2,-32
 200a8c0:	d9400317 	ldw	r5,12(sp)
 200a8c4:	d9000417 	ldw	r4,16(sp)
 200a8c8:	18001616 	blt	r3,zero,200a924 <__fixdfsi+0xb8>
 200a8cc:	20c4d83a 	srl	r2,r4,r3
 200a8d0:	d8c00117 	ldw	r3,4(sp)
 200a8d4:	18000126 	beq	r3,zero,200a8dc <__fixdfsi+0x70>
 200a8d8:	0085c83a 	sub	r2,zero,r2
 200a8dc:	dfc00717 	ldw	ra,28(sp)
 200a8e0:	dec00804 	addi	sp,sp,32
 200a8e4:	f800283a 	ret
 200a8e8:	d8800117 	ldw	r2,4(sp)
 200a8ec:	1000091e 	bne	r2,zero,200a914 <__fixdfsi+0xa8>
 200a8f0:	00a00034 	movhi	r2,32768
 200a8f4:	10bfffc4 	addi	r2,r2,-1
 200a8f8:	dfc00717 	ldw	ra,28(sp)
 200a8fc:	dec00804 	addi	sp,sp,32
 200a900:	f800283a 	ret
 200a904:	0005883a 	mov	r2,zero
 200a908:	dfc00717 	ldw	ra,28(sp)
 200a90c:	dec00804 	addi	sp,sp,32
 200a910:	f800283a 	ret
 200a914:	00a00034 	movhi	r2,32768
 200a918:	dfc00717 	ldw	ra,28(sp)
 200a91c:	dec00804 	addi	sp,sp,32
 200a920:	f800283a 	ret
 200a924:	2008907a 	slli	r4,r4,1
 200a928:	018007c4 	movi	r6,31
 200a92c:	308dc83a 	sub	r6,r6,r2
 200a930:	2188983a 	sll	r4,r4,r6
 200a934:	2884d83a 	srl	r2,r5,r2
 200a938:	2084b03a 	or	r2,r4,r2
 200a93c:	003fe406 	br	200a8d0 <__fixdfsi+0x64>

0200a940 <__floatunsidf>:
 200a940:	defff904 	addi	sp,sp,-28
 200a944:	dc000515 	stw	r16,20(sp)
 200a948:	dfc00615 	stw	ra,24(sp)
 200a94c:	d8000115 	stw	zero,4(sp)
 200a950:	2021883a 	mov	r16,r4
 200a954:	20001726 	beq	r4,zero,200a9b4 <__floatunsidf+0x74>
 200a958:	008000c4 	movi	r2,3
 200a95c:	d8800015 	stw	r2,0(sp)
 200a960:	00800f04 	movi	r2,60
 200a964:	d8800215 	stw	r2,8(sp)
 200a968:	200ab6c0 	call	200ab6c <__clzsi2>
 200a96c:	10c00744 	addi	r3,r2,29
 200a970:	18001816 	blt	r3,zero,200a9d4 <__floatunsidf+0x94>
 200a974:	18002d26 	beq	r3,zero,200aa2c <__floatunsidf+0xec>
 200a978:	113fff44 	addi	r4,r2,-3
 200a97c:	20002e16 	blt	r4,zero,200aa38 <__floatunsidf+0xf8>
 200a980:	8108983a 	sll	r4,r16,r4
 200a984:	0021883a 	mov	r16,zero
 200a988:	014007c4 	movi	r5,31
 200a98c:	2885c83a 	sub	r2,r5,r2
 200a990:	dc000315 	stw	r16,12(sp)
 200a994:	d9000415 	stw	r4,16(sp)
 200a998:	d8800215 	stw	r2,8(sp)
 200a99c:	d809883a 	mov	r4,sp
 200a9a0:	200ac180 	call	200ac18 <__pack_d>
 200a9a4:	dfc00617 	ldw	ra,24(sp)
 200a9a8:	dc000517 	ldw	r16,20(sp)
 200a9ac:	dec00704 	addi	sp,sp,28
 200a9b0:	f800283a 	ret
 200a9b4:	00800084 	movi	r2,2
 200a9b8:	d809883a 	mov	r4,sp
 200a9bc:	d8800015 	stw	r2,0(sp)
 200a9c0:	200ac180 	call	200ac18 <__pack_d>
 200a9c4:	dfc00617 	ldw	ra,24(sp)
 200a9c8:	dc000517 	ldw	r16,20(sp)
 200a9cc:	dec00704 	addi	sp,sp,28
 200a9d0:	f800283a 	ret
 200a9d4:	00c7c83a 	sub	r3,zero,r3
 200a9d8:	193ff804 	addi	r4,r3,-32
 200a9dc:	20001c16 	blt	r4,zero,200aa50 <__floatunsidf+0x110>
 200a9e0:	000b883a 	mov	r5,zero
 200a9e4:	2009d7fa 	srai	r4,r4,31
 200a9e8:	80c6d83a 	srl	r3,r16,r3
 200a9ec:	297fffc4 	addi	r5,r5,-1
 200a9f0:	2c20703a 	and	r16,r5,r16
 200a9f4:	8020c03a 	cmpne	r16,r16,zero
 200a9f8:	1906703a 	and	r3,r3,r4
 200a9fc:	010007c4 	movi	r4,31
 200aa00:	80c6b03a 	or	r3,r16,r3
 200aa04:	2085c83a 	sub	r2,r4,r2
 200aa08:	d809883a 	mov	r4,sp
 200aa0c:	d8c00315 	stw	r3,12(sp)
 200aa10:	d8000415 	stw	zero,16(sp)
 200aa14:	d8800215 	stw	r2,8(sp)
 200aa18:	200ac180 	call	200ac18 <__pack_d>
 200aa1c:	dfc00617 	ldw	ra,24(sp)
 200aa20:	dc000517 	ldw	r16,20(sp)
 200aa24:	dec00704 	addi	sp,sp,28
 200aa28:	f800283a 	ret
 200aa2c:	dc000315 	stw	r16,12(sp)
 200aa30:	d8000415 	stw	zero,16(sp)
 200aa34:	003fd906 	br	200a99c <__floatunsidf+0x5c>
 200aa38:	800ad07a 	srli	r5,r16,1
 200aa3c:	010007c4 	movi	r4,31
 200aa40:	20c9c83a 	sub	r4,r4,r3
 200aa44:	2908d83a 	srl	r4,r5,r4
 200aa48:	80e0983a 	sll	r16,r16,r3
 200aa4c:	003fce06 	br	200a988 <__floatunsidf+0x48>
 200aa50:	01400044 	movi	r5,1
 200aa54:	28ca983a 	sll	r5,r5,r3
 200aa58:	003fe206 	br	200a9e4 <__floatunsidf+0xa4>

0200aa5c <__muldi3>:
 200aa5c:	defff604 	addi	sp,sp,-40
 200aa60:	dd400515 	stw	r21,20(sp)
 200aa64:	dd000415 	stw	r20,16(sp)
 200aa68:	257fffcc 	andi	r21,r4,65535
 200aa6c:	353fffcc 	andi	r20,r6,65535
 200aa70:	dcc00315 	stw	r19,12(sp)
 200aa74:	3026d43a 	srli	r19,r6,16
 200aa78:	dd800615 	stw	r22,24(sp)
 200aa7c:	dc800215 	stw	r18,8(sp)
 200aa80:	dc400115 	stw	r17,4(sp)
 200aa84:	2024d43a 	srli	r18,r4,16
 200aa88:	2023883a 	mov	r17,r4
 200aa8c:	282d883a 	mov	r22,r5
 200aa90:	a009883a 	mov	r4,r20
 200aa94:	a80b883a 	mov	r5,r21
 200aa98:	dfc00915 	stw	ra,36(sp)
 200aa9c:	df000815 	stw	fp,32(sp)
 200aaa0:	ddc00715 	stw	r23,28(sp)
 200aaa4:	3839883a 	mov	fp,r7
 200aaa8:	dc000015 	stw	r16,0(sp)
 200aaac:	3021883a 	mov	r16,r6
 200aab0:	20012bc0 	call	20012bc <__mulsi3>
 200aab4:	a80b883a 	mov	r5,r21
 200aab8:	9809883a 	mov	r4,r19
 200aabc:	102f883a 	mov	r23,r2
 200aac0:	20012bc0 	call	20012bc <__mulsi3>
 200aac4:	a009883a 	mov	r4,r20
 200aac8:	900b883a 	mov	r5,r18
 200aacc:	102b883a 	mov	r21,r2
 200aad0:	20012bc0 	call	20012bc <__mulsi3>
 200aad4:	9809883a 	mov	r4,r19
 200aad8:	900b883a 	mov	r5,r18
 200aadc:	1029883a 	mov	r20,r2
 200aae0:	20012bc0 	call	20012bc <__mulsi3>
 200aae4:	1007883a 	mov	r3,r2
 200aae8:	b804d43a 	srli	r2,r23,16
 200aaec:	a549883a 	add	r4,r20,r21
 200aaf0:	2089883a 	add	r4,r4,r2
 200aaf4:	2500022e 	bgeu	r4,r20,200ab00 <__muldi3+0xa4>
 200aaf8:	00800074 	movhi	r2,1
 200aafc:	1887883a 	add	r3,r3,r2
 200ab00:	200cd43a 	srli	r6,r4,16
 200ab04:	2004943a 	slli	r2,r4,16
 200ab08:	e00b883a 	mov	r5,fp
 200ab0c:	8809883a 	mov	r4,r17
 200ab10:	bdffffcc 	andi	r23,r23,65535
 200ab14:	19a3883a 	add	r17,r3,r6
 200ab18:	15ef883a 	add	r23,r2,r23
 200ab1c:	20012bc0 	call	20012bc <__mulsi3>
 200ab20:	8009883a 	mov	r4,r16
 200ab24:	b00b883a 	mov	r5,r22
 200ab28:	1025883a 	mov	r18,r2
 200ab2c:	20012bc0 	call	20012bc <__mulsi3>
 200ab30:	9085883a 	add	r2,r18,r2
 200ab34:	1447883a 	add	r3,r2,r17
 200ab38:	b805883a 	mov	r2,r23
 200ab3c:	dfc00917 	ldw	ra,36(sp)
 200ab40:	df000817 	ldw	fp,32(sp)
 200ab44:	ddc00717 	ldw	r23,28(sp)
 200ab48:	dd800617 	ldw	r22,24(sp)
 200ab4c:	dd400517 	ldw	r21,20(sp)
 200ab50:	dd000417 	ldw	r20,16(sp)
 200ab54:	dcc00317 	ldw	r19,12(sp)
 200ab58:	dc800217 	ldw	r18,8(sp)
 200ab5c:	dc400117 	ldw	r17,4(sp)
 200ab60:	dc000017 	ldw	r16,0(sp)
 200ab64:	dec00a04 	addi	sp,sp,40
 200ab68:	f800283a 	ret

0200ab6c <__clzsi2>:
 200ab6c:	00bfffd4 	movui	r2,65535
 200ab70:	11000b36 	bltu	r2,r4,200aba0 <__clzsi2+0x34>
 200ab74:	00803fc4 	movi	r2,255
 200ab78:	11001e2e 	bgeu	r2,r4,200abf4 <__clzsi2+0x88>
 200ab7c:	00c00204 	movi	r3,8
 200ab80:	20c8d83a 	srl	r4,r4,r3
 200ab84:	00c08074 	movhi	r3,513
 200ab88:	18fdf204 	addi	r3,r3,-2104
 200ab8c:	00800604 	movi	r2,24
 200ab90:	1909883a 	add	r4,r3,r4
 200ab94:	20c00003 	ldbu	r3,0(r4)
 200ab98:	10c5c83a 	sub	r2,r2,r3
 200ab9c:	f800283a 	ret
 200aba0:	00804034 	movhi	r2,256
 200aba4:	10bfffc4 	addi	r2,r2,-1
 200aba8:	11000936 	bltu	r2,r4,200abd0 <__clzsi2+0x64>
 200abac:	00800404 	movi	r2,16
 200abb0:	1007883a 	mov	r3,r2
 200abb4:	20c8d83a 	srl	r4,r4,r3
 200abb8:	00c08074 	movhi	r3,513
 200abbc:	18fdf204 	addi	r3,r3,-2104
 200abc0:	1909883a 	add	r4,r3,r4
 200abc4:	20c00003 	ldbu	r3,0(r4)
 200abc8:	10c5c83a 	sub	r2,r2,r3
 200abcc:	f800283a 	ret
 200abd0:	00c00604 	movi	r3,24
 200abd4:	20c8d83a 	srl	r4,r4,r3
 200abd8:	00c08074 	movhi	r3,513
 200abdc:	18fdf204 	addi	r3,r3,-2104
 200abe0:	00800204 	movi	r2,8
 200abe4:	1909883a 	add	r4,r3,r4
 200abe8:	20c00003 	ldbu	r3,0(r4)
 200abec:	10c5c83a 	sub	r2,r2,r3
 200abf0:	f800283a 	ret
 200abf4:	0007883a 	mov	r3,zero
 200abf8:	20c8d83a 	srl	r4,r4,r3
 200abfc:	00c08074 	movhi	r3,513
 200ac00:	18fdf204 	addi	r3,r3,-2104
 200ac04:	00800804 	movi	r2,32
 200ac08:	1909883a 	add	r4,r3,r4
 200ac0c:	20c00003 	ldbu	r3,0(r4)
 200ac10:	10c5c83a 	sub	r2,r2,r3
 200ac14:	f800283a 	ret

0200ac18 <__pack_d>:
 200ac18:	20800017 	ldw	r2,0(r4)
 200ac1c:	defff804 	addi	sp,sp,-32
 200ac20:	dcc00315 	stw	r19,12(sp)
 200ac24:	dc800215 	stw	r18,8(sp)
 200ac28:	dfc00715 	stw	ra,28(sp)
 200ac2c:	dd800615 	stw	r22,24(sp)
 200ac30:	dd400515 	stw	r21,20(sp)
 200ac34:	dd000415 	stw	r20,16(sp)
 200ac38:	dc400115 	stw	r17,4(sp)
 200ac3c:	dc000015 	stw	r16,0(sp)
 200ac40:	04800044 	movi	r18,1
 200ac44:	24400317 	ldw	r17,12(r4)
 200ac48:	24000417 	ldw	r16,16(r4)
 200ac4c:	24c00117 	ldw	r19,4(r4)
 200ac50:	9080422e 	bgeu	r18,r2,200ad5c <__pack_d+0x144>
 200ac54:	00c00104 	movi	r3,4
 200ac58:	10c03c26 	beq	r2,r3,200ad4c <__pack_d+0x134>
 200ac5c:	00c00084 	movi	r3,2
 200ac60:	10c01926 	beq	r2,r3,200acc8 <__pack_d+0xb0>
 200ac64:	8c04b03a 	or	r2,r17,r16
 200ac68:	10001726 	beq	r2,zero,200acc8 <__pack_d+0xb0>
 200ac6c:	21000217 	ldw	r4,8(r4)
 200ac70:	00bf0084 	movi	r2,-1022
 200ac74:	20804016 	blt	r4,r2,200ad78 <__pack_d+0x160>
 200ac78:	0080ffc4 	movi	r2,1023
 200ac7c:	11003316 	blt	r2,r4,200ad4c <__pack_d+0x134>
 200ac80:	88803fcc 	andi	r2,r17,255
 200ac84:	00c02004 	movi	r3,128
 200ac88:	10c02926 	beq	r2,r3,200ad30 <__pack_d+0x118>
 200ac8c:	88801fc4 	addi	r2,r17,127
 200ac90:	1463803a 	cmpltu	r17,r2,r17
 200ac94:	8c21883a 	add	r16,r17,r16
 200ac98:	1023883a 	mov	r17,r2
 200ac9c:	00880034 	movhi	r2,8192
 200aca0:	10bfffc4 	addi	r2,r2,-1
 200aca4:	14001c36 	bltu	r2,r16,200ad18 <__pack_d+0x100>
 200aca8:	2100ffc4 	addi	r4,r4,1023
 200acac:	8006963a 	slli	r3,r16,24
 200acb0:	8804d23a 	srli	r2,r17,8
 200acb4:	8020913a 	slli	r16,r16,4
 200acb8:	2101ffcc 	andi	r4,r4,2047
 200acbc:	1884b03a 	or	r2,r3,r2
 200acc0:	8020d33a 	srli	r16,r16,12
 200acc4:	00000306 	br	200acd4 <__pack_d+0xbc>
 200acc8:	0009883a 	mov	r4,zero
 200accc:	0005883a 	mov	r2,zero
 200acd0:	0021883a 	mov	r16,zero
 200acd4:	2008953a 	slli	r4,r4,20
 200acd8:	982697fa 	slli	r19,r19,31
 200acdc:	00c00434 	movhi	r3,16
 200ace0:	18ffffc4 	addi	r3,r3,-1
 200ace4:	80e0703a 	and	r16,r16,r3
 200ace8:	8106b03a 	or	r3,r16,r4
 200acec:	1cc6b03a 	or	r3,r3,r19
 200acf0:	dfc00717 	ldw	ra,28(sp)
 200acf4:	dd800617 	ldw	r22,24(sp)
 200acf8:	dd400517 	ldw	r21,20(sp)
 200acfc:	dd000417 	ldw	r20,16(sp)
 200ad00:	dcc00317 	ldw	r19,12(sp)
 200ad04:	dc800217 	ldw	r18,8(sp)
 200ad08:	dc400117 	ldw	r17,4(sp)
 200ad0c:	dc000017 	ldw	r16,0(sp)
 200ad10:	dec00804 	addi	sp,sp,32
 200ad14:	f800283a 	ret
 200ad18:	800697fa 	slli	r3,r16,31
 200ad1c:	8804d07a 	srli	r2,r17,1
 200ad20:	21010004 	addi	r4,r4,1024
 200ad24:	8020d07a 	srli	r16,r16,1
 200ad28:	18a2b03a 	or	r17,r3,r2
 200ad2c:	003fdf06 	br	200acac <__pack_d+0x94>
 200ad30:	88c0400c 	andi	r3,r17,256
 200ad34:	183fd926 	beq	r3,zero,200ac9c <__pack_d+0x84>
 200ad38:	8885883a 	add	r2,r17,r2
 200ad3c:	1463803a 	cmpltu	r17,r2,r17
 200ad40:	8c21883a 	add	r16,r17,r16
 200ad44:	1023883a 	mov	r17,r2
 200ad48:	003fd406 	br	200ac9c <__pack_d+0x84>
 200ad4c:	0101ffc4 	movi	r4,2047
 200ad50:	0005883a 	mov	r2,zero
 200ad54:	0021883a 	mov	r16,zero
 200ad58:	003fde06 	br	200acd4 <__pack_d+0xbc>
 200ad5c:	84000234 	orhi	r16,r16,8
 200ad60:	00c00434 	movhi	r3,16
 200ad64:	18ffffc4 	addi	r3,r3,-1
 200ad68:	8805883a 	mov	r2,r17
 200ad6c:	80e0703a 	and	r16,r16,r3
 200ad70:	0101ffc4 	movi	r4,2047
 200ad74:	003fd706 	br	200acd4 <__pack_d+0xbc>
 200ad78:	1129c83a 	sub	r20,r2,r4
 200ad7c:	00800e04 	movi	r2,56
 200ad80:	15002716 	blt	r2,r20,200ae20 <__pack_d+0x208>
 200ad84:	800b883a 	mov	r5,r16
 200ad88:	a00d883a 	mov	r6,r20
 200ad8c:	8809883a 	mov	r4,r17
 200ad90:	200b0100 	call	200b010 <__lshrdi3>
 200ad94:	9009883a 	mov	r4,r18
 200ad98:	000b883a 	mov	r5,zero
 200ad9c:	a00d883a 	mov	r6,r20
 200ada0:	102d883a 	mov	r22,r2
 200ada4:	182b883a 	mov	r21,r3
 200ada8:	200b0540 	call	200b054 <__ashldi3>
 200adac:	1009003a 	cmpeq	r4,r2,zero
 200adb0:	1907c83a 	sub	r3,r3,r4
 200adb4:	10bfffc4 	addi	r2,r2,-1
 200adb8:	1c20703a 	and	r16,r3,r16
 200adbc:	1444703a 	and	r2,r2,r17
 200adc0:	1404b03a 	or	r2,r2,r16
 200adc4:	1004c03a 	cmpne	r2,r2,zero
 200adc8:	1584b03a 	or	r2,r2,r22
 200adcc:	11003fcc 	andi	r4,r2,255
 200add0:	01402004 	movi	r5,128
 200add4:	a807883a 	mov	r3,r21
 200add8:	2140131e 	bne	r4,r5,200ae28 <__pack_d+0x210>
 200addc:	1140400c 	andi	r5,r2,256
 200ade0:	28000426 	beq	r5,zero,200adf4 <__pack_d+0x1dc>
 200ade4:	1109883a 	add	r4,r2,r4
 200ade8:	2085803a 	cmpltu	r2,r4,r2
 200adec:	1547883a 	add	r3,r2,r21
 200adf0:	2005883a 	mov	r2,r4
 200adf4:	1808963a 	slli	r4,r3,24
 200adf8:	1004d23a 	srli	r2,r2,8
 200adfc:	1820913a 	slli	r16,r3,4
 200ae00:	01440034 	movhi	r5,4096
 200ae04:	297fffc4 	addi	r5,r5,-1
 200ae08:	2084b03a 	or	r2,r4,r2
 200ae0c:	8020d33a 	srli	r16,r16,12
 200ae10:	01000044 	movi	r4,1
 200ae14:	28ffaf36 	bltu	r5,r3,200acd4 <__pack_d+0xbc>
 200ae18:	0009883a 	mov	r4,zero
 200ae1c:	003fad06 	br	200acd4 <__pack_d+0xbc>
 200ae20:	0005883a 	mov	r2,zero
 200ae24:	0007883a 	mov	r3,zero
 200ae28:	11001fc4 	addi	r4,r2,127
 200ae2c:	2085803a 	cmpltu	r2,r4,r2
 200ae30:	10c7883a 	add	r3,r2,r3
 200ae34:	2005883a 	mov	r2,r4
 200ae38:	003fee06 	br	200adf4 <__pack_d+0x1dc>

0200ae3c <__unpack_d>:
 200ae3c:	21800117 	ldw	r6,4(r4)
 200ae40:	20c00017 	ldw	r3,0(r4)
 200ae44:	3004d7fa 	srli	r2,r6,31
 200ae48:	3008d53a 	srli	r4,r6,20
 200ae4c:	28800115 	stw	r2,4(r5)
 200ae50:	2101ffcc 	andi	r4,r4,2047
 200ae54:	00800434 	movhi	r2,16
 200ae58:	10bfffc4 	addi	r2,r2,-1
 200ae5c:	3084703a 	and	r2,r6,r2
 200ae60:	20001a1e 	bne	r4,zero,200aecc <__unpack_d+0x90>
 200ae64:	1888b03a 	or	r4,r3,r2
 200ae68:	20002626 	beq	r4,zero,200af04 <__unpack_d+0xc8>
 200ae6c:	1808d63a 	srli	r4,r3,24
 200ae70:	1004923a 	slli	r2,r2,8
 200ae74:	01bf0084 	movi	r6,-1022
 200ae78:	29800215 	stw	r6,8(r5)
 200ae7c:	2084b03a 	or	r2,r4,r2
 200ae80:	010000c4 	movi	r4,3
 200ae84:	29000015 	stw	r4,0(r5)
 200ae88:	02040034 	movhi	r8,4096
 200ae8c:	423fffc4 	addi	r8,r8,-1
 200ae90:	1806923a 	slli	r3,r3,8
 200ae94:	40801836 	bltu	r8,r2,200aef8 <__unpack_d+0xbc>
 200ae98:	013f0044 	movi	r4,-1023
 200ae9c:	18cd883a 	add	r6,r3,r3
 200aea0:	30c7803a 	cmpltu	r3,r6,r3
 200aea4:	1085883a 	add	r2,r2,r2
 200aea8:	1885883a 	add	r2,r3,r2
 200aeac:	200f883a 	mov	r7,r4
 200aeb0:	3007883a 	mov	r3,r6
 200aeb4:	213fffc4 	addi	r4,r4,-1
 200aeb8:	40bff82e 	bgeu	r8,r2,200ae9c <__unpack_d+0x60>
 200aebc:	29c00215 	stw	r7,8(r5)
 200aec0:	28c00315 	stw	r3,12(r5)
 200aec4:	28800415 	stw	r2,16(r5)
 200aec8:	f800283a 	ret
 200aecc:	01c1ffc4 	movi	r7,2047
 200aed0:	21c00f26 	beq	r4,r7,200af10 <__unpack_d+0xd4>
 200aed4:	180cd63a 	srli	r6,r3,24
 200aed8:	1004923a 	slli	r2,r2,8
 200aedc:	213f0044 	addi	r4,r4,-1023
 200aee0:	1806923a 	slli	r3,r3,8
 200aee4:	3084b03a 	or	r2,r6,r2
 200aee8:	29000215 	stw	r4,8(r5)
 200aeec:	010000c4 	movi	r4,3
 200aef0:	10840034 	orhi	r2,r2,4096
 200aef4:	29000015 	stw	r4,0(r5)
 200aef8:	28c00315 	stw	r3,12(r5)
 200aefc:	28800415 	stw	r2,16(r5)
 200af00:	f800283a 	ret
 200af04:	00800084 	movi	r2,2
 200af08:	28800015 	stw	r2,0(r5)
 200af0c:	f800283a 	ret
 200af10:	1888b03a 	or	r4,r3,r2
 200af14:	20000526 	beq	r4,zero,200af2c <__unpack_d+0xf0>
 200af18:	3180022c 	andhi	r6,r6,8
 200af1c:	30000626 	beq	r6,zero,200af38 <__unpack_d+0xfc>
 200af20:	01000044 	movi	r4,1
 200af24:	29000015 	stw	r4,0(r5)
 200af28:	003ff306 	br	200aef8 <__unpack_d+0xbc>
 200af2c:	00800104 	movi	r2,4
 200af30:	28800015 	stw	r2,0(r5)
 200af34:	f800283a 	ret
 200af38:	28000015 	stw	zero,0(r5)
 200af3c:	003fee06 	br	200aef8 <__unpack_d+0xbc>

0200af40 <__fpcmp_parts_d>:
 200af40:	20c00017 	ldw	r3,0(r4)
 200af44:	00800044 	movi	r2,1
 200af48:	10c0142e 	bgeu	r2,r3,200af9c <__fpcmp_parts_d+0x5c>
 200af4c:	29800017 	ldw	r6,0(r5)
 200af50:	1180122e 	bgeu	r2,r6,200af9c <__fpcmp_parts_d+0x5c>
 200af54:	01c00104 	movi	r7,4
 200af58:	19c02826 	beq	r3,r7,200affc <__fpcmp_parts_d+0xbc>
 200af5c:	31c00926 	beq	r6,r7,200af84 <__fpcmp_parts_d+0x44>
 200af60:	01c00084 	movi	r7,2
 200af64:	19c00626 	beq	r3,r7,200af80 <__fpcmp_parts_d+0x40>
 200af68:	31c00a26 	beq	r6,r7,200af94 <__fpcmp_parts_d+0x54>
 200af6c:	20c00117 	ldw	r3,4(r4)
 200af70:	29800117 	ldw	r6,4(r5)
 200af74:	19800b26 	beq	r3,r6,200afa4 <__fpcmp_parts_d+0x64>
 200af78:	1800041e 	bne	r3,zero,200af8c <__fpcmp_parts_d+0x4c>
 200af7c:	f800283a 	ret
 200af80:	30c01a26 	beq	r6,r3,200afec <__fpcmp_parts_d+0xac>
 200af84:	28800117 	ldw	r2,4(r5)
 200af88:	1000041e 	bne	r2,zero,200af9c <__fpcmp_parts_d+0x5c>
 200af8c:	00bfffc4 	movi	r2,-1
 200af90:	f800283a 	ret
 200af94:	20800117 	ldw	r2,4(r4)
 200af98:	103ffc1e 	bne	r2,zero,200af8c <__fpcmp_parts_d+0x4c>
 200af9c:	00800044 	movi	r2,1
 200afa0:	f800283a 	ret
 200afa4:	21c00217 	ldw	r7,8(r4)
 200afa8:	29800217 	ldw	r6,8(r5)
 200afac:	31c0020e 	bge	r6,r7,200afb8 <__fpcmp_parts_d+0x78>
 200afb0:	183ff61e 	bne	r3,zero,200af8c <__fpcmp_parts_d+0x4c>
 200afb4:	f800283a 	ret
 200afb8:	39800a16 	blt	r7,r6,200afe4 <__fpcmp_parts_d+0xa4>
 200afbc:	20800417 	ldw	r2,16(r4)
 200afc0:	29800417 	ldw	r6,16(r5)
 200afc4:	21c00317 	ldw	r7,12(r4)
 200afc8:	29000317 	ldw	r4,12(r5)
 200afcc:	30800936 	bltu	r6,r2,200aff4 <__fpcmp_parts_d+0xb4>
 200afd0:	1180011e 	bne	r2,r6,200afd8 <__fpcmp_parts_d+0x98>
 200afd4:	21c00736 	bltu	r4,r7,200aff4 <__fpcmp_parts_d+0xb4>
 200afd8:	11800236 	bltu	r2,r6,200afe4 <__fpcmp_parts_d+0xa4>
 200afdc:	3080031e 	bne	r6,r2,200afec <__fpcmp_parts_d+0xac>
 200afe0:	3900022e 	bgeu	r7,r4,200afec <__fpcmp_parts_d+0xac>
 200afe4:	183fe926 	beq	r3,zero,200af8c <__fpcmp_parts_d+0x4c>
 200afe8:	003fec06 	br	200af9c <__fpcmp_parts_d+0x5c>
 200afec:	0005883a 	mov	r2,zero
 200aff0:	f800283a 	ret
 200aff4:	183fe926 	beq	r3,zero,200af9c <__fpcmp_parts_d+0x5c>
 200aff8:	003fe406 	br	200af8c <__fpcmp_parts_d+0x4c>
 200affc:	30ffe51e 	bne	r6,r3,200af94 <__fpcmp_parts_d+0x54>
 200b000:	28c00117 	ldw	r3,4(r5)
 200b004:	20800117 	ldw	r2,4(r4)
 200b008:	1885c83a 	sub	r2,r3,r2
 200b00c:	f800283a 	ret

0200b010 <__lshrdi3>:
 200b010:	2005883a 	mov	r2,r4
 200b014:	2807883a 	mov	r3,r5
 200b018:	30000826 	beq	r6,zero,200b03c <__lshrdi3+0x2c>
 200b01c:	01000804 	movi	r4,32
 200b020:	2189c83a 	sub	r4,r4,r6
 200b024:	0100060e 	bge	zero,r4,200b040 <__lshrdi3+0x30>
 200b028:	1184d83a 	srl	r2,r2,r6
 200b02c:	2908983a 	sll	r4,r5,r4
 200b030:	298cd83a 	srl	r6,r5,r6
 200b034:	2084b03a 	or	r2,r4,r2
 200b038:	3007883a 	mov	r3,r6
 200b03c:	f800283a 	ret
 200b040:	0105c83a 	sub	r2,zero,r4
 200b044:	000d883a 	mov	r6,zero
 200b048:	2884d83a 	srl	r2,r5,r2
 200b04c:	3007883a 	mov	r3,r6
 200b050:	003ffa06 	br	200b03c <__lshrdi3+0x2c>

0200b054 <__ashldi3>:
 200b054:	2005883a 	mov	r2,r4
 200b058:	2807883a 	mov	r3,r5
 200b05c:	30000826 	beq	r6,zero,200b080 <__ashldi3+0x2c>
 200b060:	01000804 	movi	r4,32
 200b064:	2189c83a 	sub	r4,r4,r6
 200b068:	0100060e 	bge	zero,r4,200b084 <__ashldi3+0x30>
 200b06c:	1108d83a 	srl	r4,r2,r4
 200b070:	2986983a 	sll	r3,r5,r6
 200b074:	118c983a 	sll	r6,r2,r6
 200b078:	20c6b03a 	or	r3,r4,r3
 200b07c:	3005883a 	mov	r2,r6
 200b080:	f800283a 	ret
 200b084:	0107c83a 	sub	r3,zero,r4
 200b088:	000d883a 	mov	r6,zero
 200b08c:	10c6983a 	sll	r3,r2,r3
 200b090:	3005883a 	mov	r2,r6
 200b094:	003ffa06 	br	200b080 <__ashldi3+0x2c>

0200b098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b098:	defffe04 	addi	sp,sp,-8
 200b09c:	dfc00115 	stw	ra,4(sp)
 200b0a0:	df000015 	stw	fp,0(sp)
 200b0a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b0a8:	00808074 	movhi	r2,513
 200b0ac:	1085bb04 	addi	r2,r2,5868
 200b0b0:	10800017 	ldw	r2,0(r2)
 200b0b4:	10000526 	beq	r2,zero,200b0cc <alt_get_errno+0x34>
 200b0b8:	00808074 	movhi	r2,513
 200b0bc:	1085bb04 	addi	r2,r2,5868
 200b0c0:	10800017 	ldw	r2,0(r2)
 200b0c4:	103ee83a 	callr	r2
 200b0c8:	00000206 	br	200b0d4 <alt_get_errno+0x3c>
 200b0cc:	00808074 	movhi	r2,513
 200b0d0:	1085c704 	addi	r2,r2,5916
}
 200b0d4:	e037883a 	mov	sp,fp
 200b0d8:	dfc00117 	ldw	ra,4(sp)
 200b0dc:	df000017 	ldw	fp,0(sp)
 200b0e0:	dec00204 	addi	sp,sp,8
 200b0e4:	f800283a 	ret

0200b0e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200b0e8:	defffb04 	addi	sp,sp,-20
 200b0ec:	dfc00415 	stw	ra,16(sp)
 200b0f0:	df000315 	stw	fp,12(sp)
 200b0f4:	df000304 	addi	fp,sp,12
 200b0f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200b0fc:	e0bfff17 	ldw	r2,-4(fp)
 200b100:	10000716 	blt	r2,zero,200b120 <close+0x38>
 200b104:	e13fff17 	ldw	r4,-4(fp)
 200b108:	01400304 	movi	r5,12
 200b10c:	20012bc0 	call	20012bc <__mulsi3>
 200b110:	00c08074 	movhi	r3,513
 200b114:	18c0d404 	addi	r3,r3,848
 200b118:	10c5883a 	add	r2,r2,r3
 200b11c:	00000106 	br	200b124 <close+0x3c>
 200b120:	0005883a 	mov	r2,zero
 200b124:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200b128:	e0bffd17 	ldw	r2,-12(fp)
 200b12c:	10001826 	beq	r2,zero,200b190 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200b130:	e0bffd17 	ldw	r2,-12(fp)
 200b134:	10800017 	ldw	r2,0(r2)
 200b138:	10800417 	ldw	r2,16(r2)
 200b13c:	10000626 	beq	r2,zero,200b158 <close+0x70>
 200b140:	e0bffd17 	ldw	r2,-12(fp)
 200b144:	10800017 	ldw	r2,0(r2)
 200b148:	10800417 	ldw	r2,16(r2)
 200b14c:	e13ffd17 	ldw	r4,-12(fp)
 200b150:	103ee83a 	callr	r2
 200b154:	00000106 	br	200b15c <close+0x74>
 200b158:	0005883a 	mov	r2,zero
 200b15c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200b160:	e13fff17 	ldw	r4,-4(fp)
 200b164:	200b98c0 	call	200b98c <alt_release_fd>
    if (rval < 0)
 200b168:	e0bffe17 	ldw	r2,-8(fp)
 200b16c:	1000060e 	bge	r2,zero,200b188 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 200b170:	200b0980 	call	200b098 <alt_get_errno>
 200b174:	e0fffe17 	ldw	r3,-8(fp)
 200b178:	00c7c83a 	sub	r3,zero,r3
 200b17c:	10c00015 	stw	r3,0(r2)
      return -1;
 200b180:	00bfffc4 	movi	r2,-1
 200b184:	00000606 	br	200b1a0 <close+0xb8>
    }
    return 0;
 200b188:	0005883a 	mov	r2,zero
 200b18c:	00000406 	br	200b1a0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b190:	200b0980 	call	200b098 <alt_get_errno>
 200b194:	00c01444 	movi	r3,81
 200b198:	10c00015 	stw	r3,0(r2)
    return -1;
 200b19c:	00bfffc4 	movi	r2,-1
  }
}
 200b1a0:	e037883a 	mov	sp,fp
 200b1a4:	dfc00117 	ldw	ra,4(sp)
 200b1a8:	df000017 	ldw	fp,0(sp)
 200b1ac:	dec00204 	addi	sp,sp,8
 200b1b0:	f800283a 	ret

0200b1b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200b1b4:	defffc04 	addi	sp,sp,-16
 200b1b8:	df000315 	stw	fp,12(sp)
 200b1bc:	df000304 	addi	fp,sp,12
 200b1c0:	e13ffd15 	stw	r4,-12(fp)
 200b1c4:	e17ffe15 	stw	r5,-8(fp)
 200b1c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200b1cc:	e0bfff17 	ldw	r2,-4(fp)
}
 200b1d0:	e037883a 	mov	sp,fp
 200b1d4:	df000017 	ldw	fp,0(sp)
 200b1d8:	dec00104 	addi	sp,sp,4
 200b1dc:	f800283a 	ret

0200b1e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b1e0:	defffe04 	addi	sp,sp,-8
 200b1e4:	dfc00115 	stw	ra,4(sp)
 200b1e8:	df000015 	stw	fp,0(sp)
 200b1ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b1f0:	00808074 	movhi	r2,513
 200b1f4:	1085bb04 	addi	r2,r2,5868
 200b1f8:	10800017 	ldw	r2,0(r2)
 200b1fc:	10000526 	beq	r2,zero,200b214 <alt_get_errno+0x34>
 200b200:	00808074 	movhi	r2,513
 200b204:	1085bb04 	addi	r2,r2,5868
 200b208:	10800017 	ldw	r2,0(r2)
 200b20c:	103ee83a 	callr	r2
 200b210:	00000206 	br	200b21c <alt_get_errno+0x3c>
 200b214:	00808074 	movhi	r2,513
 200b218:	1085c704 	addi	r2,r2,5916
}
 200b21c:	e037883a 	mov	sp,fp
 200b220:	dfc00117 	ldw	ra,4(sp)
 200b224:	df000017 	ldw	fp,0(sp)
 200b228:	dec00204 	addi	sp,sp,8
 200b22c:	f800283a 	ret

0200b230 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200b230:	defffb04 	addi	sp,sp,-20
 200b234:	dfc00415 	stw	ra,16(sp)
 200b238:	df000315 	stw	fp,12(sp)
 200b23c:	df000304 	addi	fp,sp,12
 200b240:	e13ffe15 	stw	r4,-8(fp)
 200b244:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b248:	e0bffe17 	ldw	r2,-8(fp)
 200b24c:	10000716 	blt	r2,zero,200b26c <fstat+0x3c>
 200b250:	e13ffe17 	ldw	r4,-8(fp)
 200b254:	01400304 	movi	r5,12
 200b258:	20012bc0 	call	20012bc <__mulsi3>
 200b25c:	00c08074 	movhi	r3,513
 200b260:	18c0d404 	addi	r3,r3,848
 200b264:	10c5883a 	add	r2,r2,r3
 200b268:	00000106 	br	200b270 <fstat+0x40>
 200b26c:	0005883a 	mov	r2,zero
 200b270:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200b274:	e0bffd17 	ldw	r2,-12(fp)
 200b278:	10001026 	beq	r2,zero,200b2bc <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200b27c:	e0bffd17 	ldw	r2,-12(fp)
 200b280:	10800017 	ldw	r2,0(r2)
 200b284:	10800817 	ldw	r2,32(r2)
 200b288:	10000726 	beq	r2,zero,200b2a8 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 200b28c:	e0bffd17 	ldw	r2,-12(fp)
 200b290:	10800017 	ldw	r2,0(r2)
 200b294:	10800817 	ldw	r2,32(r2)
 200b298:	e13ffd17 	ldw	r4,-12(fp)
 200b29c:	e17fff17 	ldw	r5,-4(fp)
 200b2a0:	103ee83a 	callr	r2
 200b2a4:	00000906 	br	200b2cc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200b2a8:	e0bfff17 	ldw	r2,-4(fp)
 200b2ac:	00c80004 	movi	r3,8192
 200b2b0:	10c00115 	stw	r3,4(r2)
      return 0;
 200b2b4:	0005883a 	mov	r2,zero
 200b2b8:	00000406 	br	200b2cc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b2bc:	200b1e00 	call	200b1e0 <alt_get_errno>
 200b2c0:	00c01444 	movi	r3,81
 200b2c4:	10c00015 	stw	r3,0(r2)
    return -1;
 200b2c8:	00bfffc4 	movi	r2,-1
  }
}
 200b2cc:	e037883a 	mov	sp,fp
 200b2d0:	dfc00117 	ldw	ra,4(sp)
 200b2d4:	df000017 	ldw	fp,0(sp)
 200b2d8:	dec00204 	addi	sp,sp,8
 200b2dc:	f800283a 	ret

0200b2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b2e0:	defffe04 	addi	sp,sp,-8
 200b2e4:	dfc00115 	stw	ra,4(sp)
 200b2e8:	df000015 	stw	fp,0(sp)
 200b2ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b2f0:	00808074 	movhi	r2,513
 200b2f4:	1085bb04 	addi	r2,r2,5868
 200b2f8:	10800017 	ldw	r2,0(r2)
 200b2fc:	10000526 	beq	r2,zero,200b314 <alt_get_errno+0x34>
 200b300:	00808074 	movhi	r2,513
 200b304:	1085bb04 	addi	r2,r2,5868
 200b308:	10800017 	ldw	r2,0(r2)
 200b30c:	103ee83a 	callr	r2
 200b310:	00000206 	br	200b31c <alt_get_errno+0x3c>
 200b314:	00808074 	movhi	r2,513
 200b318:	1085c704 	addi	r2,r2,5916
}
 200b31c:	e037883a 	mov	sp,fp
 200b320:	dfc00117 	ldw	ra,4(sp)
 200b324:	df000017 	ldw	fp,0(sp)
 200b328:	dec00204 	addi	sp,sp,8
 200b32c:	f800283a 	ret

0200b330 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200b330:	deffed04 	addi	sp,sp,-76
 200b334:	dfc01215 	stw	ra,72(sp)
 200b338:	df001115 	stw	fp,68(sp)
 200b33c:	df001104 	addi	fp,sp,68
 200b340:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b344:	e0bfff17 	ldw	r2,-4(fp)
 200b348:	10000716 	blt	r2,zero,200b368 <isatty+0x38>
 200b34c:	e13fff17 	ldw	r4,-4(fp)
 200b350:	01400304 	movi	r5,12
 200b354:	20012bc0 	call	20012bc <__mulsi3>
 200b358:	00c08074 	movhi	r3,513
 200b35c:	18c0d404 	addi	r3,r3,848
 200b360:	10c5883a 	add	r2,r2,r3
 200b364:	00000106 	br	200b36c <isatty+0x3c>
 200b368:	0005883a 	mov	r2,zero
 200b36c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200b370:	e0bfef17 	ldw	r2,-68(fp)
 200b374:	10000e26 	beq	r2,zero,200b3b0 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200b378:	e0bfef17 	ldw	r2,-68(fp)
 200b37c:	10800017 	ldw	r2,0(r2)
 200b380:	10800817 	ldw	r2,32(r2)
 200b384:	1000021e 	bne	r2,zero,200b390 <isatty+0x60>
    {
      return 1;
 200b388:	00800044 	movi	r2,1
 200b38c:	00000c06 	br	200b3c0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200b390:	e0bff004 	addi	r2,fp,-64
 200b394:	e13fff17 	ldw	r4,-4(fp)
 200b398:	100b883a 	mov	r5,r2
 200b39c:	200b2300 	call	200b230 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200b3a0:	e0bff117 	ldw	r2,-60(fp)
 200b3a4:	10880020 	cmpeqi	r2,r2,8192
 200b3a8:	10803fcc 	andi	r2,r2,255
 200b3ac:	00000406 	br	200b3c0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200b3b0:	200b2e00 	call	200b2e0 <alt_get_errno>
 200b3b4:	00c01444 	movi	r3,81
 200b3b8:	10c00015 	stw	r3,0(r2)
    return 0;
 200b3bc:	0005883a 	mov	r2,zero
  }
}
 200b3c0:	e037883a 	mov	sp,fp
 200b3c4:	dfc00117 	ldw	ra,4(sp)
 200b3c8:	df000017 	ldw	fp,0(sp)
 200b3cc:	dec00204 	addi	sp,sp,8
 200b3d0:	f800283a 	ret

0200b3d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b3d4:	defffe04 	addi	sp,sp,-8
 200b3d8:	dfc00115 	stw	ra,4(sp)
 200b3dc:	df000015 	stw	fp,0(sp)
 200b3e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b3e4:	00808074 	movhi	r2,513
 200b3e8:	1085bb04 	addi	r2,r2,5868
 200b3ec:	10800017 	ldw	r2,0(r2)
 200b3f0:	10000526 	beq	r2,zero,200b408 <alt_get_errno+0x34>
 200b3f4:	00808074 	movhi	r2,513
 200b3f8:	1085bb04 	addi	r2,r2,5868
 200b3fc:	10800017 	ldw	r2,0(r2)
 200b400:	103ee83a 	callr	r2
 200b404:	00000206 	br	200b410 <alt_get_errno+0x3c>
 200b408:	00808074 	movhi	r2,513
 200b40c:	1085c704 	addi	r2,r2,5916
}
 200b410:	e037883a 	mov	sp,fp
 200b414:	dfc00117 	ldw	ra,4(sp)
 200b418:	df000017 	ldw	fp,0(sp)
 200b41c:	dec00204 	addi	sp,sp,8
 200b420:	f800283a 	ret

0200b424 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200b424:	defff904 	addi	sp,sp,-28
 200b428:	dfc00615 	stw	ra,24(sp)
 200b42c:	df000515 	stw	fp,20(sp)
 200b430:	df000504 	addi	fp,sp,20
 200b434:	e13ffd15 	stw	r4,-12(fp)
 200b438:	e17ffe15 	stw	r5,-8(fp)
 200b43c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200b440:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b444:	e0bffd17 	ldw	r2,-12(fp)
 200b448:	10000716 	blt	r2,zero,200b468 <lseek+0x44>
 200b44c:	e13ffd17 	ldw	r4,-12(fp)
 200b450:	01400304 	movi	r5,12
 200b454:	20012bc0 	call	20012bc <__mulsi3>
 200b458:	00c08074 	movhi	r3,513
 200b45c:	18c0d404 	addi	r3,r3,848
 200b460:	10c5883a 	add	r2,r2,r3
 200b464:	00000106 	br	200b46c <lseek+0x48>
 200b468:	0005883a 	mov	r2,zero
 200b46c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200b470:	e0bffc17 	ldw	r2,-16(fp)
 200b474:	10001026 	beq	r2,zero,200b4b8 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200b478:	e0bffc17 	ldw	r2,-16(fp)
 200b47c:	10800017 	ldw	r2,0(r2)
 200b480:	10800717 	ldw	r2,28(r2)
 200b484:	10000926 	beq	r2,zero,200b4ac <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200b488:	e0bffc17 	ldw	r2,-16(fp)
 200b48c:	10800017 	ldw	r2,0(r2)
 200b490:	10800717 	ldw	r2,28(r2)
 200b494:	e13ffc17 	ldw	r4,-16(fp)
 200b498:	e17ffe17 	ldw	r5,-8(fp)
 200b49c:	e1bfff17 	ldw	r6,-4(fp)
 200b4a0:	103ee83a 	callr	r2
 200b4a4:	e0bffb15 	stw	r2,-20(fp)
 200b4a8:	00000506 	br	200b4c0 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200b4ac:	00bfde84 	movi	r2,-134
 200b4b0:	e0bffb15 	stw	r2,-20(fp)
 200b4b4:	00000206 	br	200b4c0 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 200b4b8:	00bfebc4 	movi	r2,-81
 200b4bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200b4c0:	e0bffb17 	ldw	r2,-20(fp)
 200b4c4:	1000060e 	bge	r2,zero,200b4e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 200b4c8:	200b3d40 	call	200b3d4 <alt_get_errno>
 200b4cc:	e0fffb17 	ldw	r3,-20(fp)
 200b4d0:	00c7c83a 	sub	r3,zero,r3
 200b4d4:	10c00015 	stw	r3,0(r2)
    rc = -1;
 200b4d8:	00bfffc4 	movi	r2,-1
 200b4dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200b4e0:	e0bffb17 	ldw	r2,-20(fp)
}
 200b4e4:	e037883a 	mov	sp,fp
 200b4e8:	dfc00117 	ldw	ra,4(sp)
 200b4ec:	df000017 	ldw	fp,0(sp)
 200b4f0:	dec00204 	addi	sp,sp,8
 200b4f4:	f800283a 	ret

0200b4f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200b4f8:	defffd04 	addi	sp,sp,-12
 200b4fc:	dfc00215 	stw	ra,8(sp)
 200b500:	df000115 	stw	fp,4(sp)
 200b504:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200b508:	0009883a 	mov	r4,zero
 200b50c:	200bc640 	call	200bc64 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200b510:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200b514:	200bc980 	call	200bc98 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200b518:	01008074 	movhi	r4,513
 200b51c:	213eb204 	addi	r4,r4,-1336
 200b520:	01408074 	movhi	r5,513
 200b524:	297eb204 	addi	r5,r5,-1336
 200b528:	01808074 	movhi	r6,513
 200b52c:	31beb204 	addi	r6,r6,-1336
 200b530:	200eebc0 	call	200eebc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200b534:	200e72c0 	call	200e72c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200b538:	01008074 	movhi	r4,513
 200b53c:	2139e204 	addi	r4,r4,-6264
 200b540:	200f2f80 	call	200f2f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200b544:	d1201f17 	ldw	r4,-32644(gp)
 200b548:	d0e02017 	ldw	r3,-32640(gp)
 200b54c:	d0a02117 	ldw	r2,-32636(gp)
 200b550:	180b883a 	mov	r5,r3
 200b554:	100d883a 	mov	r6,r2
 200b558:	2000b200 	call	2000b20 <main>
 200b55c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200b560:	01000044 	movi	r4,1
 200b564:	200b0e80 	call	200b0e8 <close>
  exit (result);
 200b568:	e13fff17 	ldw	r4,-4(fp)
 200b56c:	200f30c0 	call	200f30c <exit>

0200b570 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200b570:	defffe04 	addi	sp,sp,-8
 200b574:	df000115 	stw	fp,4(sp)
 200b578:	df000104 	addi	fp,sp,4
 200b57c:	e13fff15 	stw	r4,-4(fp)
}
 200b580:	e037883a 	mov	sp,fp
 200b584:	df000017 	ldw	fp,0(sp)
 200b588:	dec00104 	addi	sp,sp,4
 200b58c:	f800283a 	ret

0200b590 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200b590:	defffe04 	addi	sp,sp,-8
 200b594:	df000115 	stw	fp,4(sp)
 200b598:	df000104 	addi	fp,sp,4
 200b59c:	e13fff15 	stw	r4,-4(fp)
}
 200b5a0:	e037883a 	mov	sp,fp
 200b5a4:	df000017 	ldw	fp,0(sp)
 200b5a8:	dec00104 	addi	sp,sp,4
 200b5ac:	f800283a 	ret

0200b5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b5b0:	defffe04 	addi	sp,sp,-8
 200b5b4:	dfc00115 	stw	ra,4(sp)
 200b5b8:	df000015 	stw	fp,0(sp)
 200b5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b5c0:	00808074 	movhi	r2,513
 200b5c4:	1085bb04 	addi	r2,r2,5868
 200b5c8:	10800017 	ldw	r2,0(r2)
 200b5cc:	10000526 	beq	r2,zero,200b5e4 <alt_get_errno+0x34>
 200b5d0:	00808074 	movhi	r2,513
 200b5d4:	1085bb04 	addi	r2,r2,5868
 200b5d8:	10800017 	ldw	r2,0(r2)
 200b5dc:	103ee83a 	callr	r2
 200b5e0:	00000206 	br	200b5ec <alt_get_errno+0x3c>
 200b5e4:	00808074 	movhi	r2,513
 200b5e8:	1085c704 	addi	r2,r2,5916
}
 200b5ec:	e037883a 	mov	sp,fp
 200b5f0:	dfc00117 	ldw	ra,4(sp)
 200b5f4:	df000017 	ldw	fp,0(sp)
 200b5f8:	dec00204 	addi	sp,sp,8
 200b5fc:	f800283a 	ret

0200b600 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200b600:	defffb04 	addi	sp,sp,-20
 200b604:	dfc00415 	stw	ra,16(sp)
 200b608:	df000315 	stw	fp,12(sp)
 200b60c:	dc000215 	stw	r16,8(sp)
 200b610:	df000204 	addi	fp,sp,8
 200b614:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200b618:	e0bfff17 	ldw	r2,-4(fp)
 200b61c:	10800217 	ldw	r2,8(r2)
 200b620:	10d00034 	orhi	r3,r2,16384
 200b624:	e0bfff17 	ldw	r2,-4(fp)
 200b628:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200b62c:	e03ffe15 	stw	zero,-8(fp)
 200b630:	00002206 	br	200b6bc <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200b634:	04008074 	movhi	r16,513
 200b638:	8400d404 	addi	r16,r16,848
 200b63c:	e0bffe17 	ldw	r2,-8(fp)
 200b640:	1009883a 	mov	r4,r2
 200b644:	01400304 	movi	r5,12
 200b648:	20012bc0 	call	20012bc <__mulsi3>
 200b64c:	8085883a 	add	r2,r16,r2
 200b650:	10c00017 	ldw	r3,0(r2)
 200b654:	e0bfff17 	ldw	r2,-4(fp)
 200b658:	10800017 	ldw	r2,0(r2)
 200b65c:	1880141e 	bne	r3,r2,200b6b0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200b660:	04008074 	movhi	r16,513
 200b664:	8400d404 	addi	r16,r16,848
 200b668:	e0bffe17 	ldw	r2,-8(fp)
 200b66c:	1009883a 	mov	r4,r2
 200b670:	01400304 	movi	r5,12
 200b674:	20012bc0 	call	20012bc <__mulsi3>
 200b678:	8085883a 	add	r2,r16,r2
 200b67c:	10800204 	addi	r2,r2,8
 200b680:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200b684:	10000a0e 	bge	r2,zero,200b6b0 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200b688:	e13ffe17 	ldw	r4,-8(fp)
 200b68c:	01400304 	movi	r5,12
 200b690:	20012bc0 	call	20012bc <__mulsi3>
 200b694:	00c08074 	movhi	r3,513
 200b698:	18c0d404 	addi	r3,r3,848
 200b69c:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200b6a0:	e0bfff17 	ldw	r2,-4(fp)
 200b6a4:	18800226 	beq	r3,r2,200b6b0 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200b6a8:	00bffcc4 	movi	r2,-13
 200b6ac:	00000a06 	br	200b6d8 <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200b6b0:	e0bffe17 	ldw	r2,-8(fp)
 200b6b4:	10800044 	addi	r2,r2,1
 200b6b8:	e0bffe15 	stw	r2,-8(fp)
 200b6bc:	00808074 	movhi	r2,513
 200b6c0:	1085ba04 	addi	r2,r2,5864
 200b6c4:	10800017 	ldw	r2,0(r2)
 200b6c8:	1007883a 	mov	r3,r2
 200b6cc:	e0bffe17 	ldw	r2,-8(fp)
 200b6d0:	18bfd82e 	bgeu	r3,r2,200b634 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200b6d4:	0005883a 	mov	r2,zero
}
 200b6d8:	e037883a 	mov	sp,fp
 200b6dc:	dfc00217 	ldw	ra,8(sp)
 200b6e0:	df000117 	ldw	fp,4(sp)
 200b6e4:	dc000017 	ldw	r16,0(sp)
 200b6e8:	dec00304 	addi	sp,sp,12
 200b6ec:	f800283a 	ret

0200b6f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200b6f0:	defff604 	addi	sp,sp,-40
 200b6f4:	dfc00915 	stw	ra,36(sp)
 200b6f8:	df000815 	stw	fp,32(sp)
 200b6fc:	df000804 	addi	fp,sp,32
 200b700:	e13ffd15 	stw	r4,-12(fp)
 200b704:	e17ffe15 	stw	r5,-8(fp)
 200b708:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200b70c:	00bfffc4 	movi	r2,-1
 200b710:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200b714:	00bffb44 	movi	r2,-19
 200b718:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200b71c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200b720:	e13ffd17 	ldw	r4,-12(fp)
 200b724:	01408074 	movhi	r5,513
 200b728:	2945b804 	addi	r5,r5,5856
 200b72c:	200e7e40 	call	200e7e4 <alt_find_dev>
 200b730:	e0bff815 	stw	r2,-32(fp)
 200b734:	e0bff817 	ldw	r2,-32(fp)
 200b738:	1000051e 	bne	r2,zero,200b750 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200b73c:	e13ffd17 	ldw	r4,-12(fp)
 200b740:	200e8740 	call	200e874 <alt_find_file>
 200b744:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200b748:	00800044 	movi	r2,1
 200b74c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200b750:	e0bff817 	ldw	r2,-32(fp)
 200b754:	10002a26 	beq	r2,zero,200b800 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200b758:	e13ff817 	ldw	r4,-32(fp)
 200b75c:	200ea400 	call	200ea40 <alt_get_fd>
 200b760:	e0bff915 	stw	r2,-28(fp)
 200b764:	e0bff917 	ldw	r2,-28(fp)
 200b768:	1000030e 	bge	r2,zero,200b778 <open+0x88>
    {
      status = index;
 200b76c:	e0bff917 	ldw	r2,-28(fp)
 200b770:	e0bffa15 	stw	r2,-24(fp)
 200b774:	00002406 	br	200b808 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 200b778:	e13ff917 	ldw	r4,-28(fp)
 200b77c:	01400304 	movi	r5,12
 200b780:	20012bc0 	call	20012bc <__mulsi3>
 200b784:	00c08074 	movhi	r3,513
 200b788:	18c0d404 	addi	r3,r3,848
 200b78c:	10c5883a 	add	r2,r2,r3
 200b790:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200b794:	e0fffe17 	ldw	r3,-8(fp)
 200b798:	00900034 	movhi	r2,16384
 200b79c:	10bfffc4 	addi	r2,r2,-1
 200b7a0:	1886703a 	and	r3,r3,r2
 200b7a4:	e0bffc17 	ldw	r2,-16(fp)
 200b7a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200b7ac:	e0bffb17 	ldw	r2,-20(fp)
 200b7b0:	1000051e 	bne	r2,zero,200b7c8 <open+0xd8>
 200b7b4:	e13ffc17 	ldw	r4,-16(fp)
 200b7b8:	200b6000 	call	200b600 <alt_file_locked>
 200b7bc:	e0bffa15 	stw	r2,-24(fp)
 200b7c0:	e0bffa17 	ldw	r2,-24(fp)
 200b7c4:	10001016 	blt	r2,zero,200b808 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200b7c8:	e0bff817 	ldw	r2,-32(fp)
 200b7cc:	10800317 	ldw	r2,12(r2)
 200b7d0:	10000826 	beq	r2,zero,200b7f4 <open+0x104>
 200b7d4:	e0bff817 	ldw	r2,-32(fp)
 200b7d8:	10800317 	ldw	r2,12(r2)
 200b7dc:	e13ffc17 	ldw	r4,-16(fp)
 200b7e0:	e17ffd17 	ldw	r5,-12(fp)
 200b7e4:	e1bffe17 	ldw	r6,-8(fp)
 200b7e8:	e1ffff17 	ldw	r7,-4(fp)
 200b7ec:	103ee83a 	callr	r2
 200b7f0:	00000106 	br	200b7f8 <open+0x108>
 200b7f4:	0005883a 	mov	r2,zero
 200b7f8:	e0bffa15 	stw	r2,-24(fp)
 200b7fc:	00000206 	br	200b808 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200b800:	00bffb44 	movi	r2,-19
 200b804:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200b808:	e0bffa17 	ldw	r2,-24(fp)
 200b80c:	1000080e 	bge	r2,zero,200b830 <open+0x140>
  {
    alt_release_fd (index);  
 200b810:	e13ff917 	ldw	r4,-28(fp)
 200b814:	200b98c0 	call	200b98c <alt_release_fd>
    ALT_ERRNO = -status;
 200b818:	200b5b00 	call	200b5b0 <alt_get_errno>
 200b81c:	e0fffa17 	ldw	r3,-24(fp)
 200b820:	00c7c83a 	sub	r3,zero,r3
 200b824:	10c00015 	stw	r3,0(r2)
    return -1;
 200b828:	00bfffc4 	movi	r2,-1
 200b82c:	00000106 	br	200b834 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 200b830:	e0bff917 	ldw	r2,-28(fp)
}
 200b834:	e037883a 	mov	sp,fp
 200b838:	dfc00117 	ldw	ra,4(sp)
 200b83c:	df000017 	ldw	fp,0(sp)
 200b840:	dec00204 	addi	sp,sp,8
 200b844:	f800283a 	ret

0200b848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200b848:	defffe04 	addi	sp,sp,-8
 200b84c:	dfc00115 	stw	ra,4(sp)
 200b850:	df000015 	stw	fp,0(sp)
 200b854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200b858:	00808074 	movhi	r2,513
 200b85c:	1085bb04 	addi	r2,r2,5868
 200b860:	10800017 	ldw	r2,0(r2)
 200b864:	10000526 	beq	r2,zero,200b87c <alt_get_errno+0x34>
 200b868:	00808074 	movhi	r2,513
 200b86c:	1085bb04 	addi	r2,r2,5868
 200b870:	10800017 	ldw	r2,0(r2)
 200b874:	103ee83a 	callr	r2
 200b878:	00000206 	br	200b884 <alt_get_errno+0x3c>
 200b87c:	00808074 	movhi	r2,513
 200b880:	1085c704 	addi	r2,r2,5916
}
 200b884:	e037883a 	mov	sp,fp
 200b888:	dfc00117 	ldw	ra,4(sp)
 200b88c:	df000017 	ldw	fp,0(sp)
 200b890:	dec00204 	addi	sp,sp,8
 200b894:	f800283a 	ret

0200b898 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200b898:	defff904 	addi	sp,sp,-28
 200b89c:	dfc00615 	stw	ra,24(sp)
 200b8a0:	df000515 	stw	fp,20(sp)
 200b8a4:	df000504 	addi	fp,sp,20
 200b8a8:	e13ffd15 	stw	r4,-12(fp)
 200b8ac:	e17ffe15 	stw	r5,-8(fp)
 200b8b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200b8b4:	e0bffd17 	ldw	r2,-12(fp)
 200b8b8:	10000716 	blt	r2,zero,200b8d8 <read+0x40>
 200b8bc:	e13ffd17 	ldw	r4,-12(fp)
 200b8c0:	01400304 	movi	r5,12
 200b8c4:	20012bc0 	call	20012bc <__mulsi3>
 200b8c8:	00c08074 	movhi	r3,513
 200b8cc:	18c0d404 	addi	r3,r3,848
 200b8d0:	10c5883a 	add	r2,r2,r3
 200b8d4:	00000106 	br	200b8dc <read+0x44>
 200b8d8:	0005883a 	mov	r2,zero
 200b8dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200b8e0:	e0bffb17 	ldw	r2,-20(fp)
 200b8e4:	10002026 	beq	r2,zero,200b968 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200b8e8:	e0bffb17 	ldw	r2,-20(fp)
 200b8ec:	10800217 	ldw	r2,8(r2)
 200b8f0:	108000cc 	andi	r2,r2,3
 200b8f4:	10800060 	cmpeqi	r2,r2,1
 200b8f8:	1000171e 	bne	r2,zero,200b958 <read+0xc0>
        (fd->dev->read))
 200b8fc:	e0bffb17 	ldw	r2,-20(fp)
 200b900:	10800017 	ldw	r2,0(r2)
 200b904:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200b908:	10001326 	beq	r2,zero,200b958 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200b90c:	e0bffb17 	ldw	r2,-20(fp)
 200b910:	10800017 	ldw	r2,0(r2)
 200b914:	10c00517 	ldw	r3,20(r2)
 200b918:	e0bfff17 	ldw	r2,-4(fp)
 200b91c:	e13ffb17 	ldw	r4,-20(fp)
 200b920:	e17ffe17 	ldw	r5,-8(fp)
 200b924:	100d883a 	mov	r6,r2
 200b928:	183ee83a 	callr	r3
 200b92c:	e0bffc15 	stw	r2,-16(fp)
 200b930:	e0bffc17 	ldw	r2,-16(fp)
 200b934:	1000060e 	bge	r2,zero,200b950 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 200b938:	200b8480 	call	200b848 <alt_get_errno>
 200b93c:	e0fffc17 	ldw	r3,-16(fp)
 200b940:	00c7c83a 	sub	r3,zero,r3
 200b944:	10c00015 	stw	r3,0(r2)
          return -1;
 200b948:	00bfffc4 	movi	r2,-1
 200b94c:	00000a06 	br	200b978 <read+0xe0>
        }
        return rval;
 200b950:	e0bffc17 	ldw	r2,-16(fp)
 200b954:	00000806 	br	200b978 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200b958:	200b8480 	call	200b848 <alt_get_errno>
 200b95c:	00c00344 	movi	r3,13
 200b960:	10c00015 	stw	r3,0(r2)
 200b964:	00000306 	br	200b974 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200b968:	200b8480 	call	200b848 <alt_get_errno>
 200b96c:	00c01444 	movi	r3,81
 200b970:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200b974:	00bfffc4 	movi	r2,-1
}
 200b978:	e037883a 	mov	sp,fp
 200b97c:	dfc00117 	ldw	ra,4(sp)
 200b980:	df000017 	ldw	fp,0(sp)
 200b984:	dec00204 	addi	sp,sp,8
 200b988:	f800283a 	ret

0200b98c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200b98c:	defffc04 	addi	sp,sp,-16
 200b990:	dfc00315 	stw	ra,12(sp)
 200b994:	df000215 	stw	fp,8(sp)
 200b998:	dc000115 	stw	r16,4(sp)
 200b99c:	df000104 	addi	fp,sp,4
 200b9a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200b9a4:	e0bfff17 	ldw	r2,-4(fp)
 200b9a8:	108000d0 	cmplti	r2,r2,3
 200b9ac:	1000111e 	bne	r2,zero,200b9f4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200b9b0:	04008074 	movhi	r16,513
 200b9b4:	8400d404 	addi	r16,r16,848
 200b9b8:	e0bfff17 	ldw	r2,-4(fp)
 200b9bc:	1009883a 	mov	r4,r2
 200b9c0:	01400304 	movi	r5,12
 200b9c4:	20012bc0 	call	20012bc <__mulsi3>
 200b9c8:	8085883a 	add	r2,r16,r2
 200b9cc:	10800204 	addi	r2,r2,8
 200b9d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200b9d4:	04008074 	movhi	r16,513
 200b9d8:	8400d404 	addi	r16,r16,848
 200b9dc:	e0bfff17 	ldw	r2,-4(fp)
 200b9e0:	1009883a 	mov	r4,r2
 200b9e4:	01400304 	movi	r5,12
 200b9e8:	20012bc0 	call	20012bc <__mulsi3>
 200b9ec:	8085883a 	add	r2,r16,r2
 200b9f0:	10000015 	stw	zero,0(r2)
  }
}
 200b9f4:	e037883a 	mov	sp,fp
 200b9f8:	dfc00217 	ldw	ra,8(sp)
 200b9fc:	df000117 	ldw	fp,4(sp)
 200ba00:	dc000017 	ldw	r16,0(sp)
 200ba04:	dec00304 	addi	sp,sp,12
 200ba08:	f800283a 	ret

0200ba0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200ba0c:	defff904 	addi	sp,sp,-28
 200ba10:	df000615 	stw	fp,24(sp)
 200ba14:	df000604 	addi	fp,sp,24
 200ba18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ba1c:	0005303a 	rdctl	r2,status
 200ba20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ba24:	e0fffc17 	ldw	r3,-16(fp)
 200ba28:	00bfff84 	movi	r2,-2
 200ba2c:	1884703a 	and	r2,r3,r2
 200ba30:	1001703a 	wrctl	status,r2
  
  return context;
 200ba34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200ba38:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200ba3c:	d0a00d17 	ldw	r2,-32716(gp)
 200ba40:	10c000c4 	addi	r3,r2,3
 200ba44:	00bfff04 	movi	r2,-4
 200ba48:	1884703a 	and	r2,r3,r2
 200ba4c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200ba50:	d0e00d17 	ldw	r3,-32716(gp)
 200ba54:	e0bfff17 	ldw	r2,-4(fp)
 200ba58:	1885883a 	add	r2,r3,r2
 200ba5c:	00c10034 	movhi	r3,1024
 200ba60:	18c00004 	addi	r3,r3,0
 200ba64:	1880062e 	bgeu	r3,r2,200ba80 <sbrk+0x74>
 200ba68:	e0bffa17 	ldw	r2,-24(fp)
 200ba6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ba70:	e0bffd17 	ldw	r2,-12(fp)
 200ba74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200ba78:	00bfffc4 	movi	r2,-1
 200ba7c:	00000b06 	br	200baac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200ba80:	d0a00d17 	ldw	r2,-32716(gp)
 200ba84:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 200ba88:	d0e00d17 	ldw	r3,-32716(gp)
 200ba8c:	e0bfff17 	ldw	r2,-4(fp)
 200ba90:	1885883a 	add	r2,r3,r2
 200ba94:	d0a00d15 	stw	r2,-32716(gp)
 200ba98:	e0bffa17 	ldw	r2,-24(fp)
 200ba9c:	e0bffe15 	stw	r2,-8(fp)
 200baa0:	e0bffe17 	ldw	r2,-8(fp)
 200baa4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200baa8:	e0bffb17 	ldw	r2,-20(fp)
} 
 200baac:	e037883a 	mov	sp,fp
 200bab0:	df000017 	ldw	fp,0(sp)
 200bab4:	dec00104 	addi	sp,sp,4
 200bab8:	f800283a 	ret

0200babc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200babc:	defffd04 	addi	sp,sp,-12
 200bac0:	dfc00215 	stw	ra,8(sp)
 200bac4:	df000115 	stw	fp,4(sp)
 200bac8:	df000104 	addi	fp,sp,4
 200bacc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 200bad0:	e13fff17 	ldw	r4,-4(fp)
 200bad4:	200e4e80 	call	200e4e8 <alt_busy_sleep>
}
 200bad8:	e037883a 	mov	sp,fp
 200badc:	dfc00117 	ldw	ra,4(sp)
 200bae0:	df000017 	ldw	fp,0(sp)
 200bae4:	dec00204 	addi	sp,sp,8
 200bae8:	f800283a 	ret

0200baec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200baec:	defffe04 	addi	sp,sp,-8
 200baf0:	dfc00115 	stw	ra,4(sp)
 200baf4:	df000015 	stw	fp,0(sp)
 200baf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200bafc:	00808074 	movhi	r2,513
 200bb00:	1085bb04 	addi	r2,r2,5868
 200bb04:	10800017 	ldw	r2,0(r2)
 200bb08:	10000526 	beq	r2,zero,200bb20 <alt_get_errno+0x34>
 200bb0c:	00808074 	movhi	r2,513
 200bb10:	1085bb04 	addi	r2,r2,5868
 200bb14:	10800017 	ldw	r2,0(r2)
 200bb18:	103ee83a 	callr	r2
 200bb1c:	00000206 	br	200bb28 <alt_get_errno+0x3c>
 200bb20:	00808074 	movhi	r2,513
 200bb24:	1085c704 	addi	r2,r2,5916
}
 200bb28:	e037883a 	mov	sp,fp
 200bb2c:	dfc00117 	ldw	ra,4(sp)
 200bb30:	df000017 	ldw	fp,0(sp)
 200bb34:	dec00204 	addi	sp,sp,8
 200bb38:	f800283a 	ret

0200bb3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200bb3c:	defff904 	addi	sp,sp,-28
 200bb40:	dfc00615 	stw	ra,24(sp)
 200bb44:	df000515 	stw	fp,20(sp)
 200bb48:	df000504 	addi	fp,sp,20
 200bb4c:	e13ffd15 	stw	r4,-12(fp)
 200bb50:	e17ffe15 	stw	r5,-8(fp)
 200bb54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200bb58:	e0bffd17 	ldw	r2,-12(fp)
 200bb5c:	10000716 	blt	r2,zero,200bb7c <write+0x40>
 200bb60:	e13ffd17 	ldw	r4,-12(fp)
 200bb64:	01400304 	movi	r5,12
 200bb68:	20012bc0 	call	20012bc <__mulsi3>
 200bb6c:	00c08074 	movhi	r3,513
 200bb70:	18c0d404 	addi	r3,r3,848
 200bb74:	10c5883a 	add	r2,r2,r3
 200bb78:	00000106 	br	200bb80 <write+0x44>
 200bb7c:	0005883a 	mov	r2,zero
 200bb80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200bb84:	e0bffb17 	ldw	r2,-20(fp)
 200bb88:	10001f26 	beq	r2,zero,200bc08 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200bb8c:	e0bffb17 	ldw	r2,-20(fp)
 200bb90:	10800217 	ldw	r2,8(r2)
 200bb94:	108000cc 	andi	r2,r2,3
 200bb98:	10001726 	beq	r2,zero,200bbf8 <write+0xbc>
 200bb9c:	e0bffb17 	ldw	r2,-20(fp)
 200bba0:	10800017 	ldw	r2,0(r2)
 200bba4:	10800617 	ldw	r2,24(r2)
 200bba8:	10001326 	beq	r2,zero,200bbf8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200bbac:	e0bffb17 	ldw	r2,-20(fp)
 200bbb0:	10800017 	ldw	r2,0(r2)
 200bbb4:	10c00617 	ldw	r3,24(r2)
 200bbb8:	e0bfff17 	ldw	r2,-4(fp)
 200bbbc:	e13ffb17 	ldw	r4,-20(fp)
 200bbc0:	e17ffe17 	ldw	r5,-8(fp)
 200bbc4:	100d883a 	mov	r6,r2
 200bbc8:	183ee83a 	callr	r3
 200bbcc:	e0bffc15 	stw	r2,-16(fp)
 200bbd0:	e0bffc17 	ldw	r2,-16(fp)
 200bbd4:	1000060e 	bge	r2,zero,200bbf0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 200bbd8:	200baec0 	call	200baec <alt_get_errno>
 200bbdc:	e0fffc17 	ldw	r3,-16(fp)
 200bbe0:	00c7c83a 	sub	r3,zero,r3
 200bbe4:	10c00015 	stw	r3,0(r2)
        return -1;
 200bbe8:	00bfffc4 	movi	r2,-1
 200bbec:	00000a06 	br	200bc18 <write+0xdc>
      }
      return rval;
 200bbf0:	e0bffc17 	ldw	r2,-16(fp)
 200bbf4:	00000806 	br	200bc18 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200bbf8:	200baec0 	call	200baec <alt_get_errno>
 200bbfc:	00c00344 	movi	r3,13
 200bc00:	10c00015 	stw	r3,0(r2)
 200bc04:	00000306 	br	200bc14 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200bc08:	200baec0 	call	200baec <alt_get_errno>
 200bc0c:	00c01444 	movi	r3,81
 200bc10:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 200bc14:	00bfffc4 	movi	r2,-1
}
 200bc18:	e037883a 	mov	sp,fp
 200bc1c:	dfc00117 	ldw	ra,4(sp)
 200bc20:	df000017 	ldw	fp,0(sp)
 200bc24:	dec00204 	addi	sp,sp,8
 200bc28:	f800283a 	ret

0200bc2c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200bc2c:	defffd04 	addi	sp,sp,-12
 200bc30:	dfc00215 	stw	ra,8(sp)
 200bc34:	df000115 	stw	fp,4(sp)
 200bc38:	df000104 	addi	fp,sp,4
 200bc3c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200bc40:	e13fff17 	ldw	r4,-4(fp)
 200bc44:	01408074 	movhi	r5,513
 200bc48:	2945b804 	addi	r5,r5,5856
 200bc4c:	200e68c0 	call	200e68c <alt_dev_llist_insert>
}
 200bc50:	e037883a 	mov	sp,fp
 200bc54:	dfc00117 	ldw	ra,4(sp)
 200bc58:	df000017 	ldw	fp,0(sp)
 200bc5c:	dec00204 	addi	sp,sp,8
 200bc60:	f800283a 	ret

0200bc64 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200bc64:	defffd04 	addi	sp,sp,-12
 200bc68:	dfc00215 	stw	ra,8(sp)
 200bc6c:	df000115 	stw	fp,4(sp)
 200bc70:	df000104 	addi	fp,sp,4
 200bc74:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 200bc78:	200f0d00 	call	200f0d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200bc7c:	00800044 	movi	r2,1
 200bc80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200bc84:	e037883a 	mov	sp,fp
 200bc88:	dfc00117 	ldw	ra,4(sp)
 200bc8c:	df000017 	ldw	fp,0(sp)
 200bc90:	dec00204 	addi	sp,sp,8
 200bc94:	f800283a 	ret

0200bc98 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200bc98:	defffe04 	addi	sp,sp,-8
 200bc9c:	dfc00115 	stw	ra,4(sp)
 200bca0:	df000015 	stw	fp,0(sp)
 200bca4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 200bca8:	01010074 	movhi	r4,1025
 200bcac:	21081004 	addi	r4,r4,8256
 200bcb0:	000b883a 	mov	r5,zero
 200bcb4:	01800084 	movi	r6,2
 200bcb8:	01c0fa04 	movi	r7,1000
 200bcbc:	200d1880 	call	200d188 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 200bcc0:	01008074 	movhi	r4,513
 200bcc4:	21013404 	addi	r4,r4,1232
 200bcc8:	200bd580 	call	200bd58 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 200bccc:	01008074 	movhi	r4,513
 200bcd0:	21017004 	addi	r4,r4,1472
 200bcd4:	000b883a 	mov	r5,zero
 200bcd8:	000d883a 	mov	r6,zero
 200bcdc:	200c8140 	call	200c814 <altera_avalon_jtag_uart_init>
 200bce0:	01008074 	movhi	r4,513
 200bce4:	21016604 	addi	r4,r4,1432
 200bce8:	200bc2c0 	call	200bc2c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 200bcec:	01008074 	movhi	r4,513
 200bcf0:	21058804 	addi	r4,r4,5664
 200bcf4:	000b883a 	mov	r5,zero
 200bcf8:	01800044 	movi	r6,1
 200bcfc:	200d5900 	call	200d590 <altera_avalon_uart_init>
 200bd00:	01008074 	movhi	r4,513
 200bd04:	21057e04 	addi	r4,r4,5624
 200bd08:	200bc2c0 	call	200bc2c <alt_dev_reg>
}
 200bd0c:	e037883a 	mov	sp,fp
 200bd10:	dfc00117 	ldw	ra,4(sp)
 200bd14:	df000017 	ldw	fp,0(sp)
 200bd18:	dec00204 	addi	sp,sp,8
 200bd1c:	f800283a 	ret

0200bd20 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 200bd20:	defffd04 	addi	sp,sp,-12
 200bd24:	dfc00215 	stw	ra,8(sp)
 200bd28:	df000115 	stw	fp,4(sp)
 200bd2c:	df000104 	addi	fp,sp,4
 200bd30:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 200bd34:	e13fff17 	ldw	r4,-4(fp)
 200bd38:	01408074 	movhi	r5,513
 200bd3c:	2945bd04 	addi	r5,r5,5876
 200bd40:	200e68c0 	call	200e68c <alt_dev_llist_insert>
}
 200bd44:	e037883a 	mov	sp,fp
 200bd48:	dfc00117 	ldw	ra,4(sp)
 200bd4c:	df000017 	ldw	fp,0(sp)
 200bd50:	dec00204 	addi	sp,sp,8
 200bd54:	f800283a 	ret

0200bd58 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 200bd58:	defffc04 	addi	sp,sp,-16
 200bd5c:	dfc00315 	stw	ra,12(sp)
 200bd60:	df000215 	stw	fp,8(sp)
 200bd64:	df000204 	addi	fp,sp,8
 200bd68:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200bd6c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 200bd70:	e13fff17 	ldw	r4,-4(fp)
 200bd74:	200bdac0 	call	200bdac <alt_epcs_flash_query>
 200bd78:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 200bd7c:	e0bffe17 	ldw	r2,-8(fp)
 200bd80:	1000041e 	bne	r2,zero,200bd94 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 200bd84:	e0bfff17 	ldw	r2,-4(fp)
 200bd88:	1009883a 	mov	r4,r2
 200bd8c:	200bd200 	call	200bd20 <alt_flash_device_register>
 200bd90:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 200bd94:	e0bffe17 	ldw	r2,-8(fp)
}
 200bd98:	e037883a 	mov	sp,fp
 200bd9c:	dfc00117 	ldw	ra,4(sp)
 200bda0:	df000017 	ldw	fp,0(sp)
 200bda4:	dec00204 	addi	sp,sp,8
 200bda8:	f800283a 	ret

0200bdac <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 200bdac:	defffc04 	addi	sp,sp,-16
 200bdb0:	dfc00315 	stw	ra,12(sp)
 200bdb4:	df000215 	stw	fp,8(sp)
 200bdb8:	df000204 	addi	fp,sp,8
 200bdbc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 200bdc0:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 200bdc4:	e0bfff17 	ldw	r2,-4(fp)
 200bdc8:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 200bdcc:	e0bfff17 	ldw	r2,-4(fp)
 200bdd0:	10802d17 	ldw	r2,180(r2)
 200bdd4:	1009883a 	mov	r4,r2
 200bdd8:	200e2100 	call	200e210 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 200bddc:	10c03fcc 	andi	r3,r2,255
 200bde0:	e0bfff17 	ldw	r2,-4(fp)
 200bde4:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 200bde8:	e0bfff17 	ldw	r2,-4(fp)
 200bdec:	10802f17 	ldw	r2,188(r2)
 200bdf0:	10800598 	cmpnei	r2,r2,22
 200bdf4:	10000a1e 	bne	r2,zero,200be20 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 200bdf8:	e0bfff17 	ldw	r2,-4(fp)
 200bdfc:	00c02034 	movhi	r3,128
 200be00:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 200be04:	e0bfff17 	ldw	r2,-4(fp)
 200be08:	00c02004 	movi	r3,128
 200be0c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200be10:	e0bfff17 	ldw	r2,-4(fp)
 200be14:	00c00074 	movhi	r3,1
 200be18:	10c01015 	stw	r3,64(r2)
 200be1c:	00007306 	br	200bfec <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 200be20:	e0bfff17 	ldw	r2,-4(fp)
 200be24:	10802f17 	ldw	r2,188(r2)
 200be28:	10800518 	cmpnei	r2,r2,20
 200be2c:	10000a1e 	bne	r2,zero,200be58 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 200be30:	e0bfff17 	ldw	r2,-4(fp)
 200be34:	00c00834 	movhi	r3,32
 200be38:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 200be3c:	e0bfff17 	ldw	r2,-4(fp)
 200be40:	00c00804 	movi	r3,32
 200be44:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200be48:	e0bfff17 	ldw	r2,-4(fp)
 200be4c:	00c00074 	movhi	r3,1
 200be50:	10c01015 	stw	r3,64(r2)
 200be54:	00006506 	br	200bfec <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 200be58:	e0bfff17 	ldw	r2,-4(fp)
 200be5c:	10802f17 	ldw	r2,188(r2)
 200be60:	108004d8 	cmpnei	r2,r2,19
 200be64:	10000a1e 	bne	r2,zero,200be90 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 200be68:	e0bfff17 	ldw	r2,-4(fp)
 200be6c:	00c00434 	movhi	r3,16
 200be70:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 200be74:	e0bfff17 	ldw	r2,-4(fp)
 200be78:	00c00404 	movi	r3,16
 200be7c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200be80:	e0bfff17 	ldw	r2,-4(fp)
 200be84:	00c00074 	movhi	r3,1
 200be88:	10c01015 	stw	r3,64(r2)
 200be8c:	00005706 	br	200bfec <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 200be90:	e0bfff17 	ldw	r2,-4(fp)
 200be94:	10802f17 	ldw	r2,188(r2)
 200be98:	10800498 	cmpnei	r2,r2,18
 200be9c:	10000a1e 	bne	r2,zero,200bec8 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 200bea0:	e0bfff17 	ldw	r2,-4(fp)
 200bea4:	00c00234 	movhi	r3,8
 200bea8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 200beac:	e0bfff17 	ldw	r2,-4(fp)
 200beb0:	00c00204 	movi	r3,8
 200beb4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 200beb8:	e0bfff17 	ldw	r2,-4(fp)
 200bebc:	00c00074 	movhi	r3,1
 200bec0:	10c01015 	stw	r3,64(r2)
 200bec4:	00004906 	br	200bfec <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 200bec8:	e0bfff17 	ldw	r2,-4(fp)
 200becc:	10802f17 	ldw	r2,188(r2)
 200bed0:	10800418 	cmpnei	r2,r2,16
 200bed4:	10000a1e 	bne	r2,zero,200bf00 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 200bed8:	e0bfff17 	ldw	r2,-4(fp)
 200bedc:	00c000b4 	movhi	r3,2
 200bee0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 200bee4:	e0bfff17 	ldw	r2,-4(fp)
 200bee8:	00c00104 	movi	r3,4
 200beec:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 200bef0:	e0bfff17 	ldw	r2,-4(fp)
 200bef4:	00e00014 	movui	r3,32768
 200bef8:	10c01015 	stw	r3,64(r2)
 200befc:	00003b06 	br	200bfec <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 200bf00:	e0bfff17 	ldw	r2,-4(fp)
 200bf04:	10802d17 	ldw	r2,180(r2)
 200bf08:	1009883a 	mov	r4,r2
 200bf0c:	200e2780 	call	200e278 <epcs_read_device_id>
 200bf10:	e0ffff17 	ldw	r3,-4(fp)
 200bf14:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 200bf18:	e0bfff17 	ldw	r2,-4(fp)
 200bf1c:	10c02f17 	ldw	r3,188(r2)
 200bf20:	00804034 	movhi	r2,256
 200bf24:	10bfffc4 	addi	r2,r2,-1
 200bf28:	1886703a 	and	r3,r3,r2
 200bf2c:	00800874 	movhi	r2,33
 200bf30:	10ae8604 	addi	r2,r2,-17896
 200bf34:	18800a1e 	bne	r3,r2,200bf60 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200bf38:	e0bfff17 	ldw	r2,-4(fp)
 200bf3c:	00c04034 	movhi	r3,256
 200bf40:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 200bf44:	e0bfff17 	ldw	r2,-4(fp)
 200bf48:	00c04004 	movi	r3,256
 200bf4c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200bf50:	e0bfff17 	ldw	r2,-4(fp)
 200bf54:	00c00074 	movhi	r3,1
 200bf58:	10c01015 	stw	r3,64(r2)
 200bf5c:	00002306 	br	200bfec <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 200bf60:	e0bfff17 	ldw	r2,-4(fp)
 200bf64:	10802f17 	ldw	r2,188(r2)
 200bf68:	10803fcc 	andi	r2,r2,255
 200bf6c:	10800618 	cmpnei	r2,r2,24
 200bf70:	10000a1e 	bne	r2,zero,200bf9c <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 200bf74:	e0bfff17 	ldw	r2,-4(fp)
 200bf78:	00c04034 	movhi	r3,256
 200bf7c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 200bf80:	e0bfff17 	ldw	r2,-4(fp)
 200bf84:	00c01004 	movi	r3,64
 200bf88:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 200bf8c:	e0bfff17 	ldw	r2,-4(fp)
 200bf90:	00c00134 	movhi	r3,4
 200bf94:	10c01015 	stw	r3,64(r2)
 200bf98:	00001406 	br	200bfec <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 200bf9c:	e0bfff17 	ldw	r2,-4(fp)
 200bfa0:	10802f17 	ldw	r2,188(r2)
 200bfa4:	10803fcc 	andi	r2,r2,255
 200bfa8:	10800658 	cmpnei	r2,r2,25
 200bfac:	10000d1e 	bne	r2,zero,200bfe4 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 200bfb0:	e0bfff17 	ldw	r2,-4(fp)
 200bfb4:	00c08034 	movhi	r3,512
 200bfb8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 200bfbc:	e0bfff17 	ldw	r2,-4(fp)
 200bfc0:	00c08004 	movi	r3,512
 200bfc4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 200bfc8:	e0bfff17 	ldw	r2,-4(fp)
 200bfcc:	00c00074 	movhi	r3,1
 200bfd0:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 200bfd4:	e0bfff17 	ldw	r2,-4(fp)
 200bfd8:	00c00044 	movi	r3,1
 200bfdc:	10c03115 	stw	r3,196(r2)
 200bfe0:	00000206 	br	200bfec <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 200bfe4:	00bffb44 	movi	r2,-19
 200bfe8:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 200bfec:	e0bfff17 	ldw	r2,-4(fp)
 200bff0:	10800e17 	ldw	r2,56(r2)
 200bff4:	1007883a 	mov	r3,r2
 200bff8:	e0bfff17 	ldw	r2,-4(fp)
 200bffc:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 200c000:	e0bfff17 	ldw	r2,-4(fp)
 200c004:	00c00044 	movi	r3,1
 200c008:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 200c00c:	e0bfff17 	ldw	r2,-4(fp)
 200c010:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 200c014:	e0bfff17 	ldw	r2,-4(fp)
 200c018:	00c04004 	movi	r3,256
 200c01c:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 200c020:	e0bffe17 	ldw	r2,-8(fp)
}
 200c024:	e037883a 	mov	sp,fp
 200c028:	dfc00117 	ldw	ra,4(sp)
 200c02c:	df000017 	ldw	fp,0(sp)
 200c030:	dec00204 	addi	sp,sp,8
 200c034:	f800283a 	ret

0200c038 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 200c038:	deffee04 	addi	sp,sp,-72
 200c03c:	dfc01115 	stw	ra,68(sp)
 200c040:	df001015 	stw	fp,64(sp)
 200c044:	df001004 	addi	fp,sp,64
 200c048:	e13ffc15 	stw	r4,-16(fp)
 200c04c:	e17ffd15 	stw	r5,-12(fp)
 200c050:	e1bffe15 	stw	r6,-8(fp)
 200c054:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 200c058:	00800804 	movi	r2,32
 200c05c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 200c060:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 200c064:	00002606 	br	200c100 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 200c068:	e0bff117 	ldw	r2,-60(fp)
 200c06c:	e0ffff17 	ldw	r3,-4(fp)
 200c070:	1880012e 	bgeu	r3,r2,200c078 <alt_epcs_flash_memcmp+0x40>
 200c074:	1805883a 	mov	r2,r3
 200c078:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 200c07c:	e0fffe17 	ldw	r3,-8(fp)
 200c080:	e0bff017 	ldw	r2,-64(fp)
 200c084:	1887883a 	add	r3,r3,r2
 200c088:	e0bff404 	addi	r2,fp,-48
 200c08c:	e13ffc17 	ldw	r4,-16(fp)
 200c090:	180b883a 	mov	r5,r3
 200c094:	100d883a 	mov	r6,r2
 200c098:	e1fff217 	ldw	r7,-56(fp)
 200c09c:	200c6180 	call	200c618 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 200c0a0:	1000020e 	bge	r2,zero,200c0ac <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 200c0a4:	00bfffc4 	movi	r2,-1
 200c0a8:	00001806 	br	200c10c <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 200c0ac:	e0bff017 	ldw	r2,-64(fp)
 200c0b0:	e0fffd17 	ldw	r3,-12(fp)
 200c0b4:	1889883a 	add	r4,r3,r2
 200c0b8:	e0bff217 	ldw	r2,-56(fp)
 200c0bc:	e0fff404 	addi	r3,fp,-48
 200c0c0:	180b883a 	mov	r5,r3
 200c0c4:	100d883a 	mov	r6,r2
 200c0c8:	200f3440 	call	200f344 <memcmp>
 200c0cc:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 200c0d0:	e0bff317 	ldw	r2,-52(fp)
 200c0d4:	10000226 	beq	r2,zero,200c0e0 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 200c0d8:	e0bff317 	ldw	r2,-52(fp)
 200c0dc:	00000b06 	br	200c10c <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 200c0e0:	e0bff217 	ldw	r2,-56(fp)
 200c0e4:	e0ffff17 	ldw	r3,-4(fp)
 200c0e8:	1885c83a 	sub	r2,r3,r2
 200c0ec:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 200c0f0:	e0fff017 	ldw	r3,-64(fp)
 200c0f4:	e0bff217 	ldw	r2,-56(fp)
 200c0f8:	1885883a 	add	r2,r3,r2
 200c0fc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 200c100:	e0bfff17 	ldw	r2,-4(fp)
 200c104:	103fd81e 	bne	r2,zero,200c068 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 200c108:	0005883a 	mov	r2,zero
}
 200c10c:	e037883a 	mov	sp,fp
 200c110:	dfc00117 	ldw	ra,4(sp)
 200c114:	df000017 	ldw	fp,0(sp)
 200c118:	dec00204 	addi	sp,sp,8
 200c11c:	f800283a 	ret

0200c120 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 200c120:	defff404 	addi	sp,sp,-48
 200c124:	dfc00b15 	stw	ra,44(sp)
 200c128:	df000a15 	stw	fp,40(sp)
 200c12c:	df000a04 	addi	fp,sp,40
 200c130:	e13ffc15 	stw	r4,-16(fp)
 200c134:	e17ffd15 	stw	r5,-12(fp)
 200c138:	e1bffe15 	stw	r6,-8(fp)
 200c13c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 200c140:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200c144:	e03ff815 	stw	zero,-32(fp)
 200c148:	00008306 	br	200c358 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200c14c:	e0fffc17 	ldw	r3,-16(fp)
 200c150:	e0bff817 	ldw	r2,-32(fp)
 200c154:	1004913a 	slli	r2,r2,4
 200c158:	1885883a 	add	r2,r3,r2
 200c15c:	10800d04 	addi	r2,r2,52
 200c160:	10800017 	ldw	r2,0(r2)
 200c164:	e0fffd17 	ldw	r3,-12(fp)
 200c168:	18807816 	blt	r3,r2,200c34c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 200c16c:	e0fffc17 	ldw	r3,-16(fp)
 200c170:	e0bff817 	ldw	r2,-32(fp)
 200c174:	1004913a 	slli	r2,r2,4
 200c178:	1885883a 	add	r2,r3,r2
 200c17c:	10800d04 	addi	r2,r2,52
 200c180:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 200c184:	e13ffc17 	ldw	r4,-16(fp)
 200c188:	e0bff817 	ldw	r2,-32(fp)
 200c18c:	1004913a 	slli	r2,r2,4
 200c190:	2085883a 	add	r2,r4,r2
 200c194:	10800e04 	addi	r2,r2,56
 200c198:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 200c19c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 200c1a0:	e0fffd17 	ldw	r3,-12(fp)
 200c1a4:	1880690e 	bge	r3,r2,200c34c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 200c1a8:	e0fffc17 	ldw	r3,-16(fp)
 200c1ac:	e0bff817 	ldw	r2,-32(fp)
 200c1b0:	1004913a 	slli	r2,r2,4
 200c1b4:	1885883a 	add	r2,r3,r2
 200c1b8:	10800d04 	addi	r2,r2,52
 200c1bc:	10800017 	ldw	r2,0(r2)
 200c1c0:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200c1c4:	e03ff915 	stw	zero,-28(fp)
 200c1c8:	00005806 	br	200c32c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 200c1cc:	e0fffd17 	ldw	r3,-12(fp)
 200c1d0:	e0bffa17 	ldw	r2,-24(fp)
 200c1d4:	18804916 	blt	r3,r2,200c2fc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 200c1d8:	e0fffc17 	ldw	r3,-16(fp)
 200c1dc:	e0bff817 	ldw	r2,-32(fp)
 200c1e0:	10800104 	addi	r2,r2,4
 200c1e4:	1004913a 	slli	r2,r2,4
 200c1e8:	1885883a 	add	r2,r3,r2
 200c1ec:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 200c1f0:	e0bffa17 	ldw	r2,-24(fp)
 200c1f4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 200c1f8:	e0fffd17 	ldw	r3,-12(fp)
 200c1fc:	18803f0e 	bge	r3,r2,200c2fc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 200c200:	e0fffc17 	ldw	r3,-16(fp)
 200c204:	e0bff817 	ldw	r2,-32(fp)
 200c208:	10800104 	addi	r2,r2,4
 200c20c:	1004913a 	slli	r2,r2,4
 200c210:	1885883a 	add	r2,r3,r2
 200c214:	10c00017 	ldw	r3,0(r2)
 200c218:	e0bffa17 	ldw	r2,-24(fp)
 200c21c:	1887883a 	add	r3,r3,r2
 200c220:	e0bffd17 	ldw	r2,-12(fp)
 200c224:	1885c83a 	sub	r2,r3,r2
 200c228:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 200c22c:	e0fffb17 	ldw	r3,-20(fp)
 200c230:	e0bfff17 	ldw	r2,-4(fp)
 200c234:	1880010e 	bge	r3,r2,200c23c <alt_epcs_flash_write+0x11c>
 200c238:	1805883a 	mov	r2,r3
 200c23c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 200c240:	e0bffb17 	ldw	r2,-20(fp)
 200c244:	e13ffc17 	ldw	r4,-16(fp)
 200c248:	e17ffe17 	ldw	r5,-8(fp)
 200c24c:	e1bffd17 	ldw	r6,-12(fp)
 200c250:	100f883a 	mov	r7,r2
 200c254:	200c0380 	call	200c038 <alt_epcs_flash_memcmp>
 200c258:	10001226 	beq	r2,zero,200c2a4 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 200c25c:	e0bffc17 	ldw	r2,-16(fp)
 200c260:	10800817 	ldw	r2,32(r2)
 200c264:	e13ffc17 	ldw	r4,-16(fp)
 200c268:	e17ffa17 	ldw	r5,-24(fp)
 200c26c:	103ee83a 	callr	r2
 200c270:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 200c274:	e0bff717 	ldw	r2,-36(fp)
 200c278:	10000a1e 	bne	r2,zero,200c2a4 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 200c27c:	e0bffc17 	ldw	r2,-16(fp)
 200c280:	10800917 	ldw	r2,36(r2)
 200c284:	e0fffb17 	ldw	r3,-20(fp)
 200c288:	d8c00015 	stw	r3,0(sp)
 200c28c:	e13ffc17 	ldw	r4,-16(fp)
 200c290:	e17ffa17 	ldw	r5,-24(fp)
 200c294:	e1bffd17 	ldw	r6,-12(fp)
 200c298:	e1fffe17 	ldw	r7,-8(fp)
 200c29c:	103ee83a 	callr	r2
 200c2a0:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 200c2a4:	e0ffff17 	ldw	r3,-4(fp)
 200c2a8:	e0bffb17 	ldw	r2,-20(fp)
 200c2ac:	18802e26 	beq	r3,r2,200c368 <alt_epcs_flash_write+0x248>
 200c2b0:	e0bff717 	ldw	r2,-36(fp)
 200c2b4:	10002c1e 	bne	r2,zero,200c368 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 200c2b8:	e0ffff17 	ldw	r3,-4(fp)
 200c2bc:	e0bffb17 	ldw	r2,-20(fp)
 200c2c0:	1885c83a 	sub	r2,r3,r2
 200c2c4:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 200c2c8:	e0fffc17 	ldw	r3,-16(fp)
 200c2cc:	e0bff817 	ldw	r2,-32(fp)
 200c2d0:	10800104 	addi	r2,r2,4
 200c2d4:	1004913a 	slli	r2,r2,4
 200c2d8:	1885883a 	add	r2,r3,r2
 200c2dc:	10c00017 	ldw	r3,0(r2)
 200c2e0:	e0bffa17 	ldw	r2,-24(fp)
 200c2e4:	1885883a 	add	r2,r3,r2
 200c2e8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 200c2ec:	e0bffb17 	ldw	r2,-20(fp)
 200c2f0:	e0fffe17 	ldw	r3,-8(fp)
 200c2f4:	1885883a 	add	r2,r3,r2
 200c2f8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 200c2fc:	e0fffc17 	ldw	r3,-16(fp)
 200c300:	e0bff817 	ldw	r2,-32(fp)
 200c304:	10800104 	addi	r2,r2,4
 200c308:	1004913a 	slli	r2,r2,4
 200c30c:	1885883a 	add	r2,r3,r2
 200c310:	10800017 	ldw	r2,0(r2)
 200c314:	e0fffa17 	ldw	r3,-24(fp)
 200c318:	1885883a 	add	r2,r3,r2
 200c31c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 200c320:	e0bff917 	ldw	r2,-28(fp)
 200c324:	10800044 	addi	r2,r2,1
 200c328:	e0bff915 	stw	r2,-28(fp)
 200c32c:	e0fffc17 	ldw	r3,-16(fp)
 200c330:	e0bff817 	ldw	r2,-32(fp)
 200c334:	1004913a 	slli	r2,r2,4
 200c338:	1885883a 	add	r2,r3,r2
 200c33c:	10800f04 	addi	r2,r2,60
 200c340:	10800017 	ldw	r2,0(r2)
 200c344:	e0fff917 	ldw	r3,-28(fp)
 200c348:	18bfa016 	blt	r3,r2,200c1cc <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 200c34c:	e0bff817 	ldw	r2,-32(fp)
 200c350:	10800044 	addi	r2,r2,1
 200c354:	e0bff815 	stw	r2,-32(fp)
 200c358:	e0bffc17 	ldw	r2,-16(fp)
 200c35c:	10800c17 	ldw	r2,48(r2)
 200c360:	e0fff817 	ldw	r3,-32(fp)
 200c364:	18bf7916 	blt	r3,r2,200c14c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 200c368:	e0bff717 	ldw	r2,-36(fp)
}
 200c36c:	e037883a 	mov	sp,fp
 200c370:	dfc00117 	ldw	ra,4(sp)
 200c374:	df000017 	ldw	fp,0(sp)
 200c378:	dec00204 	addi	sp,sp,8
 200c37c:	f800283a 	ret

0200c380 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 200c380:	defffa04 	addi	sp,sp,-24
 200c384:	df000515 	stw	fp,20(sp)
 200c388:	df000504 	addi	fp,sp,20
 200c38c:	e13ffd15 	stw	r4,-12(fp)
 200c390:	e17ffe15 	stw	r5,-8(fp)
 200c394:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 200c398:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 200c39c:	e0bffd17 	ldw	r2,-12(fp)
 200c3a0:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 200c3a4:	e0bffc17 	ldw	r2,-16(fp)
 200c3a8:	10c00c17 	ldw	r3,48(r2)
 200c3ac:	e0bfff17 	ldw	r2,-4(fp)
 200c3b0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 200c3b4:	e0bffc17 	ldw	r2,-16(fp)
 200c3b8:	10800c17 	ldw	r2,48(r2)
 200c3bc:	1000031e 	bne	r2,zero,200c3cc <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 200c3c0:	00bffec4 	movi	r2,-5
 200c3c4:	e0bffb15 	stw	r2,-20(fp)
 200c3c8:	00000b06 	br	200c3f8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 200c3cc:	e0bffc17 	ldw	r2,-16(fp)
 200c3d0:	10800c17 	ldw	r2,48(r2)
 200c3d4:	10800250 	cmplti	r2,r2,9
 200c3d8:	1000031e 	bne	r2,zero,200c3e8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 200c3dc:	00bffd04 	movi	r2,-12
 200c3e0:	e0bffb15 	stw	r2,-20(fp)
 200c3e4:	00000406 	br	200c3f8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 200c3e8:	e0bffc17 	ldw	r2,-16(fp)
 200c3ec:	10c00d04 	addi	r3,r2,52
 200c3f0:	e0bffe17 	ldw	r2,-8(fp)
 200c3f4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 200c3f8:	e0bffb17 	ldw	r2,-20(fp)
}
 200c3fc:	e037883a 	mov	sp,fp
 200c400:	df000017 	ldw	fp,0(sp)
 200c404:	dec00104 	addi	sp,sp,4
 200c408:	f800283a 	ret

0200c40c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 200c40c:	defff904 	addi	sp,sp,-28
 200c410:	df000615 	stw	fp,24(sp)
 200c414:	df000604 	addi	fp,sp,24
 200c418:	e13ffe15 	stw	r4,-8(fp)
 200c41c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200c420:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200c424:	e0bffe17 	ldw	r2,-8(fp)
 200c428:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 200c42c:	e0bffb17 	ldw	r2,-20(fp)
 200c430:	10800c17 	ldw	r2,48(r2)
 200c434:	10bfffc4 	addi	r2,r2,-1
 200c438:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200c43c:	e0fffb17 	ldw	r3,-20(fp)
 200c440:	e0bffc17 	ldw	r2,-16(fp)
 200c444:	1004913a 	slli	r2,r2,4
 200c448:	1885883a 	add	r2,r3,r2
 200c44c:	10800d04 	addi	r2,r2,52
 200c450:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 200c454:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 200c458:	e13ffb17 	ldw	r4,-20(fp)
 200c45c:	e0bffc17 	ldw	r2,-16(fp)
 200c460:	1004913a 	slli	r2,r2,4
 200c464:	2085883a 	add	r2,r4,r2
 200c468:	10800e04 	addi	r2,r2,56
 200c46c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 200c470:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 200c474:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 200c478:	e0bfff17 	ldw	r2,-4(fp)
 200c47c:	e0fffd17 	ldw	r3,-12(fp)
 200c480:	1880022e 	bgeu	r3,r2,200c48c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 200c484:	00bffec4 	movi	r2,-5
 200c488:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 200c48c:	e0bffa17 	ldw	r2,-24(fp)
}
 200c490:	e037883a 	mov	sp,fp
 200c494:	df000017 	ldw	fp,0(sp)
 200c498:	dec00104 	addi	sp,sp,4
 200c49c:	f800283a 	ret

0200c4a0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 200c4a0:	defffa04 	addi	sp,sp,-24
 200c4a4:	dfc00515 	stw	ra,20(sp)
 200c4a8:	df000415 	stw	fp,16(sp)
 200c4ac:	df000404 	addi	fp,sp,16
 200c4b0:	e13ffe15 	stw	r4,-8(fp)
 200c4b4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 200c4b8:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200c4bc:	e0bffe17 	ldw	r2,-8(fp)
 200c4c0:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 200c4c4:	e13ffe17 	ldw	r4,-8(fp)
 200c4c8:	e17fff17 	ldw	r5,-4(fp)
 200c4cc:	200c40c0 	call	200c40c <alt_epcs_test_address>
 200c4d0:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 200c4d4:	e0bffc17 	ldw	r2,-16(fp)
 200c4d8:	10000816 	blt	r2,zero,200c4fc <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 200c4dc:	e0bffd17 	ldw	r2,-12(fp)
 200c4e0:	11002d17 	ldw	r4,180(r2)
 200c4e4:	e0ffff17 	ldw	r3,-4(fp)
 200c4e8:	e0bffd17 	ldw	r2,-12(fp)
 200c4ec:	10803117 	ldw	r2,196(r2)
 200c4f0:	180b883a 	mov	r5,r3
 200c4f4:	100d883a 	mov	r6,r2
 200c4f8:	200de500 	call	200de50 <epcs_sector_erase>
  }
  return ret_code;
 200c4fc:	e0bffc17 	ldw	r2,-16(fp)
}
 200c500:	e037883a 	mov	sp,fp
 200c504:	dfc00117 	ldw	ra,4(sp)
 200c508:	df000017 	ldw	fp,0(sp)
 200c50c:	dec00204 	addi	sp,sp,8
 200c510:	f800283a 	ret

0200c514 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 200c514:	defff404 	addi	sp,sp,-48
 200c518:	dfc00b15 	stw	ra,44(sp)
 200c51c:	df000a15 	stw	fp,40(sp)
 200c520:	df000a04 	addi	fp,sp,40
 200c524:	e13ffc15 	stw	r4,-16(fp)
 200c528:	e17ffd15 	stw	r5,-12(fp)
 200c52c:	e1bffe15 	stw	r6,-8(fp)
 200c530:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200c534:	e0bffc17 	ldw	r2,-16(fp)
 200c538:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 200c53c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 200c540:	e13ffc17 	ldw	r4,-16(fp)
 200c544:	e17ffe17 	ldw	r5,-8(fp)
 200c548:	200c40c0 	call	200c40c <alt_epcs_test_address>
 200c54c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 200c550:	e0bff917 	ldw	r2,-28(fp)
 200c554:	10002a16 	blt	r2,zero,200c600 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200c558:	00002706 	br	200c5f8 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 200c55c:	e0bff817 	ldw	r2,-32(fp)
 200c560:	10c03017 	ldw	r3,192(r2)
 200c564:	e0bffe17 	ldw	r2,-8(fp)
 200c568:	1887883a 	add	r3,r3,r2
 200c56c:	e0bff817 	ldw	r2,-32(fp)
 200c570:	10803017 	ldw	r2,192(r2)
 200c574:	0085c83a 	sub	r2,zero,r2
 200c578:	1884703a 	and	r2,r3,r2
 200c57c:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 200c580:	e0fffa17 	ldw	r3,-24(fp)
 200c584:	e0bffe17 	ldw	r2,-8(fp)
 200c588:	1885c83a 	sub	r2,r3,r2
 200c58c:	e0c00217 	ldw	r3,8(fp)
 200c590:	1880010e 	bge	r3,r2,200c598 <alt_epcs_flash_write_block+0x84>
 200c594:	1805883a 	mov	r2,r3
 200c598:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200c59c:	e0bff817 	ldw	r2,-32(fp)
 200c5a0:	10c02d17 	ldw	r3,180(r2)
 200c5a4:	e0bff717 	ldw	r2,-36(fp)
 200c5a8:	e13fff17 	ldw	r4,-4(fp)
 200c5ac:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 200c5b0:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 200c5b4:	21003117 	ldw	r4,196(r4)
 200c5b8:	d9000015 	stw	r4,0(sp)
 200c5bc:	1809883a 	mov	r4,r3
 200c5c0:	e17ffe17 	ldw	r5,-8(fp)
 200c5c4:	100d883a 	mov	r6,r2
 200c5c8:	e1fffb17 	ldw	r7,-20(fp)
 200c5cc:	200e0f40 	call	200e0f4 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 200c5d0:	e0c00217 	ldw	r3,8(fp)
 200c5d4:	e0bffb17 	ldw	r2,-20(fp)
 200c5d8:	1885c83a 	sub	r2,r3,r2
 200c5dc:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 200c5e0:	e0fff717 	ldw	r3,-36(fp)
 200c5e4:	e0bffb17 	ldw	r2,-20(fp)
 200c5e8:	1885883a 	add	r2,r3,r2
 200c5ec:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 200c5f0:	e0bffa17 	ldw	r2,-24(fp)
 200c5f4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 200c5f8:	e0800217 	ldw	r2,8(fp)
 200c5fc:	103fd71e 	bne	r2,zero,200c55c <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 200c600:	e0bff917 	ldw	r2,-28(fp)
}
 200c604:	e037883a 	mov	sp,fp
 200c608:	dfc00117 	ldw	ra,4(sp)
 200c60c:	df000017 	ldw	fp,0(sp)
 200c610:	dec00204 	addi	sp,sp,8
 200c614:	f800283a 	ret

0200c618 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 200c618:	defff704 	addi	sp,sp,-36
 200c61c:	dfc00815 	stw	ra,32(sp)
 200c620:	df000715 	stw	fp,28(sp)
 200c624:	df000704 	addi	fp,sp,28
 200c628:	e13ffc15 	stw	r4,-16(fp)
 200c62c:	e17ffd15 	stw	r5,-12(fp)
 200c630:	e1bffe15 	stw	r6,-8(fp)
 200c634:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 200c638:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 200c63c:	e0bffc17 	ldw	r2,-16(fp)
 200c640:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 200c644:	e13ffc17 	ldw	r4,-16(fp)
 200c648:	e17ffd17 	ldw	r5,-12(fp)
 200c64c:	200c40c0 	call	200c40c <alt_epcs_test_address>
 200c650:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 200c654:	e0bffa17 	ldw	r2,-24(fp)
 200c658:	10000f16 	blt	r2,zero,200c698 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200c65c:	e0bffb17 	ldw	r2,-20(fp)
 200c660:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 200c664:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 200c668:	18c03117 	ldw	r3,196(r3)
 200c66c:	d8c00015 	stw	r3,0(sp)
 200c670:	1009883a 	mov	r4,r2
 200c674:	e17ffd17 	ldw	r5,-12(fp)
 200c678:	e1bffe17 	ldw	r6,-8(fp)
 200c67c:	e1ffff17 	ldw	r7,-4(fp)
 200c680:	200df480 	call	200df48 <epcs_read_buffer>
 200c684:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 200c688:	e0fffa17 	ldw	r3,-24(fp)
 200c68c:	e0bfff17 	ldw	r2,-4(fp)
 200c690:	1880011e 	bne	r3,r2,200c698 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 200c694:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 200c698:	e0bffa17 	ldw	r2,-24(fp)
}
 200c69c:	e037883a 	mov	sp,fp
 200c6a0:	dfc00117 	ldw	ra,4(sp)
 200c6a4:	df000017 	ldw	fp,0(sp)
 200c6a8:	dec00204 	addi	sp,sp,8
 200c6ac:	f800283a 	ret

0200c6b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200c6b0:	defffa04 	addi	sp,sp,-24
 200c6b4:	dfc00515 	stw	ra,20(sp)
 200c6b8:	df000415 	stw	fp,16(sp)
 200c6bc:	df000404 	addi	fp,sp,16
 200c6c0:	e13ffd15 	stw	r4,-12(fp)
 200c6c4:	e17ffe15 	stw	r5,-8(fp)
 200c6c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c6cc:	e0bffd17 	ldw	r2,-12(fp)
 200c6d0:	10800017 	ldw	r2,0(r2)
 200c6d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200c6d8:	e0bffc17 	ldw	r2,-16(fp)
 200c6dc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200c6e0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200c6e4:	10800217 	ldw	r2,8(r2)
 200c6e8:	1809883a 	mov	r4,r3
 200c6ec:	e17ffe17 	ldw	r5,-8(fp)
 200c6f0:	e1bfff17 	ldw	r6,-4(fp)
 200c6f4:	100f883a 	mov	r7,r2
 200c6f8:	200ccd80 	call	200ccd8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200c6fc:	e037883a 	mov	sp,fp
 200c700:	dfc00117 	ldw	ra,4(sp)
 200c704:	df000017 	ldw	fp,0(sp)
 200c708:	dec00204 	addi	sp,sp,8
 200c70c:	f800283a 	ret

0200c710 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200c710:	defffa04 	addi	sp,sp,-24
 200c714:	dfc00515 	stw	ra,20(sp)
 200c718:	df000415 	stw	fp,16(sp)
 200c71c:	df000404 	addi	fp,sp,16
 200c720:	e13ffd15 	stw	r4,-12(fp)
 200c724:	e17ffe15 	stw	r5,-8(fp)
 200c728:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c72c:	e0bffd17 	ldw	r2,-12(fp)
 200c730:	10800017 	ldw	r2,0(r2)
 200c734:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200c738:	e0bffc17 	ldw	r2,-16(fp)
 200c73c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200c740:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200c744:	10800217 	ldw	r2,8(r2)
 200c748:	1809883a 	mov	r4,r3
 200c74c:	e17ffe17 	ldw	r5,-8(fp)
 200c750:	e1bfff17 	ldw	r6,-4(fp)
 200c754:	100f883a 	mov	r7,r2
 200c758:	200cef00 	call	200cef0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200c75c:	e037883a 	mov	sp,fp
 200c760:	dfc00117 	ldw	ra,4(sp)
 200c764:	df000017 	ldw	fp,0(sp)
 200c768:	dec00204 	addi	sp,sp,8
 200c76c:	f800283a 	ret

0200c770 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200c770:	defffc04 	addi	sp,sp,-16
 200c774:	dfc00315 	stw	ra,12(sp)
 200c778:	df000215 	stw	fp,8(sp)
 200c77c:	df000204 	addi	fp,sp,8
 200c780:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200c784:	e0bfff17 	ldw	r2,-4(fp)
 200c788:	10800017 	ldw	r2,0(r2)
 200c78c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200c790:	e0bffe17 	ldw	r2,-8(fp)
 200c794:	10c00a04 	addi	r3,r2,40
 200c798:	e0bfff17 	ldw	r2,-4(fp)
 200c79c:	10800217 	ldw	r2,8(r2)
 200c7a0:	1809883a 	mov	r4,r3
 200c7a4:	100b883a 	mov	r5,r2
 200c7a8:	200cb7c0 	call	200cb7c <altera_avalon_jtag_uart_close>
}
 200c7ac:	e037883a 	mov	sp,fp
 200c7b0:	dfc00117 	ldw	ra,4(sp)
 200c7b4:	df000017 	ldw	fp,0(sp)
 200c7b8:	dec00204 	addi	sp,sp,8
 200c7bc:	f800283a 	ret

0200c7c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200c7c0:	defffa04 	addi	sp,sp,-24
 200c7c4:	dfc00515 	stw	ra,20(sp)
 200c7c8:	df000415 	stw	fp,16(sp)
 200c7cc:	df000404 	addi	fp,sp,16
 200c7d0:	e13ffd15 	stw	r4,-12(fp)
 200c7d4:	e17ffe15 	stw	r5,-8(fp)
 200c7d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200c7dc:	e0bffd17 	ldw	r2,-12(fp)
 200c7e0:	10800017 	ldw	r2,0(r2)
 200c7e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200c7e8:	e0bffc17 	ldw	r2,-16(fp)
 200c7ec:	10800a04 	addi	r2,r2,40
 200c7f0:	1009883a 	mov	r4,r2
 200c7f4:	e17ffe17 	ldw	r5,-8(fp)
 200c7f8:	e1bfff17 	ldw	r6,-4(fp)
 200c7fc:	200cbe40 	call	200cbe4 <altera_avalon_jtag_uart_ioctl>
}
 200c800:	e037883a 	mov	sp,fp
 200c804:	dfc00117 	ldw	ra,4(sp)
 200c808:	df000017 	ldw	fp,0(sp)
 200c80c:	dec00204 	addi	sp,sp,8
 200c810:	f800283a 	ret

0200c814 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200c814:	defffa04 	addi	sp,sp,-24
 200c818:	dfc00515 	stw	ra,20(sp)
 200c81c:	df000415 	stw	fp,16(sp)
 200c820:	df000404 	addi	fp,sp,16
 200c824:	e13ffd15 	stw	r4,-12(fp)
 200c828:	e17ffe15 	stw	r5,-8(fp)
 200c82c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c830:	e0bffd17 	ldw	r2,-12(fp)
 200c834:	00c00044 	movi	r3,1
 200c838:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200c83c:	e0bffd17 	ldw	r2,-12(fp)
 200c840:	10800017 	ldw	r2,0(r2)
 200c844:	10800104 	addi	r2,r2,4
 200c848:	e0fffd17 	ldw	r3,-12(fp)
 200c84c:	18c00817 	ldw	r3,32(r3)
 200c850:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200c854:	e0fffe17 	ldw	r3,-8(fp)
 200c858:	e0bfff17 	ldw	r2,-4(fp)
 200c85c:	d8000015 	stw	zero,0(sp)
 200c860:	1809883a 	mov	r4,r3
 200c864:	100b883a 	mov	r5,r2
 200c868:	01808074 	movhi	r6,513
 200c86c:	31b23504 	addi	r6,r6,-14124
 200c870:	e1fffd17 	ldw	r7,-12(fp)
 200c874:	200eb140 	call	200eb14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200c878:	e0bffd17 	ldw	r2,-12(fp)
 200c87c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200c880:	e0bffd17 	ldw	r2,-12(fp)
 200c884:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200c888:	00808074 	movhi	r2,513
 200c88c:	1085d404 	addi	r2,r2,5968
 200c890:	10800017 	ldw	r2,0(r2)
 200c894:	1809883a 	mov	r4,r3
 200c898:	100b883a 	mov	r5,r2
 200c89c:	01808074 	movhi	r6,513
 200c8a0:	31b2b604 	addi	r6,r6,-13608
 200c8a4:	e1fffd17 	ldw	r7,-12(fp)
 200c8a8:	200e3a80 	call	200e3a8 <alt_alarm_start>
 200c8ac:	1000040e 	bge	r2,zero,200c8c0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200c8b0:	e0bffd17 	ldw	r2,-12(fp)
 200c8b4:	00e00034 	movhi	r3,32768
 200c8b8:	18ffffc4 	addi	r3,r3,-1
 200c8bc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200c8c0:	e037883a 	mov	sp,fp
 200c8c4:	dfc00117 	ldw	ra,4(sp)
 200c8c8:	df000017 	ldw	fp,0(sp)
 200c8cc:	dec00204 	addi	sp,sp,8
 200c8d0:	f800283a 	ret

0200c8d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200c8d4:	defff804 	addi	sp,sp,-32
 200c8d8:	df000715 	stw	fp,28(sp)
 200c8dc:	df000704 	addi	fp,sp,28
 200c8e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200c8e4:	e0bfff17 	ldw	r2,-4(fp)
 200c8e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200c8ec:	e0bffb17 	ldw	r2,-20(fp)
 200c8f0:	10800017 	ldw	r2,0(r2)
 200c8f4:	e0bffc15 	stw	r2,-16(fp)
 200c8f8:	00000106 	br	200c900 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 200c8fc:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c900:	e0bffc17 	ldw	r2,-16(fp)
 200c904:	10800104 	addi	r2,r2,4
 200c908:	10800037 	ldwio	r2,0(r2)
 200c90c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200c910:	e0bffd17 	ldw	r2,-12(fp)
 200c914:	1080c00c 	andi	r2,r2,768
 200c918:	10006a26 	beq	r2,zero,200cac4 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200c91c:	e0bffd17 	ldw	r2,-12(fp)
 200c920:	1080400c 	andi	r2,r2,256
 200c924:	10003326 	beq	r2,zero,200c9f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200c928:	00800074 	movhi	r2,1
 200c92c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c930:	e0bffb17 	ldw	r2,-20(fp)
 200c934:	10800a17 	ldw	r2,40(r2)
 200c938:	10800044 	addi	r2,r2,1
 200c93c:	1081ffcc 	andi	r2,r2,2047
 200c940:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200c944:	e0bffb17 	ldw	r2,-20(fp)
 200c948:	10c00b17 	ldw	r3,44(r2)
 200c94c:	e0bffe17 	ldw	r2,-8(fp)
 200c950:	18801426 	beq	r3,r2,200c9a4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200c954:	e0bffc17 	ldw	r2,-16(fp)
 200c958:	10800037 	ldwio	r2,0(r2)
 200c95c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200c960:	e0bff917 	ldw	r2,-28(fp)
 200c964:	10a0000c 	andi	r2,r2,32768
 200c968:	10001026 	beq	r2,zero,200c9ac <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200c96c:	e0bffb17 	ldw	r2,-20(fp)
 200c970:	10800a17 	ldw	r2,40(r2)
 200c974:	e0fff917 	ldw	r3,-28(fp)
 200c978:	e13ffb17 	ldw	r4,-20(fp)
 200c97c:	2085883a 	add	r2,r4,r2
 200c980:	10800e04 	addi	r2,r2,56
 200c984:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200c988:	e0bffb17 	ldw	r2,-20(fp)
 200c98c:	10800a17 	ldw	r2,40(r2)
 200c990:	10800044 	addi	r2,r2,1
 200c994:	10c1ffcc 	andi	r3,r2,2047
 200c998:	e0bffb17 	ldw	r2,-20(fp)
 200c99c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200c9a0:	003fe306 	br	200c930 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200c9a4:	0001883a 	nop
 200c9a8:	00000106 	br	200c9b0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200c9ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200c9b0:	e0bff917 	ldw	r2,-28(fp)
 200c9b4:	10bfffec 	andhi	r2,r2,65535
 200c9b8:	10000e26 	beq	r2,zero,200c9f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200c9bc:	e0bffb17 	ldw	r2,-20(fp)
 200c9c0:	10c00817 	ldw	r3,32(r2)
 200c9c4:	00bfff84 	movi	r2,-2
 200c9c8:	1886703a 	and	r3,r3,r2
 200c9cc:	e0bffb17 	ldw	r2,-20(fp)
 200c9d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200c9d4:	e0bffc17 	ldw	r2,-16(fp)
 200c9d8:	10800104 	addi	r2,r2,4
 200c9dc:	e0fffb17 	ldw	r3,-20(fp)
 200c9e0:	18c00817 	ldw	r3,32(r3)
 200c9e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200c9e8:	e0bffc17 	ldw	r2,-16(fp)
 200c9ec:	10800104 	addi	r2,r2,4
 200c9f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200c9f4:	e0bffd17 	ldw	r2,-12(fp)
 200c9f8:	1080800c 	andi	r2,r2,512
 200c9fc:	103fbf26 	beq	r2,zero,200c8fc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200ca00:	e0bffd17 	ldw	r2,-12(fp)
 200ca04:	1004d43a 	srli	r2,r2,16
 200ca08:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200ca0c:	00001406 	br	200ca60 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200ca10:	e0bffc17 	ldw	r2,-16(fp)
 200ca14:	e0fffb17 	ldw	r3,-20(fp)
 200ca18:	18c00d17 	ldw	r3,52(r3)
 200ca1c:	e13ffb17 	ldw	r4,-20(fp)
 200ca20:	20c7883a 	add	r3,r4,r3
 200ca24:	18c20e04 	addi	r3,r3,2104
 200ca28:	18c00003 	ldbu	r3,0(r3)
 200ca2c:	18c03fcc 	andi	r3,r3,255
 200ca30:	18c0201c 	xori	r3,r3,128
 200ca34:	18ffe004 	addi	r3,r3,-128
 200ca38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200ca3c:	e0bffb17 	ldw	r2,-20(fp)
 200ca40:	10800d17 	ldw	r2,52(r2)
 200ca44:	10800044 	addi	r2,r2,1
 200ca48:	10c1ffcc 	andi	r3,r2,2047
 200ca4c:	e0bffb17 	ldw	r2,-20(fp)
 200ca50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200ca54:	e0bffa17 	ldw	r2,-24(fp)
 200ca58:	10bfffc4 	addi	r2,r2,-1
 200ca5c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200ca60:	e0bffa17 	ldw	r2,-24(fp)
 200ca64:	10000526 	beq	r2,zero,200ca7c <altera_avalon_jtag_uart_irq+0x1a8>
 200ca68:	e0bffb17 	ldw	r2,-20(fp)
 200ca6c:	10c00d17 	ldw	r3,52(r2)
 200ca70:	e0bffb17 	ldw	r2,-20(fp)
 200ca74:	10800c17 	ldw	r2,48(r2)
 200ca78:	18bfe51e 	bne	r3,r2,200ca10 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200ca7c:	e0bffa17 	ldw	r2,-24(fp)
 200ca80:	103f9e26 	beq	r2,zero,200c8fc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200ca84:	e0bffb17 	ldw	r2,-20(fp)
 200ca88:	10c00817 	ldw	r3,32(r2)
 200ca8c:	00bfff44 	movi	r2,-3
 200ca90:	1886703a 	and	r3,r3,r2
 200ca94:	e0bffb17 	ldw	r2,-20(fp)
 200ca98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ca9c:	e0bffb17 	ldw	r2,-20(fp)
 200caa0:	10800017 	ldw	r2,0(r2)
 200caa4:	10800104 	addi	r2,r2,4
 200caa8:	e0fffb17 	ldw	r3,-20(fp)
 200caac:	18c00817 	ldw	r3,32(r3)
 200cab0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200cab4:	e0bffc17 	ldw	r2,-16(fp)
 200cab8:	10800104 	addi	r2,r2,4
 200cabc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200cac0:	003f8e06 	br	200c8fc <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200cac4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200cac8:	e037883a 	mov	sp,fp
 200cacc:	df000017 	ldw	fp,0(sp)
 200cad0:	dec00104 	addi	sp,sp,4
 200cad4:	f800283a 	ret

0200cad8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200cad8:	defffc04 	addi	sp,sp,-16
 200cadc:	df000315 	stw	fp,12(sp)
 200cae0:	df000304 	addi	fp,sp,12
 200cae4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200cae8:	e0bfff17 	ldw	r2,-4(fp)
 200caec:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200caf0:	e0bffd17 	ldw	r2,-12(fp)
 200caf4:	10800017 	ldw	r2,0(r2)
 200caf8:	10800104 	addi	r2,r2,4
 200cafc:	10800037 	ldwio	r2,0(r2)
 200cb00:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200cb04:	e0bffe17 	ldw	r2,-8(fp)
 200cb08:	1081000c 	andi	r2,r2,1024
 200cb0c:	10000a26 	beq	r2,zero,200cb38 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200cb10:	e0bffd17 	ldw	r2,-12(fp)
 200cb14:	10800017 	ldw	r2,0(r2)
 200cb18:	10800104 	addi	r2,r2,4
 200cb1c:	e0fffd17 	ldw	r3,-12(fp)
 200cb20:	18c00817 	ldw	r3,32(r3)
 200cb24:	18c10014 	ori	r3,r3,1024
 200cb28:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 200cb2c:	e0bffd17 	ldw	r2,-12(fp)
 200cb30:	10000915 	stw	zero,36(r2)
 200cb34:	00000a06 	br	200cb60 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200cb38:	e0bffd17 	ldw	r2,-12(fp)
 200cb3c:	10800917 	ldw	r2,36(r2)
 200cb40:	00e00034 	movhi	r3,32768
 200cb44:	18ffff04 	addi	r3,r3,-4
 200cb48:	18800536 	bltu	r3,r2,200cb60 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 200cb4c:	e0bffd17 	ldw	r2,-12(fp)
 200cb50:	10800917 	ldw	r2,36(r2)
 200cb54:	10c00044 	addi	r3,r2,1
 200cb58:	e0bffd17 	ldw	r2,-12(fp)
 200cb5c:	10c00915 	stw	r3,36(r2)
 200cb60:	00808074 	movhi	r2,513
 200cb64:	1085d404 	addi	r2,r2,5968
 200cb68:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200cb6c:	e037883a 	mov	sp,fp
 200cb70:	df000017 	ldw	fp,0(sp)
 200cb74:	dec00104 	addi	sp,sp,4
 200cb78:	f800283a 	ret

0200cb7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200cb7c:	defffd04 	addi	sp,sp,-12
 200cb80:	df000215 	stw	fp,8(sp)
 200cb84:	df000204 	addi	fp,sp,8
 200cb88:	e13ffe15 	stw	r4,-8(fp)
 200cb8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200cb90:	00000506 	br	200cba8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200cb94:	e0bfff17 	ldw	r2,-4(fp)
 200cb98:	1090000c 	andi	r2,r2,16384
 200cb9c:	10000226 	beq	r2,zero,200cba8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200cba0:	00bffd44 	movi	r2,-11
 200cba4:	00000b06 	br	200cbd4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200cba8:	e0bffe17 	ldw	r2,-8(fp)
 200cbac:	10c00d17 	ldw	r3,52(r2)
 200cbb0:	e0bffe17 	ldw	r2,-8(fp)
 200cbb4:	10800c17 	ldw	r2,48(r2)
 200cbb8:	18800526 	beq	r3,r2,200cbd0 <altera_avalon_jtag_uart_close+0x54>
 200cbbc:	e0bffe17 	ldw	r2,-8(fp)
 200cbc0:	10c00917 	ldw	r3,36(r2)
 200cbc4:	e0bffe17 	ldw	r2,-8(fp)
 200cbc8:	10800117 	ldw	r2,4(r2)
 200cbcc:	18bff136 	bltu	r3,r2,200cb94 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200cbd0:	0005883a 	mov	r2,zero
}
 200cbd4:	e037883a 	mov	sp,fp
 200cbd8:	df000017 	ldw	fp,0(sp)
 200cbdc:	dec00104 	addi	sp,sp,4
 200cbe0:	f800283a 	ret

0200cbe4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200cbe4:	defffa04 	addi	sp,sp,-24
 200cbe8:	df000515 	stw	fp,20(sp)
 200cbec:	df000504 	addi	fp,sp,20
 200cbf0:	e13ffd15 	stw	r4,-12(fp)
 200cbf4:	e17ffe15 	stw	r5,-8(fp)
 200cbf8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200cbfc:	00bff9c4 	movi	r2,-25
 200cc00:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200cc04:	e0bffe17 	ldw	r2,-8(fp)
 200cc08:	10da8060 	cmpeqi	r3,r2,27137
 200cc0c:	1800031e 	bne	r3,zero,200cc1c <altera_avalon_jtag_uart_ioctl+0x38>
 200cc10:	109a80a0 	cmpeqi	r2,r2,27138
 200cc14:	1000181e 	bne	r2,zero,200cc78 <altera_avalon_jtag_uart_ioctl+0x94>
 200cc18:	00002606 	br	200ccb4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200cc1c:	e0bffd17 	ldw	r2,-12(fp)
 200cc20:	10c00117 	ldw	r3,4(r2)
 200cc24:	00a00034 	movhi	r2,32768
 200cc28:	10bfffc4 	addi	r2,r2,-1
 200cc2c:	18802226 	beq	r3,r2,200ccb8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 200cc30:	e0bfff17 	ldw	r2,-4(fp)
 200cc34:	10800017 	ldw	r2,0(r2)
 200cc38:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200cc3c:	e0bffc17 	ldw	r2,-16(fp)
 200cc40:	10800090 	cmplti	r2,r2,2
 200cc44:	1000061e 	bne	r2,zero,200cc60 <altera_avalon_jtag_uart_ioctl+0x7c>
 200cc48:	e0fffc17 	ldw	r3,-16(fp)
 200cc4c:	00a00034 	movhi	r2,32768
 200cc50:	10bfffc4 	addi	r2,r2,-1
 200cc54:	18800226 	beq	r3,r2,200cc60 <altera_avalon_jtag_uart_ioctl+0x7c>
 200cc58:	e0bffc17 	ldw	r2,-16(fp)
 200cc5c:	00000206 	br	200cc68 <altera_avalon_jtag_uart_ioctl+0x84>
 200cc60:	00a00034 	movhi	r2,32768
 200cc64:	10bfff84 	addi	r2,r2,-2
 200cc68:	e0fffd17 	ldw	r3,-12(fp)
 200cc6c:	18800115 	stw	r2,4(r3)
      rc = 0;
 200cc70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200cc74:	00001006 	br	200ccb8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200cc78:	e0bffd17 	ldw	r2,-12(fp)
 200cc7c:	10c00117 	ldw	r3,4(r2)
 200cc80:	00a00034 	movhi	r2,32768
 200cc84:	10bfffc4 	addi	r2,r2,-1
 200cc88:	18800d26 	beq	r3,r2,200ccc0 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200cc8c:	e0bffd17 	ldw	r2,-12(fp)
 200cc90:	10c00917 	ldw	r3,36(r2)
 200cc94:	e0bffd17 	ldw	r2,-12(fp)
 200cc98:	10800117 	ldw	r2,4(r2)
 200cc9c:	1885803a 	cmpltu	r2,r3,r2
 200cca0:	10c03fcc 	andi	r3,r2,255
 200cca4:	e0bfff17 	ldw	r2,-4(fp)
 200cca8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200ccac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200ccb0:	00000306 	br	200ccc0 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 200ccb4:	00000306 	br	200ccc4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200ccb8:	0001883a 	nop
 200ccbc:	00000106 	br	200ccc4 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200ccc0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200ccc4:	e0bffb17 	ldw	r2,-20(fp)
}
 200ccc8:	e037883a 	mov	sp,fp
 200cccc:	df000017 	ldw	fp,0(sp)
 200ccd0:	dec00104 	addi	sp,sp,4
 200ccd4:	f800283a 	ret

0200ccd8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200ccd8:	defff304 	addi	sp,sp,-52
 200ccdc:	dfc00c15 	stw	ra,48(sp)
 200cce0:	df000b15 	stw	fp,44(sp)
 200cce4:	df000b04 	addi	fp,sp,44
 200cce8:	e13ffc15 	stw	r4,-16(fp)
 200ccec:	e17ffd15 	stw	r5,-12(fp)
 200ccf0:	e1bffe15 	stw	r6,-8(fp)
 200ccf4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200ccf8:	e0bffd17 	ldw	r2,-12(fp)
 200ccfc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200cd00:	00004706 	br	200ce20 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200cd04:	e0bffc17 	ldw	r2,-16(fp)
 200cd08:	10800a17 	ldw	r2,40(r2)
 200cd0c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200cd10:	e0bffc17 	ldw	r2,-16(fp)
 200cd14:	10800b17 	ldw	r2,44(r2)
 200cd18:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200cd1c:	e0fff717 	ldw	r3,-36(fp)
 200cd20:	e0bff817 	ldw	r2,-32(fp)
 200cd24:	18800536 	bltu	r3,r2,200cd3c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200cd28:	e0fff717 	ldw	r3,-36(fp)
 200cd2c:	e0bff817 	ldw	r2,-32(fp)
 200cd30:	1885c83a 	sub	r2,r3,r2
 200cd34:	e0bff615 	stw	r2,-40(fp)
 200cd38:	00000406 	br	200cd4c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200cd3c:	00c20004 	movi	r3,2048
 200cd40:	e0bff817 	ldw	r2,-32(fp)
 200cd44:	1885c83a 	sub	r2,r3,r2
 200cd48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200cd4c:	e0bff617 	ldw	r2,-40(fp)
 200cd50:	10001e26 	beq	r2,zero,200cdcc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200cd54:	e0fffe17 	ldw	r3,-8(fp)
 200cd58:	e0bff617 	ldw	r2,-40(fp)
 200cd5c:	1880022e 	bgeu	r3,r2,200cd68 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200cd60:	e0bffe17 	ldw	r2,-8(fp)
 200cd64:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200cd68:	e0bff817 	ldw	r2,-32(fp)
 200cd6c:	10800e04 	addi	r2,r2,56
 200cd70:	e0fffc17 	ldw	r3,-16(fp)
 200cd74:	1885883a 	add	r2,r3,r2
 200cd78:	e13ff517 	ldw	r4,-44(fp)
 200cd7c:	100b883a 	mov	r5,r2
 200cd80:	e1bff617 	ldw	r6,-40(fp)
 200cd84:	20024440 	call	2002444 <memcpy>
      ptr   += n;
 200cd88:	e0fff517 	ldw	r3,-44(fp)
 200cd8c:	e0bff617 	ldw	r2,-40(fp)
 200cd90:	1885883a 	add	r2,r3,r2
 200cd94:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200cd98:	e0fffe17 	ldw	r3,-8(fp)
 200cd9c:	e0bff617 	ldw	r2,-40(fp)
 200cda0:	1885c83a 	sub	r2,r3,r2
 200cda4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200cda8:	e0fff817 	ldw	r3,-32(fp)
 200cdac:	e0bff617 	ldw	r2,-40(fp)
 200cdb0:	1885883a 	add	r2,r3,r2
 200cdb4:	10c1ffcc 	andi	r3,r2,2047
 200cdb8:	e0bffc17 	ldw	r2,-16(fp)
 200cdbc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200cdc0:	e0bffe17 	ldw	r2,-8(fp)
 200cdc4:	00bfcf16 	blt	zero,r2,200cd04 <altera_avalon_jtag_uart_read+0x2c>
 200cdc8:	00000106 	br	200cdd0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200cdcc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200cdd0:	e0fff517 	ldw	r3,-44(fp)
 200cdd4:	e0bffd17 	ldw	r2,-12(fp)
 200cdd8:	1880141e 	bne	r3,r2,200ce2c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200cddc:	e0bfff17 	ldw	r2,-4(fp)
 200cde0:	1090000c 	andi	r2,r2,16384
 200cde4:	1000131e 	bne	r2,zero,200ce34 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200cde8:	0001883a 	nop
 200cdec:	e0bffc17 	ldw	r2,-16(fp)
 200cdf0:	10c00a17 	ldw	r3,40(r2)
 200cdf4:	e0bff717 	ldw	r2,-36(fp)
 200cdf8:	1880051e 	bne	r3,r2,200ce10 <altera_avalon_jtag_uart_read+0x138>
 200cdfc:	e0bffc17 	ldw	r2,-16(fp)
 200ce00:	10c00917 	ldw	r3,36(r2)
 200ce04:	e0bffc17 	ldw	r2,-16(fp)
 200ce08:	10800117 	ldw	r2,4(r2)
 200ce0c:	18bff736 	bltu	r3,r2,200cdec <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200ce10:	e0bffc17 	ldw	r2,-16(fp)
 200ce14:	10c00a17 	ldw	r3,40(r2)
 200ce18:	e0bff717 	ldw	r2,-36(fp)
 200ce1c:	18800726 	beq	r3,r2,200ce3c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200ce20:	e0bffe17 	ldw	r2,-8(fp)
 200ce24:	00bfb716 	blt	zero,r2,200cd04 <altera_avalon_jtag_uart_read+0x2c>
 200ce28:	00000506 	br	200ce40 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200ce2c:	0001883a 	nop
 200ce30:	00000306 	br	200ce40 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200ce34:	0001883a 	nop
 200ce38:	00000106 	br	200ce40 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200ce3c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200ce40:	e0fff517 	ldw	r3,-44(fp)
 200ce44:	e0bffd17 	ldw	r2,-12(fp)
 200ce48:	18801726 	beq	r3,r2,200cea8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ce4c:	0005303a 	rdctl	r2,status
 200ce50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ce54:	e0fffa17 	ldw	r3,-24(fp)
 200ce58:	00bfff84 	movi	r2,-2
 200ce5c:	1884703a 	and	r2,r3,r2
 200ce60:	1001703a 	wrctl	status,r2
  
  return context;
 200ce64:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200ce68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200ce6c:	e0bffc17 	ldw	r2,-16(fp)
 200ce70:	10800817 	ldw	r2,32(r2)
 200ce74:	10c00054 	ori	r3,r2,1
 200ce78:	e0bffc17 	ldw	r2,-16(fp)
 200ce7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200ce80:	e0bffc17 	ldw	r2,-16(fp)
 200ce84:	10800017 	ldw	r2,0(r2)
 200ce88:	10800104 	addi	r2,r2,4
 200ce8c:	e0fffc17 	ldw	r3,-16(fp)
 200ce90:	18c00817 	ldw	r3,32(r3)
 200ce94:	10c00035 	stwio	r3,0(r2)
 200ce98:	e0bff917 	ldw	r2,-28(fp)
 200ce9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200cea0:	e0bffb17 	ldw	r2,-20(fp)
 200cea4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200cea8:	e0fff517 	ldw	r3,-44(fp)
 200ceac:	e0bffd17 	ldw	r2,-12(fp)
 200ceb0:	18800426 	beq	r3,r2,200cec4 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 200ceb4:	e0fff517 	ldw	r3,-44(fp)
 200ceb8:	e0bffd17 	ldw	r2,-12(fp)
 200cebc:	1885c83a 	sub	r2,r3,r2
 200cec0:	00000606 	br	200cedc <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 200cec4:	e0bfff17 	ldw	r2,-4(fp)
 200cec8:	1090000c 	andi	r2,r2,16384
 200cecc:	10000226 	beq	r2,zero,200ced8 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 200ced0:	00bffd44 	movi	r2,-11
 200ced4:	00000106 	br	200cedc <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 200ced8:	00bffec4 	movi	r2,-5
}
 200cedc:	e037883a 	mov	sp,fp
 200cee0:	dfc00117 	ldw	ra,4(sp)
 200cee4:	df000017 	ldw	fp,0(sp)
 200cee8:	dec00204 	addi	sp,sp,8
 200ceec:	f800283a 	ret

0200cef0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200cef0:	defff304 	addi	sp,sp,-52
 200cef4:	dfc00c15 	stw	ra,48(sp)
 200cef8:	df000b15 	stw	fp,44(sp)
 200cefc:	df000b04 	addi	fp,sp,44
 200cf00:	e13ffc15 	stw	r4,-16(fp)
 200cf04:	e17ffd15 	stw	r5,-12(fp)
 200cf08:	e1bffe15 	stw	r6,-8(fp)
 200cf0c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200cf10:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200cf14:	e0bffd17 	ldw	r2,-12(fp)
 200cf18:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200cf1c:	00003706 	br	200cffc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200cf20:	e0bffc17 	ldw	r2,-16(fp)
 200cf24:	10800c17 	ldw	r2,48(r2)
 200cf28:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 200cf2c:	e0bffc17 	ldw	r2,-16(fp)
 200cf30:	10800d17 	ldw	r2,52(r2)
 200cf34:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200cf38:	e0fff817 	ldw	r3,-32(fp)
 200cf3c:	e0bff517 	ldw	r2,-44(fp)
 200cf40:	1880062e 	bgeu	r3,r2,200cf5c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200cf44:	e0fff517 	ldw	r3,-44(fp)
 200cf48:	e0bff817 	ldw	r2,-32(fp)
 200cf4c:	1885c83a 	sub	r2,r3,r2
 200cf50:	10bfffc4 	addi	r2,r2,-1
 200cf54:	e0bff615 	stw	r2,-40(fp)
 200cf58:	00000b06 	br	200cf88 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200cf5c:	e0bff517 	ldw	r2,-44(fp)
 200cf60:	10000526 	beq	r2,zero,200cf78 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200cf64:	00c20004 	movi	r3,2048
 200cf68:	e0bff817 	ldw	r2,-32(fp)
 200cf6c:	1885c83a 	sub	r2,r3,r2
 200cf70:	e0bff615 	stw	r2,-40(fp)
 200cf74:	00000406 	br	200cf88 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200cf78:	00c1ffc4 	movi	r3,2047
 200cf7c:	e0bff817 	ldw	r2,-32(fp)
 200cf80:	1885c83a 	sub	r2,r3,r2
 200cf84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200cf88:	e0bff617 	ldw	r2,-40(fp)
 200cf8c:	10001e26 	beq	r2,zero,200d008 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200cf90:	e0fffe17 	ldw	r3,-8(fp)
 200cf94:	e0bff617 	ldw	r2,-40(fp)
 200cf98:	1880022e 	bgeu	r3,r2,200cfa4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200cf9c:	e0bffe17 	ldw	r2,-8(fp)
 200cfa0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200cfa4:	e0bff817 	ldw	r2,-32(fp)
 200cfa8:	10820e04 	addi	r2,r2,2104
 200cfac:	e0fffc17 	ldw	r3,-16(fp)
 200cfb0:	1885883a 	add	r2,r3,r2
 200cfb4:	1009883a 	mov	r4,r2
 200cfb8:	e17ffd17 	ldw	r5,-12(fp)
 200cfbc:	e1bff617 	ldw	r6,-40(fp)
 200cfc0:	20024440 	call	2002444 <memcpy>
      ptr   += n;
 200cfc4:	e0fffd17 	ldw	r3,-12(fp)
 200cfc8:	e0bff617 	ldw	r2,-40(fp)
 200cfcc:	1885883a 	add	r2,r3,r2
 200cfd0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200cfd4:	e0fffe17 	ldw	r3,-8(fp)
 200cfd8:	e0bff617 	ldw	r2,-40(fp)
 200cfdc:	1885c83a 	sub	r2,r3,r2
 200cfe0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200cfe4:	e0fff817 	ldw	r3,-32(fp)
 200cfe8:	e0bff617 	ldw	r2,-40(fp)
 200cfec:	1885883a 	add	r2,r3,r2
 200cff0:	10c1ffcc 	andi	r3,r2,2047
 200cff4:	e0bffc17 	ldw	r2,-16(fp)
 200cff8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200cffc:	e0bffe17 	ldw	r2,-8(fp)
 200d000:	00bfc716 	blt	zero,r2,200cf20 <altera_avalon_jtag_uart_write+0x30>
 200d004:	00000106 	br	200d00c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200d008:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d00c:	0005303a 	rdctl	r2,status
 200d010:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d014:	e0fffa17 	ldw	r3,-24(fp)
 200d018:	00bfff84 	movi	r2,-2
 200d01c:	1884703a 	and	r2,r3,r2
 200d020:	1001703a 	wrctl	status,r2
  
  return context;
 200d024:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200d028:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200d02c:	e0bffc17 	ldw	r2,-16(fp)
 200d030:	10800817 	ldw	r2,32(r2)
 200d034:	10c00094 	ori	r3,r2,2
 200d038:	e0bffc17 	ldw	r2,-16(fp)
 200d03c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200d040:	e0bffc17 	ldw	r2,-16(fp)
 200d044:	10800017 	ldw	r2,0(r2)
 200d048:	10800104 	addi	r2,r2,4
 200d04c:	e0fffc17 	ldw	r3,-16(fp)
 200d050:	18c00817 	ldw	r3,32(r3)
 200d054:	10c00035 	stwio	r3,0(r2)
 200d058:	e0bff917 	ldw	r2,-28(fp)
 200d05c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d060:	e0bffb17 	ldw	r2,-20(fp)
 200d064:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200d068:	e0bffe17 	ldw	r2,-8(fp)
 200d06c:	0080110e 	bge	zero,r2,200d0b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200d070:	e0bfff17 	ldw	r2,-4(fp)
 200d074:	1090000c 	andi	r2,r2,16384
 200d078:	1000111e 	bne	r2,zero,200d0c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200d07c:	0001883a 	nop
 200d080:	e0bffc17 	ldw	r2,-16(fp)
 200d084:	10c00d17 	ldw	r3,52(r2)
 200d088:	e0bff517 	ldw	r2,-44(fp)
 200d08c:	1880051e 	bne	r3,r2,200d0a4 <altera_avalon_jtag_uart_write+0x1b4>
 200d090:	e0bffc17 	ldw	r2,-16(fp)
 200d094:	10c00917 	ldw	r3,36(r2)
 200d098:	e0bffc17 	ldw	r2,-16(fp)
 200d09c:	10800117 	ldw	r2,4(r2)
 200d0a0:	18bff736 	bltu	r3,r2,200d080 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 200d0a4:	e0bffc17 	ldw	r2,-16(fp)
 200d0a8:	10c00d17 	ldw	r3,52(r2)
 200d0ac:	e0bff517 	ldw	r2,-44(fp)
 200d0b0:	18800526 	beq	r3,r2,200d0c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200d0b4:	e0bffe17 	ldw	r2,-8(fp)
 200d0b8:	00bfd016 	blt	zero,r2,200cffc <altera_avalon_jtag_uart_write+0x10c>
 200d0bc:	00000306 	br	200d0cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200d0c0:	0001883a 	nop
 200d0c4:	00000106 	br	200d0cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 200d0c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200d0cc:	e0fffd17 	ldw	r3,-12(fp)
 200d0d0:	e0bff717 	ldw	r2,-36(fp)
 200d0d4:	18800426 	beq	r3,r2,200d0e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200d0d8:	e0fffd17 	ldw	r3,-12(fp)
 200d0dc:	e0bff717 	ldw	r2,-36(fp)
 200d0e0:	1885c83a 	sub	r2,r3,r2
 200d0e4:	00000606 	br	200d100 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200d0e8:	e0bfff17 	ldw	r2,-4(fp)
 200d0ec:	1090000c 	andi	r2,r2,16384
 200d0f0:	10000226 	beq	r2,zero,200d0fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200d0f4:	00bffd44 	movi	r2,-11
 200d0f8:	00000106 	br	200d100 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200d0fc:	00bffec4 	movi	r2,-5
}
 200d100:	e037883a 	mov	sp,fp
 200d104:	dfc00117 	ldw	ra,4(sp)
 200d108:	df000017 	ldw	fp,0(sp)
 200d10c:	dec00204 	addi	sp,sp,8
 200d110:	f800283a 	ret

0200d114 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 200d114:	defffa04 	addi	sp,sp,-24
 200d118:	dfc00515 	stw	ra,20(sp)
 200d11c:	df000415 	stw	fp,16(sp)
 200d120:	df000404 	addi	fp,sp,16
 200d124:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 200d128:	0007883a 	mov	r3,zero
 200d12c:	e0bfff17 	ldw	r2,-4(fp)
 200d130:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 200d134:	e0bfff17 	ldw	r2,-4(fp)
 200d138:	10800104 	addi	r2,r2,4
 200d13c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200d140:	0005303a 	rdctl	r2,status
 200d144:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200d148:	e0fffd17 	ldw	r3,-12(fp)
 200d14c:	00bfff84 	movi	r2,-2
 200d150:	1884703a 	and	r2,r3,r2
 200d154:	1001703a 	wrctl	status,r2
  
  return context;
 200d158:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 200d15c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 200d160:	200efcc0 	call	200efcc <alt_tick>
 200d164:	e0bffc17 	ldw	r2,-16(fp)
 200d168:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200d16c:	e0bffe17 	ldw	r2,-8(fp)
 200d170:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 200d174:	e037883a 	mov	sp,fp
 200d178:	dfc00117 	ldw	ra,4(sp)
 200d17c:	df000017 	ldw	fp,0(sp)
 200d180:	dec00204 	addi	sp,sp,8
 200d184:	f800283a 	ret

0200d188 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 200d188:	defff804 	addi	sp,sp,-32
 200d18c:	dfc00715 	stw	ra,28(sp)
 200d190:	df000615 	stw	fp,24(sp)
 200d194:	df000604 	addi	fp,sp,24
 200d198:	e13ffc15 	stw	r4,-16(fp)
 200d19c:	e17ffd15 	stw	r5,-12(fp)
 200d1a0:	e1bffe15 	stw	r6,-8(fp)
 200d1a4:	e1ffff15 	stw	r7,-4(fp)
 200d1a8:	e0bfff17 	ldw	r2,-4(fp)
 200d1ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 200d1b0:	00808074 	movhi	r2,513
 200d1b4:	1085d404 	addi	r2,r2,5968
 200d1b8:	10800017 	ldw	r2,0(r2)
 200d1bc:	1000041e 	bne	r2,zero,200d1d0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 200d1c0:	00808074 	movhi	r2,513
 200d1c4:	1085d404 	addi	r2,r2,5968
 200d1c8:	e0fffb17 	ldw	r3,-20(fp)
 200d1cc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 200d1d0:	e0bffc17 	ldw	r2,-16(fp)
 200d1d4:	10800104 	addi	r2,r2,4
 200d1d8:	00c001c4 	movi	r3,7
 200d1dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 200d1e0:	d8000015 	stw	zero,0(sp)
 200d1e4:	e13ffd17 	ldw	r4,-12(fp)
 200d1e8:	e17ffe17 	ldw	r5,-8(fp)
 200d1ec:	01808074 	movhi	r6,513
 200d1f0:	31b44504 	addi	r6,r6,-12012
 200d1f4:	e1fffc17 	ldw	r7,-16(fp)
 200d1f8:	200eb140 	call	200eb14 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 200d1fc:	e037883a 	mov	sp,fp
 200d200:	dfc00117 	ldw	ra,4(sp)
 200d204:	df000017 	ldw	fp,0(sp)
 200d208:	dec00204 	addi	sp,sp,8
 200d20c:	f800283a 	ret

0200d210 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 200d210:	defffe04 	addi	sp,sp,-8
 200d214:	df000115 	stw	fp,4(sp)
 200d218:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
 200d21c:	00808074 	movhi	r2,513
 200d220:	1085d104 	addi	r2,r2,5956
 200d224:	10800017 	ldw	r2,0(r2)
 200d228:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
 200d22c:	00808074 	movhi	r2,513
 200d230:	1085d204 	addi	r2,r2,5960
 200d234:	10800017 	ldw	r2,0(r2)
 200d238:	1000021e 	bne	r2,zero,200d244 <alt_timestamp_start+0x34>
  {
    return -1;
 200d23c:	00bfffc4 	movi	r2,-1
 200d240:	00001906 	br	200d2a8 <alt_timestamp_start+0x98>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 200d244:	e0bfff17 	ldw	r2,-4(fp)
 200d248:	10800104 	addi	r2,r2,4
 200d24c:	00c00204 	movi	r3,8
 200d250:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
 200d254:	e0bfff17 	ldw	r2,-4(fp)
 200d258:	10800204 	addi	r2,r2,8
 200d25c:	00ffffd4 	movui	r3,65535
 200d260:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
 200d264:	e0bfff17 	ldw	r2,-4(fp)
 200d268:	10800304 	addi	r2,r2,12
 200d26c:	00ffffd4 	movui	r3,65535
 200d270:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
 200d274:	e0bfff17 	ldw	r2,-4(fp)
 200d278:	10800404 	addi	r2,r2,16
 200d27c:	00ffffd4 	movui	r3,65535
 200d280:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
 200d284:	e0bfff17 	ldw	r2,-4(fp)
 200d288:	10800504 	addi	r2,r2,20
 200d28c:	00ffffd4 	movui	r3,65535
 200d290:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
 200d294:	e0bfff17 	ldw	r2,-4(fp)
 200d298:	10800104 	addi	r2,r2,4
 200d29c:	00c00104 	movi	r3,4
 200d2a0:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
 200d2a4:	0005883a 	mov	r2,zero
}
 200d2a8:	e037883a 	mov	sp,fp
 200d2ac:	df000017 	ldw	fp,0(sp)
 200d2b0:	dec00104 	addi	sp,sp,4
 200d2b4:	f800283a 	ret

0200d2b8 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 200d2b8:	deffec04 	addi	sp,sp,-80
 200d2bc:	df001315 	stw	fp,76(sp)
 200d2c0:	ddc01215 	stw	r23,72(sp)
 200d2c4:	dd801115 	stw	r22,68(sp)
 200d2c8:	dd401015 	stw	r21,64(sp)
 200d2cc:	dd000f15 	stw	r20,60(sp)
 200d2d0:	dcc00e15 	stw	r19,56(sp)
 200d2d4:	dc800d15 	stw	r18,52(sp)
 200d2d8:	dc400c15 	stw	r17,48(sp)
 200d2dc:	dc000b15 	stw	r16,44(sp)
 200d2e0:	df000b04 	addi	fp,sp,44

  void* base = altera_avalon_timer_ts_base;
 200d2e4:	00808074 	movhi	r2,513
 200d2e8:	1085d104 	addi	r2,r2,5956
 200d2ec:	10800017 	ldw	r2,0(r2)
 200d2f0:	e0bff515 	stw	r2,-44(fp)

  if (!altera_avalon_timer_ts_freq)
 200d2f4:	00808074 	movhi	r2,513
 200d2f8:	1085d204 	addi	r2,r2,5960
 200d2fc:	10800017 	ldw	r2,0(r2)
 200d300:	1000031e 	bne	r2,zero,200d310 <alt_timestamp+0x58>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
 200d304:	017fffc4 	movi	r5,-1
 200d308:	01bfffc4 	movi	r6,-1
 200d30c:	00004206 	br	200d418 <alt_timestamp+0x160>
    }
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
 200d310:	e0bff517 	ldw	r2,-44(fp)
 200d314:	15c00604 	addi	r23,r2,24
 200d318:	0005883a 	mov	r2,zero
 200d31c:	b8800035 	stwio	r2,0(r23)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
 200d320:	e0bff517 	ldw	r2,-44(fp)
 200d324:	10800604 	addi	r2,r2,24
 200d328:	10800037 	ldwio	r2,0(r2)
 200d32c:	e0bffe15 	stw	r2,-8(fp)
 200d330:	0005883a 	mov	r2,zero
 200d334:	e0bfff15 	stw	r2,-4(fp)
 200d338:	e0fffe17 	ldw	r3,-8(fp)
 200d33c:	18bfffcc 	andi	r2,r3,65535
 200d340:	e0bff615 	stw	r2,-40(fp)
 200d344:	e0ffff17 	ldw	r3,-4(fp)
 200d348:	1804703a 	and	r2,r3,zero
 200d34c:	e0bff715 	stw	r2,-36(fp)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
 200d350:	e0bff517 	ldw	r2,-44(fp)
 200d354:	10800704 	addi	r2,r2,28
 200d358:	10800037 	ldwio	r2,0(r2)
 200d35c:	102b883a 	mov	r21,r2
 200d360:	002d883a 	mov	r22,zero
 200d364:	a8bfffcc 	andi	r2,r21,65535
 200d368:	e0bff815 	stw	r2,-32(fp)
 200d36c:	b004703a 	and	r2,r22,zero
 200d370:	e0bff915 	stw	r2,-28(fp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
 200d374:	e0bff517 	ldw	r2,-44(fp)
 200d378:	10800804 	addi	r2,r2,32
 200d37c:	10800037 	ldwio	r2,0(r2)
 200d380:	1027883a 	mov	r19,r2
 200d384:	0029883a 	mov	r20,zero
 200d388:	98bfffcc 	andi	r2,r19,65535
 200d38c:	e0bffa15 	stw	r2,-24(fp)
 200d390:	a004703a 	and	r2,r20,zero
 200d394:	e0bffb15 	stw	r2,-20(fp)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
 200d398:	e0bff517 	ldw	r2,-44(fp)
 200d39c:	10800904 	addi	r2,r2,36
 200d3a0:	10800037 	ldwio	r2,0(r2)
 200d3a4:	1023883a 	mov	r17,r2
 200d3a8:	0025883a 	mov	r18,zero
 200d3ac:	88bfffcc 	andi	r2,r17,65535
 200d3b0:	e0bffc15 	stw	r2,-16(fp)
 200d3b4:	9004703a 	and	r2,r18,zero
 200d3b8:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
 200d3bc:	e0bffc17 	ldw	r2,-16(fp)
 200d3c0:	1020943a 	slli	r16,r2,16
 200d3c4:	001f883a 	mov	r15,zero
 200d3c8:	e0bffa17 	ldw	r2,-24(fp)
 200d3cc:	1008983a 	sll	r4,r2,zero
 200d3d0:	0007883a 	mov	r3,zero
 200d3d4:	78dab03a 	or	r13,r15,r3
 200d3d8:	811cb03a 	or	r14,r16,r4
 200d3dc:	e0bff817 	ldw	r2,-32(fp)
 200d3e0:	1004d43a 	srli	r2,r2,16
 200d3e4:	e0fff917 	ldw	r3,-28(fp)
 200d3e8:	1810943a 	slli	r8,r3,16
 200d3ec:	1210b03a 	or	r8,r2,r8
 200d3f0:	e0bff817 	ldw	r2,-32(fp)
 200d3f4:	100e943a 	slli	r7,r2,16
 200d3f8:	69d6b03a 	or	r11,r13,r7
 200d3fc:	7218b03a 	or	r12,r14,r8
 200d400:	e0bff617 	ldw	r2,-40(fp)
 200d404:	12d2b03a 	or	r9,r2,r11
 200d408:	e0bff717 	ldw	r2,-36(fp)
 200d40c:	1314b03a 	or	r10,r2,r12
 200d410:	024a303a 	nor	r5,zero,r9
 200d414:	028c303a 	nor	r6,zero,r10
 200d418:	2807883a 	mov	r3,r5
 200d41c:	3009883a 	mov	r4,r6
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    }  
  }
}
 200d420:	1805883a 	mov	r2,r3
 200d424:	2007883a 	mov	r3,r4
 200d428:	e037883a 	mov	sp,fp
 200d42c:	df000817 	ldw	fp,32(sp)
 200d430:	ddc00717 	ldw	r23,28(sp)
 200d434:	dd800617 	ldw	r22,24(sp)
 200d438:	dd400517 	ldw	r21,20(sp)
 200d43c:	dd000417 	ldw	r20,16(sp)
 200d440:	dcc00317 	ldw	r19,12(sp)
 200d444:	dc800217 	ldw	r18,8(sp)
 200d448:	dc400117 	ldw	r17,4(sp)
 200d44c:	dc000017 	ldw	r16,0(sp)
 200d450:	dec00904 	addi	sp,sp,36
 200d454:	f800283a 	ret

0200d458 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 200d458:	deffff04 	addi	sp,sp,-4
 200d45c:	df000015 	stw	fp,0(sp)
 200d460:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 200d464:	00808074 	movhi	r2,513
 200d468:	1085d204 	addi	r2,r2,5960
 200d46c:	10800017 	ldw	r2,0(r2)
}
 200d470:	e037883a 	mov	sp,fp
 200d474:	df000017 	ldw	fp,0(sp)
 200d478:	dec00104 	addi	sp,sp,4
 200d47c:	f800283a 	ret

0200d480 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200d480:	defffa04 	addi	sp,sp,-24
 200d484:	dfc00515 	stw	ra,20(sp)
 200d488:	df000415 	stw	fp,16(sp)
 200d48c:	df000404 	addi	fp,sp,16
 200d490:	e13ffd15 	stw	r4,-12(fp)
 200d494:	e17ffe15 	stw	r5,-8(fp)
 200d498:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200d49c:	e0bffd17 	ldw	r2,-12(fp)
 200d4a0:	10800017 	ldw	r2,0(r2)
 200d4a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 200d4a8:	e0bffc17 	ldw	r2,-16(fp)
 200d4ac:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200d4b0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 200d4b4:	10800217 	ldw	r2,8(r2)
 200d4b8:	1809883a 	mov	r4,r3
 200d4bc:	e17ffe17 	ldw	r5,-8(fp)
 200d4c0:	e1bfff17 	ldw	r6,-4(fp)
 200d4c4:	100f883a 	mov	r7,r2
 200d4c8:	200d9880 	call	200d988 <altera_avalon_uart_read>
      fd->fd_flags);
}
 200d4cc:	e037883a 	mov	sp,fp
 200d4d0:	dfc00117 	ldw	ra,4(sp)
 200d4d4:	df000017 	ldw	fp,0(sp)
 200d4d8:	dec00204 	addi	sp,sp,8
 200d4dc:	f800283a 	ret

0200d4e0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200d4e0:	defffa04 	addi	sp,sp,-24
 200d4e4:	dfc00515 	stw	ra,20(sp)
 200d4e8:	df000415 	stw	fp,16(sp)
 200d4ec:	df000404 	addi	fp,sp,16
 200d4f0:	e13ffd15 	stw	r4,-12(fp)
 200d4f4:	e17ffe15 	stw	r5,-8(fp)
 200d4f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200d4fc:	e0bffd17 	ldw	r2,-12(fp)
 200d500:	10800017 	ldw	r2,0(r2)
 200d504:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 200d508:	e0bffc17 	ldw	r2,-16(fp)
 200d50c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200d510:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 200d514:	10800217 	ldw	r2,8(r2)
 200d518:	1809883a 	mov	r4,r3
 200d51c:	e17ffe17 	ldw	r5,-8(fp)
 200d520:	e1bfff17 	ldw	r6,-4(fp)
 200d524:	100f883a 	mov	r7,r2
 200d528:	200dbdc0 	call	200dbdc <altera_avalon_uart_write>
      fd->fd_flags);
}
 200d52c:	e037883a 	mov	sp,fp
 200d530:	dfc00117 	ldw	ra,4(sp)
 200d534:	df000017 	ldw	fp,0(sp)
 200d538:	dec00204 	addi	sp,sp,8
 200d53c:	f800283a 	ret

0200d540 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 200d540:	defffc04 	addi	sp,sp,-16
 200d544:	dfc00315 	stw	ra,12(sp)
 200d548:	df000215 	stw	fp,8(sp)
 200d54c:	df000204 	addi	fp,sp,8
 200d550:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 200d554:	e0bfff17 	ldw	r2,-4(fp)
 200d558:	10800017 	ldw	r2,0(r2)
 200d55c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 200d560:	e0bffe17 	ldw	r2,-8(fp)
 200d564:	10c00a04 	addi	r3,r2,40
 200d568:	e0bfff17 	ldw	r2,-4(fp)
 200d56c:	10800217 	ldw	r2,8(r2)
 200d570:	1809883a 	mov	r4,r3
 200d574:	100b883a 	mov	r5,r2
 200d578:	200d8e40 	call	200d8e4 <altera_avalon_uart_close>
}
 200d57c:	e037883a 	mov	sp,fp
 200d580:	dfc00117 	ldw	ra,4(sp)
 200d584:	df000017 	ldw	fp,0(sp)
 200d588:	dec00204 	addi	sp,sp,8
 200d58c:	f800283a 	ret

0200d590 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 200d590:	defff804 	addi	sp,sp,-32
 200d594:	dfc00715 	stw	ra,28(sp)
 200d598:	df000615 	stw	fp,24(sp)
 200d59c:	df000604 	addi	fp,sp,24
 200d5a0:	e13ffd15 	stw	r4,-12(fp)
 200d5a4:	e17ffe15 	stw	r5,-8(fp)
 200d5a8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 200d5ac:	e0bffd17 	ldw	r2,-12(fp)
 200d5b0:	10800017 	ldw	r2,0(r2)
 200d5b4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 200d5b8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200d5bc:	1000041e 	bne	r2,zero,200d5d0 <altera_avalon_uart_init+0x40>
 200d5c0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200d5c4:	1000021e 	bne	r2,zero,200d5d0 <altera_avalon_uart_init+0x40>
 200d5c8:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 200d5cc:	10000226 	beq	r2,zero,200d5d8 <altera_avalon_uart_init+0x48>
 200d5d0:	00800044 	movi	r2,1
 200d5d4:	00000106 	br	200d5dc <altera_avalon_uart_init+0x4c>
 200d5d8:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 200d5dc:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 200d5e0:	e0bffc17 	ldw	r2,-16(fp)
 200d5e4:	10000f1e 	bne	r2,zero,200d624 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 200d5e8:	e0bffd17 	ldw	r2,-12(fp)
 200d5ec:	00c32004 	movi	r3,3200
 200d5f0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 200d5f4:	e0bffb17 	ldw	r2,-20(fp)
 200d5f8:	10800304 	addi	r2,r2,12
 200d5fc:	e0fffd17 	ldw	r3,-12(fp)
 200d600:	18c00117 	ldw	r3,4(r3)
 200d604:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 200d608:	d8000015 	stw	zero,0(sp)
 200d60c:	e13ffe17 	ldw	r4,-8(fp)
 200d610:	e17fff17 	ldw	r5,-4(fp)
 200d614:	01808074 	movhi	r6,513
 200d618:	31b58e04 	addi	r6,r6,-10696
 200d61c:	e1fffd17 	ldw	r7,-12(fp)
 200d620:	200eb140 	call	200eb14 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 200d624:	e037883a 	mov	sp,fp
 200d628:	dfc00117 	ldw	ra,4(sp)
 200d62c:	df000017 	ldw	fp,0(sp)
 200d630:	dec00204 	addi	sp,sp,8
 200d634:	f800283a 	ret

0200d638 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 200d638:	defffa04 	addi	sp,sp,-24
 200d63c:	dfc00515 	stw	ra,20(sp)
 200d640:	df000415 	stw	fp,16(sp)
 200d644:	df000404 	addi	fp,sp,16
 200d648:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 200d64c:	e0bfff17 	ldw	r2,-4(fp)
 200d650:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 200d654:	e0bffc17 	ldw	r2,-16(fp)
 200d658:	10800017 	ldw	r2,0(r2)
 200d65c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 200d660:	e0bffd17 	ldw	r2,-12(fp)
 200d664:	10800204 	addi	r2,r2,8
 200d668:	10800037 	ldwio	r2,0(r2)
 200d66c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 200d670:	e0bffd17 	ldw	r2,-12(fp)
 200d674:	10800204 	addi	r2,r2,8
 200d678:	0007883a 	mov	r3,zero
 200d67c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 200d680:	e0bffd17 	ldw	r2,-12(fp)
 200d684:	10800204 	addi	r2,r2,8
 200d688:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 200d68c:	e0bffe17 	ldw	r2,-8(fp)
 200d690:	1080200c 	andi	r2,r2,128
 200d694:	10000326 	beq	r2,zero,200d6a4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 200d698:	e13ffc17 	ldw	r4,-16(fp)
 200d69c:	e17ffe17 	ldw	r5,-8(fp)
 200d6a0:	200d6d00 	call	200d6d0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 200d6a4:	e0bffe17 	ldw	r2,-8(fp)
 200d6a8:	1081100c 	andi	r2,r2,1088
 200d6ac:	10000326 	beq	r2,zero,200d6bc <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 200d6b0:	e13ffc17 	ldw	r4,-16(fp)
 200d6b4:	e17ffe17 	ldw	r5,-8(fp)
 200d6b8:	200d7a80 	call	200d7a8 <altera_avalon_uart_txirq>
  }
  

}
 200d6bc:	e037883a 	mov	sp,fp
 200d6c0:	dfc00117 	ldw	ra,4(sp)
 200d6c4:	df000017 	ldw	fp,0(sp)
 200d6c8:	dec00204 	addi	sp,sp,8
 200d6cc:	f800283a 	ret

0200d6d0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200d6d0:	defffc04 	addi	sp,sp,-16
 200d6d4:	df000315 	stw	fp,12(sp)
 200d6d8:	df000304 	addi	fp,sp,12
 200d6dc:	e13ffe15 	stw	r4,-8(fp)
 200d6e0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 200d6e4:	e0bfff17 	ldw	r2,-4(fp)
 200d6e8:	108000cc 	andi	r2,r2,3
 200d6ec:	1000291e 	bne	r2,zero,200d794 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 200d6f0:	e0bffe17 	ldw	r2,-8(fp)
 200d6f4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200d6f8:	e0bffe17 	ldw	r2,-8(fp)
 200d6fc:	10800317 	ldw	r2,12(r2)
 200d700:	10800044 	addi	r2,r2,1
 200d704:	10800fcc 	andi	r2,r2,63
 200d708:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 200d70c:	e0bffe17 	ldw	r2,-8(fp)
 200d710:	10800317 	ldw	r2,12(r2)
 200d714:	e0fffe17 	ldw	r3,-8(fp)
 200d718:	18c00017 	ldw	r3,0(r3)
 200d71c:	18c00037 	ldwio	r3,0(r3)
 200d720:	e13ffe17 	ldw	r4,-8(fp)
 200d724:	2085883a 	add	r2,r4,r2
 200d728:	10800704 	addi	r2,r2,28
 200d72c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 200d730:	e0bffe17 	ldw	r2,-8(fp)
 200d734:	e0fffd17 	ldw	r3,-12(fp)
 200d738:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200d73c:	e0bffe17 	ldw	r2,-8(fp)
 200d740:	10800317 	ldw	r2,12(r2)
 200d744:	10800044 	addi	r2,r2,1
 200d748:	10800fcc 	andi	r2,r2,63
 200d74c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 200d750:	e0bffe17 	ldw	r2,-8(fp)
 200d754:	10c00217 	ldw	r3,8(r2)
 200d758:	e0bffd17 	ldw	r2,-12(fp)
 200d75c:	18800e1e 	bne	r3,r2,200d798 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200d760:	e0bffe17 	ldw	r2,-8(fp)
 200d764:	10c00117 	ldw	r3,4(r2)
 200d768:	00bfdfc4 	movi	r2,-129
 200d76c:	1886703a 	and	r3,r3,r2
 200d770:	e0bffe17 	ldw	r2,-8(fp)
 200d774:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 200d778:	e0bffe17 	ldw	r2,-8(fp)
 200d77c:	10800017 	ldw	r2,0(r2)
 200d780:	10800304 	addi	r2,r2,12
 200d784:	e0fffe17 	ldw	r3,-8(fp)
 200d788:	18c00117 	ldw	r3,4(r3)
 200d78c:	10c00035 	stwio	r3,0(r2)
 200d790:	00000106 	br	200d798 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 200d794:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 200d798:	e037883a 	mov	sp,fp
 200d79c:	df000017 	ldw	fp,0(sp)
 200d7a0:	dec00104 	addi	sp,sp,4
 200d7a4:	f800283a 	ret

0200d7a8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200d7a8:	defffd04 	addi	sp,sp,-12
 200d7ac:	df000215 	stw	fp,8(sp)
 200d7b0:	df000204 	addi	fp,sp,8
 200d7b4:	e13ffe15 	stw	r4,-8(fp)
 200d7b8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 200d7bc:	e0bffe17 	ldw	r2,-8(fp)
 200d7c0:	10c00417 	ldw	r3,16(r2)
 200d7c4:	e0bffe17 	ldw	r2,-8(fp)
 200d7c8:	10800517 	ldw	r2,20(r2)
 200d7cc:	18803026 	beq	r3,r2,200d890 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200d7d0:	e0bffe17 	ldw	r2,-8(fp)
 200d7d4:	10800617 	ldw	r2,24(r2)
 200d7d8:	1080008c 	andi	r2,r2,2
 200d7dc:	10000326 	beq	r2,zero,200d7ec <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 200d7e0:	e0bfff17 	ldw	r2,-4(fp)
 200d7e4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200d7e8:	10001b26 	beq	r2,zero,200d858 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 200d7ec:	e0bffe17 	ldw	r2,-8(fp)
 200d7f0:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 200d7f4:	e0bffe17 	ldw	r2,-8(fp)
 200d7f8:	10800017 	ldw	r2,0(r2)
 200d7fc:	10800104 	addi	r2,r2,4
 200d800:	e0fffe17 	ldw	r3,-8(fp)
 200d804:	18c00417 	ldw	r3,16(r3)
 200d808:	e13ffe17 	ldw	r4,-8(fp)
 200d80c:	20c7883a 	add	r3,r4,r3
 200d810:	18c01704 	addi	r3,r3,92
 200d814:	18c00003 	ldbu	r3,0(r3)
 200d818:	18c03fcc 	andi	r3,r3,255
 200d81c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 200d820:	e0bffe17 	ldw	r2,-8(fp)
 200d824:	10800417 	ldw	r2,16(r2)
 200d828:	10800044 	addi	r2,r2,1
 200d82c:	e0fffe17 	ldw	r3,-8(fp)
 200d830:	18800415 	stw	r2,16(r3)
 200d834:	10c00fcc 	andi	r3,r2,63
 200d838:	e0bffe17 	ldw	r2,-8(fp)
 200d83c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 200d840:	e0bffe17 	ldw	r2,-8(fp)
 200d844:	10800117 	ldw	r2,4(r2)
 200d848:	10c01014 	ori	r3,r2,64
 200d84c:	e0bffe17 	ldw	r2,-8(fp)
 200d850:	10c00115 	stw	r3,4(r2)
 200d854:	00000e06 	br	200d890 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 200d858:	e0bffe17 	ldw	r2,-8(fp)
 200d85c:	10800017 	ldw	r2,0(r2)
 200d860:	10800204 	addi	r2,r2,8
 200d864:	10800037 	ldwio	r2,0(r2)
 200d868:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 200d86c:	e0bfff17 	ldw	r2,-4(fp)
 200d870:	1082000c 	andi	r2,r2,2048
 200d874:	1000061e 	bne	r2,zero,200d890 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 200d878:	e0bffe17 	ldw	r2,-8(fp)
 200d87c:	10c00117 	ldw	r3,4(r2)
 200d880:	00bfefc4 	movi	r2,-65
 200d884:	1886703a 	and	r3,r3,r2
 200d888:	e0bffe17 	ldw	r2,-8(fp)
 200d88c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 200d890:	e0bffe17 	ldw	r2,-8(fp)
 200d894:	10c00417 	ldw	r3,16(r2)
 200d898:	e0bffe17 	ldw	r2,-8(fp)
 200d89c:	10800517 	ldw	r2,20(r2)
 200d8a0:	1880061e 	bne	r3,r2,200d8bc <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200d8a4:	e0bffe17 	ldw	r2,-8(fp)
 200d8a8:	10c00117 	ldw	r3,4(r2)
 200d8ac:	00beefc4 	movi	r2,-1089
 200d8b0:	1886703a 	and	r3,r3,r2
 200d8b4:	e0bffe17 	ldw	r2,-8(fp)
 200d8b8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200d8bc:	e0bffe17 	ldw	r2,-8(fp)
 200d8c0:	10800017 	ldw	r2,0(r2)
 200d8c4:	10800304 	addi	r2,r2,12
 200d8c8:	e0fffe17 	ldw	r3,-8(fp)
 200d8cc:	18c00117 	ldw	r3,4(r3)
 200d8d0:	10c00035 	stwio	r3,0(r2)
}
 200d8d4:	e037883a 	mov	sp,fp
 200d8d8:	df000017 	ldw	fp,0(sp)
 200d8dc:	dec00104 	addi	sp,sp,4
 200d8e0:	f800283a 	ret

0200d8e4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 200d8e4:	defffd04 	addi	sp,sp,-12
 200d8e8:	df000215 	stw	fp,8(sp)
 200d8ec:	df000204 	addi	fp,sp,8
 200d8f0:	e13ffe15 	stw	r4,-8(fp)
 200d8f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200d8f8:	00000506 	br	200d910 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200d8fc:	e0bfff17 	ldw	r2,-4(fp)
 200d900:	1090000c 	andi	r2,r2,16384
 200d904:	10000226 	beq	r2,zero,200d910 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200d908:	00bffd44 	movi	r2,-11
 200d90c:	00000606 	br	200d928 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 200d910:	e0bffe17 	ldw	r2,-8(fp)
 200d914:	10c00417 	ldw	r3,16(r2)
 200d918:	e0bffe17 	ldw	r2,-8(fp)
 200d91c:	10800517 	ldw	r2,20(r2)
 200d920:	18bff61e 	bne	r3,r2,200d8fc <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200d924:	0005883a 	mov	r2,zero
}
 200d928:	e037883a 	mov	sp,fp
 200d92c:	df000017 	ldw	fp,0(sp)
 200d930:	dec00104 	addi	sp,sp,4
 200d934:	f800283a 	ret

0200d938 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200d938:	defffe04 	addi	sp,sp,-8
 200d93c:	dfc00115 	stw	ra,4(sp)
 200d940:	df000015 	stw	fp,0(sp)
 200d944:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200d948:	00808074 	movhi	r2,513
 200d94c:	1085bb04 	addi	r2,r2,5868
 200d950:	10800017 	ldw	r2,0(r2)
 200d954:	10000526 	beq	r2,zero,200d96c <alt_get_errno+0x34>
 200d958:	00808074 	movhi	r2,513
 200d95c:	1085bb04 	addi	r2,r2,5868
 200d960:	10800017 	ldw	r2,0(r2)
 200d964:	103ee83a 	callr	r2
 200d968:	00000206 	br	200d974 <alt_get_errno+0x3c>
 200d96c:	00808074 	movhi	r2,513
 200d970:	1085c704 	addi	r2,r2,5916
}
 200d974:	e037883a 	mov	sp,fp
 200d978:	dfc00117 	ldw	ra,4(sp)
 200d97c:	df000017 	ldw	fp,0(sp)
 200d980:	dec00204 	addi	sp,sp,8
 200d984:	f800283a 	ret

0200d988 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 200d988:	defff104 	addi	sp,sp,-60
 200d98c:	dfc00e15 	stw	ra,56(sp)
 200d990:	df000d15 	stw	fp,52(sp)
 200d994:	df000d04 	addi	fp,sp,52
 200d998:	e13ffc15 	stw	r4,-16(fp)
 200d99c:	e17ffd15 	stw	r5,-12(fp)
 200d9a0:	e1bffe15 	stw	r6,-8(fp)
 200d9a4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 200d9a8:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 200d9ac:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 200d9b0:	e0bfff17 	ldw	r2,-4(fp)
 200d9b4:	1090000c 	andi	r2,r2,16384
 200d9b8:	1005003a 	cmpeq	r2,r2,zero
 200d9bc:	10803fcc 	andi	r2,r2,255
 200d9c0:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 200d9c4:	e0bffc17 	ldw	r2,-16(fp)
 200d9c8:	10800217 	ldw	r2,8(r2)
 200d9cc:	10800044 	addi	r2,r2,1
 200d9d0:	10800fcc 	andi	r2,r2,63
 200d9d4:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200d9d8:	00001906 	br	200da40 <altera_avalon_uart_read+0xb8>
    {
      count++;
 200d9dc:	e0bff417 	ldw	r2,-48(fp)
 200d9e0:	10800044 	addi	r2,r2,1
 200d9e4:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 200d9e8:	e0bffc17 	ldw	r2,-16(fp)
 200d9ec:	10800217 	ldw	r2,8(r2)
 200d9f0:	e0fffc17 	ldw	r3,-16(fp)
 200d9f4:	1885883a 	add	r2,r3,r2
 200d9f8:	10800704 	addi	r2,r2,28
 200d9fc:	10800003 	ldbu	r2,0(r2)
 200da00:	1007883a 	mov	r3,r2
 200da04:	e0bffd17 	ldw	r2,-12(fp)
 200da08:	10c00005 	stb	r3,0(r2)
 200da0c:	e0bffd17 	ldw	r2,-12(fp)
 200da10:	10800044 	addi	r2,r2,1
 200da14:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 200da18:	e0bffc17 	ldw	r2,-16(fp)
 200da1c:	10800217 	ldw	r2,8(r2)
 200da20:	10c00044 	addi	r3,r2,1
 200da24:	e0bffc17 	ldw	r2,-16(fp)
 200da28:	10c00215 	stw	r3,8(r2)
 200da2c:	e0bffc17 	ldw	r2,-16(fp)
 200da30:	10800217 	ldw	r2,8(r2)
 200da34:	10c00fcc 	andi	r3,r2,63
 200da38:	e0bffc17 	ldw	r2,-16(fp)
 200da3c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200da40:	e0fff417 	ldw	r3,-48(fp)
 200da44:	e0bffe17 	ldw	r2,-8(fp)
 200da48:	1880050e 	bge	r3,r2,200da60 <altera_avalon_uart_read+0xd8>
 200da4c:	e0bffc17 	ldw	r2,-16(fp)
 200da50:	10c00217 	ldw	r3,8(r2)
 200da54:	e0bffc17 	ldw	r2,-16(fp)
 200da58:	10800317 	ldw	r2,12(r2)
 200da5c:	18bfdf1e 	bne	r3,r2,200d9dc <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 200da60:	e0bff417 	ldw	r2,-48(fp)
 200da64:	1000241e 	bne	r2,zero,200daf8 <altera_avalon_uart_read+0x170>
 200da68:	e0bffc17 	ldw	r2,-16(fp)
 200da6c:	10c00217 	ldw	r3,8(r2)
 200da70:	e0bffc17 	ldw	r2,-16(fp)
 200da74:	10800317 	ldw	r2,12(r2)
 200da78:	18801f1e 	bne	r3,r2,200daf8 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 200da7c:	e0bff517 	ldw	r2,-44(fp)
 200da80:	1000061e 	bne	r2,zero,200da9c <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 200da84:	200d9380 	call	200d938 <alt_get_errno>
 200da88:	00c002c4 	movi	r3,11
 200da8c:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 200da90:	00800044 	movi	r2,1
 200da94:	e0bff305 	stb	r2,-52(fp)
        break;
 200da98:	00001b06 	br	200db08 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200da9c:	0005303a 	rdctl	r2,status
 200daa0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200daa4:	e0fff817 	ldw	r3,-32(fp)
 200daa8:	00bfff84 	movi	r2,-2
 200daac:	1884703a 	and	r2,r3,r2
 200dab0:	1001703a 	wrctl	status,r2
  
  return context;
 200dab4:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 200dab8:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200dabc:	e0bffc17 	ldw	r2,-16(fp)
 200dac0:	10800117 	ldw	r2,4(r2)
 200dac4:	10c02014 	ori	r3,r2,128
 200dac8:	e0bffc17 	ldw	r2,-16(fp)
 200dacc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200dad0:	e0bffc17 	ldw	r2,-16(fp)
 200dad4:	10800017 	ldw	r2,0(r2)
 200dad8:	10800304 	addi	r2,r2,12
 200dadc:	e0fffc17 	ldw	r3,-16(fp)
 200dae0:	18c00117 	ldw	r3,4(r3)
 200dae4:	10c00035 	stwio	r3,0(r2)
 200dae8:	e0bff717 	ldw	r2,-36(fp)
 200daec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200daf0:	e0bff917 	ldw	r2,-28(fp)
 200daf4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 200daf8:	e0bff417 	ldw	r2,-48(fp)
 200dafc:	1000021e 	bne	r2,zero,200db08 <altera_avalon_uart_read+0x180>
 200db00:	e0bffe17 	ldw	r2,-8(fp)
 200db04:	103fce1e 	bne	r2,zero,200da40 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200db08:	0005303a 	rdctl	r2,status
 200db0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200db10:	e0fffa17 	ldw	r3,-24(fp)
 200db14:	00bfff84 	movi	r2,-2
 200db18:	1884703a 	and	r2,r3,r2
 200db1c:	1001703a 	wrctl	status,r2
  
  return context;
 200db20:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 200db24:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200db28:	e0bffc17 	ldw	r2,-16(fp)
 200db2c:	10800117 	ldw	r2,4(r2)
 200db30:	10c02014 	ori	r3,r2,128
 200db34:	e0bffc17 	ldw	r2,-16(fp)
 200db38:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200db3c:	e0bffc17 	ldw	r2,-16(fp)
 200db40:	10800017 	ldw	r2,0(r2)
 200db44:	10800304 	addi	r2,r2,12
 200db48:	e0fffc17 	ldw	r3,-16(fp)
 200db4c:	18c00117 	ldw	r3,4(r3)
 200db50:	10c00035 	stwio	r3,0(r2)
 200db54:	e0bff717 	ldw	r2,-36(fp)
 200db58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200db5c:	e0bffb17 	ldw	r2,-20(fp)
 200db60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 200db64:	e0bff303 	ldbu	r2,-52(fp)
 200db68:	10000226 	beq	r2,zero,200db74 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 200db6c:	00bffd44 	movi	r2,-11
 200db70:	00000106 	br	200db78 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 200db74:	e0bff417 	ldw	r2,-48(fp)
  }
}
 200db78:	e037883a 	mov	sp,fp
 200db7c:	dfc00117 	ldw	ra,4(sp)
 200db80:	df000017 	ldw	fp,0(sp)
 200db84:	dec00204 	addi	sp,sp,8
 200db88:	f800283a 	ret

0200db8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200db8c:	defffe04 	addi	sp,sp,-8
 200db90:	dfc00115 	stw	ra,4(sp)
 200db94:	df000015 	stw	fp,0(sp)
 200db98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200db9c:	00808074 	movhi	r2,513
 200dba0:	1085bb04 	addi	r2,r2,5868
 200dba4:	10800017 	ldw	r2,0(r2)
 200dba8:	10000526 	beq	r2,zero,200dbc0 <alt_get_errno+0x34>
 200dbac:	00808074 	movhi	r2,513
 200dbb0:	1085bb04 	addi	r2,r2,5868
 200dbb4:	10800017 	ldw	r2,0(r2)
 200dbb8:	103ee83a 	callr	r2
 200dbbc:	00000206 	br	200dbc8 <alt_get_errno+0x3c>
 200dbc0:	00808074 	movhi	r2,513
 200dbc4:	1085c704 	addi	r2,r2,5916
}
 200dbc8:	e037883a 	mov	sp,fp
 200dbcc:	dfc00117 	ldw	ra,4(sp)
 200dbd0:	df000017 	ldw	fp,0(sp)
 200dbd4:	dec00204 	addi	sp,sp,8
 200dbd8:	f800283a 	ret

0200dbdc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 200dbdc:	defff204 	addi	sp,sp,-56
 200dbe0:	dfc00d15 	stw	ra,52(sp)
 200dbe4:	df000c15 	stw	fp,48(sp)
 200dbe8:	df000c04 	addi	fp,sp,48
 200dbec:	e13ffc15 	stw	r4,-16(fp)
 200dbf0:	e17ffd15 	stw	r5,-12(fp)
 200dbf4:	e1bffe15 	stw	r6,-8(fp)
 200dbf8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 200dbfc:	e0bffe17 	ldw	r2,-8(fp)
 200dc00:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 200dc04:	e0bfff17 	ldw	r2,-4(fp)
 200dc08:	1090000c 	andi	r2,r2,16384
 200dc0c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200dc10:	00003b06 	br	200dd00 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 200dc14:	e0bffc17 	ldw	r2,-16(fp)
 200dc18:	10800517 	ldw	r2,20(r2)
 200dc1c:	10800044 	addi	r2,r2,1
 200dc20:	10800fcc 	andi	r2,r2,63
 200dc24:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 200dc28:	e0bffc17 	ldw	r2,-16(fp)
 200dc2c:	10c00417 	ldw	r3,16(r2)
 200dc30:	e0bff617 	ldw	r2,-40(fp)
 200dc34:	1880211e 	bne	r3,r2,200dcbc <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 200dc38:	e0bff517 	ldw	r2,-44(fp)
 200dc3c:	10000426 	beq	r2,zero,200dc50 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 200dc40:	200db8c0 	call	200db8c <alt_get_errno>
 200dc44:	00c002c4 	movi	r3,11
 200dc48:	10c00015 	stw	r3,0(r2)
        break;
 200dc4c:	00002e06 	br	200dd08 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dc50:	0005303a 	rdctl	r2,status
 200dc54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dc58:	e0fff817 	ldw	r3,-32(fp)
 200dc5c:	00bfff84 	movi	r2,-2
 200dc60:	1884703a 	and	r2,r3,r2
 200dc64:	1001703a 	wrctl	status,r2
  
  return context;
 200dc68:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 200dc6c:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200dc70:	e0bffc17 	ldw	r2,-16(fp)
 200dc74:	10800117 	ldw	r2,4(r2)
 200dc78:	10c11014 	ori	r3,r2,1088
 200dc7c:	e0bffc17 	ldw	r2,-16(fp)
 200dc80:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200dc84:	e0bffc17 	ldw	r2,-16(fp)
 200dc88:	10800017 	ldw	r2,0(r2)
 200dc8c:	10800304 	addi	r2,r2,12
 200dc90:	e0fffc17 	ldw	r3,-16(fp)
 200dc94:	18c00117 	ldw	r3,4(r3)
 200dc98:	10c00035 	stwio	r3,0(r2)
 200dc9c:	e0bff717 	ldw	r2,-36(fp)
 200dca0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200dca4:	e0bff917 	ldw	r2,-28(fp)
 200dca8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 200dcac:	e0bffc17 	ldw	r2,-16(fp)
 200dcb0:	10c00417 	ldw	r3,16(r2)
 200dcb4:	e0bff617 	ldw	r2,-40(fp)
 200dcb8:	18bffc26 	beq	r3,r2,200dcac <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 200dcbc:	e0bff417 	ldw	r2,-48(fp)
 200dcc0:	10bfffc4 	addi	r2,r2,-1
 200dcc4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 200dcc8:	e0bffc17 	ldw	r2,-16(fp)
 200dccc:	10800517 	ldw	r2,20(r2)
 200dcd0:	e0fffd17 	ldw	r3,-12(fp)
 200dcd4:	18c00003 	ldbu	r3,0(r3)
 200dcd8:	e13ffc17 	ldw	r4,-16(fp)
 200dcdc:	2085883a 	add	r2,r4,r2
 200dce0:	10801704 	addi	r2,r2,92
 200dce4:	10c00005 	stb	r3,0(r2)
 200dce8:	e0bffd17 	ldw	r2,-12(fp)
 200dcec:	10800044 	addi	r2,r2,1
 200dcf0:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 200dcf4:	e0bffc17 	ldw	r2,-16(fp)
 200dcf8:	e0fff617 	ldw	r3,-40(fp)
 200dcfc:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 200dd00:	e0bff417 	ldw	r2,-48(fp)
 200dd04:	103fc31e 	bne	r2,zero,200dc14 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200dd08:	0005303a 	rdctl	r2,status
 200dd0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200dd10:	e0fffa17 	ldw	r3,-24(fp)
 200dd14:	00bfff84 	movi	r2,-2
 200dd18:	1884703a 	and	r2,r3,r2
 200dd1c:	1001703a 	wrctl	status,r2
  
  return context;
 200dd20:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 200dd24:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200dd28:	e0bffc17 	ldw	r2,-16(fp)
 200dd2c:	10800117 	ldw	r2,4(r2)
 200dd30:	10c11014 	ori	r3,r2,1088
 200dd34:	e0bffc17 	ldw	r2,-16(fp)
 200dd38:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200dd3c:	e0bffc17 	ldw	r2,-16(fp)
 200dd40:	10800017 	ldw	r2,0(r2)
 200dd44:	10800304 	addi	r2,r2,12
 200dd48:	e0fffc17 	ldw	r3,-16(fp)
 200dd4c:	18c00117 	ldw	r3,4(r3)
 200dd50:	10c00035 	stwio	r3,0(r2)
 200dd54:	e0bff717 	ldw	r2,-36(fp)
 200dd58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200dd5c:	e0bffb17 	ldw	r2,-20(fp)
 200dd60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 200dd64:	e0fffe17 	ldw	r3,-8(fp)
 200dd68:	e0bff417 	ldw	r2,-48(fp)
 200dd6c:	1885c83a 	sub	r2,r3,r2
}
 200dd70:	e037883a 	mov	sp,fp
 200dd74:	dfc00117 	ldw	ra,4(sp)
 200dd78:	df000017 	ldw	fp,0(sp)
 200dd7c:	dec00204 	addi	sp,sp,8
 200dd80:	f800283a 	ret

0200dd84 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 200dd84:	defff904 	addi	sp,sp,-28
 200dd88:	dfc00615 	stw	ra,24(sp)
 200dd8c:	df000515 	stw	fp,20(sp)
 200dd90:	df000504 	addi	fp,sp,20
 200dd94:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 200dd98:	00800144 	movi	r2,5
 200dd9c:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 200dda0:	00800044 	movi	r2,1
 200dda4:	d8800015 	stw	r2,0(sp)
 200dda8:	e0bffe44 	addi	r2,fp,-7
 200ddac:	d8800115 	stw	r2,4(sp)
 200ddb0:	d8000215 	stw	zero,8(sp)
 200ddb4:	e13fff17 	ldw	r4,-4(fp)
 200ddb8:	000b883a 	mov	r5,zero
 200ddbc:	01800044 	movi	r6,1
 200ddc0:	e1fffe04 	addi	r7,fp,-8
 200ddc4:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 200ddc8:	e0bffe43 	ldbu	r2,-7(fp)
}
 200ddcc:	e037883a 	mov	sp,fp
 200ddd0:	dfc00117 	ldw	ra,4(sp)
 200ddd4:	df000017 	ldw	fp,0(sp)
 200ddd8:	dec00204 	addi	sp,sp,8
 200dddc:	f800283a 	ret

0200dde0 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 200dde0:	defffd04 	addi	sp,sp,-12
 200dde4:	dfc00215 	stw	ra,8(sp)
 200dde8:	df000115 	stw	fp,4(sp)
 200ddec:	df000104 	addi	fp,sp,4
 200ddf0:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 200ddf4:	e13fff17 	ldw	r4,-4(fp)
 200ddf8:	200dd840 	call	200dd84 <epcs_read_status_register>
 200ddfc:	10803fcc 	andi	r2,r2,255
 200de00:	1080004c 	andi	r2,r2,1
}
 200de04:	e037883a 	mov	sp,fp
 200de08:	dfc00117 	ldw	ra,4(sp)
 200de0c:	df000017 	ldw	fp,0(sp)
 200de10:	dec00204 	addi	sp,sp,8
 200de14:	f800283a 	ret

0200de18 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 200de18:	defffd04 	addi	sp,sp,-12
 200de1c:	dfc00215 	stw	ra,8(sp)
 200de20:	df000115 	stw	fp,4(sp)
 200de24:	df000104 	addi	fp,sp,4
 200de28:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 200de2c:	0001883a 	nop
 200de30:	e13fff17 	ldw	r4,-4(fp)
 200de34:	200dde00 	call	200dde0 <epcs_test_wip>
 200de38:	103ffd1e 	bne	r2,zero,200de30 <epcs_await_wip_released+0x18>
  {
  }
}
 200de3c:	e037883a 	mov	sp,fp
 200de40:	dfc00117 	ldw	ra,4(sp)
 200de44:	df000017 	ldw	fp,0(sp)
 200de48:	dec00204 	addi	sp,sp,8
 200de4c:	f800283a 	ret

0200de50 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 200de50:	defff604 	addi	sp,sp,-40
 200de54:	dfc00915 	stw	ra,36(sp)
 200de58:	df000815 	stw	fp,32(sp)
 200de5c:	df000804 	addi	fp,sp,32
 200de60:	e13ffd15 	stw	r4,-12(fp)
 200de64:	e17ffe15 	stw	r5,-8(fp)
 200de68:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 200de6c:	e0bfff17 	ldw	r2,-4(fp)
 200de70:	10001226 	beq	r2,zero,200debc <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 200de74:	00bff604 	movi	r2,-40
 200de78:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 200de7c:	e0bffe17 	ldw	r2,-8(fp)
 200de80:	1004d63a 	srli	r2,r2,24
 200de84:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 200de88:	e0bffe17 	ldw	r2,-8(fp)
 200de8c:	1004d43a 	srli	r2,r2,16
 200de90:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 200de94:	e0bffe17 	ldw	r2,-8(fp)
 200de98:	1004d23a 	srli	r2,r2,8
 200de9c:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 200dea0:	e0bffe17 	ldw	r2,-8(fp)
 200dea4:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 200dea8:	00800144 	movi	r2,5
 200deac:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 200deb0:	e13ffd17 	ldw	r4,-12(fp)
 200deb4:	200e2f80 	call	200e2f8 <epcs_enter_4_bytes_mode>
 200deb8:	00000c06 	br	200deec <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 200debc:	00bff604 	movi	r2,-40
 200dec0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 200dec4:	e0bffe17 	ldw	r2,-8(fp)
 200dec8:	1004d43a 	srli	r2,r2,16
 200decc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 200ded0:	e0bffe17 	ldw	r2,-8(fp)
 200ded4:	1004d23a 	srli	r2,r2,8
 200ded8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 200dedc:	e0bffe17 	ldw	r2,-8(fp)
 200dee0:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 200dee4:	00800104 	movi	r2,4
 200dee8:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 200deec:	e13ffd17 	ldw	r4,-12(fp)
 200def0:	200e03c0 	call	200e03c <epcs_write_enable>

  alt_avalon_spi_command(
 200def4:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 200def8:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 200defc:	d8000015 	stw	zero,0(sp)
 200df00:	d8000115 	stw	zero,4(sp)
 200df04:	d8000215 	stw	zero,8(sp)
 200df08:	e13ffd17 	ldw	r4,-12(fp)
 200df0c:	000b883a 	mov	r5,zero
 200df10:	180d883a 	mov	r6,r3
 200df14:	100f883a 	mov	r7,r2
 200df18:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200df1c:	e13ffd17 	ldw	r4,-12(fp)
 200df20:	200de180 	call	200de18 <epcs_await_wip_released>

  if(four_bytes_mode)
 200df24:	e0bfff17 	ldw	r2,-4(fp)
 200df28:	10000226 	beq	r2,zero,200df34 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 200df2c:	e13ffd17 	ldw	r4,-12(fp)
 200df30:	200e3500 	call	200e350 <epcs_exit_4_bytes_mode>
  }
}
 200df34:	e037883a 	mov	sp,fp
 200df38:	dfc00117 	ldw	ra,4(sp)
 200df3c:	df000017 	ldw	fp,0(sp)
 200df40:	dec00204 	addi	sp,sp,8
 200df44:	f800283a 	ret

0200df48 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 200df48:	defff404 	addi	sp,sp,-48
 200df4c:	dfc00b15 	stw	ra,44(sp)
 200df50:	df000a15 	stw	fp,40(sp)
 200df54:	df000a04 	addi	fp,sp,40
 200df58:	e13ffc15 	stw	r4,-16(fp)
 200df5c:	e17ffd15 	stw	r5,-12(fp)
 200df60:	e1bffe15 	stw	r6,-8(fp)
 200df64:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 200df68:	008000c4 	movi	r2,3
 200df6c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200df70:	e0800217 	ldw	r2,8(fp)
 200df74:	10001026 	beq	r2,zero,200dfb8 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 200df78:	e0bffd17 	ldw	r2,-12(fp)
 200df7c:	1004d63a 	srli	r2,r2,24
 200df80:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 200df84:	e0bffd17 	ldw	r2,-12(fp)
 200df88:	1005d43a 	srai	r2,r2,16
 200df8c:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 200df90:	e0bffd17 	ldw	r2,-12(fp)
 200df94:	1005d23a 	srai	r2,r2,8
 200df98:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 200df9c:	e0bffd17 	ldw	r2,-12(fp)
 200dfa0:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 200dfa4:	00800144 	movi	r2,5
 200dfa8:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 200dfac:	e13ffc17 	ldw	r4,-16(fp)
 200dfb0:	200e2f80 	call	200e2f8 <epcs_enter_4_bytes_mode>
 200dfb4:	00000a06 	br	200dfe0 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 200dfb8:	e0bffd17 	ldw	r2,-12(fp)
 200dfbc:	1005d43a 	srai	r2,r2,16
 200dfc0:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 200dfc4:	e0bffd17 	ldw	r2,-12(fp)
 200dfc8:	1005d23a 	srai	r2,r2,8
 200dfcc:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 200dfd0:	e0bffd17 	ldw	r2,-12(fp)
 200dfd4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 200dfd8:	00800104 	movi	r2,4
 200dfdc:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 200dfe0:	e13ffc17 	ldw	r4,-16(fp)
 200dfe4:	200de180 	call	200de18 <epcs_await_wip_released>

  alt_avalon_spi_command(
 200dfe8:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 200dfec:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 200dff0:	d8c00015 	stw	r3,0(sp)
 200dff4:	e0fffe17 	ldw	r3,-8(fp)
 200dff8:	d8c00115 	stw	r3,4(sp)
 200dffc:	d8000215 	stw	zero,8(sp)
 200e000:	e13ffc17 	ldw	r4,-16(fp)
 200e004:	000b883a 	mov	r5,zero
 200e008:	e1bff917 	ldw	r6,-28(fp)
 200e00c:	100f883a 	mov	r7,r2
 200e010:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 200e014:	e0800217 	ldw	r2,8(fp)
 200e018:	10000226 	beq	r2,zero,200e024 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 200e01c:	e13ffc17 	ldw	r4,-16(fp)
 200e020:	200e3500 	call	200e350 <epcs_exit_4_bytes_mode>
  }

  return length;
 200e024:	e0bfff17 	ldw	r2,-4(fp)
}
 200e028:	e037883a 	mov	sp,fp
 200e02c:	dfc00117 	ldw	ra,4(sp)
 200e030:	df000017 	ldw	fp,0(sp)
 200e034:	dec00204 	addi	sp,sp,8
 200e038:	f800283a 	ret

0200e03c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 200e03c:	defff904 	addi	sp,sp,-28
 200e040:	dfc00615 	stw	ra,24(sp)
 200e044:	df000515 	stw	fp,20(sp)
 200e048:	df000504 	addi	fp,sp,20
 200e04c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 200e050:	00800184 	movi	r2,6
 200e054:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 200e058:	d8000015 	stw	zero,0(sp)
 200e05c:	d8000115 	stw	zero,4(sp)
 200e060:	d8000215 	stw	zero,8(sp)
 200e064:	e13fff17 	ldw	r4,-4(fp)
 200e068:	000b883a 	mov	r5,zero
 200e06c:	01800044 	movi	r6,1
 200e070:	e1fffe04 	addi	r7,fp,-8
 200e074:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 200e078:	e037883a 	mov	sp,fp
 200e07c:	dfc00117 	ldw	ra,4(sp)
 200e080:	df000017 	ldw	fp,0(sp)
 200e084:	dec00204 	addi	sp,sp,8
 200e088:	f800283a 	ret

0200e08c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 200e08c:	defff804 	addi	sp,sp,-32
 200e090:	dfc00715 	stw	ra,28(sp)
 200e094:	df000615 	stw	fp,24(sp)
 200e098:	df000604 	addi	fp,sp,24
 200e09c:	e13ffe15 	stw	r4,-8(fp)
 200e0a0:	2805883a 	mov	r2,r5
 200e0a4:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 200e0a8:	00800044 	movi	r2,1
 200e0ac:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 200e0b0:	e0bfff03 	ldbu	r2,-4(fp)
 200e0b4:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 200e0b8:	d8000015 	stw	zero,0(sp)
 200e0bc:	d8000115 	stw	zero,4(sp)
 200e0c0:	d8000215 	stw	zero,8(sp)
 200e0c4:	e13ffe17 	ldw	r4,-8(fp)
 200e0c8:	000b883a 	mov	r5,zero
 200e0cc:	01800084 	movi	r6,2
 200e0d0:	e1fffd04 	addi	r7,fp,-12
 200e0d4:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 200e0d8:	e13ffe17 	ldw	r4,-8(fp)
 200e0dc:	200de180 	call	200de18 <epcs_await_wip_released>
}
 200e0e0:	e037883a 	mov	sp,fp
 200e0e4:	dfc00117 	ldw	ra,4(sp)
 200e0e8:	df000017 	ldw	fp,0(sp)
 200e0ec:	dec00204 	addi	sp,sp,8
 200e0f0:	f800283a 	ret

0200e0f4 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 200e0f4:	defff404 	addi	sp,sp,-48
 200e0f8:	dfc00b15 	stw	ra,44(sp)
 200e0fc:	df000a15 	stw	fp,40(sp)
 200e100:	df000a04 	addi	fp,sp,40
 200e104:	e13ffc15 	stw	r4,-16(fp)
 200e108:	e17ffd15 	stw	r5,-12(fp)
 200e10c:	e1bffe15 	stw	r6,-8(fp)
 200e110:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 200e114:	00800084 	movi	r2,2
 200e118:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 200e11c:	e0800217 	ldw	r2,8(fp)
 200e120:	10001026 	beq	r2,zero,200e164 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 200e124:	e0bffd17 	ldw	r2,-12(fp)
 200e128:	1004d63a 	srli	r2,r2,24
 200e12c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 200e130:	e0bffd17 	ldw	r2,-12(fp)
 200e134:	1005d43a 	srai	r2,r2,16
 200e138:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 200e13c:	e0bffd17 	ldw	r2,-12(fp)
 200e140:	1005d23a 	srai	r2,r2,8
 200e144:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 200e148:	e0bffd17 	ldw	r2,-12(fp)
 200e14c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 200e150:	00800144 	movi	r2,5
 200e154:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 200e158:	e13ffc17 	ldw	r4,-16(fp)
 200e15c:	200e2f80 	call	200e2f8 <epcs_enter_4_bytes_mode>
 200e160:	00000a06 	br	200e18c <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 200e164:	e0bffd17 	ldw	r2,-12(fp)
 200e168:	1005d43a 	srai	r2,r2,16
 200e16c:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 200e170:	e0bffd17 	ldw	r2,-12(fp)
 200e174:	1005d23a 	srai	r2,r2,8
 200e178:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 200e17c:	e0bffd17 	ldw	r2,-12(fp)
 200e180:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 200e184:	00800104 	movi	r2,4
 200e188:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 200e18c:	e13ffc17 	ldw	r4,-16(fp)
 200e190:	200e03c0 	call	200e03c <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 200e194:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 200e198:	d8000015 	stw	zero,0(sp)
 200e19c:	d8000115 	stw	zero,4(sp)
 200e1a0:	00c00044 	movi	r3,1
 200e1a4:	d8c00215 	stw	r3,8(sp)
 200e1a8:	e13ffc17 	ldw	r4,-16(fp)
 200e1ac:	000b883a 	mov	r5,zero
 200e1b0:	e1bff917 	ldw	r6,-28(fp)
 200e1b4:	100f883a 	mov	r7,r2
 200e1b8:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 200e1bc:	e0bfff17 	ldw	r2,-4(fp)
 200e1c0:	d8000015 	stw	zero,0(sp)
 200e1c4:	d8000115 	stw	zero,4(sp)
 200e1c8:	d8000215 	stw	zero,8(sp)
 200e1cc:	e13ffc17 	ldw	r4,-16(fp)
 200e1d0:	000b883a 	mov	r5,zero
 200e1d4:	100d883a 	mov	r6,r2
 200e1d8:	e1fffe17 	ldw	r7,-8(fp)
 200e1dc:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 200e1e0:	e13ffc17 	ldw	r4,-16(fp)
 200e1e4:	200de180 	call	200de18 <epcs_await_wip_released>

  if(four_bytes_mode)
 200e1e8:	e0800217 	ldw	r2,8(fp)
 200e1ec:	10000226 	beq	r2,zero,200e1f8 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 200e1f0:	e13ffc17 	ldw	r4,-16(fp)
 200e1f4:	200e3500 	call	200e350 <epcs_exit_4_bytes_mode>
  }

  return length;
 200e1f8:	e0bfff17 	ldw	r2,-4(fp)
}
 200e1fc:	e037883a 	mov	sp,fp
 200e200:	dfc00117 	ldw	ra,4(sp)
 200e204:	df000017 	ldw	fp,0(sp)
 200e208:	dec00204 	addi	sp,sp,8
 200e20c:	f800283a 	ret

0200e210 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 200e210:	defff804 	addi	sp,sp,-32
 200e214:	dfc00715 	stw	ra,28(sp)
 200e218:	df000615 	stw	fp,24(sp)
 200e21c:	df000604 	addi	fp,sp,24
 200e220:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 200e224:	00bfeac4 	movi	r2,-85
 200e228:	e0bffd05 	stb	r2,-12(fp)
 200e22c:	e03ffd45 	stb	zero,-11(fp)
 200e230:	e03ffd85 	stb	zero,-10(fp)
 200e234:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 200e238:	00800044 	movi	r2,1
 200e23c:	d8800015 	stw	r2,0(sp)
 200e240:	e0bffe04 	addi	r2,fp,-8
 200e244:	d8800115 	stw	r2,4(sp)
 200e248:	d8000215 	stw	zero,8(sp)
 200e24c:	e13fff17 	ldw	r4,-4(fp)
 200e250:	000b883a 	mov	r5,zero
 200e254:	01800104 	movi	r6,4
 200e258:	e1fffd04 	addi	r7,fp,-12
 200e25c:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 200e260:	e0bffe03 	ldbu	r2,-8(fp)
}
 200e264:	e037883a 	mov	sp,fp
 200e268:	dfc00117 	ldw	ra,4(sp)
 200e26c:	df000017 	ldw	fp,0(sp)
 200e270:	dec00204 	addi	sp,sp,8
 200e274:	f800283a 	ret

0200e278 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 200e278:	defff904 	addi	sp,sp,-28
 200e27c:	dfc00615 	stw	ra,24(sp)
 200e280:	df000515 	stw	fp,20(sp)
 200e284:	df000504 	addi	fp,sp,20
 200e288:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 200e28c:	00bfe7c4 	movi	r2,-97
 200e290:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 200e294:	008000c4 	movi	r2,3
 200e298:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 200e29c:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 200e2a0:	d8800115 	stw	r2,4(sp)
 200e2a4:	d8000215 	stw	zero,8(sp)
 200e2a8:	e13fff17 	ldw	r4,-4(fp)
 200e2ac:	000b883a 	mov	r5,zero
 200e2b0:	01800044 	movi	r6,1
 200e2b4:	e1fffe04 	addi	r7,fp,-8
 200e2b8:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 200e2bc:	e0bffe43 	ldbu	r2,-7(fp)
 200e2c0:	10803fcc 	andi	r2,r2,255
 200e2c4:	1006943a 	slli	r3,r2,16
 200e2c8:	e0bffe83 	ldbu	r2,-6(fp)
 200e2cc:	10803fcc 	andi	r2,r2,255
 200e2d0:	1004923a 	slli	r2,r2,8
 200e2d4:	1886b03a 	or	r3,r3,r2
 200e2d8:	e0bffec3 	ldbu	r2,-5(fp)
 200e2dc:	10803fcc 	andi	r2,r2,255
 200e2e0:	1884b03a 	or	r2,r3,r2
}
 200e2e4:	e037883a 	mov	sp,fp
 200e2e8:	dfc00117 	ldw	ra,4(sp)
 200e2ec:	df000017 	ldw	fp,0(sp)
 200e2f0:	dec00204 	addi	sp,sp,8
 200e2f4:	f800283a 	ret

0200e2f8 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 200e2f8:	defff904 	addi	sp,sp,-28
 200e2fc:	dfc00615 	stw	ra,24(sp)
 200e300:	df000515 	stw	fp,20(sp)
 200e304:	df000504 	addi	fp,sp,20
 200e308:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 200e30c:	00bfedc4 	movi	r2,-73
 200e310:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200e314:	e13fff17 	ldw	r4,-4(fp)
 200e318:	200e03c0 	call	200e03c <epcs_write_enable>

  alt_avalon_spi_command(
 200e31c:	d8000015 	stw	zero,0(sp)
 200e320:	d8000115 	stw	zero,4(sp)
 200e324:	d8000215 	stw	zero,8(sp)
 200e328:	e13fff17 	ldw	r4,-4(fp)
 200e32c:	000b883a 	mov	r5,zero
 200e330:	01800044 	movi	r6,1
 200e334:	e1fffe04 	addi	r7,fp,-8
 200e338:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200e33c:	e037883a 	mov	sp,fp
 200e340:	dfc00117 	ldw	ra,4(sp)
 200e344:	df000017 	ldw	fp,0(sp)
 200e348:	dec00204 	addi	sp,sp,8
 200e34c:	f800283a 	ret

0200e350 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 200e350:	defff904 	addi	sp,sp,-28
 200e354:	dfc00615 	stw	ra,24(sp)
 200e358:	df000515 	stw	fp,20(sp)
 200e35c:	df000504 	addi	fp,sp,20
 200e360:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 200e364:	00bffa44 	movi	r2,-23
 200e368:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 200e36c:	e13fff17 	ldw	r4,-4(fp)
 200e370:	200e03c0 	call	200e03c <epcs_write_enable>

  alt_avalon_spi_command(
 200e374:	d8000015 	stw	zero,0(sp)
 200e378:	d8000115 	stw	zero,4(sp)
 200e37c:	d8000215 	stw	zero,8(sp)
 200e380:	e13fff17 	ldw	r4,-4(fp)
 200e384:	000b883a 	mov	r5,zero
 200e388:	01800044 	movi	r6,1
 200e38c:	e1fffe04 	addi	r7,fp,-8
 200e390:	200f0f00 	call	200f0f0 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 200e394:	e037883a 	mov	sp,fp
 200e398:	dfc00117 	ldw	ra,4(sp)
 200e39c:	df000017 	ldw	fp,0(sp)
 200e3a0:	dec00204 	addi	sp,sp,8
 200e3a4:	f800283a 	ret

0200e3a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200e3a8:	defff504 	addi	sp,sp,-44
 200e3ac:	df000a15 	stw	fp,40(sp)
 200e3b0:	df000a04 	addi	fp,sp,40
 200e3b4:	e13ffc15 	stw	r4,-16(fp)
 200e3b8:	e17ffd15 	stw	r5,-12(fp)
 200e3bc:	e1bffe15 	stw	r6,-8(fp)
 200e3c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200e3c4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200e3c8:	00808074 	movhi	r2,513
 200e3cc:	1085d404 	addi	r2,r2,5968
 200e3d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200e3d4:	10003f26 	beq	r2,zero,200e4d4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 200e3d8:	e0bffc17 	ldw	r2,-16(fp)
 200e3dc:	10003b26 	beq	r2,zero,200e4cc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 200e3e0:	e0bffc17 	ldw	r2,-16(fp)
 200e3e4:	e0fffe17 	ldw	r3,-8(fp)
 200e3e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 200e3ec:	e0bffc17 	ldw	r2,-16(fp)
 200e3f0:	e0ffff17 	ldw	r3,-4(fp)
 200e3f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e3f8:	0005303a 	rdctl	r2,status
 200e3fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e400:	e0fff817 	ldw	r3,-32(fp)
 200e404:	00bfff84 	movi	r2,-2
 200e408:	1884703a 	and	r2,r3,r2
 200e40c:	1001703a 	wrctl	status,r2
  
  return context;
 200e410:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200e414:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200e418:	00808074 	movhi	r2,513
 200e41c:	1085d504 	addi	r2,r2,5972
 200e420:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200e424:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200e428:	e0fffd17 	ldw	r3,-12(fp)
 200e42c:	e0bff617 	ldw	r2,-40(fp)
 200e430:	1885883a 	add	r2,r3,r2
 200e434:	10c00044 	addi	r3,r2,1
 200e438:	e0bffc17 	ldw	r2,-16(fp)
 200e43c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200e440:	e0bffc17 	ldw	r2,-16(fp)
 200e444:	10c00217 	ldw	r3,8(r2)
 200e448:	e0bff617 	ldw	r2,-40(fp)
 200e44c:	1880042e 	bgeu	r3,r2,200e460 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 200e450:	e0bffc17 	ldw	r2,-16(fp)
 200e454:	00c00044 	movi	r3,1
 200e458:	10c00405 	stb	r3,16(r2)
 200e45c:	00000206 	br	200e468 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 200e460:	e0bffc17 	ldw	r2,-16(fp)
 200e464:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200e468:	e0bffc17 	ldw	r2,-16(fp)
 200e46c:	00c08074 	movhi	r3,513
 200e470:	18c5c004 	addi	r3,r3,5888
 200e474:	e0fff915 	stw	r3,-28(fp)
 200e478:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e47c:	e0bffa17 	ldw	r2,-24(fp)
 200e480:	e0fff917 	ldw	r3,-28(fp)
 200e484:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200e488:	e0bff917 	ldw	r2,-28(fp)
 200e48c:	10c00017 	ldw	r3,0(r2)
 200e490:	e0bffa17 	ldw	r2,-24(fp)
 200e494:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e498:	e0bff917 	ldw	r2,-28(fp)
 200e49c:	10800017 	ldw	r2,0(r2)
 200e4a0:	e0fffa17 	ldw	r3,-24(fp)
 200e4a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200e4a8:	e0bff917 	ldw	r2,-28(fp)
 200e4ac:	e0fffa17 	ldw	r3,-24(fp)
 200e4b0:	10c00015 	stw	r3,0(r2)
 200e4b4:	e0bff717 	ldw	r2,-36(fp)
 200e4b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e4bc:	e0bffb17 	ldw	r2,-20(fp)
 200e4c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200e4c4:	0005883a 	mov	r2,zero
 200e4c8:	00000306 	br	200e4d8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 200e4cc:	00bffa84 	movi	r2,-22
 200e4d0:	00000106 	br	200e4d8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 200e4d4:	00bfde84 	movi	r2,-134
  }
}
 200e4d8:	e037883a 	mov	sp,fp
 200e4dc:	df000017 	ldw	fp,0(sp)
 200e4e0:	dec00104 	addi	sp,sp,4
 200e4e4:	f800283a 	ret

0200e4e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 200e4e8:	defffa04 	addi	sp,sp,-24
 200e4ec:	dfc00515 	stw	ra,20(sp)
 200e4f0:	df000415 	stw	fp,16(sp)
 200e4f4:	df000404 	addi	fp,sp,16
 200e4f8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 200e4fc:	00800244 	movi	r2,9
 200e500:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 200e504:	e13ffd17 	ldw	r4,-12(fp)
 200e508:	014003f4 	movhi	r5,15
 200e50c:	29509004 	addi	r5,r5,16960
 200e510:	20012bc0 	call	20012bc <__mulsi3>
 200e514:	0100bef4 	movhi	r4,763
 200e518:	213c2004 	addi	r4,r4,-3968
 200e51c:	100b883a 	mov	r5,r2
 200e520:	20012ac0 	call	20012ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 200e524:	01200034 	movhi	r4,32768
 200e528:	213fffc4 	addi	r4,r4,-1
 200e52c:	100b883a 	mov	r5,r2
 200e530:	20012ac0 	call	20012ac <__udivsi3>
 200e534:	e13fff17 	ldw	r4,-4(fp)
 200e538:	100b883a 	mov	r5,r2
 200e53c:	20012ac0 	call	20012ac <__udivsi3>
 200e540:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 200e544:	e0bffe17 	ldw	r2,-8(fp)
 200e548:	10002926 	beq	r2,zero,200e5f0 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 200e54c:	e03ffc15 	stw	zero,-16(fp)
 200e550:	00001606 	br	200e5ac <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 200e554:	00a00034 	movhi	r2,32768
 200e558:	10bfffc4 	addi	r2,r2,-1
 200e55c:	10bfffc4 	addi	r2,r2,-1
 200e560:	103ffe1e 	bne	r2,zero,200e55c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 200e564:	e13ffd17 	ldw	r4,-12(fp)
 200e568:	014003f4 	movhi	r5,15
 200e56c:	29509004 	addi	r5,r5,16960
 200e570:	20012bc0 	call	20012bc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 200e574:	0100bef4 	movhi	r4,763
 200e578:	213c2004 	addi	r4,r4,-3968
 200e57c:	100b883a 	mov	r5,r2
 200e580:	20012ac0 	call	20012ac <__udivsi3>
 200e584:	01200034 	movhi	r4,32768
 200e588:	213fffc4 	addi	r4,r4,-1
 200e58c:	100b883a 	mov	r5,r2
 200e590:	20012ac0 	call	20012ac <__udivsi3>
 200e594:	e0ffff17 	ldw	r3,-4(fp)
 200e598:	1885c83a 	sub	r2,r3,r2
 200e59c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 200e5a0:	e0bffc17 	ldw	r2,-16(fp)
 200e5a4:	10800044 	addi	r2,r2,1
 200e5a8:	e0bffc15 	stw	r2,-16(fp)
 200e5ac:	e0fffc17 	ldw	r3,-16(fp)
 200e5b0:	e0bffe17 	ldw	r2,-8(fp)
 200e5b4:	18bfe716 	blt	r3,r2,200e554 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200e5b8:	e13ffd17 	ldw	r4,-12(fp)
 200e5bc:	014003f4 	movhi	r5,15
 200e5c0:	29509004 	addi	r5,r5,16960
 200e5c4:	20012bc0 	call	20012bc <__mulsi3>
 200e5c8:	0100bef4 	movhi	r4,763
 200e5cc:	213c2004 	addi	r4,r4,-3968
 200e5d0:	100b883a 	mov	r5,r2
 200e5d4:	20012ac0 	call	20012ac <__udivsi3>
 200e5d8:	1009883a 	mov	r4,r2
 200e5dc:	e17fff17 	ldw	r5,-4(fp)
 200e5e0:	20012bc0 	call	20012bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200e5e4:	10bfffc4 	addi	r2,r2,-1
 200e5e8:	103ffe1e 	bne	r2,zero,200e5e4 <alt_busy_sleep+0xfc>
 200e5ec:	00000d06 	br	200e624 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 200e5f0:	e13ffd17 	ldw	r4,-12(fp)
 200e5f4:	014003f4 	movhi	r5,15
 200e5f8:	29509004 	addi	r5,r5,16960
 200e5fc:	20012bc0 	call	20012bc <__mulsi3>
 200e600:	0100bef4 	movhi	r4,763
 200e604:	213c2004 	addi	r4,r4,-3968
 200e608:	100b883a 	mov	r5,r2
 200e60c:	20012ac0 	call	20012ac <__udivsi3>
 200e610:	1009883a 	mov	r4,r2
 200e614:	e17fff17 	ldw	r5,-4(fp)
 200e618:	20012bc0 	call	20012bc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 200e61c:	10bfffc4 	addi	r2,r2,-1
 200e620:	00bffe16 	blt	zero,r2,200e61c <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 200e624:	0005883a 	mov	r2,zero
}
 200e628:	e037883a 	mov	sp,fp
 200e62c:	dfc00117 	ldw	ra,4(sp)
 200e630:	df000017 	ldw	fp,0(sp)
 200e634:	dec00204 	addi	sp,sp,8
 200e638:	f800283a 	ret

0200e63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e63c:	defffe04 	addi	sp,sp,-8
 200e640:	dfc00115 	stw	ra,4(sp)
 200e644:	df000015 	stw	fp,0(sp)
 200e648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e64c:	00808074 	movhi	r2,513
 200e650:	1085bb04 	addi	r2,r2,5868
 200e654:	10800017 	ldw	r2,0(r2)
 200e658:	10000526 	beq	r2,zero,200e670 <alt_get_errno+0x34>
 200e65c:	00808074 	movhi	r2,513
 200e660:	1085bb04 	addi	r2,r2,5868
 200e664:	10800017 	ldw	r2,0(r2)
 200e668:	103ee83a 	callr	r2
 200e66c:	00000206 	br	200e678 <alt_get_errno+0x3c>
 200e670:	00808074 	movhi	r2,513
 200e674:	1085c704 	addi	r2,r2,5916
}
 200e678:	e037883a 	mov	sp,fp
 200e67c:	dfc00117 	ldw	ra,4(sp)
 200e680:	df000017 	ldw	fp,0(sp)
 200e684:	dec00204 	addi	sp,sp,8
 200e688:	f800283a 	ret

0200e68c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 200e68c:	defffa04 	addi	sp,sp,-24
 200e690:	dfc00515 	stw	ra,20(sp)
 200e694:	df000415 	stw	fp,16(sp)
 200e698:	df000404 	addi	fp,sp,16
 200e69c:	e13ffe15 	stw	r4,-8(fp)
 200e6a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 200e6a4:	e0bffe17 	ldw	r2,-8(fp)
 200e6a8:	10000326 	beq	r2,zero,200e6b8 <alt_dev_llist_insert+0x2c>
 200e6ac:	e0bffe17 	ldw	r2,-8(fp)
 200e6b0:	10800217 	ldw	r2,8(r2)
 200e6b4:	1000051e 	bne	r2,zero,200e6cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 200e6b8:	200e63c0 	call	200e63c <alt_get_errno>
 200e6bc:	00c00584 	movi	r3,22
 200e6c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 200e6c4:	00bffa84 	movi	r2,-22
 200e6c8:	00001306 	br	200e718 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 200e6cc:	e0bffe17 	ldw	r2,-8(fp)
 200e6d0:	e0ffff17 	ldw	r3,-4(fp)
 200e6d4:	e0fffc15 	stw	r3,-16(fp)
 200e6d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200e6dc:	e0bffd17 	ldw	r2,-12(fp)
 200e6e0:	e0fffc17 	ldw	r3,-16(fp)
 200e6e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 200e6e8:	e0bffc17 	ldw	r2,-16(fp)
 200e6ec:	10c00017 	ldw	r3,0(r2)
 200e6f0:	e0bffd17 	ldw	r2,-12(fp)
 200e6f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e6f8:	e0bffc17 	ldw	r2,-16(fp)
 200e6fc:	10800017 	ldw	r2,0(r2)
 200e700:	e0fffd17 	ldw	r3,-12(fp)
 200e704:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 200e708:	e0bffc17 	ldw	r2,-16(fp)
 200e70c:	e0fffd17 	ldw	r3,-12(fp)
 200e710:	10c00015 	stw	r3,0(r2)

  return 0;  
 200e714:	0005883a 	mov	r2,zero
}
 200e718:	e037883a 	mov	sp,fp
 200e71c:	dfc00117 	ldw	ra,4(sp)
 200e720:	df000017 	ldw	fp,0(sp)
 200e724:	dec00204 	addi	sp,sp,8
 200e728:	f800283a 	ret

0200e72c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 200e72c:	defffd04 	addi	sp,sp,-12
 200e730:	dfc00215 	stw	ra,8(sp)
 200e734:	df000115 	stw	fp,4(sp)
 200e738:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200e73c:	00808074 	movhi	r2,513
 200e740:	10bdb204 	addi	r2,r2,-2360
 200e744:	e0bfff15 	stw	r2,-4(fp)
 200e748:	00000606 	br	200e764 <_do_ctors+0x38>
        (*ctor) (); 
 200e74c:	e0bfff17 	ldw	r2,-4(fp)
 200e750:	10800017 	ldw	r2,0(r2)
 200e754:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 200e758:	e0bfff17 	ldw	r2,-4(fp)
 200e75c:	10bfff04 	addi	r2,r2,-4
 200e760:	e0bfff15 	stw	r2,-4(fp)
 200e764:	e0ffff17 	ldw	r3,-4(fp)
 200e768:	00808074 	movhi	r2,513
 200e76c:	10bdb304 	addi	r2,r2,-2356
 200e770:	18bff62e 	bgeu	r3,r2,200e74c <_do_ctors+0x20>
        (*ctor) (); 
}
 200e774:	e037883a 	mov	sp,fp
 200e778:	dfc00117 	ldw	ra,4(sp)
 200e77c:	df000017 	ldw	fp,0(sp)
 200e780:	dec00204 	addi	sp,sp,8
 200e784:	f800283a 	ret

0200e788 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 200e788:	defffd04 	addi	sp,sp,-12
 200e78c:	dfc00215 	stw	ra,8(sp)
 200e790:	df000115 	stw	fp,4(sp)
 200e794:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200e798:	00808074 	movhi	r2,513
 200e79c:	10bdb204 	addi	r2,r2,-2360
 200e7a0:	e0bfff15 	stw	r2,-4(fp)
 200e7a4:	00000606 	br	200e7c0 <_do_dtors+0x38>
        (*dtor) (); 
 200e7a8:	e0bfff17 	ldw	r2,-4(fp)
 200e7ac:	10800017 	ldw	r2,0(r2)
 200e7b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 200e7b4:	e0bfff17 	ldw	r2,-4(fp)
 200e7b8:	10bfff04 	addi	r2,r2,-4
 200e7bc:	e0bfff15 	stw	r2,-4(fp)
 200e7c0:	e0ffff17 	ldw	r3,-4(fp)
 200e7c4:	00808074 	movhi	r2,513
 200e7c8:	10bdb304 	addi	r2,r2,-2356
 200e7cc:	18bff62e 	bgeu	r3,r2,200e7a8 <_do_dtors+0x20>
        (*dtor) (); 
}
 200e7d0:	e037883a 	mov	sp,fp
 200e7d4:	dfc00117 	ldw	ra,4(sp)
 200e7d8:	df000017 	ldw	fp,0(sp)
 200e7dc:	dec00204 	addi	sp,sp,8
 200e7e0:	f800283a 	ret

0200e7e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 200e7e4:	defffa04 	addi	sp,sp,-24
 200e7e8:	dfc00515 	stw	ra,20(sp)
 200e7ec:	df000415 	stw	fp,16(sp)
 200e7f0:	df000404 	addi	fp,sp,16
 200e7f4:	e13ffe15 	stw	r4,-8(fp)
 200e7f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 200e7fc:	e0bfff17 	ldw	r2,-4(fp)
 200e800:	10800017 	ldw	r2,0(r2)
 200e804:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 200e808:	e13ffe17 	ldw	r4,-8(fp)
 200e80c:	2002b200 	call	2002b20 <strlen>
 200e810:	10800044 	addi	r2,r2,1
 200e814:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e818:	00000d06 	br	200e850 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 200e81c:	e0bffc17 	ldw	r2,-16(fp)
 200e820:	10c00217 	ldw	r3,8(r2)
 200e824:	e0bffd17 	ldw	r2,-12(fp)
 200e828:	1809883a 	mov	r4,r3
 200e82c:	e17ffe17 	ldw	r5,-8(fp)
 200e830:	100d883a 	mov	r6,r2
 200e834:	200f3440 	call	200f344 <memcmp>
 200e838:	1000021e 	bne	r2,zero,200e844 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 200e83c:	e0bffc17 	ldw	r2,-16(fp)
 200e840:	00000706 	br	200e860 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 200e844:	e0bffc17 	ldw	r2,-16(fp)
 200e848:	10800017 	ldw	r2,0(r2)
 200e84c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200e850:	e0fffc17 	ldw	r3,-16(fp)
 200e854:	e0bfff17 	ldw	r2,-4(fp)
 200e858:	18bff01e 	bne	r3,r2,200e81c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 200e85c:	0005883a 	mov	r2,zero
}
 200e860:	e037883a 	mov	sp,fp
 200e864:	dfc00117 	ldw	ra,4(sp)
 200e868:	df000017 	ldw	fp,0(sp)
 200e86c:	dec00204 	addi	sp,sp,8
 200e870:	f800283a 	ret

0200e874 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 200e874:	defffb04 	addi	sp,sp,-20
 200e878:	dfc00415 	stw	ra,16(sp)
 200e87c:	df000315 	stw	fp,12(sp)
 200e880:	df000304 	addi	fp,sp,12
 200e884:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200e888:	00808074 	movhi	r2,513
 200e88c:	1085b604 	addi	r2,r2,5848
 200e890:	10800017 	ldw	r2,0(r2)
 200e894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e898:	00003106 	br	200e960 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 200e89c:	e0bffd17 	ldw	r2,-12(fp)
 200e8a0:	10800217 	ldw	r2,8(r2)
 200e8a4:	1009883a 	mov	r4,r2
 200e8a8:	2002b200 	call	2002b20 <strlen>
 200e8ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 200e8b0:	e0bffd17 	ldw	r2,-12(fp)
 200e8b4:	10c00217 	ldw	r3,8(r2)
 200e8b8:	e0bffe17 	ldw	r2,-8(fp)
 200e8bc:	10bfffc4 	addi	r2,r2,-1
 200e8c0:	1885883a 	add	r2,r3,r2
 200e8c4:	10800003 	ldbu	r2,0(r2)
 200e8c8:	10803fcc 	andi	r2,r2,255
 200e8cc:	1080201c 	xori	r2,r2,128
 200e8d0:	10bfe004 	addi	r2,r2,-128
 200e8d4:	10800bd8 	cmpnei	r2,r2,47
 200e8d8:	1000031e 	bne	r2,zero,200e8e8 <alt_find_file+0x74>
    {
      len -= 1;
 200e8dc:	e0bffe17 	ldw	r2,-8(fp)
 200e8e0:	10bfffc4 	addi	r2,r2,-1
 200e8e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200e8e8:	e0bffe17 	ldw	r2,-8(fp)
 200e8ec:	e0ffff17 	ldw	r3,-4(fp)
 200e8f0:	1885883a 	add	r2,r3,r2
 200e8f4:	10800003 	ldbu	r2,0(r2)
 200e8f8:	10803fcc 	andi	r2,r2,255
 200e8fc:	1080201c 	xori	r2,r2,128
 200e900:	10bfe004 	addi	r2,r2,-128
 200e904:	10800be0 	cmpeqi	r2,r2,47
 200e908:	1000081e 	bne	r2,zero,200e92c <alt_find_file+0xb8>
 200e90c:	e0bffe17 	ldw	r2,-8(fp)
 200e910:	e0ffff17 	ldw	r3,-4(fp)
 200e914:	1885883a 	add	r2,r3,r2
 200e918:	10800003 	ldbu	r2,0(r2)
 200e91c:	10803fcc 	andi	r2,r2,255
 200e920:	1080201c 	xori	r2,r2,128
 200e924:	10bfe004 	addi	r2,r2,-128
 200e928:	10000a1e 	bne	r2,zero,200e954 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 200e92c:	e0bffd17 	ldw	r2,-12(fp)
 200e930:	10c00217 	ldw	r3,8(r2)
 200e934:	e0bffe17 	ldw	r2,-8(fp)
 200e938:	1809883a 	mov	r4,r3
 200e93c:	e17fff17 	ldw	r5,-4(fp)
 200e940:	100d883a 	mov	r6,r2
 200e944:	200f3440 	call	200f344 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200e948:	1000021e 	bne	r2,zero,200e954 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 200e94c:	e0bffd17 	ldw	r2,-12(fp)
 200e950:	00000806 	br	200e974 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 200e954:	e0bffd17 	ldw	r2,-12(fp)
 200e958:	10800017 	ldw	r2,0(r2)
 200e95c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200e960:	e0fffd17 	ldw	r3,-12(fp)
 200e964:	00808074 	movhi	r2,513
 200e968:	1085b604 	addi	r2,r2,5848
 200e96c:	18bfcb1e 	bne	r3,r2,200e89c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 200e970:	0005883a 	mov	r2,zero
}
 200e974:	e037883a 	mov	sp,fp
 200e978:	dfc00117 	ldw	ra,4(sp)
 200e97c:	df000017 	ldw	fp,0(sp)
 200e980:	dec00204 	addi	sp,sp,8
 200e984:	f800283a 	ret

0200e988 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 200e988:	defffc04 	addi	sp,sp,-16
 200e98c:	dfc00315 	stw	ra,12(sp)
 200e990:	df000215 	stw	fp,8(sp)
 200e994:	df000204 	addi	fp,sp,8
 200e998:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 200e99c:	e13fff17 	ldw	r4,-4(fp)
 200e9a0:	d1600e04 	addi	r5,gp,-32712
 200e9a4:	200e7e40 	call	200e7e4 <alt_find_dev>
 200e9a8:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 200e9ac:	e0bffe17 	ldw	r2,-8(fp)
 200e9b0:	10000926 	beq	r2,zero,200e9d8 <alt_flash_open_dev+0x50>
 200e9b4:	e0bffe17 	ldw	r2,-8(fp)
 200e9b8:	10800317 	ldw	r2,12(r2)
 200e9bc:	10000626 	beq	r2,zero,200e9d8 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 200e9c0:	e0bffe17 	ldw	r2,-8(fp)
 200e9c4:	10800317 	ldw	r2,12(r2)
 200e9c8:	e13ffe17 	ldw	r4,-8(fp)
 200e9cc:	e17fff17 	ldw	r5,-4(fp)
 200e9d0:	103ee83a 	callr	r2
 200e9d4:	00000106 	br	200e9dc <alt_flash_open_dev+0x54>
  }

  return dev;
 200e9d8:	e0bffe17 	ldw	r2,-8(fp)
}
 200e9dc:	e037883a 	mov	sp,fp
 200e9e0:	dfc00117 	ldw	ra,4(sp)
 200e9e4:	df000017 	ldw	fp,0(sp)
 200e9e8:	dec00204 	addi	sp,sp,8
 200e9ec:	f800283a 	ret

0200e9f0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 200e9f0:	defffd04 	addi	sp,sp,-12
 200e9f4:	dfc00215 	stw	ra,8(sp)
 200e9f8:	df000115 	stw	fp,4(sp)
 200e9fc:	df000104 	addi	fp,sp,4
 200ea00:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 200ea04:	e0bfff17 	ldw	r2,-4(fp)
 200ea08:	10000726 	beq	r2,zero,200ea28 <alt_flash_close_dev+0x38>
 200ea0c:	e0bfff17 	ldw	r2,-4(fp)
 200ea10:	10800417 	ldw	r2,16(r2)
 200ea14:	10000426 	beq	r2,zero,200ea28 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 200ea18:	e0bfff17 	ldw	r2,-4(fp)
 200ea1c:	10800417 	ldw	r2,16(r2)
 200ea20:	e13fff17 	ldw	r4,-4(fp)
 200ea24:	103ee83a 	callr	r2
  }
  return;
 200ea28:	0001883a 	nop
}
 200ea2c:	e037883a 	mov	sp,fp
 200ea30:	dfc00117 	ldw	ra,4(sp)
 200ea34:	df000017 	ldw	fp,0(sp)
 200ea38:	dec00204 	addi	sp,sp,8
 200ea3c:	f800283a 	ret

0200ea40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200ea40:	defffa04 	addi	sp,sp,-24
 200ea44:	dfc00515 	stw	ra,20(sp)
 200ea48:	df000415 	stw	fp,16(sp)
 200ea4c:	dc000315 	stw	r16,12(sp)
 200ea50:	df000304 	addi	fp,sp,12
 200ea54:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200ea58:	00bffa04 	movi	r2,-24
 200ea5c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200ea60:	e03ffd15 	stw	zero,-12(fp)
 200ea64:	00002106 	br	200eaec <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 200ea68:	04008074 	movhi	r16,513
 200ea6c:	8400d404 	addi	r16,r16,848
 200ea70:	e0bffd17 	ldw	r2,-12(fp)
 200ea74:	1009883a 	mov	r4,r2
 200ea78:	01400304 	movi	r5,12
 200ea7c:	20012bc0 	call	20012bc <__mulsi3>
 200ea80:	8085883a 	add	r2,r16,r2
 200ea84:	10800017 	ldw	r2,0(r2)
 200ea88:	1000151e 	bne	r2,zero,200eae0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 200ea8c:	04008074 	movhi	r16,513
 200ea90:	8400d404 	addi	r16,r16,848
 200ea94:	e0bffd17 	ldw	r2,-12(fp)
 200ea98:	1009883a 	mov	r4,r2
 200ea9c:	01400304 	movi	r5,12
 200eaa0:	20012bc0 	call	20012bc <__mulsi3>
 200eaa4:	8085883a 	add	r2,r16,r2
 200eaa8:	e0ffff17 	ldw	r3,-4(fp)
 200eaac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 200eab0:	00808074 	movhi	r2,513
 200eab4:	1085ba04 	addi	r2,r2,5864
 200eab8:	10c00017 	ldw	r3,0(r2)
 200eabc:	e0bffd17 	ldw	r2,-12(fp)
 200eac0:	1880040e 	bge	r3,r2,200ead4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 200eac4:	00808074 	movhi	r2,513
 200eac8:	1085ba04 	addi	r2,r2,5864
 200eacc:	e0fffd17 	ldw	r3,-12(fp)
 200ead0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 200ead4:	e0bffd17 	ldw	r2,-12(fp)
 200ead8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 200eadc:	00000606 	br	200eaf8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 200eae0:	e0bffd17 	ldw	r2,-12(fp)
 200eae4:	10800044 	addi	r2,r2,1
 200eae8:	e0bffd15 	stw	r2,-12(fp)
 200eaec:	e0bffd17 	ldw	r2,-12(fp)
 200eaf0:	10800810 	cmplti	r2,r2,32
 200eaf4:	103fdc1e 	bne	r2,zero,200ea68 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200eaf8:	e0bffe17 	ldw	r2,-8(fp)
}
 200eafc:	e037883a 	mov	sp,fp
 200eb00:	dfc00217 	ldw	ra,8(sp)
 200eb04:	df000117 	ldw	fp,4(sp)
 200eb08:	dc000017 	ldw	r16,0(sp)
 200eb0c:	dec00304 	addi	sp,sp,12
 200eb10:	f800283a 	ret

0200eb14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200eb14:	defff904 	addi	sp,sp,-28
 200eb18:	dfc00615 	stw	ra,24(sp)
 200eb1c:	df000515 	stw	fp,20(sp)
 200eb20:	df000504 	addi	fp,sp,20
 200eb24:	e13ffc15 	stw	r4,-16(fp)
 200eb28:	e17ffd15 	stw	r5,-12(fp)
 200eb2c:	e1bffe15 	stw	r6,-8(fp)
 200eb30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 200eb34:	e0800217 	ldw	r2,8(fp)
 200eb38:	d8800015 	stw	r2,0(sp)
 200eb3c:	e13ffc17 	ldw	r4,-16(fp)
 200eb40:	e17ffd17 	ldw	r5,-12(fp)
 200eb44:	e1bffe17 	ldw	r6,-8(fp)
 200eb48:	e1ffff17 	ldw	r7,-4(fp)
 200eb4c:	200ecec0 	call	200ecec <alt_iic_isr_register>
}  
 200eb50:	e037883a 	mov	sp,fp
 200eb54:	dfc00117 	ldw	ra,4(sp)
 200eb58:	df000017 	ldw	fp,0(sp)
 200eb5c:	dec00204 	addi	sp,sp,8
 200eb60:	f800283a 	ret

0200eb64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 200eb64:	defff904 	addi	sp,sp,-28
 200eb68:	df000615 	stw	fp,24(sp)
 200eb6c:	df000604 	addi	fp,sp,24
 200eb70:	e13ffe15 	stw	r4,-8(fp)
 200eb74:	e17fff15 	stw	r5,-4(fp)
 200eb78:	e0bfff17 	ldw	r2,-4(fp)
 200eb7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200eb80:	0005303a 	rdctl	r2,status
 200eb84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200eb88:	e0fffb17 	ldw	r3,-20(fp)
 200eb8c:	00bfff84 	movi	r2,-2
 200eb90:	1884703a 	and	r2,r3,r2
 200eb94:	1001703a 	wrctl	status,r2
  
  return context;
 200eb98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200eb9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 200eba0:	e0bffa17 	ldw	r2,-24(fp)
 200eba4:	00c00044 	movi	r3,1
 200eba8:	1884983a 	sll	r2,r3,r2
 200ebac:	1007883a 	mov	r3,r2
 200ebb0:	00808074 	movhi	r2,513
 200ebb4:	1085d304 	addi	r2,r2,5964
 200ebb8:	10800017 	ldw	r2,0(r2)
 200ebbc:	1886b03a 	or	r3,r3,r2
 200ebc0:	00808074 	movhi	r2,513
 200ebc4:	1085d304 	addi	r2,r2,5964
 200ebc8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200ebcc:	00808074 	movhi	r2,513
 200ebd0:	1085d304 	addi	r2,r2,5964
 200ebd4:	10800017 	ldw	r2,0(r2)
 200ebd8:	100170fa 	wrctl	ienable,r2
 200ebdc:	e0bffc17 	ldw	r2,-16(fp)
 200ebe0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ebe4:	e0bffd17 	ldw	r2,-12(fp)
 200ebe8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200ebec:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 200ebf0:	e037883a 	mov	sp,fp
 200ebf4:	df000017 	ldw	fp,0(sp)
 200ebf8:	dec00104 	addi	sp,sp,4
 200ebfc:	f800283a 	ret

0200ec00 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 200ec00:	defff904 	addi	sp,sp,-28
 200ec04:	df000615 	stw	fp,24(sp)
 200ec08:	df000604 	addi	fp,sp,24
 200ec0c:	e13ffe15 	stw	r4,-8(fp)
 200ec10:	e17fff15 	stw	r5,-4(fp)
 200ec14:	e0bfff17 	ldw	r2,-4(fp)
 200ec18:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ec1c:	0005303a 	rdctl	r2,status
 200ec20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ec24:	e0fffb17 	ldw	r3,-20(fp)
 200ec28:	00bfff84 	movi	r2,-2
 200ec2c:	1884703a 	and	r2,r3,r2
 200ec30:	1001703a 	wrctl	status,r2
  
  return context;
 200ec34:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200ec38:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 200ec3c:	e0bffa17 	ldw	r2,-24(fp)
 200ec40:	00c00044 	movi	r3,1
 200ec44:	1884983a 	sll	r2,r3,r2
 200ec48:	0084303a 	nor	r2,zero,r2
 200ec4c:	1007883a 	mov	r3,r2
 200ec50:	00808074 	movhi	r2,513
 200ec54:	1085d304 	addi	r2,r2,5964
 200ec58:	10800017 	ldw	r2,0(r2)
 200ec5c:	1886703a 	and	r3,r3,r2
 200ec60:	00808074 	movhi	r2,513
 200ec64:	1085d304 	addi	r2,r2,5964
 200ec68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200ec6c:	00808074 	movhi	r2,513
 200ec70:	1085d304 	addi	r2,r2,5964
 200ec74:	10800017 	ldw	r2,0(r2)
 200ec78:	100170fa 	wrctl	ienable,r2
 200ec7c:	e0bffc17 	ldw	r2,-16(fp)
 200ec80:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ec84:	e0bffd17 	ldw	r2,-12(fp)
 200ec88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200ec8c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 200ec90:	e037883a 	mov	sp,fp
 200ec94:	df000017 	ldw	fp,0(sp)
 200ec98:	dec00104 	addi	sp,sp,4
 200ec9c:	f800283a 	ret

0200eca0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 200eca0:	defffc04 	addi	sp,sp,-16
 200eca4:	df000315 	stw	fp,12(sp)
 200eca8:	df000304 	addi	fp,sp,12
 200ecac:	e13ffe15 	stw	r4,-8(fp)
 200ecb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 200ecb4:	000530fa 	rdctl	r2,ienable
 200ecb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 200ecbc:	e0bfff17 	ldw	r2,-4(fp)
 200ecc0:	00c00044 	movi	r3,1
 200ecc4:	1884983a 	sll	r2,r3,r2
 200ecc8:	1007883a 	mov	r3,r2
 200eccc:	e0bffd17 	ldw	r2,-12(fp)
 200ecd0:	1884703a 	and	r2,r3,r2
 200ecd4:	1004c03a 	cmpne	r2,r2,zero
 200ecd8:	10803fcc 	andi	r2,r2,255
}
 200ecdc:	e037883a 	mov	sp,fp
 200ece0:	df000017 	ldw	fp,0(sp)
 200ece4:	dec00104 	addi	sp,sp,4
 200ece8:	f800283a 	ret

0200ecec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 200ecec:	defff504 	addi	sp,sp,-44
 200ecf0:	dfc00a15 	stw	ra,40(sp)
 200ecf4:	df000915 	stw	fp,36(sp)
 200ecf8:	df000904 	addi	fp,sp,36
 200ecfc:	e13ffc15 	stw	r4,-16(fp)
 200ed00:	e17ffd15 	stw	r5,-12(fp)
 200ed04:	e1bffe15 	stw	r6,-8(fp)
 200ed08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 200ed0c:	00bffa84 	movi	r2,-22
 200ed10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 200ed14:	e0bffd17 	ldw	r2,-12(fp)
 200ed18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200ed1c:	e0bff817 	ldw	r2,-32(fp)
 200ed20:	10800808 	cmpgei	r2,r2,32
 200ed24:	1000271e 	bne	r2,zero,200edc4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ed28:	0005303a 	rdctl	r2,status
 200ed2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ed30:	e0fffa17 	ldw	r3,-24(fp)
 200ed34:	00bfff84 	movi	r2,-2
 200ed38:	1884703a 	and	r2,r3,r2
 200ed3c:	1001703a 	wrctl	status,r2
  
  return context;
 200ed40:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 200ed44:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 200ed48:	00c08074 	movhi	r3,513
 200ed4c:	18c5f404 	addi	r3,r3,6096
 200ed50:	e0bff817 	ldw	r2,-32(fp)
 200ed54:	100490fa 	slli	r2,r2,3
 200ed58:	1885883a 	add	r2,r3,r2
 200ed5c:	e0fffe17 	ldw	r3,-8(fp)
 200ed60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 200ed64:	00c08074 	movhi	r3,513
 200ed68:	18c5f404 	addi	r3,r3,6096
 200ed6c:	e0bff817 	ldw	r2,-32(fp)
 200ed70:	100490fa 	slli	r2,r2,3
 200ed74:	1885883a 	add	r2,r3,r2
 200ed78:	10800104 	addi	r2,r2,4
 200ed7c:	e0ffff17 	ldw	r3,-4(fp)
 200ed80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200ed84:	e0bffe17 	ldw	r2,-8(fp)
 200ed88:	10000526 	beq	r2,zero,200eda0 <alt_iic_isr_register+0xb4>
 200ed8c:	e0bff817 	ldw	r2,-32(fp)
 200ed90:	e13ffc17 	ldw	r4,-16(fp)
 200ed94:	100b883a 	mov	r5,r2
 200ed98:	200eb640 	call	200eb64 <alt_ic_irq_enable>
 200ed9c:	00000406 	br	200edb0 <alt_iic_isr_register+0xc4>
 200eda0:	e0bff817 	ldw	r2,-32(fp)
 200eda4:	e13ffc17 	ldw	r4,-16(fp)
 200eda8:	100b883a 	mov	r5,r2
 200edac:	200ec000 	call	200ec00 <alt_ic_irq_disable>
 200edb0:	e0bff715 	stw	r2,-36(fp)
 200edb4:	e0bff917 	ldw	r2,-28(fp)
 200edb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200edbc:	e0bffb17 	ldw	r2,-20(fp)
 200edc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200edc4:	e0bff717 	ldw	r2,-36(fp)
}
 200edc8:	e037883a 	mov	sp,fp
 200edcc:	dfc00117 	ldw	ra,4(sp)
 200edd0:	df000017 	ldw	fp,0(sp)
 200edd4:	dec00204 	addi	sp,sp,8
 200edd8:	f800283a 	ret

0200eddc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 200eddc:	defff804 	addi	sp,sp,-32
 200ede0:	dfc00715 	stw	ra,28(sp)
 200ede4:	df000615 	stw	fp,24(sp)
 200ede8:	dc000515 	stw	r16,20(sp)
 200edec:	df000504 	addi	fp,sp,20
 200edf0:	e13ffc15 	stw	r4,-16(fp)
 200edf4:	e17ffd15 	stw	r5,-12(fp)
 200edf8:	e1bffe15 	stw	r6,-8(fp)
 200edfc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 200ee00:	e13ffd17 	ldw	r4,-12(fp)
 200ee04:	e17ffe17 	ldw	r5,-8(fp)
 200ee08:	e1bfff17 	ldw	r6,-4(fp)
 200ee0c:	200b6f00 	call	200b6f0 <open>
 200ee10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 200ee14:	e0bffb17 	ldw	r2,-20(fp)
 200ee18:	10002216 	blt	r2,zero,200eea4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 200ee1c:	04008074 	movhi	r16,513
 200ee20:	8400d404 	addi	r16,r16,848
 200ee24:	e0bffb17 	ldw	r2,-20(fp)
 200ee28:	1009883a 	mov	r4,r2
 200ee2c:	01400304 	movi	r5,12
 200ee30:	20012bc0 	call	20012bc <__mulsi3>
 200ee34:	8085883a 	add	r2,r16,r2
 200ee38:	10c00017 	ldw	r3,0(r2)
 200ee3c:	e0bffc17 	ldw	r2,-16(fp)
 200ee40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 200ee44:	04008074 	movhi	r16,513
 200ee48:	8400d404 	addi	r16,r16,848
 200ee4c:	e0bffb17 	ldw	r2,-20(fp)
 200ee50:	1009883a 	mov	r4,r2
 200ee54:	01400304 	movi	r5,12
 200ee58:	20012bc0 	call	20012bc <__mulsi3>
 200ee5c:	8085883a 	add	r2,r16,r2
 200ee60:	10800104 	addi	r2,r2,4
 200ee64:	10c00017 	ldw	r3,0(r2)
 200ee68:	e0bffc17 	ldw	r2,-16(fp)
 200ee6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 200ee70:	04008074 	movhi	r16,513
 200ee74:	8400d404 	addi	r16,r16,848
 200ee78:	e0bffb17 	ldw	r2,-20(fp)
 200ee7c:	1009883a 	mov	r4,r2
 200ee80:	01400304 	movi	r5,12
 200ee84:	20012bc0 	call	20012bc <__mulsi3>
 200ee88:	8085883a 	add	r2,r16,r2
 200ee8c:	10800204 	addi	r2,r2,8
 200ee90:	10c00017 	ldw	r3,0(r2)
 200ee94:	e0bffc17 	ldw	r2,-16(fp)
 200ee98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 200ee9c:	e13ffb17 	ldw	r4,-20(fp)
 200eea0:	200b98c0 	call	200b98c <alt_release_fd>
  }
} 
 200eea4:	e037883a 	mov	sp,fp
 200eea8:	dfc00217 	ldw	ra,8(sp)
 200eeac:	df000117 	ldw	fp,4(sp)
 200eeb0:	dc000017 	ldw	r16,0(sp)
 200eeb4:	dec00304 	addi	sp,sp,12
 200eeb8:	f800283a 	ret

0200eebc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 200eebc:	defffb04 	addi	sp,sp,-20
 200eec0:	dfc00415 	stw	ra,16(sp)
 200eec4:	df000315 	stw	fp,12(sp)
 200eec8:	df000304 	addi	fp,sp,12
 200eecc:	e13ffd15 	stw	r4,-12(fp)
 200eed0:	e17ffe15 	stw	r5,-8(fp)
 200eed4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 200eed8:	01008074 	movhi	r4,513
 200eedc:	2100d704 	addi	r4,r4,860
 200eee0:	e17ffd17 	ldw	r5,-12(fp)
 200eee4:	01800044 	movi	r6,1
 200eee8:	01c07fc4 	movi	r7,511
 200eeec:	200eddc0 	call	200eddc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 200eef0:	01008074 	movhi	r4,513
 200eef4:	2100d404 	addi	r4,r4,848
 200eef8:	e17ffe17 	ldw	r5,-8(fp)
 200eefc:	000d883a 	mov	r6,zero
 200ef00:	01c07fc4 	movi	r7,511
 200ef04:	200eddc0 	call	200eddc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 200ef08:	01008074 	movhi	r4,513
 200ef0c:	2100da04 	addi	r4,r4,872
 200ef10:	e17fff17 	ldw	r5,-4(fp)
 200ef14:	01800044 	movi	r6,1
 200ef18:	01c07fc4 	movi	r7,511
 200ef1c:	200eddc0 	call	200eddc <alt_open_fd>
}  
 200ef20:	e037883a 	mov	sp,fp
 200ef24:	dfc00117 	ldw	ra,4(sp)
 200ef28:	df000017 	ldw	fp,0(sp)
 200ef2c:	dec00204 	addi	sp,sp,8
 200ef30:	f800283a 	ret

0200ef34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200ef34:	defffa04 	addi	sp,sp,-24
 200ef38:	df000515 	stw	fp,20(sp)
 200ef3c:	df000504 	addi	fp,sp,20
 200ef40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ef44:	0005303a 	rdctl	r2,status
 200ef48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ef4c:	e0fffc17 	ldw	r3,-16(fp)
 200ef50:	00bfff84 	movi	r2,-2
 200ef54:	1884703a 	and	r2,r3,r2
 200ef58:	1001703a 	wrctl	status,r2
  
  return context;
 200ef5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200ef60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200ef64:	e0bfff17 	ldw	r2,-4(fp)
 200ef68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200ef6c:	e0bffd17 	ldw	r2,-12(fp)
 200ef70:	10800017 	ldw	r2,0(r2)
 200ef74:	e0fffd17 	ldw	r3,-12(fp)
 200ef78:	18c00117 	ldw	r3,4(r3)
 200ef7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 200ef80:	e0bffd17 	ldw	r2,-12(fp)
 200ef84:	10800117 	ldw	r2,4(r2)
 200ef88:	e0fffd17 	ldw	r3,-12(fp)
 200ef8c:	18c00017 	ldw	r3,0(r3)
 200ef90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200ef94:	e0bffd17 	ldw	r2,-12(fp)
 200ef98:	e0fffd17 	ldw	r3,-12(fp)
 200ef9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 200efa0:	e0bffd17 	ldw	r2,-12(fp)
 200efa4:	e0fffd17 	ldw	r3,-12(fp)
 200efa8:	10c00015 	stw	r3,0(r2)
 200efac:	e0bffb17 	ldw	r2,-20(fp)
 200efb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200efb4:	e0bffe17 	ldw	r2,-8(fp)
 200efb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200efbc:	e037883a 	mov	sp,fp
 200efc0:	df000017 	ldw	fp,0(sp)
 200efc4:	dec00104 	addi	sp,sp,4
 200efc8:	f800283a 	ret

0200efcc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200efcc:	defffb04 	addi	sp,sp,-20
 200efd0:	dfc00415 	stw	ra,16(sp)
 200efd4:	df000315 	stw	fp,12(sp)
 200efd8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200efdc:	d0a01117 	ldw	r2,-32700(gp)
 200efe0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200efe4:	d0a02617 	ldw	r2,-32616(gp)
 200efe8:	10800044 	addi	r2,r2,1
 200efec:	d0a02615 	stw	r2,-32616(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200eff0:	00002e06 	br	200f0ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 200eff4:	e0bffd17 	ldw	r2,-12(fp)
 200eff8:	10800017 	ldw	r2,0(r2)
 200effc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200f000:	e0bffd17 	ldw	r2,-12(fp)
 200f004:	10800403 	ldbu	r2,16(r2)
 200f008:	10803fcc 	andi	r2,r2,255
 200f00c:	10000426 	beq	r2,zero,200f020 <alt_tick+0x54>
 200f010:	d0a02617 	ldw	r2,-32616(gp)
 200f014:	1000021e 	bne	r2,zero,200f020 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 200f018:	e0bffd17 	ldw	r2,-12(fp)
 200f01c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200f020:	e0bffd17 	ldw	r2,-12(fp)
 200f024:	10800217 	ldw	r2,8(r2)
 200f028:	d0e02617 	ldw	r3,-32616(gp)
 200f02c:	18801d36 	bltu	r3,r2,200f0a4 <alt_tick+0xd8>
 200f030:	e0bffd17 	ldw	r2,-12(fp)
 200f034:	10800403 	ldbu	r2,16(r2)
 200f038:	10803fcc 	andi	r2,r2,255
 200f03c:	1000191e 	bne	r2,zero,200f0a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 200f040:	e0bffd17 	ldw	r2,-12(fp)
 200f044:	10c00317 	ldw	r3,12(r2)
 200f048:	e0bffd17 	ldw	r2,-12(fp)
 200f04c:	10800517 	ldw	r2,20(r2)
 200f050:	1009883a 	mov	r4,r2
 200f054:	183ee83a 	callr	r3
 200f058:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200f05c:	e0bfff17 	ldw	r2,-4(fp)
 200f060:	1000031e 	bne	r2,zero,200f070 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200f064:	e13ffd17 	ldw	r4,-12(fp)
 200f068:	200ef340 	call	200ef34 <alt_alarm_stop>
 200f06c:	00000d06 	br	200f0a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 200f070:	e0bffd17 	ldw	r2,-12(fp)
 200f074:	10c00217 	ldw	r3,8(r2)
 200f078:	e0bfff17 	ldw	r2,-4(fp)
 200f07c:	1887883a 	add	r3,r3,r2
 200f080:	e0bffd17 	ldw	r2,-12(fp)
 200f084:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200f088:	e0bffd17 	ldw	r2,-12(fp)
 200f08c:	10c00217 	ldw	r3,8(r2)
 200f090:	d0a02617 	ldw	r2,-32616(gp)
 200f094:	1880032e 	bgeu	r3,r2,200f0a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 200f098:	e0bffd17 	ldw	r2,-12(fp)
 200f09c:	00c00044 	movi	r3,1
 200f0a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200f0a4:	e0bffe17 	ldw	r2,-8(fp)
 200f0a8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200f0ac:	e0fffd17 	ldw	r3,-12(fp)
 200f0b0:	d0a01104 	addi	r2,gp,-32700
 200f0b4:	18bfcf1e 	bne	r3,r2,200eff4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200f0b8:	0001883a 	nop
}
 200f0bc:	e037883a 	mov	sp,fp
 200f0c0:	dfc00117 	ldw	ra,4(sp)
 200f0c4:	df000017 	ldw	fp,0(sp)
 200f0c8:	dec00204 	addi	sp,sp,8
 200f0cc:	f800283a 	ret

0200f0d0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 200f0d0:	deffff04 	addi	sp,sp,-4
 200f0d4:	df000015 	stw	fp,0(sp)
 200f0d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 200f0dc:	000170fa 	wrctl	ienable,zero
}
 200f0e0:	e037883a 	mov	sp,fp
 200f0e4:	df000017 	ldw	fp,0(sp)
 200f0e8:	dec00104 	addi	sp,sp,4
 200f0ec:	f800283a 	ret

0200f0f0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 200f0f0:	defff404 	addi	sp,sp,-48
 200f0f4:	df000b15 	stw	fp,44(sp)
 200f0f8:	df000b04 	addi	fp,sp,44
 200f0fc:	e13ffc15 	stw	r4,-16(fp)
 200f100:	e17ffd15 	stw	r5,-12(fp)
 200f104:	e1bffe15 	stw	r6,-8(fp)
 200f108:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 200f10c:	e0ffff17 	ldw	r3,-4(fp)
 200f110:	e0bffe17 	ldw	r2,-8(fp)
 200f114:	1885883a 	add	r2,r3,r2
 200f118:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 200f11c:	e0c00217 	ldw	r3,8(fp)
 200f120:	e0800117 	ldw	r2,4(fp)
 200f124:	1885883a 	add	r2,r3,r2
 200f128:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 200f12c:	e0800117 	ldw	r2,4(fp)
 200f130:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 200f134:	e0bffe17 	ldw	r2,-8(fp)
 200f138:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 200f13c:	00800044 	movi	r2,1
 200f140:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 200f144:	e0bffc17 	ldw	r2,-16(fp)
 200f148:	10800504 	addi	r2,r2,20
 200f14c:	e0fffd17 	ldw	r3,-12(fp)
 200f150:	01000044 	movi	r4,1
 200f154:	20c6983a 	sll	r3,r4,r3
 200f158:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 200f15c:	e0800317 	ldw	r2,12(fp)
 200f160:	1080008c 	andi	r2,r2,2
 200f164:	1000041e 	bne	r2,zero,200f178 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 200f168:	e0bffc17 	ldw	r2,-16(fp)
 200f16c:	10800304 	addi	r2,r2,12
 200f170:	00c10004 	movi	r3,1024
 200f174:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200f178:	e0bffc17 	ldw	r2,-16(fp)
 200f17c:	10800037 	ldwio	r2,0(r2)
 200f180:	00000106 	br	200f188 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 200f184:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200f188:	e0bffc17 	ldw	r2,-16(fp)
 200f18c:	10800204 	addi	r2,r2,8
 200f190:	10800037 	ldwio	r2,0(r2)
 200f194:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200f198:	e0bffa17 	ldw	r2,-24(fp)
 200f19c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200f1a0:	10000226 	beq	r2,zero,200f1ac <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200f1a4:	e0bff717 	ldw	r2,-36(fp)
 200f1a8:	1000031e 	bne	r2,zero,200f1b8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 200f1ac:	e0bffa17 	ldw	r2,-24(fp)
 200f1b0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 200f1b4:	103ff426 	beq	r2,zero,200f188 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 200f1b8:	e0bffa17 	ldw	r2,-24(fp)
 200f1bc:	1080100c 	andi	r2,r2,64
 200f1c0:	10001e26 	beq	r2,zero,200f23c <alt_avalon_spi_command+0x14c>
 200f1c4:	e0bff717 	ldw	r2,-36(fp)
 200f1c8:	00801c0e 	bge	zero,r2,200f23c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 200f1cc:	e0bff717 	ldw	r2,-36(fp)
 200f1d0:	10bfffc4 	addi	r2,r2,-1
 200f1d4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 200f1d8:	e0ffff17 	ldw	r3,-4(fp)
 200f1dc:	e0bff817 	ldw	r2,-32(fp)
 200f1e0:	18800a2e 	bgeu	r3,r2,200f20c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 200f1e4:	e0bffc17 	ldw	r2,-16(fp)
 200f1e8:	10800104 	addi	r2,r2,4
 200f1ec:	e0ffff17 	ldw	r3,-4(fp)
 200f1f0:	18c00003 	ldbu	r3,0(r3)
 200f1f4:	18c03fcc 	andi	r3,r3,255
 200f1f8:	e13fff17 	ldw	r4,-4(fp)
 200f1fc:	21000044 	addi	r4,r4,1
 200f200:	e13fff15 	stw	r4,-4(fp)
 200f204:	10c00035 	stwio	r3,0(r2)
 200f208:	00000c06 	br	200f23c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 200f20c:	e0bff517 	ldw	r2,-44(fp)
 200f210:	10000826 	beq	r2,zero,200f234 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 200f214:	e0bff517 	ldw	r2,-44(fp)
 200f218:	10bfffc4 	addi	r2,r2,-1
 200f21c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 200f220:	e0bffc17 	ldw	r2,-16(fp)
 200f224:	10800104 	addi	r2,r2,4
 200f228:	0007883a 	mov	r3,zero
 200f22c:	10c00035 	stwio	r3,0(r2)
 200f230:	00000206 	br	200f23c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 200f234:	00bf0004 	movi	r2,-1024
 200f238:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 200f23c:	e0bffa17 	ldw	r2,-24(fp)
 200f240:	1080200c 	andi	r2,r2,128
 200f244:	103fcf26 	beq	r2,zero,200f184 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 200f248:	e0bffc17 	ldw	r2,-16(fp)
 200f24c:	10800037 	ldwio	r2,0(r2)
 200f250:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 200f254:	e0bff617 	ldw	r2,-40(fp)
 200f258:	10000426 	beq	r2,zero,200f26c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 200f25c:	e0bff617 	ldw	r2,-40(fp)
 200f260:	10bfffc4 	addi	r2,r2,-1
 200f264:	e0bff615 	stw	r2,-40(fp)
 200f268:	00000706 	br	200f288 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 200f26c:	e0bffb17 	ldw	r2,-20(fp)
 200f270:	1007883a 	mov	r3,r2
 200f274:	e0800217 	ldw	r2,8(fp)
 200f278:	10c00005 	stb	r3,0(r2)
 200f27c:	e0800217 	ldw	r2,8(fp)
 200f280:	10800044 	addi	r2,r2,1
 200f284:	e0800215 	stw	r2,8(fp)
      credits++;
 200f288:	e0bff717 	ldw	r2,-36(fp)
 200f28c:	10800044 	addi	r2,r2,1
 200f290:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 200f294:	e0bff617 	ldw	r2,-40(fp)
 200f298:	103fba1e 	bne	r2,zero,200f184 <alt_avalon_spi_command+0x94>
 200f29c:	e0c00217 	ldw	r3,8(fp)
 200f2a0:	e0bff917 	ldw	r2,-28(fp)
 200f2a4:	18bfb71e 	bne	r3,r2,200f184 <alt_avalon_spi_command+0x94>
        break;
 200f2a8:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 200f2ac:	e0bffc17 	ldw	r2,-16(fp)
 200f2b0:	10800204 	addi	r2,r2,8
 200f2b4:	10800037 	ldwio	r2,0(r2)
 200f2b8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 200f2bc:	e0bffa17 	ldw	r2,-24(fp)
 200f2c0:	1080080c 	andi	r2,r2,32
 200f2c4:	103ff926 	beq	r2,zero,200f2ac <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 200f2c8:	e0800317 	ldw	r2,12(fp)
 200f2cc:	1080004c 	andi	r2,r2,1
 200f2d0:	1000041e 	bne	r2,zero,200f2e4 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 200f2d4:	e0bffc17 	ldw	r2,-16(fp)
 200f2d8:	10800304 	addi	r2,r2,12
 200f2dc:	0007883a 	mov	r3,zero
 200f2e0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 200f2e4:	e0800117 	ldw	r2,4(fp)
}
 200f2e8:	e037883a 	mov	sp,fp
 200f2ec:	df000017 	ldw	fp,0(sp)
 200f2f0:	dec00104 	addi	sp,sp,4
 200f2f4:	f800283a 	ret

0200f2f8 <atexit>:
 200f2f8:	200b883a 	mov	r5,r4
 200f2fc:	000d883a 	mov	r6,zero
 200f300:	0009883a 	mov	r4,zero
 200f304:	000f883a 	mov	r7,zero
 200f308:	200f3c01 	jmpi	200f3c0 <__register_exitproc>

0200f30c <exit>:
 200f30c:	defffe04 	addi	sp,sp,-8
 200f310:	000b883a 	mov	r5,zero
 200f314:	dc000015 	stw	r16,0(sp)
 200f318:	dfc00115 	stw	ra,4(sp)
 200f31c:	2021883a 	mov	r16,r4
 200f320:	200f4f00 	call	200f4f0 <__call_exitprocs>
 200f324:	00808074 	movhi	r2,513
 200f328:	1085b104 	addi	r2,r2,5828
 200f32c:	11000017 	ldw	r4,0(r2)
 200f330:	20800f17 	ldw	r2,60(r4)
 200f334:	10000126 	beq	r2,zero,200f33c <exit+0x30>
 200f338:	103ee83a 	callr	r2
 200f33c:	8009883a 	mov	r4,r16
 200f340:	200f6900 	call	200f690 <_exit>

0200f344 <memcmp>:
 200f344:	01c000c4 	movi	r7,3
 200f348:	3980192e 	bgeu	r7,r6,200f3b0 <memcmp+0x6c>
 200f34c:	2904b03a 	or	r2,r5,r4
 200f350:	11c4703a 	and	r2,r2,r7
 200f354:	10000f26 	beq	r2,zero,200f394 <memcmp+0x50>
 200f358:	20c00003 	ldbu	r3,0(r4)
 200f35c:	28800003 	ldbu	r2,0(r5)
 200f360:	1880151e 	bne	r3,r2,200f3b8 <memcmp+0x74>
 200f364:	31bfff84 	addi	r6,r6,-2
 200f368:	01ffffc4 	movi	r7,-1
 200f36c:	00000406 	br	200f380 <memcmp+0x3c>
 200f370:	20c00003 	ldbu	r3,0(r4)
 200f374:	28800003 	ldbu	r2,0(r5)
 200f378:	31bfffc4 	addi	r6,r6,-1
 200f37c:	18800e1e 	bne	r3,r2,200f3b8 <memcmp+0x74>
 200f380:	21000044 	addi	r4,r4,1
 200f384:	29400044 	addi	r5,r5,1
 200f388:	31fff91e 	bne	r6,r7,200f370 <memcmp+0x2c>
 200f38c:	0005883a 	mov	r2,zero
 200f390:	f800283a 	ret
 200f394:	20c00017 	ldw	r3,0(r4)
 200f398:	28800017 	ldw	r2,0(r5)
 200f39c:	1880041e 	bne	r3,r2,200f3b0 <memcmp+0x6c>
 200f3a0:	31bfff04 	addi	r6,r6,-4
 200f3a4:	21000104 	addi	r4,r4,4
 200f3a8:	29400104 	addi	r5,r5,4
 200f3ac:	39bff936 	bltu	r7,r6,200f394 <memcmp+0x50>
 200f3b0:	303fe91e 	bne	r6,zero,200f358 <memcmp+0x14>
 200f3b4:	003ff506 	br	200f38c <memcmp+0x48>
 200f3b8:	1885c83a 	sub	r2,r3,r2
 200f3bc:	f800283a 	ret

0200f3c0 <__register_exitproc>:
 200f3c0:	defffa04 	addi	sp,sp,-24
 200f3c4:	00808074 	movhi	r2,513
 200f3c8:	1085b104 	addi	r2,r2,5828
 200f3cc:	dc000315 	stw	r16,12(sp)
 200f3d0:	14000017 	ldw	r16,0(r2)
 200f3d4:	dc400415 	stw	r17,16(sp)
 200f3d8:	dfc00515 	stw	ra,20(sp)
 200f3dc:	80805217 	ldw	r2,328(r16)
 200f3e0:	2023883a 	mov	r17,r4
 200f3e4:	10003e26 	beq	r2,zero,200f4e0 <__register_exitproc+0x120>
 200f3e8:	10c00117 	ldw	r3,4(r2)
 200f3ec:	020007c4 	movi	r8,31
 200f3f0:	40c0180e 	bge	r8,r3,200f454 <__register_exitproc+0x94>
 200f3f4:	00800034 	movhi	r2,0
 200f3f8:	10800004 	addi	r2,r2,0
 200f3fc:	1000061e 	bne	r2,zero,200f418 <__register_exitproc+0x58>
 200f400:	00bfffc4 	movi	r2,-1
 200f404:	dfc00517 	ldw	ra,20(sp)
 200f408:	dc400417 	ldw	r17,16(sp)
 200f40c:	dc000317 	ldw	r16,12(sp)
 200f410:	dec00604 	addi	sp,sp,24
 200f414:	f800283a 	ret
 200f418:	01006404 	movi	r4,400
 200f41c:	d9400015 	stw	r5,0(sp)
 200f420:	d9800115 	stw	r6,4(sp)
 200f424:	d9c00215 	stw	r7,8(sp)
 200f428:	00000000 	call	0 <__alt_mem_SDRAM-0x2000000>
 200f42c:	d9400017 	ldw	r5,0(sp)
 200f430:	d9800117 	ldw	r6,4(sp)
 200f434:	d9c00217 	ldw	r7,8(sp)
 200f438:	103ff126 	beq	r2,zero,200f400 <__register_exitproc+0x40>
 200f43c:	80c05217 	ldw	r3,328(r16)
 200f440:	10000115 	stw	zero,4(r2)
 200f444:	10c00015 	stw	r3,0(r2)
 200f448:	80805215 	stw	r2,328(r16)
 200f44c:	10006215 	stw	zero,392(r2)
 200f450:	10006315 	stw	zero,396(r2)
 200f454:	10c00117 	ldw	r3,4(r2)
 200f458:	88000d1e 	bne	r17,zero,200f490 <__register_exitproc+0xd0>
 200f45c:	19000084 	addi	r4,r3,2
 200f460:	2109883a 	add	r4,r4,r4
 200f464:	18c00044 	addi	r3,r3,1
 200f468:	2109883a 	add	r4,r4,r4
 200f46c:	1109883a 	add	r4,r2,r4
 200f470:	10c00115 	stw	r3,4(r2)
 200f474:	0005883a 	mov	r2,zero
 200f478:	21400015 	stw	r5,0(r4)
 200f47c:	dfc00517 	ldw	ra,20(sp)
 200f480:	dc400417 	ldw	r17,16(sp)
 200f484:	dc000317 	ldw	r16,12(sp)
 200f488:	dec00604 	addi	sp,sp,24
 200f48c:	f800283a 	ret
 200f490:	02400044 	movi	r9,1
 200f494:	12806217 	ldw	r10,392(r2)
 200f498:	48d2983a 	sll	r9,r9,r3
 200f49c:	19000804 	addi	r4,r3,32
 200f4a0:	18d1883a 	add	r8,r3,r3
 200f4a4:	2109883a 	add	r4,r4,r4
 200f4a8:	4211883a 	add	r8,r8,r8
 200f4ac:	2109883a 	add	r4,r4,r4
 200f4b0:	1109883a 	add	r4,r2,r4
 200f4b4:	1211883a 	add	r8,r2,r8
 200f4b8:	5254b03a 	or	r10,r10,r9
 200f4bc:	21c02215 	stw	r7,136(r4)
 200f4c0:	41802215 	stw	r6,136(r8)
 200f4c4:	12806215 	stw	r10,392(r2)
 200f4c8:	01000084 	movi	r4,2
 200f4cc:	893fe31e 	bne	r17,r4,200f45c <__register_exitproc+0x9c>
 200f4d0:	11006317 	ldw	r4,396(r2)
 200f4d4:	2252b03a 	or	r9,r4,r9
 200f4d8:	12406315 	stw	r9,396(r2)
 200f4dc:	003fdf06 	br	200f45c <__register_exitproc+0x9c>
 200f4e0:	00808074 	movhi	r2,513
 200f4e4:	10863404 	addi	r2,r2,6352
 200f4e8:	80805215 	stw	r2,328(r16)
 200f4ec:	003fbe06 	br	200f3e8 <__register_exitproc+0x28>

0200f4f0 <__call_exitprocs>:
 200f4f0:	00808074 	movhi	r2,513
 200f4f4:	1085b104 	addi	r2,r2,5828
 200f4f8:	10800017 	ldw	r2,0(r2)
 200f4fc:	defff304 	addi	sp,sp,-52
 200f500:	df000b15 	stw	fp,44(sp)
 200f504:	d8800015 	stw	r2,0(sp)
 200f508:	10805204 	addi	r2,r2,328
 200f50c:	dd400815 	stw	r21,32(sp)
 200f510:	dfc00c15 	stw	ra,48(sp)
 200f514:	ddc00a15 	stw	r23,40(sp)
 200f518:	dd800915 	stw	r22,36(sp)
 200f51c:	dd000715 	stw	r20,28(sp)
 200f520:	dcc00615 	stw	r19,24(sp)
 200f524:	dc800515 	stw	r18,20(sp)
 200f528:	dc400415 	stw	r17,16(sp)
 200f52c:	dc000315 	stw	r16,12(sp)
 200f530:	d9000115 	stw	r4,4(sp)
 200f534:	2839883a 	mov	fp,r5
 200f538:	d8800215 	stw	r2,8(sp)
 200f53c:	057fffc4 	movi	r21,-1
 200f540:	d8800017 	ldw	r2,0(sp)
 200f544:	ddc00217 	ldw	r23,8(sp)
 200f548:	14805217 	ldw	r18,328(r2)
 200f54c:	90001726 	beq	r18,zero,200f5ac <__call_exitprocs+0xbc>
 200f550:	94400117 	ldw	r17,4(r18)
 200f554:	8c3fffc4 	addi	r16,r17,-1
 200f558:	80001116 	blt	r16,zero,200f5a0 <__call_exitprocs+0xb0>
 200f55c:	8c400044 	addi	r17,r17,1
 200f560:	8427883a 	add	r19,r16,r16
 200f564:	8c63883a 	add	r17,r17,r17
 200f568:	95802204 	addi	r22,r18,136
 200f56c:	9ce7883a 	add	r19,r19,r19
 200f570:	8c63883a 	add	r17,r17,r17
 200f574:	b4e7883a 	add	r19,r22,r19
 200f578:	9463883a 	add	r17,r18,r17
 200f57c:	e0001726 	beq	fp,zero,200f5dc <__call_exitprocs+0xec>
 200f580:	8c87c83a 	sub	r3,r17,r18
 200f584:	b0c7883a 	add	r3,r22,r3
 200f588:	18c01e17 	ldw	r3,120(r3)
 200f58c:	1f001326 	beq	r3,fp,200f5dc <__call_exitprocs+0xec>
 200f590:	843fffc4 	addi	r16,r16,-1
 200f594:	9cffff04 	addi	r19,r19,-4
 200f598:	8c7fff04 	addi	r17,r17,-4
 200f59c:	857ff71e 	bne	r16,r21,200f57c <__call_exitprocs+0x8c>
 200f5a0:	00800034 	movhi	r2,0
 200f5a4:	10800004 	addi	r2,r2,0
 200f5a8:	10002a1e 	bne	r2,zero,200f654 <__call_exitprocs+0x164>
 200f5ac:	dfc00c17 	ldw	ra,48(sp)
 200f5b0:	df000b17 	ldw	fp,44(sp)
 200f5b4:	ddc00a17 	ldw	r23,40(sp)
 200f5b8:	dd800917 	ldw	r22,36(sp)
 200f5bc:	dd400817 	ldw	r21,32(sp)
 200f5c0:	dd000717 	ldw	r20,28(sp)
 200f5c4:	dcc00617 	ldw	r19,24(sp)
 200f5c8:	dc800517 	ldw	r18,20(sp)
 200f5cc:	dc400417 	ldw	r17,16(sp)
 200f5d0:	dc000317 	ldw	r16,12(sp)
 200f5d4:	dec00d04 	addi	sp,sp,52
 200f5d8:	f800283a 	ret
 200f5dc:	91000117 	ldw	r4,4(r18)
 200f5e0:	88c00017 	ldw	r3,0(r17)
 200f5e4:	213fffc4 	addi	r4,r4,-1
 200f5e8:	24001526 	beq	r4,r16,200f640 <__call_exitprocs+0x150>
 200f5ec:	88000015 	stw	zero,0(r17)
 200f5f0:	183fe726 	beq	r3,zero,200f590 <__call_exitprocs+0xa0>
 200f5f4:	00800044 	movi	r2,1
 200f5f8:	1408983a 	sll	r4,r2,r16
 200f5fc:	91406217 	ldw	r5,392(r18)
 200f600:	95000117 	ldw	r20,4(r18)
 200f604:	214a703a 	and	r5,r4,r5
 200f608:	28000b26 	beq	r5,zero,200f638 <__call_exitprocs+0x148>
 200f60c:	91406317 	ldw	r5,396(r18)
 200f610:	2148703a 	and	r4,r4,r5
 200f614:	20000c1e 	bne	r4,zero,200f648 <__call_exitprocs+0x158>
 200f618:	99400017 	ldw	r5,0(r19)
 200f61c:	d9000117 	ldw	r4,4(sp)
 200f620:	183ee83a 	callr	r3
 200f624:	90c00117 	ldw	r3,4(r18)
 200f628:	1d3fc51e 	bne	r3,r20,200f540 <__call_exitprocs+0x50>
 200f62c:	b8c00017 	ldw	r3,0(r23)
 200f630:	1cbfd726 	beq	r3,r18,200f590 <__call_exitprocs+0xa0>
 200f634:	003fc206 	br	200f540 <__call_exitprocs+0x50>
 200f638:	183ee83a 	callr	r3
 200f63c:	003ff906 	br	200f624 <__call_exitprocs+0x134>
 200f640:	94000115 	stw	r16,4(r18)
 200f644:	003fea06 	br	200f5f0 <__call_exitprocs+0x100>
 200f648:	99000017 	ldw	r4,0(r19)
 200f64c:	183ee83a 	callr	r3
 200f650:	003ff406 	br	200f624 <__call_exitprocs+0x134>
 200f654:	90c00117 	ldw	r3,4(r18)
 200f658:	1800071e 	bne	r3,zero,200f678 <__call_exitprocs+0x188>
 200f65c:	90c00017 	ldw	r3,0(r18)
 200f660:	18000926 	beq	r3,zero,200f688 <__call_exitprocs+0x198>
 200f664:	9009883a 	mov	r4,r18
 200f668:	b8c00015 	stw	r3,0(r23)
 200f66c:	00000000 	call	0 <__alt_mem_SDRAM-0x2000000>
 200f670:	bc800017 	ldw	r18,0(r23)
 200f674:	003fb506 	br	200f54c <__call_exitprocs+0x5c>
 200f678:	90c00017 	ldw	r3,0(r18)
 200f67c:	902f883a 	mov	r23,r18
 200f680:	1825883a 	mov	r18,r3
 200f684:	003fb106 	br	200f54c <__call_exitprocs+0x5c>
 200f688:	0007883a 	mov	r3,zero
 200f68c:	003ffb06 	br	200f67c <__call_exitprocs+0x18c>

0200f690 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200f690:	defffc04 	addi	sp,sp,-16
 200f694:	df000315 	stw	fp,12(sp)
 200f698:	df000304 	addi	fp,sp,12
 200f69c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200f6a0:	0001883a 	nop
 200f6a4:	e0bfff17 	ldw	r2,-4(fp)
 200f6a8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 200f6ac:	e0bffd17 	ldw	r2,-12(fp)
 200f6b0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200f6b4:	e0bffe17 	ldw	r2,-8(fp)
 200f6b8:	10000226 	beq	r2,zero,200f6c4 <_exit+0x34>
    ALT_SIM_FAIL();
 200f6bc:	002af070 	cmpltui	zero,zero,43969
 200f6c0:	00000106 	br	200f6c8 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 200f6c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200f6c8:	003fff06 	br	200f6c8 <_exit+0x38>
